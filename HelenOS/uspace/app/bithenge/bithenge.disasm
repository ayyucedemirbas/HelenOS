
bithenge:     file format elf32-i386


Disassembly of section .init:

000010f4 <__entry>:
    10f4:	66 8c d0             	mov    %ss,%ax
    10f7:	8e d8                	mov    %eax,%ds
    10f9:	8e c0                	mov    %eax,%es
    10fb:	8e e0                	mov    %eax,%fs
    10fd:	b8 01 00 00 00       	mov    $0x1,%eax
    1102:	0f a2                	cpuid  
    1104:	0f ba e2 0b          	bt     $0xb,%edx
    1108:	73 0c                	jae    1116 <__entry+0x22>
    110a:	8d 05 20 3d 01 00    	lea    0x13d20,%eax
    1110:	c7 00 b0 20 01 00    	movl   $0x120b0,(%eax)
    1116:	6a 00                	push   $0x0
    1118:	6a 00                	push   $0x0
    111a:	89 e5                	mov    %esp,%ebp
    111c:	57                   	push   %edi
    111d:	e8 4e 0c 01 00       	call   11d70 <__main@plt>

Disassembly of section .text:

00001130 <bithenge_transform_dec_ref>:
    1130:	85 c0                	test   %eax,%eax
    1132:	74 1c                	je     1150 <bithenge_transform_dec_ref+0x20>
    1134:	55                   	push   %ebp
    1135:	89 e5                	mov    %esp,%ebp
    1137:	83 ec 08             	sub    $0x8,%esp
    113a:	8b 08                	mov    (%eax),%ecx
    113c:	85 c9                	test   %ecx,%ecx
    113e:	74 30                	je     1170 <bithenge_transform_dec_ref+0x40>
    1140:	8b 50 04             	mov    0x4(%eax),%edx
    1143:	85 d2                	test   %edx,%edx
    1145:	74 17                	je     115e <bithenge_transform_dec_ref+0x2e>
    1147:	4a                   	dec    %edx
    1148:	89 50 04             	mov    %edx,0x4(%eax)
    114b:	85 d2                	test   %edx,%edx
    114d:	74 02                	je     1151 <bithenge_transform_dec_ref+0x21>
    114f:	c9                   	leave  
    1150:	c3                   	ret    
    1151:	83 ec 0c             	sub    $0xc,%esp
    1154:	50                   	push   %eax
    1155:	ff 51 0c             	call   *0xc(%ecx)
    1158:	83 c4 10             	add    $0x10,%esp
    115b:	c9                   	leave  
    115c:	eb f2                	jmp    1150 <bithenge_transform_dec_ref+0x20>
    115e:	50                   	push   %eax
    115f:	6a 75                	push   $0x75
    1161:	68 0c 11 01 00       	push   $0x1110c
    1166:	68 6b 11 01 00       	push   $0x1116b
    116b:	e8 a0 0d 01 00       	call   11f10 <assert_abort@plt>
    1170:	52                   	push   %edx
    1171:	6a 74                	push   $0x74
    1173:	68 0c 11 01 00       	push   $0x1110c
    1178:	68 61 11 01 00       	push   $0x11161
    117d:	e8 8e 0d 01 00       	call   11f10 <assert_abort@plt>
    1182:	66 90                	xchg   %ax,%ax
    1184:	66 90                	xchg   %ax,%ax
    1186:	66 90                	xchg   %ax,%ax
    1188:	66 90                	xchg   %ax,%ax
    118a:	66 90                	xchg   %ax,%ax
    118c:	66 90                	xchg   %ax,%ax
    118e:	66 90                	xchg   %ax,%ax

00001190 <main>:
    1190:	8d 4c 24 04          	lea    0x4(%esp),%ecx
    1194:	83 e4 f0             	and    $0xfffffff0,%esp
    1197:	ff 71 fc             	pushl  -0x4(%ecx)
    119a:	55                   	push   %ebp
    119b:	89 e5                	mov    %esp,%ebp
    119d:	53                   	push   %ebx
    119e:	51                   	push   %ecx
    119f:	83 ec 10             	sub    $0x10,%esp
    11a2:	8b 59 04             	mov    0x4(%ecx),%ebx
    11a5:	83 39 02             	cmpl   $0x2,(%ecx)
    11a8:	0f 8e d8 00 00 00    	jle    1286 <main+0xf6>
    11ae:	8d 45 e8             	lea    -0x18(%ebp),%eax
    11b1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    11b8:	51                   	push   %ecx
    11b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    11c0:	51                   	push   %ecx
    11c1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    11c8:	6a 00                	push   $0x0
    11ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    11d1:	50                   	push   %eax
    11d2:	e8 99 99 00 00       	call   ab70 <bithenge_scope_new>
    11d7:	83 c4 10             	add    $0x10,%esp
    11da:	85 c0                	test   %eax,%eax
    11dc:	74 59                	je     1237 <main+0xa7>
    11de:	83 ec 0c             	sub    $0xc,%esp
    11e1:	50                   	push   %eax
    11e2:	e8 79 0e 01 00       	call   12060 <str_error@plt>
    11e7:	5b                   	pop    %ebx
    11e8:	5a                   	pop    %edx
    11e9:	50                   	push   %eax
    11ea:	68 97 11 01 00       	push   $0x11197
    11ef:	e8 ac 0b 01 00       	call   11da0 <printf@plt>
    11f4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    11fb:	83 c4 10             	add    $0x10,%esp
    11fe:	83 ec 0c             	sub    $0xc,%esp
    1201:	bb 01 00 00 00       	mov    $0x1,%ebx
    1206:	ff 75 f0             	pushl  -0x10(%ebp)
    1209:	e8 12 a4 00 00       	call   b620 <bithenge_node_dec_ref>
    120e:	58                   	pop    %eax
    120f:	ff 75 f4             	pushl  -0xc(%ebp)
    1212:	e8 09 a4 00 00       	call   b620 <bithenge_node_dec_ref>
    1217:	8b 45 ec             	mov    -0x14(%ebp),%eax
    121a:	e8 11 ff ff ff       	call   1130 <bithenge_transform_dec_ref>
    121f:	5a                   	pop    %edx
    1220:	ff 75 e8             	pushl  -0x18(%ebp)
    1223:	e8 b8 99 00 00       	call   abe0 <bithenge_scope_dec_ref>
    1228:	83 c4 10             	add    $0x10,%esp
    122b:	8d 65 f8             	lea    -0x8(%ebp),%esp
    122e:	89 d8                	mov    %ebx,%eax
    1230:	59                   	pop    %ecx
    1231:	5b                   	pop    %ebx
    1232:	5d                   	pop    %ebp
    1233:	8d 61 fc             	lea    -0x4(%ecx),%esp
    1236:	c3                   	ret    
    1237:	8d 45 ec             	lea    -0x14(%ebp),%eax
    123a:	51                   	push   %ecx
    123b:	51                   	push   %ecx
    123c:	50                   	push   %eax
    123d:	ff 73 04             	pushl  0x4(%ebx)
    1240:	e8 4b 46 00 00       	call   5890 <bithenge_parse_script>
    1245:	83 c4 10             	add    $0x10,%esp
    1248:	85 c0                	test   %eax,%eax
    124a:	75 57                	jne    12a3 <main+0x113>
    124c:	51                   	push   %ecx
    124d:	51                   	push   %ecx
    124e:	ff 73 08             	pushl  0x8(%ebx)
    1251:	8d 45 f0             	lea    -0x10(%ebp),%eax
    1254:	50                   	push   %eax
    1255:	e8 56 78 00 00       	call   8ab0 <bithenge_node_from_source>
    125a:	83 c4 10             	add    $0x10,%esp
    125d:	85 c0                	test   %eax,%eax
    125f:	74 67                	je     12c8 <main+0x138>
    1261:	83 ec 0c             	sub    $0xc,%esp
    1264:	50                   	push   %eax
    1265:	e8 f6 0d 01 00       	call   12060 <str_error@plt>
    126a:	5b                   	pop    %ebx
    126b:	5a                   	pop    %edx
    126c:	50                   	push   %eax
    126d:	68 3c 11 01 00       	push   $0x1113c
    1272:	e8 29 0b 01 00       	call   11da0 <printf@plt>
    1277:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    127e:	83 c4 10             	add    $0x10,%esp
    1281:	e9 78 ff ff ff       	jmp    11fe <main+0x6e>
    1286:	50                   	push   %eax
    1287:	ff 33                	pushl  (%ebx)
    1289:	68 7a 11 01 00       	push   $0x1117a
    128e:	bb 01 00 00 00       	mov    $0x1,%ebx
    1293:	ff 35 28 3d 01 00    	pushl  0x13d28
    1299:	e8 92 0c 01 00       	call   11f30 <fprintf@plt>
    129e:	83 c4 10             	add    $0x10,%esp
    12a1:	eb 88                	jmp    122b <main+0x9b>
    12a3:	83 ec 0c             	sub    $0xc,%esp
    12a6:	50                   	push   %eax
    12a7:	e8 b4 0d 01 00       	call   12060 <str_error@plt>
    12ac:	5b                   	pop    %ebx
    12ad:	5a                   	pop    %edx
    12ae:	50                   	push   %eax
    12af:	68 b1 11 01 00       	push   $0x111b1
    12b4:	e8 e7 0a 01 00       	call   11da0 <printf@plt>
    12b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    12c0:	83 c4 10             	add    $0x10,%esp
    12c3:	e9 36 ff ff ff       	jmp    11fe <main+0x6e>
    12c8:	8d 45 f4             	lea    -0xc(%ebp),%eax
    12cb:	50                   	push   %eax
    12cc:	ff 75 f0             	pushl  -0x10(%ebp)
    12cf:	ff 75 e8             	pushl  -0x18(%ebp)
    12d2:	ff 75 ec             	pushl  -0x14(%ebp)
    12d5:	e8 16 92 00 00       	call   a4f0 <bithenge_transform_apply>
    12da:	83 c4 10             	add    $0x10,%esp
    12dd:	89 c3                	mov    %eax,%ebx
    12df:	85 c0                	test   %eax,%eax
    12e1:	75 61                	jne    1344 <main+0x1b4>
    12e3:	83 ec 0c             	sub    $0xc,%esp
    12e6:	ff 75 f0             	pushl  -0x10(%ebp)
    12e9:	e8 32 a3 00 00       	call   b620 <bithenge_node_dec_ref>
    12ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
    12f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    12f8:	e8 33 fe ff ff       	call   1130 <bithenge_transform_dec_ref>
    12fd:	58                   	pop    %eax
    12fe:	5a                   	pop    %edx
    12ff:	ff 75 f4             	pushl  -0xc(%ebp)
    1302:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    1309:	6a 00                	push   $0x0
    130b:	e8 60 06 00 00       	call   1970 <bithenge_print_node>
    1310:	83 c4 10             	add    $0x10,%esp
    1313:	89 c3                	mov    %eax,%ebx
    1315:	85 c0                	test   %eax,%eax
    1317:	74 59                	je     1372 <main+0x1e2>
    1319:	83 ec 0c             	sub    $0xc,%esp
    131c:	ff 75 e8             	pushl  -0x18(%ebp)
    131f:	e8 4c 9a 00 00       	call   ad70 <bithenge_scope_get_error>
    1324:	83 c4 10             	add    $0x10,%esp
    1327:	85 c0                	test   %eax,%eax
    1329:	0f 84 87 00 00 00    	je     13b6 <main+0x226>
    132f:	53                   	push   %ebx
    1330:	53                   	push   %ebx
    1331:	50                   	push   %eax
    1332:	68 e9 11 01 00       	push   $0x111e9
    1337:	e8 64 0a 01 00       	call   11da0 <printf@plt>
    133c:	83 c4 10             	add    $0x10,%esp
    133f:	e9 ba fe ff ff       	jmp    11fe <main+0x6e>
    1344:	83 ec 0c             	sub    $0xc,%esp
    1347:	ff 75 e8             	pushl  -0x18(%ebp)
    134a:	e8 21 9a 00 00       	call   ad70 <bithenge_scope_get_error>
    134f:	83 c4 10             	add    $0x10,%esp
    1352:	85 c0                	test   %eax,%eax
    1354:	74 52                	je     13a8 <main+0x218>
    1356:	51                   	push   %ecx
    1357:	51                   	push   %ecx
    1358:	50                   	push   %eax
    1359:	68 cb 11 01 00       	push   $0x111cb
    135e:	e8 3d 0a 01 00       	call   11da0 <printf@plt>
    1363:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    136a:	83 c4 10             	add    $0x10,%esp
    136d:	e9 8c fe ff ff       	jmp    11fe <main+0x6e>
    1372:	83 ec 0c             	sub    $0xc,%esp
    1375:	ff 75 f4             	pushl  -0xc(%ebp)
    1378:	e8 a3 a2 00 00       	call   b620 <bithenge_node_dec_ref>
    137d:	59                   	pop    %ecx
    137e:	ff 75 e8             	pushl  -0x18(%ebp)
    1381:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    1388:	e8 53 98 00 00       	call   abe0 <bithenge_scope_dec_ref>
    138d:	c7 04 24 55 13 01 00 	movl   $0x11355,(%esp)
    1394:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    139b:	e8 00 0a 01 00       	call   11da0 <printf@plt>
    13a0:	83 c4 10             	add    $0x10,%esp
    13a3:	e9 83 fe ff ff       	jmp    122b <main+0x9b>
    13a8:	83 ec 0c             	sub    $0xc,%esp
    13ab:	53                   	push   %ebx
    13ac:	e8 af 0c 01 00       	call   12060 <str_error@plt>
    13b1:	83 c4 10             	add    $0x10,%esp
    13b4:	eb a0                	jmp    1356 <main+0x1c6>
    13b6:	83 ec 0c             	sub    $0xc,%esp
    13b9:	53                   	push   %ebx
    13ba:	e8 a1 0c 01 00       	call   12060 <str_error@plt>
    13bf:	83 c4 10             	add    $0x10,%esp
    13c2:	e9 68 ff ff ff       	jmp    132f <main+0x19f>
    13c7:	66 90                	xchg   %ax,%ax
    13c9:	66 90                	xchg   %ax,%ax
    13cb:	66 90                	xchg   %ax,%ax
    13cd:	66 90                	xchg   %ax,%ax
    13cf:	90                   	nop

000013d0 <state_printf>:
    13d0:	55                   	push   %ebp
    13d1:	89 e5                	mov    %esp,%ebp
    13d3:	53                   	push   %ebx
    13d4:	53                   	push   %ebx
    13d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
    13d8:	8b 43 0c             	mov    0xc(%ebx),%eax
    13db:	85 c0                	test   %eax,%eax
    13dd:	74 49                	je     1428 <state_printf+0x58>
    13df:	8d 4d 10             	lea    0x10(%ebp),%ecx
    13e2:	8b 55 0c             	mov    0xc(%ebp),%edx
    13e5:	51                   	push   %ecx
    13e6:	8b 4b 10             	mov    0x10(%ebx),%ecx
    13e9:	52                   	push   %edx
    13ea:	51                   	push   %ecx
    13eb:	50                   	push   %eax
    13ec:	e8 8f 0a 01 00       	call   11e80 <vsnprintf@plt>
    13f1:	83 c4 10             	add    $0x10,%esp
    13f4:	85 c0                	test   %eax,%eax
    13f6:	7e 14                	jle    140c <state_printf+0x3c>
    13f8:	8b 53 10             	mov    0x10(%ebx),%edx
    13fb:	39 c2                	cmp    %eax,%edx
    13fd:	76 19                	jbe    1418 <state_printf+0x48>
    13ff:	8b 4b 0c             	mov    0xc(%ebx),%ecx
    1402:	29 c2                	sub    %eax,%edx
    1404:	01 c1                	add    %eax,%ecx
    1406:	89 53 10             	mov    %edx,0x10(%ebx)
    1409:	89 4b 0c             	mov    %ecx,0xc(%ebx)
    140c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    140f:	c9                   	leave  
    1410:	c3                   	ret    
    1411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    1418:	8d 42 ff             	lea    -0x1(%edx),%eax
    141b:	85 c0                	test   %eax,%eax
    141d:	7f e0                	jg     13ff <state_printf+0x2f>
    141f:	eb eb                	jmp    140c <state_printf+0x3c>
    1421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    1428:	8b 55 0c             	mov    0xc(%ebp),%edx
    142b:	50                   	push   %eax
    142c:	50                   	push   %eax
    142d:	8d 45 10             	lea    0x10(%ebp),%eax
    1430:	50                   	push   %eax
    1431:	52                   	push   %edx
    1432:	e8 09 0b 01 00       	call   11f40 <vprintf@plt>
    1437:	83 c4 10             	add    $0x10,%esp
    143a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    143d:	c9                   	leave  
    143e:	c3                   	ret    
    143f:	90                   	nop

00001440 <print_blob>:
    1440:	55                   	push   %ebp
    1441:	89 e5                	mov    %esp,%ebp
    1443:	57                   	push   %edi
    1444:	56                   	push   %esi
    1445:	53                   	push   %ebx
    1446:	81 ec 3c 04 00 00    	sub    $0x43c,%esp
    144c:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
    1452:	89 95 d0 fb ff ff    	mov    %edx,-0x430(%ebp)
    1458:	83 3a 05             	cmpl   $0x5,(%edx)
    145b:	0f 85 68 01 00 00    	jne    15c9 <print_blob+0x189>
    1461:	8b 8d d4 fb ff ff    	mov    -0x42c(%ebp),%ecx
    1467:	c7 85 e0 fb ff ff 00 	movl   $0x400,-0x420(%ebp)
    146e:	04 00 00 
    1471:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
    1478:	00 00 00 
    147b:	b8 02 12 01 00       	mov    $0x11202,%eax
    1480:	8b 39                	mov    (%ecx),%edi
    1482:	85 ff                	test   %edi,%edi
    1484:	74 05                	je     148b <print_blob+0x4b>
    1486:	b8 03 12 01 00       	mov    $0x11203,%eax
    148b:	8b b5 d4 fb ff ff    	mov    -0x42c(%ebp),%esi
    1491:	53                   	push   %ebx
    1492:	53                   	push   %ebx
    1493:	50                   	push   %eax
    1494:	56                   	push   %esi
    1495:	e8 36 ff ff ff       	call   13d0 <state_printf>
    149a:	83 c4 10             	add    $0x10,%esp
    149d:	c7 85 c8 fb ff ff 00 	movl   $0x0,-0x438(%ebp)
    14a4:	00 00 00 
    14a7:	c7 85 cc fb ff ff 00 	movl   $0x0,-0x434(%ebp)
    14ae:	00 00 00 
    14b1:	eb 1c                	jmp    14cf <print_blob+0x8f>
    14b3:	90                   	nop
    14b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    14b8:	01 85 c8 fb ff ff    	add    %eax,-0x438(%ebp)
    14be:	11 95 cc fb ff ff    	adc    %edx,-0x434(%ebp)
    14c4:	80 f4 04             	xor    $0x4,%ah
    14c7:	09 c2                	or     %eax,%edx
    14c9:	0f 85 c1 00 00 00    	jne    1590 <print_blob+0x150>
    14cf:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
    14d5:	8b 40 08             	mov    0x8(%eax),%eax
    14d8:	85 c0                	test   %eax,%eax
    14da:	0f 84 d4 00 00 00    	je     15b4 <print_blob+0x174>
    14e0:	8b 40 04             	mov    0x4(%eax),%eax
    14e3:	85 c0                	test   %eax,%eax
    14e5:	0f 84 8d 00 00 00    	je     1578 <print_blob+0x138>
    14eb:	83 ec 0c             	sub    $0xc,%esp
    14ee:	8d 8d e0 fb ff ff    	lea    -0x420(%ebp),%ecx
    14f4:	8d bd e8 fb ff ff    	lea    -0x418(%ebp),%edi
    14fa:	8b b5 cc fb ff ff    	mov    -0x434(%ebp),%esi
    1500:	51                   	push   %ecx
    1501:	8b 95 d0 fb ff ff    	mov    -0x430(%ebp),%edx
    1507:	57                   	push   %edi
    1508:	8b bd c8 fb ff ff    	mov    -0x438(%ebp),%edi
    150e:	56                   	push   %esi
    150f:	57                   	push   %edi
    1510:	52                   	push   %edx
    1511:	ff d0                	call   *%eax
    1513:	83 c4 20             	add    $0x20,%esp
    1516:	89 85 c4 fb ff ff    	mov    %eax,-0x43c(%ebp)
    151c:	85 c0                	test   %eax,%eax
    151e:	75 68                	jne    1588 <print_blob+0x148>
    1520:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
    1526:	0b 85 e0 fb ff ff    	or     -0x420(%ebp),%eax
    152c:	74 62                	je     1590 <print_blob+0x150>
    152e:	8d 9d e8 fb ff ff    	lea    -0x418(%ebp),%ebx
    1534:	31 f6                	xor    %esi,%esi
    1536:	31 ff                	xor    %edi,%edi
    1538:	50                   	push   %eax
    1539:	31 c0                	xor    %eax,%eax
    153b:	8a 03                	mov    (%ebx),%al
    153d:	8b 95 d4 fb ff ff    	mov    -0x42c(%ebp),%edx
    1543:	50                   	push   %eax
    1544:	68 31 12 01 00       	push   $0x11231
    1549:	52                   	push   %edx
    154a:	e8 81 fe ff ff       	call   13d0 <state_printf>
    154f:	83 c6 01             	add    $0x1,%esi
    1552:	8b 95 e4 fb ff ff    	mov    -0x41c(%ebp),%edx
    1558:	83 d7 00             	adc    $0x0,%edi
    155b:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
    1561:	43                   	inc    %ebx
    1562:	83 c4 10             	add    $0x10,%esp
    1565:	39 fa                	cmp    %edi,%edx
    1567:	77 cf                	ja     1538 <print_blob+0xf8>
    1569:	0f 82 49 ff ff ff    	jb     14b8 <print_blob+0x78>
    156f:	39 f0                	cmp    %esi,%eax
    1571:	77 c5                	ja     1538 <print_blob+0xf8>
    1573:	e9 40 ff ff ff       	jmp    14b8 <print_blob+0x78>
    1578:	c7 85 c4 fb ff ff f2 	movl   $0xfffffff2,-0x43c(%ebp)
    157f:	ff ff ff 
    1582:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
    1588:	8d 65 f4             	lea    -0xc(%ebp),%esp
    158b:	5b                   	pop    %ebx
    158c:	5e                   	pop    %esi
    158d:	5f                   	pop    %edi
    158e:	5d                   	pop    %ebp
    158f:	c3                   	ret    
    1590:	8b 9d d4 fb ff ff    	mov    -0x42c(%ebp),%ebx
    1596:	51                   	push   %ecx
    1597:	51                   	push   %ecx
    1598:	68 03 12 01 00       	push   $0x11203
    159d:	53                   	push   %ebx
    159e:	e8 2d fe ff ff       	call   13d0 <state_printf>
    15a3:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
    15a9:	83 c4 10             	add    $0x10,%esp
    15ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
    15af:	5b                   	pop    %ebx
    15b0:	5e                   	pop    %esi
    15b1:	5f                   	pop    %edi
    15b2:	5d                   	pop    %ebp
    15b3:	c3                   	ret    
    15b4:	51                   	push   %ecx
    15b5:	68 97 00 00 00       	push   $0x97
    15ba:	68 05 12 01 00       	push   $0x11205
    15bf:	68 1d 12 01 00       	push   $0x1121d
    15c4:	e8 47 09 01 00       	call   11f10 <assert_abort@plt>
    15c9:	50                   	push   %eax
    15ca:	68 d9 00 00 00       	push   $0xd9
    15cf:	68 05 12 01 00       	push   $0x11205
    15d4:	68 84 12 01 00       	push   $0x11284
    15d9:	e8 32 09 01 00       	call   11f10 <assert_abort@plt>
    15de:	66 90                	xchg   %ax,%ax

000015e0 <print_node>:
    15e0:	83 3a 05             	cmpl   $0x5,(%edx)
    15e3:	0f 87 6f 02 00 00    	ja     1858 <print_node+0x278>
    15e9:	55                   	push   %ebp
    15ea:	89 e5                	mov    %esp,%ebp
    15ec:	57                   	push   %edi
    15ed:	56                   	push   %esi
    15ee:	53                   	push   %ebx
    15ef:	83 ec 3c             	sub    $0x3c,%esp
    15f2:	89 c6                	mov    %eax,%esi
    15f4:	8b 02                	mov    (%edx),%eax
    15f6:	ff 24 85 d0 12 01 00 	jmp    *0x112d0(,%eax,4)
    15fd:	8d 76 00             	lea    0x0(%esi),%esi
    1600:	89 f0                	mov    %esi,%eax
    1602:	e8 39 fe ff ff       	call   1440 <print_blob>
    1607:	8d 65 f4             	lea    -0xc(%ebp),%esp
    160a:	5b                   	pop    %ebx
    160b:	5e                   	pop    %esi
    160c:	5f                   	pop    %edi
    160d:	5d                   	pop    %ebp
    160e:	c3                   	ret    
    160f:	90                   	nop
    1610:	89 55 c4             	mov    %edx,-0x3c(%ebp)
    1613:	57                   	push   %edi
    1614:	57                   	push   %edi
    1615:	68 4e 12 01 00       	push   $0x1124e
    161a:	56                   	push   %esi
    161b:	e8 b0 fd ff ff       	call   13d0 <state_printf>
    1620:	8b 46 08             	mov    0x8(%esi),%eax
    1623:	8b 55 c4             	mov    -0x3c(%ebp),%edx
    1626:	40                   	inc    %eax
    1627:	83 c4 10             	add    $0x10,%esp
    162a:	89 46 08             	mov    %eax,0x8(%esi)
    162d:	c6 46 04 01          	movb   $0x1,0x4(%esi)
    1631:	83 3a 01             	cmpl   $0x1,(%edx)
    1634:	0f 85 24 02 00 00    	jne    185e <print_node+0x27e>
    163a:	51                   	push   %ecx
    163b:	8b 42 08             	mov    0x8(%edx),%eax
    163e:	56                   	push   %esi
    163f:	68 80 18 00 00       	push   $0x1880
    1644:	52                   	push   %edx
    1645:	ff 10                	call   *(%eax)
    1647:	83 c4 10             	add    $0x10,%esp
    164a:	85 c0                	test   %eax,%eax
    164c:	75 b9                	jne    1607 <print_node+0x27>
    164e:	8b 56 08             	mov    0x8(%esi),%edx
    1651:	4a                   	dec    %edx
    1652:	89 56 08             	mov    %edx,0x8(%esi)
    1655:	80 7e 04 00          	cmpb   $0x0,0x4(%esi)
    1659:	0f 84 a9 01 00 00    	je     1808 <print_node+0x228>
    165f:	c6 46 04 00          	movb   $0x0,0x4(%esi)
    1663:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    1666:	50                   	push   %eax
    1667:	50                   	push   %eax
    1668:	68 68 12 01 00       	push   $0x11268
    166d:	56                   	push   %esi
    166e:	e8 5d fd ff ff       	call   13d0 <state_printf>
    1673:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    1676:	83 c4 10             	add    $0x10,%esp
    1679:	8d 65 f4             	lea    -0xc(%ebp),%esp
    167c:	5b                   	pop    %ebx
    167d:	5e                   	pop    %esi
    167e:	5f                   	pop    %edi
    167f:	5d                   	pop    %ebp
    1680:	c3                   	ret    
    1681:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    1688:	8b 06                	mov    (%esi),%eax
    168a:	8a 52 08             	mov    0x8(%edx),%dl
    168d:	85 c0                	test   %eax,%eax
    168f:	0f 84 4b 01 00 00    	je     17e0 <print_node+0x200>
    1695:	48                   	dec    %eax
    1696:	0f 85 3c 01 00 00    	jne    17d8 <print_node+0x1f8>
    169c:	b8 43 12 01 00       	mov    $0x11243,%eax
    16a1:	84 d2                	test   %dl,%dl
    16a3:	0f 84 4f 01 00 00    	je     17f8 <print_node+0x218>
    16a9:	52                   	push   %edx
    16aa:	52                   	push   %edx
    16ab:	50                   	push   %eax
    16ac:	56                   	push   %esi
    16ad:	e8 1e fd ff ff       	call   13d0 <state_printf>
    16b2:	83 c4 10             	add    $0x10,%esp
    16b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
    16b8:	31 c0                	xor    %eax,%eax
    16ba:	5b                   	pop    %ebx
    16bb:	5e                   	pop    %esi
    16bc:	5f                   	pop    %edi
    16bd:	5d                   	pop    %ebp
    16be:	c3                   	ret    
    16bf:	90                   	nop
    16c0:	8b 42 0c             	mov    0xc(%edx),%eax
    16c3:	50                   	push   %eax
    16c4:	8b 42 08             	mov    0x8(%edx),%eax
    16c7:	50                   	push   %eax
    16c8:	68 6f 12 01 00       	push   $0x1126f
    16cd:	56                   	push   %esi
    16ce:	e8 fd fc ff ff       	call   13d0 <state_printf>
    16d3:	83 c4 10             	add    $0x10,%esp
    16d6:	8d 65 f4             	lea    -0xc(%ebp),%esp
    16d9:	31 c0                	xor    %eax,%eax
    16db:	5b                   	pop    %ebx
    16dc:	5e                   	pop    %esi
    16dd:	5f                   	pop    %edi
    16de:	5d                   	pop    %ebp
    16df:	c3                   	ret    
    16e0:	8b 5a 08             	mov    0x8(%edx),%ebx
    16e3:	50                   	push   %eax
    16e4:	50                   	push   %eax
    16e5:	68 03 12 01 00       	push   $0x11203
    16ea:	56                   	push   %esi
    16eb:	e8 e0 fc ff ff       	call   13d0 <state_printf>
    16f0:	83 c4 0c             	add    $0xc,%esp
    16f3:	8d 45 e0             	lea    -0x20(%ebp),%eax
    16f6:	89 5d dc             	mov    %ebx,-0x24(%ebp)
    16f9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    1700:	6a ff                	push   $0xffffffff
    1702:	50                   	push   %eax
    1703:	53                   	push   %ebx
    1704:	e8 f7 06 01 00       	call   11e00 <str_decode@plt>
    1709:	8b 55 dc             	mov    -0x24(%ebp),%edx
    170c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    170f:	89 55 d0             	mov    %edx,-0x30(%ebp)
    1712:	8b 55 e0             	mov    -0x20(%ebp),%edx
    1715:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    1718:	89 45 d8             	mov    %eax,-0x28(%ebp)
    171b:	83 c4 10             	add    $0x10,%esp
    171e:	8d 7d d4             	lea    -0x2c(%ebp),%edi
    1721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    1728:	8b 5d d8             	mov    -0x28(%ebp),%ebx
    172b:	85 db                	test   %ebx,%ebx
    172d:	0f 84 8d 00 00 00    	je     17c0 <print_node+0x1e0>
    1733:	83 fb 3f             	cmp    $0x3f,%ebx
    1736:	75 20                	jne    1758 <print_node+0x178>
    1738:	8d 65 f4             	lea    -0xc(%ebp),%esp
    173b:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    1740:	5b                   	pop    %ebx
    1741:	5e                   	pop    %esi
    1742:	5f                   	pop    %edi
    1743:	5d                   	pop    %ebp
    1744:	c3                   	ret    
    1745:	8d 76 00             	lea    0x0(%esi),%esi
    1748:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    174d:	e9 b5 fe ff ff       	jmp    1607 <print_node+0x27>
    1752:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    1758:	50                   	push   %eax
    1759:	8b 45 d0             	mov    -0x30(%ebp),%eax
    175c:	6a ff                	push   $0xffffffff
    175e:	57                   	push   %edi
    175f:	50                   	push   %eax
    1760:	e8 9b 06 01 00       	call   11e00 <str_decode@plt>
    1765:	83 c4 10             	add    $0x10,%esp
    1768:	89 45 d8             	mov    %eax,-0x28(%ebp)
    176b:	83 fb 22             	cmp    $0x22,%ebx
    176e:	74 38                	je     17a8 <print_node+0x1c8>
    1770:	83 fb 5c             	cmp    $0x5c,%ebx
    1773:	74 33                	je     17a8 <print_node+0x1c8>
    1775:	83 fb 1f             	cmp    $0x1f,%ebx
    1778:	7f 16                	jg     1790 <print_node+0x1b0>
    177a:	51                   	push   %ecx
    177b:	53                   	push   %ebx
    177c:	68 79 12 01 00       	push   $0x11279
    1781:	56                   	push   %esi
    1782:	e8 49 fc ff ff       	call   13d0 <state_printf>
    1787:	83 c4 10             	add    $0x10,%esp
    178a:	eb 9c                	jmp    1728 <print_node+0x148>
    178c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    1790:	52                   	push   %edx
    1791:	53                   	push   %ebx
    1792:	68 75 12 01 00       	push   $0x11275
    1797:	56                   	push   %esi
    1798:	e8 33 fc ff ff       	call   13d0 <state_printf>
    179d:	83 c4 10             	add    $0x10,%esp
    17a0:	eb 86                	jmp    1728 <print_node+0x148>
    17a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    17a8:	50                   	push   %eax
    17a9:	53                   	push   %ebx
    17aa:	68 74 12 01 00       	push   $0x11274
    17af:	56                   	push   %esi
    17b0:	e8 1b fc ff ff       	call   13d0 <state_printf>
    17b5:	83 c4 10             	add    $0x10,%esp
    17b8:	e9 6b ff ff ff       	jmp    1728 <print_node+0x148>
    17bd:	8d 76 00             	lea    0x0(%esi),%esi
    17c0:	50                   	push   %eax
    17c1:	50                   	push   %eax
    17c2:	68 03 12 01 00       	push   $0x11203
    17c7:	56                   	push   %esi
    17c8:	e8 03 fc ff ff       	call   13d0 <state_printf>
    17cd:	83 c4 10             	add    $0x10,%esp
    17d0:	31 c0                	xor    %eax,%eax
    17d2:	e9 30 fe ff ff       	jmp    1607 <print_node+0x27>
    17d7:	90                   	nop
    17d8:	31 c0                	xor    %eax,%eax
    17da:	e9 28 fe ff ff       	jmp    1607 <print_node+0x27>
    17df:	90                   	nop
    17e0:	b8 38 12 01 00       	mov    $0x11238,%eax
    17e5:	84 d2                	test   %dl,%dl
    17e7:	0f 85 bc fe ff ff    	jne    16a9 <print_node+0xc9>
    17ed:	b8 3d 12 01 00       	mov    $0x1123d,%eax
    17f2:	e9 b2 fe ff ff       	jmp    16a9 <print_node+0xc9>
    17f7:	90                   	nop
    17f8:	b8 48 12 01 00       	mov    $0x11248,%eax
    17fd:	e9 a7 fe ff ff       	jmp    16a9 <print_node+0xc9>
    1802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    1808:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    180b:	53                   	push   %ebx
    180c:	53                   	push   %ebx
    180d:	68 55 13 01 00       	push   $0x11355
    1812:	56                   	push   %esi
    1813:	e8 b8 fb ff ff       	call   13d0 <state_printf>
    1818:	8b 7e 08             	mov    0x8(%esi),%edi
    181b:	83 c4 10             	add    $0x10,%esp
    181e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    1821:	85 ff                	test   %edi,%edi
    1823:	0f 8e 36 fe ff ff    	jle    165f <print_node+0x7f>
    1829:	31 db                	xor    %ebx,%ebx
    182b:	90                   	nop
    182c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    1830:	43                   	inc    %ebx
    1831:	51                   	push   %ecx
    1832:	51                   	push   %ecx
    1833:	68 6a 12 01 00       	push   $0x1126a
    1838:	56                   	push   %esi
    1839:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    183c:	e8 8f fb ff ff       	call   13d0 <state_printf>
    1841:	83 c4 10             	add    $0x10,%esp
    1844:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    1847:	3b 5e 08             	cmp    0x8(%esi),%ebx
    184a:	7c e4                	jl     1830 <print_node+0x250>
    184c:	e9 0e fe ff ff       	jmp    165f <print_node+0x7f>
    1851:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    1858:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    185d:	c3                   	ret    
    185e:	53                   	push   %ebx
    185f:	68 80 00 00 00       	push   $0x80
    1864:	68 50 12 01 00       	push   $0x11250
    1869:	68 a8 12 01 00       	push   $0x112a8
    186e:	e8 9d 06 01 00       	call   11f10 <assert_abort@plt>
    1873:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    1879:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00001880 <print_internal_func>:
    1880:	55                   	push   %ebp
    1881:	89 e5                	mov    %esp,%ebp
    1883:	57                   	push   %edi
    1884:	56                   	push   %esi
    1885:	53                   	push   %ebx
    1886:	83 ec 1c             	sub    $0x1c,%esp
    1889:	8b 5d 10             	mov    0x10(%ebp),%ebx
    188c:	8b 75 08             	mov    0x8(%ebp),%esi
    188f:	80 7b 04 00          	cmpb   $0x0,0x4(%ebx)
    1893:	0f 84 87 00 00 00    	je     1920 <print_internal_func+0xa0>
    1899:	50                   	push   %eax
    189a:	50                   	push   %eax
    189b:	68 55 13 01 00       	push   $0x11355
    18a0:	53                   	push   %ebx
    18a1:	e8 2a fb ff ff       	call   13d0 <state_printf>
    18a6:	8b 43 08             	mov    0x8(%ebx),%eax
    18a9:	83 c4 10             	add    $0x10,%esp
    18ac:	31 ff                	xor    %edi,%edi
    18ae:	85 c0                	test   %eax,%eax
    18b0:	7e 1c                	jle    18ce <print_internal_func+0x4e>
    18b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    18b8:	47                   	inc    %edi
    18b9:	50                   	push   %eax
    18ba:	50                   	push   %eax
    18bb:	68 6a 12 01 00       	push   $0x1126a
    18c0:	53                   	push   %ebx
    18c1:	e8 0a fb ff ff       	call   13d0 <state_printf>
    18c6:	83 c4 10             	add    $0x10,%esp
    18c9:	3b 7b 08             	cmp    0x8(%ebx),%edi
    18cc:	7c ea                	jl     18b8 <print_internal_func+0x38>
    18ce:	c6 43 04 00          	movb   $0x0,0x4(%ebx)
    18d2:	83 3b 01             	cmpl   $0x1,(%ebx)
    18d5:	74 61                	je     1938 <print_internal_func+0xb8>
    18d7:	89 f2                	mov    %esi,%edx
    18d9:	89 d8                	mov    %ebx,%eax
    18db:	e8 00 fd ff ff       	call   15e0 <print_node>
    18e0:	85 c0                	test   %eax,%eax
    18e2:	75 1a                	jne    18fe <print_internal_func+0x7e>
    18e4:	57                   	push   %edi
    18e5:	57                   	push   %edi
    18e6:	68 48 13 01 00       	push   $0x11348
    18eb:	53                   	push   %ebx
    18ec:	e8 df fa ff ff       	call   13d0 <state_printf>
    18f1:	8b 55 0c             	mov    0xc(%ebp),%edx
    18f4:	89 d8                	mov    %ebx,%eax
    18f6:	e8 e5 fc ff ff       	call   15e0 <print_node>
    18fb:	83 c4 10             	add    $0x10,%esp
    18fe:	83 ec 0c             	sub    $0xc,%esp
    1901:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    1904:	56                   	push   %esi
    1905:	e8 16 9d 00 00       	call   b620 <bithenge_node_dec_ref>
    190a:	8b 55 0c             	mov    0xc(%ebp),%edx
    190d:	58                   	pop    %eax
    190e:	52                   	push   %edx
    190f:	e8 0c 9d 00 00       	call   b620 <bithenge_node_dec_ref>
    1914:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    1917:	8d 65 f4             	lea    -0xc(%ebp),%esp
    191a:	5b                   	pop    %ebx
    191b:	5e                   	pop    %esi
    191c:	5f                   	pop    %edi
    191d:	5d                   	pop    %ebp
    191e:	c3                   	ret    
    191f:	90                   	nop
    1920:	50                   	push   %eax
    1921:	50                   	push   %eax
    1922:	68 80 12 01 00       	push   $0x11280
    1927:	53                   	push   %ebx
    1928:	e8 a3 fa ff ff       	call   13d0 <state_printf>
    192d:	83 c4 10             	add    $0x10,%esp
    1930:	e9 64 ff ff ff       	jmp    1899 <print_internal_func+0x19>
    1935:	8d 76 00             	lea    0x0(%esi),%esi
    1938:	83 3e 04             	cmpl   $0x4,(%esi)
    193b:	74 9a                	je     18d7 <print_internal_func+0x57>
    193d:	51                   	push   %ecx
    193e:	51                   	push   %ecx
    193f:	68 03 12 01 00       	push   $0x11203
    1944:	53                   	push   %ebx
    1945:	e8 86 fa ff ff       	call   13d0 <state_printf>
    194a:	89 f2                	mov    %esi,%edx
    194c:	89 d8                	mov    %ebx,%eax
    194e:	e8 8d fc ff ff       	call   15e0 <print_node>
    1953:	83 c4 10             	add    $0x10,%esp
    1956:	85 c0                	test   %eax,%eax
    1958:	75 a4                	jne    18fe <print_internal_func+0x7e>
    195a:	50                   	push   %eax
    195b:	50                   	push   %eax
    195c:	68 03 12 01 00       	push   $0x11203
    1961:	53                   	push   %ebx
    1962:	e8 69 fa ff ff       	call   13d0 <state_printf>
    1967:	83 c4 10             	add    $0x10,%esp
    196a:	e9 75 ff ff ff       	jmp    18e4 <print_internal_func+0x64>
    196f:	90                   	nop

00001970 <bithenge_print_node>:
    1970:	55                   	push   %ebp
    1971:	89 e5                	mov    %esp,%ebp
    1973:	57                   	push   %edi
    1974:	56                   	push   %esi
    1975:	53                   	push   %ebx
    1976:	83 ec 4c             	sub    $0x4c,%esp
    1979:	c6 45 d8 01          	movb   $0x1,-0x28(%ebp)
    197d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    1980:	8b 45 08             	mov    0x8(%ebp),%eax
    1983:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    1986:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    198d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    1994:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    199b:	83 3b 05             	cmpl   $0x5,(%ebx)
    199e:	0f 87 54 01 00 00    	ja     1af8 <bithenge_print_node+0x188>
    19a4:	8b 13                	mov    (%ebx),%edx
    19a6:	ff 24 95 e8 12 01 00 	jmp    *0x112e8(,%edx,4)
    19ad:	8d 76 00             	lea    0x0(%esi),%esi
    19b0:	89 da                	mov    %ebx,%edx
    19b2:	8d 45 d4             	lea    -0x2c(%ebp),%eax
    19b5:	e8 86 fa ff ff       	call   1440 <print_blob>
    19ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
    19bd:	5b                   	pop    %ebx
    19be:	5e                   	pop    %esi
    19bf:	5f                   	pop    %edi
    19c0:	5d                   	pop    %ebp
    19c1:	c3                   	ret    
    19c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    19c8:	56                   	push   %esi
    19c9:	56                   	push   %esi
    19ca:	8d 75 d4             	lea    -0x2c(%ebp),%esi
    19cd:	68 4e 12 01 00       	push   $0x1124e
    19d2:	56                   	push   %esi
    19d3:	e8 f8 f9 ff ff       	call   13d0 <state_printf>
    19d8:	8b 7d dc             	mov    -0x24(%ebp),%edi
    19db:	83 c4 10             	add    $0x10,%esp
    19de:	47                   	inc    %edi
    19df:	c6 45 d8 01          	movb   $0x1,-0x28(%ebp)
    19e3:	89 7d dc             	mov    %edi,-0x24(%ebp)
    19e6:	83 3b 01             	cmpl   $0x1,(%ebx)
    19e9:	0f 85 0a 02 00 00    	jne    1bf9 <bithenge_print_node+0x289>
    19ef:	51                   	push   %ecx
    19f0:	8b 43 08             	mov    0x8(%ebx),%eax
    19f3:	56                   	push   %esi
    19f4:	68 80 18 00 00       	push   $0x1880
    19f9:	53                   	push   %ebx
    19fa:	ff 10                	call   *(%eax)
    19fc:	83 c4 10             	add    $0x10,%esp
    19ff:	85 c0                	test   %eax,%eax
    1a01:	75 b7                	jne    19ba <bithenge_print_node+0x4a>
    1a03:	8b 55 dc             	mov    -0x24(%ebp),%edx
    1a06:	4a                   	dec    %edx
    1a07:	89 55 dc             	mov    %edx,-0x24(%ebp)
    1a0a:	80 7d d8 00          	cmpb   $0x0,-0x28(%ebp)
    1a0e:	0f 84 9c 01 00 00    	je     1bb0 <bithenge_print_node+0x240>
    1a14:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    1a17:	50                   	push   %eax
    1a18:	50                   	push   %eax
    1a19:	68 68 12 01 00       	push   $0x11268
    1a1e:	56                   	push   %esi
    1a1f:	c6 45 d8 00          	movb   $0x0,-0x28(%ebp)
    1a23:	e8 a8 f9 ff ff       	call   13d0 <state_printf>
    1a28:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    1a2b:	83 c4 10             	add    $0x10,%esp
    1a2e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    1a31:	5b                   	pop    %ebx
    1a32:	5e                   	pop    %esi
    1a33:	5f                   	pop    %edi
    1a34:	5d                   	pop    %ebp
    1a35:	c3                   	ret    
    1a36:	66 90                	xchg   %ax,%ax
    1a38:	8a 53 08             	mov    0x8(%ebx),%dl
    1a3b:	85 c0                	test   %eax,%eax
    1a3d:	0f 84 45 01 00 00    	je     1b88 <bithenge_print_node+0x218>
    1a43:	48                   	dec    %eax
    1a44:	75 1c                	jne    1a62 <bithenge_print_node+0xf2>
    1a46:	b8 43 12 01 00       	mov    $0x11243,%eax
    1a4b:	84 d2                	test   %dl,%dl
    1a4d:	0f 84 4d 01 00 00    	je     1ba0 <bithenge_print_node+0x230>
    1a53:	52                   	push   %edx
    1a54:	52                   	push   %edx
    1a55:	50                   	push   %eax
    1a56:	8d 45 d4             	lea    -0x2c(%ebp),%eax
    1a59:	50                   	push   %eax
    1a5a:	e8 71 f9 ff ff       	call   13d0 <state_printf>
    1a5f:	83 c4 10             	add    $0x10,%esp
    1a62:	31 c0                	xor    %eax,%eax
    1a64:	8d 65 f4             	lea    -0xc(%ebp),%esp
    1a67:	5b                   	pop    %ebx
    1a68:	5e                   	pop    %esi
    1a69:	5f                   	pop    %edi
    1a6a:	5d                   	pop    %ebp
    1a6b:	c3                   	ret    
    1a6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    1a70:	8b 43 0c             	mov    0xc(%ebx),%eax
    1a73:	50                   	push   %eax
    1a74:	8b 43 08             	mov    0x8(%ebx),%eax
    1a77:	50                   	push   %eax
    1a78:	8d 45 d4             	lea    -0x2c(%ebp),%eax
    1a7b:	68 6f 12 01 00       	push   $0x1126f
    1a80:	50                   	push   %eax
    1a81:	e8 4a f9 ff ff       	call   13d0 <state_printf>
    1a86:	83 c4 10             	add    $0x10,%esp
    1a89:	31 c0                	xor    %eax,%eax
    1a8b:	eb d7                	jmp    1a64 <bithenge_print_node+0xf4>
    1a8d:	8d 76 00             	lea    0x0(%esi),%esi
    1a90:	8d 75 d4             	lea    -0x2c(%ebp),%esi
    1a93:	8b 5b 08             	mov    0x8(%ebx),%ebx
    1a96:	50                   	push   %eax
    1a97:	50                   	push   %eax
    1a98:	68 03 12 01 00       	push   $0x11203
    1a9d:	56                   	push   %esi
    1a9e:	e8 2d f9 ff ff       	call   13d0 <state_printf>
    1aa3:	83 c4 0c             	add    $0xc,%esp
    1aa6:	8d 45 cc             	lea    -0x34(%ebp),%eax
    1aa9:	6a ff                	push   $0xffffffff
    1aab:	89 5d c8             	mov    %ebx,-0x38(%ebp)
    1aae:	50                   	push   %eax
    1aaf:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    1ab6:	53                   	push   %ebx
    1ab7:	e8 44 03 01 00       	call   11e00 <str_decode@plt>
    1abc:	8b 55 c8             	mov    -0x38(%ebp),%edx
    1abf:	89 55 bc             	mov    %edx,-0x44(%ebp)
    1ac2:	8b 55 cc             	mov    -0x34(%ebp),%edx
    1ac5:	89 45 d0             	mov    %eax,-0x30(%ebp)
    1ac8:	89 55 c0             	mov    %edx,-0x40(%ebp)
    1acb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    1ace:	83 c4 10             	add    $0x10,%esp
    1ad1:	8d 7d c0             	lea    -0x40(%ebp),%edi
    1ad4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    1ad8:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
    1adb:	85 db                	test   %ebx,%ebx
    1add:	0f 84 8d 00 00 00    	je     1b70 <bithenge_print_node+0x200>
    1ae3:	83 fb 3f             	cmp    $0x3f,%ebx
    1ae6:	75 20                	jne    1b08 <bithenge_print_node+0x198>
    1ae8:	8d 65 f4             	lea    -0xc(%ebp),%esp
    1aeb:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    1af0:	5b                   	pop    %ebx
    1af1:	5e                   	pop    %esi
    1af2:	5f                   	pop    %edi
    1af3:	5d                   	pop    %ebp
    1af4:	c3                   	ret    
    1af5:	8d 76 00             	lea    0x0(%esi),%esi
    1af8:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    1afd:	e9 b8 fe ff ff       	jmp    19ba <bithenge_print_node+0x4a>
    1b02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    1b08:	50                   	push   %eax
    1b09:	8b 45 bc             	mov    -0x44(%ebp),%eax
    1b0c:	6a ff                	push   $0xffffffff
    1b0e:	57                   	push   %edi
    1b0f:	50                   	push   %eax
    1b10:	e8 eb 02 01 00       	call   11e00 <str_decode@plt>
    1b15:	83 c4 10             	add    $0x10,%esp
    1b18:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    1b1b:	83 fb 22             	cmp    $0x22,%ebx
    1b1e:	74 38                	je     1b58 <bithenge_print_node+0x1e8>
    1b20:	83 fb 5c             	cmp    $0x5c,%ebx
    1b23:	74 33                	je     1b58 <bithenge_print_node+0x1e8>
    1b25:	83 fb 1f             	cmp    $0x1f,%ebx
    1b28:	7f 16                	jg     1b40 <bithenge_print_node+0x1d0>
    1b2a:	51                   	push   %ecx
    1b2b:	53                   	push   %ebx
    1b2c:	68 79 12 01 00       	push   $0x11279
    1b31:	56                   	push   %esi
    1b32:	e8 99 f8 ff ff       	call   13d0 <state_printf>
    1b37:	83 c4 10             	add    $0x10,%esp
    1b3a:	eb 9c                	jmp    1ad8 <bithenge_print_node+0x168>
    1b3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    1b40:	52                   	push   %edx
    1b41:	53                   	push   %ebx
    1b42:	68 75 12 01 00       	push   $0x11275
    1b47:	56                   	push   %esi
    1b48:	e8 83 f8 ff ff       	call   13d0 <state_printf>
    1b4d:	83 c4 10             	add    $0x10,%esp
    1b50:	eb 86                	jmp    1ad8 <bithenge_print_node+0x168>
    1b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    1b58:	50                   	push   %eax
    1b59:	53                   	push   %ebx
    1b5a:	68 74 12 01 00       	push   $0x11274
    1b5f:	56                   	push   %esi
    1b60:	e8 6b f8 ff ff       	call   13d0 <state_printf>
    1b65:	83 c4 10             	add    $0x10,%esp
    1b68:	e9 6b ff ff ff       	jmp    1ad8 <bithenge_print_node+0x168>
    1b6d:	8d 76 00             	lea    0x0(%esi),%esi
    1b70:	50                   	push   %eax
    1b71:	50                   	push   %eax
    1b72:	68 03 12 01 00       	push   $0x11203
    1b77:	56                   	push   %esi
    1b78:	e8 53 f8 ff ff       	call   13d0 <state_printf>
    1b7d:	83 c4 10             	add    $0x10,%esp
    1b80:	31 c0                	xor    %eax,%eax
    1b82:	e9 33 fe ff ff       	jmp    19ba <bithenge_print_node+0x4a>
    1b87:	90                   	nop
    1b88:	b8 38 12 01 00       	mov    $0x11238,%eax
    1b8d:	84 d2                	test   %dl,%dl
    1b8f:	0f 85 be fe ff ff    	jne    1a53 <bithenge_print_node+0xe3>
    1b95:	b8 3d 12 01 00       	mov    $0x1123d,%eax
    1b9a:	e9 b4 fe ff ff       	jmp    1a53 <bithenge_print_node+0xe3>
    1b9f:	90                   	nop
    1ba0:	b8 48 12 01 00       	mov    $0x11248,%eax
    1ba5:	e9 a9 fe ff ff       	jmp    1a53 <bithenge_print_node+0xe3>
    1baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    1bb0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    1bb3:	53                   	push   %ebx
    1bb4:	53                   	push   %ebx
    1bb5:	68 55 13 01 00       	push   $0x11355
    1bba:	56                   	push   %esi
    1bbb:	e8 10 f8 ff ff       	call   13d0 <state_printf>
    1bc0:	8b 7d dc             	mov    -0x24(%ebp),%edi
    1bc3:	83 c4 10             	add    $0x10,%esp
    1bc6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    1bc9:	85 ff                	test   %edi,%edi
    1bcb:	0f 8e 43 fe ff ff    	jle    1a14 <bithenge_print_node+0xa4>
    1bd1:	31 db                	xor    %ebx,%ebx
    1bd3:	90                   	nop
    1bd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    1bd8:	43                   	inc    %ebx
    1bd9:	51                   	push   %ecx
    1bda:	51                   	push   %ecx
    1bdb:	68 6a 12 01 00       	push   $0x1126a
    1be0:	56                   	push   %esi
    1be1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    1be4:	e8 e7 f7 ff ff       	call   13d0 <state_printf>
    1be9:	83 c4 10             	add    $0x10,%esp
    1bec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    1bef:	3b 5d dc             	cmp    -0x24(%ebp),%ebx
    1bf2:	7c e4                	jl     1bd8 <bithenge_print_node+0x268>
    1bf4:	e9 1b fe ff ff       	jmp    1a14 <bithenge_print_node+0xa4>
    1bf9:	53                   	push   %ebx
    1bfa:	68 80 00 00 00       	push   $0x80
    1bff:	68 50 12 01 00       	push   $0x11250
    1c04:	68 a8 12 01 00       	push   $0x112a8
    1c09:	e8 02 03 01 00       	call   11f10 <assert_abort@plt>
    1c0e:	66 90                	xchg   %ax,%ax

00001c10 <bithenge_print_node_to_string>:
    1c10:	55                   	push   %ebp
    1c11:	89 e5                	mov    %esp,%ebp
    1c13:	57                   	push   %edi
    1c14:	56                   	push   %esi
    1c15:	53                   	push   %ebx
    1c16:	83 ec 4c             	sub    $0x4c,%esp
    1c19:	c6 45 d8 01          	movb   $0x1,-0x28(%ebp)
    1c1d:	8b 45 08             	mov    0x8(%ebp),%eax
    1c20:	8b 7d 14             	mov    0x14(%ebp),%edi
    1c23:	8b 55 10             	mov    0x10(%ebp),%edx
    1c26:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    1c2d:	8b 18                	mov    (%eax),%ebx
    1c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
    1c32:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    1c35:	89 5d e0             	mov    %ebx,-0x20(%ebp)
    1c38:	8b 08                	mov    (%eax),%ecx
    1c3a:	83 3f 05             	cmpl   $0x5,(%edi)
    1c3d:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    1c40:	0f 87 72 01 00 00    	ja     1db8 <bithenge_print_node_to_string+0x1a8>
    1c46:	8b 07                	mov    (%edi),%eax
    1c48:	ff 24 85 00 13 01 00 	jmp    *0x11300(,%eax,4)
    1c4f:	90                   	nop
    1c50:	89 fa                	mov    %edi,%edx
    1c52:	8d 45 d4             	lea    -0x2c(%ebp),%eax
    1c55:	e8 e6 f7 ff ff       	call   1440 <print_blob>
    1c5a:	8b 5d e0             	mov    -0x20(%ebp),%ebx
    1c5d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    1c60:	8b 55 08             	mov    0x8(%ebp),%edx
    1c63:	89 1a                	mov    %ebx,(%edx)
    1c65:	8b 55 0c             	mov    0xc(%ebp),%edx
    1c68:	89 0a                	mov    %ecx,(%edx)
    1c6a:	8d 65 f4             	lea    -0xc(%ebp),%esp
    1c6d:	5b                   	pop    %ebx
    1c6e:	5e                   	pop    %esi
    1c6f:	5f                   	pop    %edi
    1c70:	5d                   	pop    %ebp
    1c71:	c3                   	ret    
    1c72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    1c78:	8d 5d d4             	lea    -0x2c(%ebp),%ebx
    1c7b:	56                   	push   %esi
    1c7c:	56                   	push   %esi
    1c7d:	68 4e 12 01 00       	push   $0x1124e
    1c82:	53                   	push   %ebx
    1c83:	e8 48 f7 ff ff       	call   13d0 <state_printf>
    1c88:	8b 45 dc             	mov    -0x24(%ebp),%eax
    1c8b:	83 c4 10             	add    $0x10,%esp
    1c8e:	40                   	inc    %eax
    1c8f:	c6 45 d8 01          	movb   $0x1,-0x28(%ebp)
    1c93:	89 45 dc             	mov    %eax,-0x24(%ebp)
    1c96:	83 3f 01             	cmpl   $0x1,(%edi)
    1c99:	0f 85 fe 01 00 00    	jne    1e9d <bithenge_print_node_to_string+0x28d>
    1c9f:	51                   	push   %ecx
    1ca0:	8b 47 08             	mov    0x8(%edi),%eax
    1ca3:	53                   	push   %ebx
    1ca4:	68 80 18 00 00       	push   $0x1880
    1ca9:	57                   	push   %edi
    1caa:	ff 10                	call   *(%eax)
    1cac:	83 c4 10             	add    $0x10,%esp
    1caf:	85 c0                	test   %eax,%eax
    1cb1:	75 a7                	jne    1c5a <bithenge_print_node_to_string+0x4a>
    1cb3:	8b 55 dc             	mov    -0x24(%ebp),%edx
    1cb6:	4a                   	dec    %edx
    1cb7:	89 55 dc             	mov    %edx,-0x24(%ebp)
    1cba:	80 7d d8 00          	cmpb   $0x0,-0x28(%ebp)
    1cbe:	0f 84 94 01 00 00    	je     1e58 <bithenge_print_node_to_string+0x248>
    1cc4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    1cc7:	50                   	push   %eax
    1cc8:	50                   	push   %eax
    1cc9:	68 68 12 01 00       	push   $0x11268
    1cce:	53                   	push   %ebx
    1ccf:	c6 45 d8 00          	movb   $0x0,-0x28(%ebp)
    1cd3:	e8 f8 f6 ff ff       	call   13d0 <state_printf>
    1cd8:	8b 5d e0             	mov    -0x20(%ebp),%ebx
    1cdb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    1cde:	83 c4 10             	add    $0x10,%esp
    1ce1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    1ce4:	e9 77 ff ff ff       	jmp    1c60 <bithenge_print_node_to_string+0x50>
    1ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    1cf0:	8a 47 08             	mov    0x8(%edi),%al
    1cf3:	85 d2                	test   %edx,%edx
    1cf5:	0f 84 45 01 00 00    	je     1e40 <bithenge_print_node_to_string+0x230>
    1cfb:	4a                   	dec    %edx
    1cfc:	75 23                	jne    1d21 <bithenge_print_node_to_string+0x111>
    1cfe:	ba 48 12 01 00       	mov    $0x11248,%edx
    1d03:	84 c0                	test   %al,%al
    1d05:	74 05                	je     1d0c <bithenge_print_node_to_string+0xfc>
    1d07:	ba 43 12 01 00       	mov    $0x11243,%edx
    1d0c:	8d 45 d4             	lea    -0x2c(%ebp),%eax
    1d0f:	51                   	push   %ecx
    1d10:	51                   	push   %ecx
    1d11:	52                   	push   %edx
    1d12:	50                   	push   %eax
    1d13:	e8 b8 f6 ff ff       	call   13d0 <state_printf>
    1d18:	8b 5d e0             	mov    -0x20(%ebp),%ebx
    1d1b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    1d1e:	83 c4 10             	add    $0x10,%esp
    1d21:	31 c0                	xor    %eax,%eax
    1d23:	e9 38 ff ff ff       	jmp    1c60 <bithenge_print_node_to_string+0x50>
    1d28:	8b 47 0c             	mov    0xc(%edi),%eax
    1d2b:	50                   	push   %eax
    1d2c:	8b 47 08             	mov    0x8(%edi),%eax
    1d2f:	50                   	push   %eax
    1d30:	8d 45 d4             	lea    -0x2c(%ebp),%eax
    1d33:	68 6f 12 01 00       	push   $0x1126f
    1d38:	50                   	push   %eax
    1d39:	e8 92 f6 ff ff       	call   13d0 <state_printf>
    1d3e:	8b 5d e0             	mov    -0x20(%ebp),%ebx
    1d41:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    1d44:	83 c4 10             	add    $0x10,%esp
    1d47:	31 c0                	xor    %eax,%eax
    1d49:	e9 12 ff ff ff       	jmp    1c60 <bithenge_print_node_to_string+0x50>
    1d4e:	66 90                	xchg   %ax,%ax
    1d50:	8d 5d d4             	lea    -0x2c(%ebp),%ebx
    1d53:	8b 7f 08             	mov    0x8(%edi),%edi
    1d56:	50                   	push   %eax
    1d57:	50                   	push   %eax
    1d58:	68 03 12 01 00       	push   $0x11203
    1d5d:	53                   	push   %ebx
    1d5e:	e8 6d f6 ff ff       	call   13d0 <state_printf>
    1d63:	83 c4 0c             	add    $0xc,%esp
    1d66:	8d 45 cc             	lea    -0x34(%ebp),%eax
    1d69:	6a ff                	push   $0xffffffff
    1d6b:	89 7d c8             	mov    %edi,-0x38(%ebp)
    1d6e:	50                   	push   %eax
    1d6f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    1d76:	57                   	push   %edi
    1d77:	e8 84 00 01 00       	call   11e00 <str_decode@plt>
    1d7c:	8b 55 c8             	mov    -0x38(%ebp),%edx
    1d7f:	89 55 bc             	mov    %edx,-0x44(%ebp)
    1d82:	8b 55 cc             	mov    -0x34(%ebp),%edx
    1d85:	89 45 d0             	mov    %eax,-0x30(%ebp)
    1d88:	89 55 c0             	mov    %edx,-0x40(%ebp)
    1d8b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    1d8e:	83 c4 10             	add    $0x10,%esp
    1d91:	8d 7d c0             	lea    -0x40(%ebp),%edi
    1d94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    1d98:	8b 75 c4             	mov    -0x3c(%ebp),%esi
    1d9b:	85 f6                	test   %esi,%esi
    1d9d:	0f 84 8d 00 00 00    	je     1e30 <bithenge_print_node_to_string+0x220>
    1da3:	83 fe 3f             	cmp    $0x3f,%esi
    1da6:	75 20                	jne    1dc8 <bithenge_print_node_to_string+0x1b8>
    1da8:	8b 5d e0             	mov    -0x20(%ebp),%ebx
    1dab:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    1dae:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    1db3:	e9 a8 fe ff ff       	jmp    1c60 <bithenge_print_node_to_string+0x50>
    1db8:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    1dbd:	e9 9e fe ff ff       	jmp    1c60 <bithenge_print_node_to_string+0x50>
    1dc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    1dc8:	50                   	push   %eax
    1dc9:	8b 45 bc             	mov    -0x44(%ebp),%eax
    1dcc:	6a ff                	push   $0xffffffff
    1dce:	57                   	push   %edi
    1dcf:	50                   	push   %eax
    1dd0:	e8 2b 00 01 00       	call   11e00 <str_decode@plt>
    1dd5:	83 c4 10             	add    $0x10,%esp
    1dd8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    1ddb:	83 fe 22             	cmp    $0x22,%esi
    1dde:	74 38                	je     1e18 <bithenge_print_node_to_string+0x208>
    1de0:	83 fe 5c             	cmp    $0x5c,%esi
    1de3:	74 33                	je     1e18 <bithenge_print_node_to_string+0x208>
    1de5:	83 fe 1f             	cmp    $0x1f,%esi
    1de8:	7f 16                	jg     1e00 <bithenge_print_node_to_string+0x1f0>
    1dea:	51                   	push   %ecx
    1deb:	56                   	push   %esi
    1dec:	68 79 12 01 00       	push   $0x11279
    1df1:	53                   	push   %ebx
    1df2:	e8 d9 f5 ff ff       	call   13d0 <state_printf>
    1df7:	83 c4 10             	add    $0x10,%esp
    1dfa:	eb 9c                	jmp    1d98 <bithenge_print_node_to_string+0x188>
    1dfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    1e00:	52                   	push   %edx
    1e01:	56                   	push   %esi
    1e02:	68 75 12 01 00       	push   $0x11275
    1e07:	53                   	push   %ebx
    1e08:	e8 c3 f5 ff ff       	call   13d0 <state_printf>
    1e0d:	83 c4 10             	add    $0x10,%esp
    1e10:	eb 86                	jmp    1d98 <bithenge_print_node_to_string+0x188>
    1e12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    1e18:	50                   	push   %eax
    1e19:	56                   	push   %esi
    1e1a:	68 74 12 01 00       	push   $0x11274
    1e1f:	53                   	push   %ebx
    1e20:	e8 ab f5 ff ff       	call   13d0 <state_printf>
    1e25:	83 c4 10             	add    $0x10,%esp
    1e28:	e9 6b ff ff ff       	jmp    1d98 <bithenge_print_node_to_string+0x188>
    1e2d:	8d 76 00             	lea    0x0(%esi),%esi
    1e30:	50                   	push   %eax
    1e31:	50                   	push   %eax
    1e32:	68 03 12 01 00       	push   $0x11203
    1e37:	53                   	push   %ebx
    1e38:	e9 fc fe ff ff       	jmp    1d39 <bithenge_print_node_to_string+0x129>
    1e3d:	8d 76 00             	lea    0x0(%esi),%esi
    1e40:	ba 3d 12 01 00       	mov    $0x1123d,%edx
    1e45:	84 c0                	test   %al,%al
    1e47:	0f 84 bf fe ff ff    	je     1d0c <bithenge_print_node_to_string+0xfc>
    1e4d:	ba 38 12 01 00       	mov    $0x11238,%edx
    1e52:	e9 b5 fe ff ff       	jmp    1d0c <bithenge_print_node_to_string+0xfc>
    1e57:	90                   	nop
    1e58:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    1e5b:	50                   	push   %eax
    1e5c:	50                   	push   %eax
    1e5d:	68 55 13 01 00       	push   $0x11355
    1e62:	53                   	push   %ebx
    1e63:	e8 68 f5 ff ff       	call   13d0 <state_printf>
    1e68:	8b 45 dc             	mov    -0x24(%ebp),%eax
    1e6b:	83 c4 10             	add    $0x10,%esp
    1e6e:	85 c0                	test   %eax,%eax
    1e70:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    1e73:	0f 8e 4b fe ff ff    	jle    1cc4 <bithenge_print_node_to_string+0xb4>
    1e79:	31 ff                	xor    %edi,%edi
    1e7b:	89 c6                	mov    %eax,%esi
    1e7d:	8d 76 00             	lea    0x0(%esi),%esi
    1e80:	47                   	inc    %edi
    1e81:	50                   	push   %eax
    1e82:	50                   	push   %eax
    1e83:	68 6a 12 01 00       	push   $0x1126a
    1e88:	53                   	push   %ebx
    1e89:	e8 42 f5 ff ff       	call   13d0 <state_printf>
    1e8e:	83 c4 10             	add    $0x10,%esp
    1e91:	3b 7d dc             	cmp    -0x24(%ebp),%edi
    1e94:	7c ea                	jl     1e80 <bithenge_print_node_to_string+0x270>
    1e96:	89 f0                	mov    %esi,%eax
    1e98:	e9 27 fe ff ff       	jmp    1cc4 <bithenge_print_node_to_string+0xb4>
    1e9d:	53                   	push   %ebx
    1e9e:	68 80 00 00 00       	push   $0x80
    1ea3:	68 50 12 01 00       	push   $0x11250
    1ea8:	68 a8 12 01 00       	push   $0x112a8
    1ead:	e8 5e 00 01 00       	call   11f10 <assert_abort@plt>
    1eb2:	66 90                	xchg   %ax,%ax
    1eb4:	66 90                	xchg   %ax,%ax
    1eb6:	66 90                	xchg   %ax,%ax
    1eb8:	66 90                	xchg   %ax,%ax
    1eba:	66 90                	xchg   %ax,%ax
    1ebc:	66 90                	xchg   %ax,%ax
    1ebe:	66 90                	xchg   %ax,%ax

00001ec0 <error_errno.part.1>:
    1ec0:	83 b8 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%eax)
    1ec7:	74 0f                	je     1ed8 <error_errno.part.1+0x18>
    1ec9:	c7 80 20 10 00 00 80 	movl   $0xffffff80,0x1020(%eax)
    1ed0:	ff ff ff 
    1ed3:	89 10                	mov    %edx,(%eax)
    1ed5:	c3                   	ret    
    1ed6:	66 90                	xchg   %ax,%ax
    1ed8:	55                   	push   %ebp
    1ed9:	89 e5                	mov    %esp,%ebp
    1edb:	83 ec 24             	sub    $0x24,%esp
    1ede:	89 55 f0             	mov    %edx,-0x10(%ebp)
    1ee1:	8b 90 24 10 00 00    	mov    0x1024(%eax),%edx
    1ee7:	52                   	push   %edx
    1ee8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    1eeb:	e8 00 02 01 00       	call   120f0 <free@plt>
    1ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    1ef3:	8b 55 f0             	mov    -0x10(%ebp),%edx
    1ef6:	c7 80 20 10 00 00 80 	movl   $0xffffff80,0x1020(%eax)
    1efd:	ff ff ff 
    1f00:	89 10                	mov    %edx,(%eax)
    1f02:	83 c4 10             	add    $0x10,%esp
    1f05:	c9                   	leave  
    1f06:	c3                   	ret    
    1f07:	89 f6                	mov    %esi,%esi
    1f09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00001f10 <bithenge_transform_dec_ref>:
    1f10:	85 c0                	test   %eax,%eax
    1f12:	74 1c                	je     1f30 <bithenge_transform_dec_ref+0x20>
    1f14:	55                   	push   %ebp
    1f15:	89 e5                	mov    %esp,%ebp
    1f17:	83 ec 08             	sub    $0x8,%esp
    1f1a:	8b 08                	mov    (%eax),%ecx
    1f1c:	85 c9                	test   %ecx,%ecx
    1f1e:	74 37                	je     1f57 <bithenge_transform_dec_ref+0x47>
    1f20:	8b 50 04             	mov    0x4(%eax),%edx
    1f23:	85 d2                	test   %edx,%edx
    1f25:	74 1e                	je     1f45 <bithenge_transform_dec_ref+0x35>
    1f27:	4a                   	dec    %edx
    1f28:	89 50 04             	mov    %edx,0x4(%eax)
    1f2b:	85 d2                	test   %edx,%edx
    1f2d:	74 09                	je     1f38 <bithenge_transform_dec_ref+0x28>
    1f2f:	c9                   	leave  
    1f30:	c3                   	ret    
    1f31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    1f38:	83 ec 0c             	sub    $0xc,%esp
    1f3b:	50                   	push   %eax
    1f3c:	ff 51 0c             	call   *0xc(%ecx)
    1f3f:	83 c4 10             	add    $0x10,%esp
    1f42:	c9                   	leave  
    1f43:	eb eb                	jmp    1f30 <bithenge_transform_dec_ref+0x20>
    1f45:	50                   	push   %eax
    1f46:	6a 75                	push   $0x75
    1f48:	68 18 13 01 00       	push   $0x11318
    1f4d:	68 6b 11 01 00       	push   $0x1116b
    1f52:	e8 b9 ff 00 00       	call   11f10 <assert_abort@plt>
    1f57:	52                   	push   %edx
    1f58:	6a 74                	push   $0x74
    1f5a:	68 18 13 01 00       	push   $0x11318
    1f5f:	68 61 11 01 00       	push   $0x11161
    1f64:	e8 a7 ff 00 00       	call   11f10 <assert_abort@plt>
    1f69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

00001f70 <get_named_transform.isra.7>:
    1f70:	55                   	push   %ebp
    1f71:	85 c0                	test   %eax,%eax
    1f73:	89 e5                	mov    %esp,%ebp
    1f75:	56                   	push   %esi
    1f76:	89 d6                	mov    %edx,%esi
    1f78:	53                   	push   %ebx
    1f79:	89 c3                	mov    %eax,%ebx
    1f7b:	75 0a                	jne    1f87 <get_named_transform.isra.7+0x17>
    1f7d:	eb 31                	jmp    1fb0 <get_named_transform.isra.7+0x40>
    1f7f:	90                   	nop
    1f80:	8b 5b 08             	mov    0x8(%ebx),%ebx
    1f83:	85 db                	test   %ebx,%ebx
    1f85:	74 29                	je     1fb0 <get_named_transform.isra.7+0x40>
    1f87:	50                   	push   %eax
    1f88:	50                   	push   %eax
    1f89:	56                   	push   %esi
    1f8a:	8b 03                	mov    (%ebx),%eax
    1f8c:	50                   	push   %eax
    1f8d:	e8 2e 00 01 00       	call   11fc0 <str_cmp@plt>
    1f92:	83 c4 10             	add    $0x10,%esp
    1f95:	85 c0                	test   %eax,%eax
    1f97:	75 e7                	jne    1f80 <get_named_transform.isra.7+0x10>
    1f99:	8b 43 04             	mov    0x4(%ebx),%eax
    1f9c:	85 c0                	test   %eax,%eax
    1f9e:	74 54                	je     1ff4 <get_named_transform.isra.7+0x84>
    1fa0:	8b 50 04             	mov    0x4(%eax),%edx
    1fa3:	42                   	inc    %edx
    1fa4:	89 50 04             	mov    %edx,0x4(%eax)
    1fa7:	8d 65 f8             	lea    -0x8(%ebp),%esp
    1faa:	5b                   	pop    %ebx
    1fab:	5e                   	pop    %esi
    1fac:	5d                   	pop    %ebp
    1fad:	c3                   	ret    
    1fae:	66 90                	xchg   %ax,%ax
    1fb0:	a1 40 3a 01 00       	mov    0x13a40,%eax
    1fb5:	31 db                	xor    %ebx,%ebx
    1fb7:	8b 00                	mov    (%eax),%eax
    1fb9:	85 c0                	test   %eax,%eax
    1fbb:	75 1a                	jne    1fd7 <get_named_transform.isra.7+0x67>
    1fbd:	8d 65 f8             	lea    -0x8(%ebp),%esp
    1fc0:	31 c0                	xor    %eax,%eax
    1fc2:	5b                   	pop    %ebx
    1fc3:	5e                   	pop    %esi
    1fc4:	5d                   	pop    %ebp
    1fc5:	c3                   	ret    
    1fc6:	66 90                	xchg   %ax,%ax
    1fc8:	83 c3 08             	add    $0x8,%ebx
    1fcb:	a1 40 3a 01 00       	mov    0x13a40,%eax
    1fd0:	8b 04 18             	mov    (%eax,%ebx,1),%eax
    1fd3:	85 c0                	test   %eax,%eax
    1fd5:	74 e6                	je     1fbd <get_named_transform.isra.7+0x4d>
    1fd7:	51                   	push   %ecx
    1fd8:	51                   	push   %ecx
    1fd9:	56                   	push   %esi
    1fda:	50                   	push   %eax
    1fdb:	e8 e0 ff 00 00       	call   11fc0 <str_cmp@plt>
    1fe0:	83 c4 10             	add    $0x10,%esp
    1fe3:	85 c0                	test   %eax,%eax
    1fe5:	75 e1                	jne    1fc8 <get_named_transform.isra.7+0x58>
    1fe7:	a1 40 3a 01 00       	mov    0x13a40,%eax
    1fec:	8b 44 18 04          	mov    0x4(%eax,%ebx,1),%eax
    1ff0:	85 c0                	test   %eax,%eax
    1ff2:	75 ac                	jne    1fa0 <get_named_transform.isra.7+0x30>
    1ff4:	53                   	push   %ebx
    1ff5:	6a 6a                	push   $0x6a
    1ff7:	68 18 13 01 00       	push   $0x11318
    1ffc:	68 35 13 01 00       	push   $0x11335
    2001:	e8 0a ff 00 00       	call   11f10 <assert_abort@plt>
    2006:	8d 76 00             	lea    0x0(%esi),%esi
    2009:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00002010 <syntax_error.part.2>:
    2010:	55                   	push   %ebp
    2011:	89 e5                	mov    %esp,%ebp
    2013:	57                   	push   %edi
    2014:	56                   	push   %esi
    2015:	53                   	push   %ebx
    2016:	83 ec 1c             	sub    $0x1c,%esp
    2019:	89 d7                	mov    %edx,%edi
    201b:	8b 98 1c 10 00 00    	mov    0x101c(%eax),%ebx
    2021:	8b 90 14 10 00 00    	mov    0x1014(%eax),%edx
    2027:	8b 88 10 10 00 00    	mov    0x1010(%eax),%ecx
    202d:	01 da                	add    %ebx,%edx
    202f:	01 cb                	add    %ecx,%ebx
    2031:	89 c6                	mov    %eax,%esi
    2033:	89 d8                	mov    %ebx,%eax
    2035:	89 55 e0             	mov    %edx,-0x20(%ebp)
    2038:	29 d0                	sub    %edx,%eax
    203a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    203d:	8b 86 18 10 00 00    	mov    0x1018(%esi),%eax
    2043:	50                   	push   %eax
    2044:	8b 46 08             	mov    0x8(%esi),%eax
    2047:	50                   	push   %eax
    2048:	a1 28 3d 01 00       	mov    0x13d28,%eax
    204d:	68 3a 13 01 00       	push   $0x1133a
    2052:	50                   	push   %eax
    2053:	e8 d8 fe 00 00       	call   11f30 <fprintf@plt>
    2058:	83 c4 10             	add    $0x10,%esp
    205b:	8b 55 e0             	mov    -0x20(%ebp),%edx
    205e:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
    2062:	76 74                	jbe    20d8 <syntax_error.part.2+0xc8>
    2064:	a1 28 3d 01 00       	mov    0x13d28,%eax
    2069:	4b                   	dec    %ebx
    206a:	53                   	push   %ebx
    206b:	52                   	push   %edx
    206c:	68 41 13 01 00       	push   $0x11341
    2071:	50                   	push   %eax
    2072:	e8 b9 fe 00 00       	call   11f30 <fprintf@plt>
    2077:	83 c4 10             	add    $0x10,%esp
    207a:	8b 86 14 10 00 00    	mov    0x1014(%esi),%eax
    2080:	83 ec 0c             	sub    $0xc,%esp
    2083:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    2086:	8b 0d 28 3d 01 00    	mov    0x13d28,%ecx
    208c:	8d 44 06 10          	lea    0x10(%esi,%eax,1),%eax
    2090:	50                   	push   %eax
    2091:	52                   	push   %edx
    2092:	57                   	push   %edi
    2093:	68 4b 13 01 00       	push   $0x1134b
    2098:	51                   	push   %ecx
    2099:	e8 92 fe 00 00       	call   11f30 <fprintf@plt>
    209e:	8b 1e                	mov    (%esi),%ebx
    20a0:	83 c4 20             	add    $0x20,%esp
    20a3:	85 db                	test   %ebx,%ebx
    20a5:	74 09                	je     20b0 <syntax_error.part.2+0xa0>
    20a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
    20aa:	5b                   	pop    %ebx
    20ab:	5e                   	pop    %esi
    20ac:	5f                   	pop    %edi
    20ad:	5d                   	pop    %ebp
    20ae:	c3                   	ret    
    20af:	90                   	nop
    20b0:	83 be 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%esi)
    20b7:	74 37                	je     20f0 <syntax_error.part.2+0xe0>
    20b9:	c7 86 20 10 00 00 80 	movl   $0xffffff80,0x1020(%esi)
    20c0:	ff ff ff 
    20c3:	c7 06 f2 ff ff ff    	movl   $0xfffffff2,(%esi)
    20c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
    20cc:	5b                   	pop    %ebx
    20cd:	5e                   	pop    %esi
    20ce:	5f                   	pop    %edi
    20cf:	5d                   	pop    %ebp
    20d0:	c3                   	ret    
    20d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    20d8:	50                   	push   %eax
    20d9:	a1 28 3d 01 00       	mov    0x13d28,%eax
    20de:	52                   	push   %edx
    20df:	68 45 13 01 00       	push   $0x11345
    20e4:	50                   	push   %eax
    20e5:	e8 46 fe 00 00       	call   11f30 <fprintf@plt>
    20ea:	83 c4 10             	add    $0x10,%esp
    20ed:	eb 8b                	jmp    207a <syntax_error.part.2+0x6a>
    20ef:	90                   	nop
    20f0:	83 ec 0c             	sub    $0xc,%esp
    20f3:	8b 86 24 10 00 00    	mov    0x1024(%esi),%eax
    20f9:	50                   	push   %eax
    20fa:	e8 f1 ff 00 00       	call   120f0 <free@plt>
    20ff:	83 c4 10             	add    $0x10,%esp
    2102:	eb b5                	jmp    20b9 <syntax_error.part.2+0xa9>
    2104:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    210a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

00002110 <next_token>:
    2110:	55                   	push   %ebp
    2111:	89 e5                	mov    %esp,%ebp
    2113:	57                   	push   %edi
    2114:	56                   	push   %esi
    2115:	53                   	push   %ebx
    2116:	83 ec 2c             	sub    $0x2c,%esp
    2119:	89 c6                	mov    %eax,%esi
    211b:	8b 98 10 10 00 00    	mov    0x1010(%eax),%ebx
    2121:	8d 40 10             	lea    0x10(%eax),%eax
    2124:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    2127:	90                   	nop
    2128:	8d 83 00 01 00 00    	lea    0x100(%ebx),%eax
    212e:	3d ff 0f 00 00       	cmp    $0xfff,%eax
    2133:	0f 87 f7 00 00 00    	ja     2230 <next_token+0x120>
    2139:	8b 86 20 10 00 00    	mov    0x1020(%esi),%eax
    213f:	83 f8 86             	cmp    $0xffffff86,%eax
    2142:	0f 84 64 01 00 00    	je     22ac <next_token+0x19c>
    2148:	8b 9e 10 10 00 00    	mov    0x1010(%esi),%ebx
    214e:	c7 86 20 10 00 00 80 	movl   $0xffffff80,0x1020(%esi)
    2155:	ff ff ff 
    2158:	89 9e 14 10 00 00    	mov    %ebx,0x1014(%esi)
    215e:	8a 44 1e 10          	mov    0x10(%esi,%ebx,1),%al
    2162:	84 c0                	test   %al,%al
    2164:	0f 84 80 03 00 00    	je     24ea <next_token+0x3da>
    216a:	3c 23                	cmp    $0x23,%al
    216c:	0f 85 51 01 00 00    	jne    22c3 <next_token+0x1b3>
    2172:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    2178:	8a 44 1e 10          	mov    0x10(%esi,%ebx,1),%al
    217c:	3c 0a                	cmp    $0xa,%al
    217e:	74 a8                	je     2128 <next_token+0x18>
    2180:	84 c0                	test   %al,%al
    2182:	74 a4                	je     2128 <next_token+0x18>
    2184:	8d 7b 01             	lea    0x1(%ebx),%edi
    2187:	8d 83 01 01 00 00    	lea    0x101(%ebx),%eax
    218d:	89 be 10 10 00 00    	mov    %edi,0x1010(%esi)
    2193:	89 fb                	mov    %edi,%ebx
    2195:	3d ff 0f 00 00       	cmp    $0xfff,%eax
    219a:	76 dc                	jbe    2178 <next_token+0x68>
    219c:	51                   	push   %ecx
    219d:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    21a0:	89 c8                	mov    %ecx,%eax
    21a2:	bb ff 0f 00 00       	mov    $0xfff,%ebx
    21a7:	29 fb                	sub    %edi,%ebx
    21a9:	01 f8                	add    %edi,%eax
    21ab:	53                   	push   %ebx
    21ac:	50                   	push   %eax
    21ad:	51                   	push   %ecx
    21ae:	e8 0d fc 00 00       	call   11dc0 <memmove@plt>
    21b3:	8b 86 10 10 00 00    	mov    0x1010(%esi),%eax
    21b9:	8b 96 1c 10 00 00    	mov    0x101c(%esi),%edx
    21bf:	01 c2                	add    %eax,%edx
    21c1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    21c4:	8b 4e 0c             	mov    0xc(%esi),%ecx
    21c7:	01 d8                	add    %ebx,%eax
    21c9:	89 96 1c 10 00 00    	mov    %edx,0x101c(%esi)
    21cf:	c7 86 10 10 00 00 00 	movl   $0x0,0x1010(%esi)
    21d6:	00 00 00 
    21d9:	51                   	push   %ecx
    21da:	57                   	push   %edi
    21db:	6a 01                	push   $0x1
    21dd:	50                   	push   %eax
    21de:	e8 ed fd 00 00       	call   11fd0 <fread@plt>
    21e3:	83 c4 14             	add    $0x14,%esp
    21e6:	89 c7                	mov    %eax,%edi
    21e8:	8b 46 0c             	mov    0xc(%esi),%eax
    21eb:	50                   	push   %eax
    21ec:	e8 8f fd 00 00       	call   11f80 <ferror@plt>
    21f1:	83 c4 10             	add    $0x10,%esp
    21f4:	85 c0                	test   %eax,%eax
    21f6:	74 06                	je     21fe <next_token+0xee>
    21f8:	8b 16                	mov    (%esi),%edx
    21fa:	85 d2                	test   %edx,%edx
    21fc:	74 12                	je     2210 <next_token+0x100>
    21fe:	01 f3                	add    %esi,%ebx
    2200:	c6 44 1f 10 00       	movb   $0x0,0x10(%edi,%ebx,1)
    2205:	8b 9e 10 10 00 00    	mov    0x1010(%esi),%ebx
    220b:	e9 68 ff ff ff       	jmp    2178 <next_token+0x68>
    2210:	83 be 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%esi)
    2217:	0f 84 6b 02 00 00    	je     2488 <next_token+0x378>
    221d:	c7 86 20 10 00 00 80 	movl   $0xffffff80,0x1020(%esi)
    2224:	ff ff ff 
    2227:	c7 06 f6 fe ff ff    	movl   $0xfffffef6,(%esi)
    222d:	eb cf                	jmp    21fe <next_token+0xee>
    222f:	90                   	nop
    2230:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    2233:	bf ff 0f 00 00       	mov    $0xfff,%edi
    2238:	50                   	push   %eax
    2239:	89 d0                	mov    %edx,%eax
    223b:	29 df                	sub    %ebx,%edi
    223d:	01 d8                	add    %ebx,%eax
    223f:	57                   	push   %edi
    2240:	50                   	push   %eax
    2241:	52                   	push   %edx
    2242:	e8 79 fb 00 00       	call   11dc0 <memmove@plt>
    2247:	8b 86 10 10 00 00    	mov    0x1010(%esi),%eax
    224d:	8b 96 1c 10 00 00    	mov    0x101c(%esi),%edx
    2253:	01 c2                	add    %eax,%edx
    2255:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    2258:	8b 4e 0c             	mov    0xc(%esi),%ecx
    225b:	01 f8                	add    %edi,%eax
    225d:	89 96 1c 10 00 00    	mov    %edx,0x101c(%esi)
    2263:	c7 86 10 10 00 00 00 	movl   $0x0,0x1010(%esi)
    226a:	00 00 00 
    226d:	51                   	push   %ecx
    226e:	53                   	push   %ebx
    226f:	6a 01                	push   $0x1
    2271:	50                   	push   %eax
    2272:	e8 59 fd 00 00       	call   11fd0 <fread@plt>
    2277:	83 c4 14             	add    $0x14,%esp
    227a:	89 c3                	mov    %eax,%ebx
    227c:	8b 46 0c             	mov    0xc(%esi),%eax
    227f:	50                   	push   %eax
    2280:	e8 fb fc 00 00       	call   11f80 <ferror@plt>
    2285:	83 c4 10             	add    $0x10,%esp
    2288:	85 c0                	test   %eax,%eax
    228a:	74 0a                	je     2296 <next_token+0x186>
    228c:	8b 06                	mov    (%esi),%eax
    228e:	85 c0                	test   %eax,%eax
    2290:	0f 84 35 02 00 00    	je     24cb <next_token+0x3bb>
    2296:	01 f7                	add    %esi,%edi
    2298:	8b 86 20 10 00 00    	mov    0x1020(%esi),%eax
    229e:	83 f8 86             	cmp    $0xffffff86,%eax
    22a1:	c6 44 3b 10 00       	movb   $0x0,0x10(%ebx,%edi,1)
    22a6:	0f 85 9c fe ff ff    	jne    2148 <next_token+0x38>
    22ac:	83 ec 0c             	sub    $0xc,%esp
    22af:	8b 86 24 10 00 00    	mov    0x1024(%esi),%eax
    22b5:	50                   	push   %eax
    22b6:	e8 35 fe 00 00       	call   120f0 <free@plt>
    22bb:	83 c4 10             	add    $0x10,%esp
    22be:	e9 85 fe ff ff       	jmp    2148 <next_token+0x38>
    22c3:	3c 09                	cmp    $0x9,%al
    22c5:	7c 32                	jl     22f9 <next_token+0x1e9>
    22c7:	3c 0d                	cmp    $0xd,%al
    22c9:	7e 04                	jle    22cf <next_token+0x1bf>
    22cb:	3c 20                	cmp    $0x20,%al
    22cd:	75 2a                	jne    22f9 <next_token+0x1e9>
    22cf:	89 d9                	mov    %ebx,%ecx
    22d1:	f7 d9                	neg    %ecx
    22d3:	3c 09                	cmp    $0x9,%al
    22d5:	0f 8c 4d fe ff ff    	jl     2128 <next_token+0x18>
    22db:	3c 0d                	cmp    $0xd,%al
    22dd:	0f 8e bc 01 00 00    	jle    249f <next_token+0x38f>
    22e3:	3c 20                	cmp    $0x20,%al
    22e5:	0f 85 3d fe ff ff    	jne    2128 <next_token+0x18>
    22eb:	43                   	inc    %ebx
    22ec:	49                   	dec    %ecx
    22ed:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    22f3:	8a 44 1e 10          	mov    0x10(%esi,%ebx,1),%al
    22f7:	eb da                	jmp    22d3 <next_token+0x1c3>
    22f9:	88 c1                	mov    %al,%cl
    22fb:	83 e1 df             	and    $0xffffffdf,%ecx
    22fe:	83 e9 41             	sub    $0x41,%ecx
    2301:	80 f9 19             	cmp    $0x19,%cl
    2304:	0f 87 f2 01 00 00    	ja     24fc <next_token+0x3ec>
    230a:	89 d9                	mov    %ebx,%ecx
    230c:	eb 0d                	jmp    231b <next_token+0x20b>
    230e:	66 90                	xchg   %ax,%ax
    2310:	41                   	inc    %ecx
    2311:	89 8e 10 10 00 00    	mov    %ecx,0x1010(%esi)
    2317:	8a 44 0e 10          	mov    0x10(%esi,%ecx,1),%al
    231b:	88 c2                	mov    %al,%dl
    231d:	83 e2 df             	and    $0xffffffdf,%edx
    2320:	83 ea 41             	sub    $0x41,%edx
    2323:	80 fa 19             	cmp    $0x19,%dl
    2326:	76 e8                	jbe    2310 <next_token+0x200>
    2328:	0f be d0             	movsbl %al,%edx
    232b:	83 ea 30             	sub    $0x30,%edx
    232e:	83 fa 09             	cmp    $0x9,%edx
    2331:	76 dd                	jbe    2310 <next_token+0x200>
    2333:	3c 5f                	cmp    $0x5f,%al
    2335:	74 d9                	je     2310 <next_token+0x200>
    2337:	29 d9                	sub    %ebx,%ecx
    2339:	50                   	push   %eax
    233a:	50                   	push   %eax
    233b:	8d 44 1e 10          	lea    0x10(%esi,%ebx,1),%eax
    233f:	51                   	push   %ecx
    2340:	50                   	push   %eax
    2341:	e8 ea fa 00 00       	call   11e30 <str_ndup@plt>
    2346:	83 c4 10             	add    $0x10,%esp
    2349:	89 c3                	mov    %eax,%ebx
    234b:	85 c0                	test   %eax,%eax
    234d:	0f 84 e1 02 00 00    	je     2634 <next_token+0x524>
    2353:	50                   	push   %eax
    2354:	50                   	push   %eax
    2355:	68 57 13 01 00       	push   $0x11357
    235a:	53                   	push   %ebx
    235b:	e8 60 fc 00 00       	call   11fc0 <str_cmp@plt>
    2360:	83 c4 10             	add    $0x10,%esp
    2363:	85 c0                	test   %eax,%eax
    2365:	0f 84 ae 02 00 00    	je     2619 <next_token+0x509>
    236b:	57                   	push   %edi
    236c:	57                   	push   %edi
    236d:	68 5a 13 01 00       	push   $0x1135a
    2372:	53                   	push   %ebx
    2373:	e8 48 fc 00 00       	call   11fc0 <str_cmp@plt>
    2378:	83 c4 10             	add    $0x10,%esp
    237b:	85 c0                	test   %eax,%eax
    237d:	0f 84 75 03 00 00    	je     26f8 <next_token+0x5e8>
    2383:	51                   	push   %ecx
    2384:	51                   	push   %ecx
    2385:	68 48 12 01 00       	push   $0x11248
    238a:	53                   	push   %ebx
    238b:	e8 30 fc 00 00       	call   11fc0 <str_cmp@plt>
    2390:	83 c4 10             	add    $0x10,%esp
    2393:	85 c0                	test   %eax,%eax
    2395:	0f 84 c5 02 00 00    	je     2660 <next_token+0x550>
    239b:	52                   	push   %edx
    239c:	52                   	push   %edx
    239d:	68 5f 13 01 00       	push   $0x1135f
    23a2:	53                   	push   %ebx
    23a3:	e8 18 fc 00 00       	call   11fc0 <str_cmp@plt>
    23a8:	83 c4 10             	add    $0x10,%esp
    23ab:	85 c0                	test   %eax,%eax
    23ad:	0f 84 f0 03 00 00    	je     27a3 <next_token+0x693>
    23b3:	50                   	push   %eax
    23b4:	50                   	push   %eax
    23b5:	68 13 14 01 00       	push   $0x11413
    23ba:	53                   	push   %ebx
    23bb:	e8 00 fc 00 00       	call   11fc0 <str_cmp@plt>
    23c0:	83 c4 10             	add    $0x10,%esp
    23c3:	85 c0                	test   %eax,%eax
    23c5:	0f 84 bd 03 00 00    	je     2788 <next_token+0x678>
    23cb:	50                   	push   %eax
    23cc:	50                   	push   %eax
    23cd:	68 62 13 01 00       	push   $0x11362
    23d2:	53                   	push   %ebx
    23d3:	e8 e8 fb 00 00       	call   11fc0 <str_cmp@plt>
    23d8:	83 c4 10             	add    $0x10,%esp
    23db:	85 c0                	test   %eax,%eax
    23dd:	0f 84 ce 04 00 00    	je     28b1 <next_token+0x7a1>
    23e3:	50                   	push   %eax
    23e4:	50                   	push   %eax
    23e5:	68 6a 13 01 00       	push   $0x1136a
    23ea:	53                   	push   %ebx
    23eb:	e8 d0 fb 00 00       	call   11fc0 <str_cmp@plt>
    23f0:	83 c4 10             	add    $0x10,%esp
    23f3:	85 c0                	test   %eax,%eax
    23f5:	0f 84 9b 04 00 00    	je     2896 <next_token+0x786>
    23fb:	50                   	push   %eax
    23fc:	50                   	push   %eax
    23fd:	68 71 13 01 00       	push   $0x11371
    2402:	53                   	push   %ebx
    2403:	e8 b8 fb 00 00       	call   11fc0 <str_cmp@plt>
    2408:	83 c4 10             	add    $0x10,%esp
    240b:	85 c0                	test   %eax,%eax
    240d:	0f 84 68 04 00 00    	je     287b <next_token+0x76b>
    2413:	50                   	push   %eax
    2414:	50                   	push   %eax
    2415:	68 78 13 01 00       	push   $0x11378
    241a:	53                   	push   %ebx
    241b:	e8 a0 fb 00 00       	call   11fc0 <str_cmp@plt>
    2420:	83 c4 10             	add    $0x10,%esp
    2423:	85 c0                	test   %eax,%eax
    2425:	0f 84 35 04 00 00    	je     2860 <next_token+0x750>
    242b:	50                   	push   %eax
    242c:	50                   	push   %eax
    242d:	68 2c 15 01 00       	push   $0x1152c
    2432:	53                   	push   %ebx
    2433:	e8 88 fb 00 00       	call   11fc0 <str_cmp@plt>
    2438:	83 c4 10             	add    $0x10,%esp
    243b:	85 c0                	test   %eax,%eax
    243d:	0f 84 02 04 00 00    	je     2845 <next_token+0x735>
    2443:	57                   	push   %edi
    2444:	57                   	push   %edi
    2445:	68 43 12 01 00       	push   $0x11243
    244a:	53                   	push   %ebx
    244b:	e8 70 fb 00 00       	call   11fc0 <str_cmp@plt>
    2450:	83 c4 10             	add    $0x10,%esp
    2453:	85 c0                	test   %eax,%eax
    2455:	0f 84 cf 03 00 00    	je     282a <next_token+0x71a>
    245b:	51                   	push   %ecx
    245c:	51                   	push   %ecx
    245d:	68 7f 13 01 00       	push   $0x1137f
    2462:	53                   	push   %ebx
    2463:	e8 58 fb 00 00       	call   11fc0 <str_cmp@plt>
    2468:	83 c4 10             	add    $0x10,%esp
    246b:	85 c0                	test   %eax,%eax
    246d:	0f 84 c5 04 00 00    	je     2938 <next_token+0x828>
    2473:	c7 86 20 10 00 00 86 	movl   $0xffffff86,0x1020(%esi)
    247a:	ff ff ff 
    247d:	89 9e 24 10 00 00    	mov    %ebx,0x1024(%esi)
    2483:	eb 6f                	jmp    24f4 <next_token+0x3e4>
    2485:	8d 76 00             	lea    0x0(%esi),%esi
    2488:	83 ec 0c             	sub    $0xc,%esp
    248b:	8b 86 24 10 00 00    	mov    0x1024(%esi),%eax
    2491:	50                   	push   %eax
    2492:	e8 59 fc 00 00       	call   120f0 <free@plt>
    2497:	83 c4 10             	add    $0x10,%esp
    249a:	e9 7e fd ff ff       	jmp    221d <next_token+0x10d>
    249f:	3c 0a                	cmp    $0xa,%al
    24a1:	0f 85 44 fe ff ff    	jne    22eb <next_token+0x1db>
    24a7:	8b 86 18 10 00 00    	mov    0x1018(%esi),%eax
    24ad:	43                   	inc    %ebx
    24ae:	40                   	inc    %eax
    24af:	89 8e 1c 10 00 00    	mov    %ecx,0x101c(%esi)
    24b5:	89 86 18 10 00 00    	mov    %eax,0x1018(%esi)
    24bb:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    24c1:	8a 44 1e 10          	mov    0x10(%esi,%ebx,1),%al
    24c5:	49                   	dec    %ecx
    24c6:	e9 08 fe ff ff       	jmp    22d3 <next_token+0x1c3>
    24cb:	83 be 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%esi)
    24d2:	0f 84 d8 00 00 00    	je     25b0 <next_token+0x4a0>
    24d8:	01 f7                	add    %esi,%edi
    24da:	c7 06 f6 fe ff ff    	movl   $0xfffffef6,(%esi)
    24e0:	c6 44 3b 10 00       	movb   $0x0,0x10(%ebx,%edi,1)
    24e5:	e9 5e fc ff ff       	jmp    2148 <next_token+0x38>
    24ea:	c7 86 20 10 00 00 84 	movl   $0xffffff84,0x1020(%esi)
    24f1:	ff ff ff 
    24f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
    24f7:	5b                   	pop    %ebx
    24f8:	5e                   	pop    %esi
    24f9:	5f                   	pop    %edi
    24fa:	5d                   	pop    %ebp
    24fb:	c3                   	ret    
    24fc:	0f be c8             	movsbl %al,%ecx
    24ff:	8d 51 d0             	lea    -0x30(%ecx),%edx
    2502:	83 fa 09             	cmp    $0x9,%edx
    2505:	0f 87 bc 00 00 00    	ja     25c7 <next_token+0x4b7>
    250b:	8d 4b 01             	lea    0x1(%ebx),%ecx
    250e:	eb 02                	jmp    2512 <next_token+0x402>
    2510:	89 d1                	mov    %edx,%ecx
    2512:	0f be 44 0e 10       	movsbl 0x10(%esi,%ecx,1),%eax
    2517:	83 e8 30             	sub    $0x30,%eax
    251a:	8d 51 01             	lea    0x1(%ecx),%edx
    251d:	83 f8 09             	cmp    $0x9,%eax
    2520:	76 ee                	jbe    2510 <next_token+0x400>
    2522:	8d 7c 1e 10          	lea    0x10(%esi,%ebx,1),%edi
    2526:	89 8e 10 10 00 00    	mov    %ecx,0x1010(%esi)
    252c:	c7 86 20 10 00 00 87 	movl   $0xffffff87,0x1020(%esi)
    2533:	ff ff ff 
    2536:	31 c0                	xor    %eax,%eax
    2538:	80 3f 2d             	cmpb   $0x2d,(%edi)
    253b:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    253e:	0f 94 c0             	sete   %al
    2541:	83 ec 0c             	sub    $0xc,%esp
    2544:	01 f8                	add    %edi,%eax
    2546:	51                   	push   %ecx
    2547:	6a 00                	push   $0x0
    2549:	6a 0a                	push   $0xa
    254b:	6a 00                	push   $0x0
    254d:	50                   	push   %eax
    254e:	e8 cd fa 00 00       	call   12020 <str_uint64_t@plt>
    2553:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    2556:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    2559:	89 8e 24 10 00 00    	mov    %ecx,0x1024(%esi)
    255f:	89 9e 28 10 00 00    	mov    %ebx,0x1028(%esi)
    2565:	83 c4 20             	add    $0x20,%esp
    2568:	80 3f 2d             	cmpb   $0x2d,(%edi)
    256b:	75 13                	jne    2580 <next_token+0x470>
    256d:	f7 d9                	neg    %ecx
    256f:	83 d3 00             	adc    $0x0,%ebx
    2572:	89 8e 24 10 00 00    	mov    %ecx,0x1024(%esi)
    2578:	f7 db                	neg    %ebx
    257a:	89 9e 28 10 00 00    	mov    %ebx,0x1028(%esi)
    2580:	8b 16                	mov    (%esi),%edx
    2582:	85 d2                	test   %edx,%edx
    2584:	0f 85 6a ff ff ff    	jne    24f4 <next_token+0x3e4>
    258a:	85 c0                	test   %eax,%eax
    258c:	0f 84 62 ff ff ff    	je     24f4 <next_token+0x3e4>
    2592:	83 be 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%esi)
    2599:	0f 84 cb 03 00 00    	je     296a <next_token+0x85a>
    259f:	c7 86 20 10 00 00 80 	movl   $0xffffff80,0x1020(%esi)
    25a6:	ff ff ff 
    25a9:	89 06                	mov    %eax,(%esi)
    25ab:	e9 44 ff ff ff       	jmp    24f4 <next_token+0x3e4>
    25b0:	83 ec 0c             	sub    $0xc,%esp
    25b3:	8b 86 24 10 00 00    	mov    0x1024(%esi),%eax
    25b9:	50                   	push   %eax
    25ba:	e8 31 fb 00 00       	call   120f0 <free@plt>
    25bf:	83 c4 10             	add    $0x10,%esp
    25c2:	e9 11 ff ff ff       	jmp    24d8 <next_token+0x3c8>
    25c7:	3c 3c                	cmp    $0x3c,%al
    25c9:	0f 84 e9 00 00 00    	je     26b8 <next_token+0x5a8>
    25cf:	3c 3e                	cmp    $0x3e,%al
    25d1:	0f 84 79 01 00 00    	je     2750 <next_token+0x640>
    25d7:	3c 3d                	cmp    $0x3d,%al
    25d9:	0f 84 34 01 00 00    	je     2713 <next_token+0x603>
    25df:	3c 2f                	cmp    $0x2f,%al
    25e1:	0f 84 94 00 00 00    	je     267b <next_token+0x56b>
    25e7:	3c 21                	cmp    $0x21,%al
    25e9:	0f 84 cf 01 00 00    	je     27be <next_token+0x6ae>
    25ef:	3c 26                	cmp    $0x26,%al
    25f1:	0f 84 fd 01 00 00    	je     27f4 <next_token+0x6e4>
    25f7:	3c 7c                	cmp    $0x7c,%al
    25f9:	0f 84 03 03 00 00    	je     2902 <next_token+0x7f2>
    25ff:	3c 2b                	cmp    $0x2b,%al
    2601:	0f 84 c5 02 00 00    	je     28cc <next_token+0x7bc>
    2607:	43                   	inc    %ebx
    2608:	89 8e 20 10 00 00    	mov    %ecx,0x1020(%esi)
    260e:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    2614:	e9 db fe ff ff       	jmp    24f4 <next_token+0x3e4>
    2619:	83 ec 0c             	sub    $0xc,%esp
    261c:	c7 86 20 10 00 00 8d 	movl   $0xffffff8d,0x1020(%esi)
    2623:	ff ff ff 
    2626:	53                   	push   %ebx
    2627:	e8 c4 fa 00 00       	call   120f0 <free@plt>
    262c:	83 c4 10             	add    $0x10,%esp
    262f:	e9 c0 fe ff ff       	jmp    24f4 <next_token+0x3e4>
    2634:	8b 06                	mov    (%esi),%eax
    2636:	85 c0                	test   %eax,%eax
    2638:	0f 85 b6 fe ff ff    	jne    24f4 <next_token+0x3e4>
    263e:	83 be 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%esi)
    2645:	0f 84 08 03 00 00    	je     2953 <next_token+0x843>
    264b:	c7 86 20 10 00 00 80 	movl   $0xffffff80,0x1020(%esi)
    2652:	ff ff ff 
    2655:	c7 06 fe ff ff ff    	movl   $0xfffffffe,(%esi)
    265b:	e9 94 fe ff ff       	jmp    24f4 <next_token+0x3e4>
    2660:	83 ec 0c             	sub    $0xc,%esp
    2663:	c7 86 20 10 00 00 8f 	movl   $0xffffff8f,0x1020(%esi)
    266a:	ff ff ff 
    266d:	53                   	push   %ebx
    266e:	e8 7d fa 00 00       	call   120f0 <free@plt>
    2673:	83 c4 10             	add    $0x10,%esp
    2676:	e9 79 fe ff ff       	jmp    24f4 <next_token+0x3e4>
    267b:	8d 43 01             	lea    0x1(%ebx),%eax
    267e:	c7 86 20 10 00 00 2f 	movl   $0x2f,0x1020(%esi)
    2685:	00 00 00 
    2688:	89 86 10 10 00 00    	mov    %eax,0x1010(%esi)
    268e:	80 7c 1e 11 2f       	cmpb   $0x2f,0x11(%esi,%ebx,1)
    2693:	0f 85 5b fe ff ff    	jne    24f4 <next_token+0x3e4>
    2699:	83 c3 02             	add    $0x2,%ebx
    269c:	c7 86 20 10 00 00 88 	movl   $0xffffff88,0x1020(%esi)
    26a3:	ff ff ff 
    26a6:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    26ac:	e9 43 fe ff ff       	jmp    24f4 <next_token+0x3e4>
    26b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    26b8:	8d 43 01             	lea    0x1(%ebx),%eax
    26bb:	c7 86 20 10 00 00 3c 	movl   $0x3c,0x1020(%esi)
    26c2:	00 00 00 
    26c5:	89 86 10 10 00 00    	mov    %eax,0x1010(%esi)
    26cb:	8a 44 1e 11          	mov    0x11(%esi,%ebx,1),%al
    26cf:	3c 2d                	cmp    $0x2d,%al
    26d1:	0f 84 b0 02 00 00    	je     2987 <next_token+0x877>
    26d7:	3c 3d                	cmp    $0x3d,%al
    26d9:	0f 85 15 fe ff ff    	jne    24f4 <next_token+0x3e4>
    26df:	83 c3 02             	add    $0x2,%ebx
    26e2:	c7 86 20 10 00 00 8a 	movl   $0xffffff8a,0x1020(%esi)
    26e9:	ff ff ff 
    26ec:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    26f2:	e9 fd fd ff ff       	jmp    24f4 <next_token+0x3e4>
    26f7:	90                   	nop
    26f8:	83 ec 0c             	sub    $0xc,%esp
    26fb:	c7 86 20 10 00 00 8e 	movl   $0xffffff8e,0x1020(%esi)
    2702:	ff ff ff 
    2705:	53                   	push   %ebx
    2706:	e8 e5 f9 00 00       	call   120f0 <free@plt>
    270b:	83 c4 10             	add    $0x10,%esp
    270e:	e9 e1 fd ff ff       	jmp    24f4 <next_token+0x3e4>
    2713:	8d 43 01             	lea    0x1(%ebx),%eax
    2716:	c7 86 20 10 00 00 3d 	movl   $0x3d,0x1020(%esi)
    271d:	00 00 00 
    2720:	89 86 10 10 00 00    	mov    %eax,0x1010(%esi)
    2726:	80 7c 1e 11 3d       	cmpb   $0x3d,0x11(%esi,%ebx,1)
    272b:	0f 85 c3 fd ff ff    	jne    24f4 <next_token+0x3e4>
    2731:	83 c3 02             	add    $0x2,%ebx
    2734:	c7 86 20 10 00 00 83 	movl   $0xffffff83,0x1020(%esi)
    273b:	ff ff ff 
    273e:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    2744:	e9 ab fd ff ff       	jmp    24f4 <next_token+0x3e4>
    2749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    2750:	8d 43 01             	lea    0x1(%ebx),%eax
    2753:	c7 86 20 10 00 00 3e 	movl   $0x3e,0x1020(%esi)
    275a:	00 00 00 
    275d:	89 86 10 10 00 00    	mov    %eax,0x1010(%esi)
    2763:	80 7c 1e 11 3d       	cmpb   $0x3d,0x11(%esi,%ebx,1)
    2768:	0f 85 86 fd ff ff    	jne    24f4 <next_token+0x3e4>
    276e:	83 c3 02             	add    $0x2,%ebx
    2771:	c7 86 20 10 00 00 85 	movl   $0xffffff85,0x1020(%esi)
    2778:	ff ff ff 
    277b:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    2781:	e9 6e fd ff ff       	jmp    24f4 <next_token+0x3e4>
    2786:	66 90                	xchg   %ax,%ax
    2788:	83 ec 0c             	sub    $0xc,%esp
    278b:	c7 86 20 10 00 00 91 	movl   $0xffffff91,0x1020(%esi)
    2792:	ff ff ff 
    2795:	53                   	push   %ebx
    2796:	e8 55 f9 00 00       	call   120f0 <free@plt>
    279b:	83 c4 10             	add    $0x10,%esp
    279e:	e9 51 fd ff ff       	jmp    24f4 <next_token+0x3e4>
    27a3:	83 ec 0c             	sub    $0xc,%esp
    27a6:	c7 86 20 10 00 00 90 	movl   $0xffffff90,0x1020(%esi)
    27ad:	ff ff ff 
    27b0:	53                   	push   %ebx
    27b1:	e8 3a f9 00 00       	call   120f0 <free@plt>
    27b6:	83 c4 10             	add    $0x10,%esp
    27b9:	e9 36 fd ff ff       	jmp    24f4 <next_token+0x3e4>
    27be:	8d 43 01             	lea    0x1(%ebx),%eax
    27c1:	c7 86 20 10 00 00 21 	movl   $0x21,0x1020(%esi)
    27c8:	00 00 00 
    27cb:	89 86 10 10 00 00    	mov    %eax,0x1010(%esi)
    27d1:	80 7c 1e 11 3d       	cmpb   $0x3d,0x11(%esi,%ebx,1)
    27d6:	0f 85 18 fd ff ff    	jne    24f4 <next_token+0x3e4>
    27dc:	83 c3 02             	add    $0x2,%ebx
    27df:	c7 86 20 10 00 00 8b 	movl   $0xffffff8b,0x1020(%esi)
    27e6:	ff ff ff 
    27e9:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    27ef:	e9 00 fd ff ff       	jmp    24f4 <next_token+0x3e4>
    27f4:	8d 43 01             	lea    0x1(%ebx),%eax
    27f7:	c7 86 20 10 00 00 26 	movl   $0x26,0x1020(%esi)
    27fe:	00 00 00 
    2801:	89 86 10 10 00 00    	mov    %eax,0x1010(%esi)
    2807:	80 7c 1e 11 26       	cmpb   $0x26,0x11(%esi,%ebx,1)
    280c:	0f 85 e2 fc ff ff    	jne    24f4 <next_token+0x3e4>
    2812:	83 c3 02             	add    $0x2,%ebx
    2815:	c7 86 20 10 00 00 81 	movl   $0xffffff81,0x1020(%esi)
    281c:	ff ff ff 
    281f:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    2825:	e9 ca fc ff ff       	jmp    24f4 <next_token+0x3e4>
    282a:	83 ec 0c             	sub    $0xc,%esp
    282d:	c7 86 20 10 00 00 97 	movl   $0xffffff97,0x1020(%esi)
    2834:	ff ff ff 
    2837:	53                   	push   %ebx
    2838:	e8 b3 f8 00 00       	call   120f0 <free@plt>
    283d:	83 c4 10             	add    $0x10,%esp
    2840:	e9 af fc ff ff       	jmp    24f4 <next_token+0x3e4>
    2845:	83 ec 0c             	sub    $0xc,%esp
    2848:	c7 86 20 10 00 00 96 	movl   $0xffffff96,0x1020(%esi)
    284f:	ff ff ff 
    2852:	53                   	push   %ebx
    2853:	e8 98 f8 00 00       	call   120f0 <free@plt>
    2858:	83 c4 10             	add    $0x10,%esp
    285b:	e9 94 fc ff ff       	jmp    24f4 <next_token+0x3e4>
    2860:	83 ec 0c             	sub    $0xc,%esp
    2863:	c7 86 20 10 00 00 95 	movl   $0xffffff95,0x1020(%esi)
    286a:	ff ff ff 
    286d:	53                   	push   %ebx
    286e:	e8 7d f8 00 00       	call   120f0 <free@plt>
    2873:	83 c4 10             	add    $0x10,%esp
    2876:	e9 79 fc ff ff       	jmp    24f4 <next_token+0x3e4>
    287b:	83 ec 0c             	sub    $0xc,%esp
    287e:	c7 86 20 10 00 00 94 	movl   $0xffffff94,0x1020(%esi)
    2885:	ff ff ff 
    2888:	53                   	push   %ebx
    2889:	e8 62 f8 00 00       	call   120f0 <free@plt>
    288e:	83 c4 10             	add    $0x10,%esp
    2891:	e9 5e fc ff ff       	jmp    24f4 <next_token+0x3e4>
    2896:	83 ec 0c             	sub    $0xc,%esp
    2899:	c7 86 20 10 00 00 93 	movl   $0xffffff93,0x1020(%esi)
    28a0:	ff ff ff 
    28a3:	53                   	push   %ebx
    28a4:	e8 47 f8 00 00       	call   120f0 <free@plt>
    28a9:	83 c4 10             	add    $0x10,%esp
    28ac:	e9 43 fc ff ff       	jmp    24f4 <next_token+0x3e4>
    28b1:	83 ec 0c             	sub    $0xc,%esp
    28b4:	c7 86 20 10 00 00 92 	movl   $0xffffff92,0x1020(%esi)
    28bb:	ff ff ff 
    28be:	53                   	push   %ebx
    28bf:	e8 2c f8 00 00       	call   120f0 <free@plt>
    28c4:	83 c4 10             	add    $0x10,%esp
    28c7:	e9 28 fc ff ff       	jmp    24f4 <next_token+0x3e4>
    28cc:	8d 43 01             	lea    0x1(%ebx),%eax
    28cf:	c7 86 20 10 00 00 2b 	movl   $0x2b,0x1020(%esi)
    28d6:	00 00 00 
    28d9:	89 86 10 10 00 00    	mov    %eax,0x1010(%esi)
    28df:	80 7c 1e 11 2b       	cmpb   $0x2b,0x11(%esi,%ebx,1)
    28e4:	0f 85 0a fc ff ff    	jne    24f4 <next_token+0x3e4>
    28ea:	83 c3 02             	add    $0x2,%ebx
    28ed:	c7 86 20 10 00 00 82 	movl   $0xffffff82,0x1020(%esi)
    28f4:	ff ff ff 
    28f7:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    28fd:	e9 f2 fb ff ff       	jmp    24f4 <next_token+0x3e4>
    2902:	8d 43 01             	lea    0x1(%ebx),%eax
    2905:	c7 86 20 10 00 00 7c 	movl   $0x7c,0x1020(%esi)
    290c:	00 00 00 
    290f:	89 86 10 10 00 00    	mov    %eax,0x1010(%esi)
    2915:	80 7c 1e 11 7c       	cmpb   $0x7c,0x11(%esi,%ebx,1)
    291a:	0f 85 d4 fb ff ff    	jne    24f4 <next_token+0x3e4>
    2920:	83 c3 02             	add    $0x2,%ebx
    2923:	c7 86 20 10 00 00 8c 	movl   $0xffffff8c,0x1020(%esi)
    292a:	ff ff ff 
    292d:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    2933:	e9 bc fb ff ff       	jmp    24f4 <next_token+0x3e4>
    2938:	83 ec 0c             	sub    $0xc,%esp
    293b:	c7 86 20 10 00 00 98 	movl   $0xffffff98,0x1020(%esi)
    2942:	ff ff ff 
    2945:	53                   	push   %ebx
    2946:	e8 a5 f7 00 00       	call   120f0 <free@plt>
    294b:	83 c4 10             	add    $0x10,%esp
    294e:	e9 a1 fb ff ff       	jmp    24f4 <next_token+0x3e4>
    2953:	83 ec 0c             	sub    $0xc,%esp
    2956:	8b 86 24 10 00 00    	mov    0x1024(%esi),%eax
    295c:	50                   	push   %eax
    295d:	e8 8e f7 00 00       	call   120f0 <free@plt>
    2962:	83 c4 10             	add    $0x10,%esp
    2965:	e9 e1 fc ff ff       	jmp    264b <next_token+0x53b>
    296a:	83 ec 0c             	sub    $0xc,%esp
    296d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    2970:	8b 86 24 10 00 00    	mov    0x1024(%esi),%eax
    2976:	50                   	push   %eax
    2977:	e8 74 f7 00 00       	call   120f0 <free@plt>
    297c:	83 c4 10             	add    $0x10,%esp
    297f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    2982:	e9 18 fc ff ff       	jmp    259f <next_token+0x48f>
    2987:	83 c3 02             	add    $0x2,%ebx
    298a:	c7 86 20 10 00 00 89 	movl   $0xffffff89,0x1020(%esi)
    2991:	ff ff ff 
    2994:	89 9e 10 10 00 00    	mov    %ebx,0x1010(%esi)
    299a:	e9 55 fb ff ff       	jmp    24f4 <next_token+0x3e4>
    299f:	90                   	nop

000029a0 <expect>:
    29a0:	39 90 20 10 00 00    	cmp    %edx,0x1020(%eax)
    29a6:	0f 84 cc 00 00 00    	je     2a78 <expect+0xd8>
    29ac:	8b 10                	mov    (%eax),%edx
    29ae:	85 d2                	test   %edx,%edx
    29b0:	74 06                	je     29b8 <expect+0x18>
    29b2:	c3                   	ret    
    29b3:	90                   	nop
    29b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    29b8:	55                   	push   %ebp
    29b9:	89 e5                	mov    %esp,%ebp
    29bb:	57                   	push   %edi
    29bc:	89 c7                	mov    %eax,%edi
    29be:	56                   	push   %esi
    29bf:	53                   	push   %ebx
    29c0:	83 ec 1c             	sub    $0x1c,%esp
    29c3:	8b 98 1c 10 00 00    	mov    0x101c(%eax),%ebx
    29c9:	8b 97 10 10 00 00    	mov    0x1010(%edi),%edx
    29cf:	8b 80 14 10 00 00    	mov    0x1014(%eax),%eax
    29d5:	8b 8f 18 10 00 00    	mov    0x1018(%edi),%ecx
    29db:	01 d8                	add    %ebx,%eax
    29dd:	01 d3                	add    %edx,%ebx
    29df:	51                   	push   %ecx
    29e0:	89 de                	mov    %ebx,%esi
    29e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    29e5:	29 c6                	sub    %eax,%esi
    29e7:	8b 47 08             	mov    0x8(%edi),%eax
    29ea:	50                   	push   %eax
    29eb:	a1 28 3d 01 00       	mov    0x13d28,%eax
    29f0:	68 3a 13 01 00       	push   $0x1133a
    29f5:	50                   	push   %eax
    29f6:	e8 35 f5 00 00       	call   11f30 <fprintf@plt>
    29fb:	83 c4 10             	add    $0x10,%esp
    29fe:	83 fe 01             	cmp    $0x1,%esi
    2a01:	76 55                	jbe    2a58 <expect+0xb8>
    2a03:	4b                   	dec    %ebx
    2a04:	a1 28 3d 01 00       	mov    0x13d28,%eax
    2a09:	53                   	push   %ebx
    2a0a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    2a0d:	53                   	push   %ebx
    2a0e:	68 41 13 01 00       	push   $0x11341
    2a13:	50                   	push   %eax
    2a14:	e8 17 f5 00 00       	call   11f30 <fprintf@plt>
    2a19:	83 c4 10             	add    $0x10,%esp
    2a1c:	8b 87 14 10 00 00    	mov    0x1014(%edi),%eax
    2a22:	83 ec 0c             	sub    $0xc,%esp
    2a25:	8b 15 28 3d 01 00    	mov    0x13d28,%edx
    2a2b:	8d 44 07 10          	lea    0x10(%edi,%eax,1),%eax
    2a2f:	50                   	push   %eax
    2a30:	56                   	push   %esi
    2a31:	68 85 13 01 00       	push   $0x11385
    2a36:	68 4b 13 01 00       	push   $0x1134b
    2a3b:	52                   	push   %edx
    2a3c:	e8 ef f4 00 00       	call   11f30 <fprintf@plt>
    2a41:	8b 0f                	mov    (%edi),%ecx
    2a43:	83 c4 20             	add    $0x20,%esp
    2a46:	85 c9                	test   %ecx,%ecx
    2a48:	74 36                	je     2a80 <expect+0xe0>
    2a4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
    2a4d:	5b                   	pop    %ebx
    2a4e:	5e                   	pop    %esi
    2a4f:	5f                   	pop    %edi
    2a50:	5d                   	pop    %ebp
    2a51:	c3                   	ret    
    2a52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    2a58:	50                   	push   %eax
    2a59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    2a5c:	50                   	push   %eax
    2a5d:	a1 28 3d 01 00       	mov    0x13d28,%eax
    2a62:	68 45 13 01 00       	push   $0x11345
    2a67:	50                   	push   %eax
    2a68:	e8 c3 f4 00 00       	call   11f30 <fprintf@plt>
    2a6d:	83 c4 10             	add    $0x10,%esp
    2a70:	eb aa                	jmp    2a1c <expect+0x7c>
    2a72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    2a78:	e9 93 f6 ff ff       	jmp    2110 <next_token>
    2a7d:	8d 76 00             	lea    0x0(%esi),%esi
    2a80:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    2a87:	74 17                	je     2aa0 <expect+0x100>
    2a89:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    2a90:	ff ff ff 
    2a93:	c7 07 f2 ff ff ff    	movl   $0xfffffff2,(%edi)
    2a99:	eb af                	jmp    2a4a <expect+0xaa>
    2a9b:	90                   	nop
    2a9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    2aa0:	83 ec 0c             	sub    $0xc,%esp
    2aa3:	8b 87 24 10 00 00    	mov    0x1024(%edi),%eax
    2aa9:	50                   	push   %eax
    2aaa:	e8 41 f6 00 00       	call   120f0 <free@plt>
    2aaf:	83 c4 10             	add    $0x10,%esp
    2ab2:	eb d5                	jmp    2a89 <expect+0xe9>
    2ab4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    2aba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

00002ac0 <parse_expression_precedence>:
    2ac0:	55                   	push   %ebp
    2ac1:	89 e5                	mov    %esp,%ebp
    2ac3:	57                   	push   %edi
    2ac4:	56                   	push   %esi
    2ac5:	53                   	push   %ebx
    2ac6:	83 ec 3c             	sub    $0x3c,%esp
    2ac9:	89 c3                	mov    %eax,%ebx
    2acb:	8b b0 20 10 00 00    	mov    0x1020(%eax),%esi
    2ad1:	89 55 bc             	mov    %edx,-0x44(%ebp)
    2ad4:	8d 46 71             	lea    0x71(%esi),%eax
    2ad7:	83 e0 f7             	and    $0xfffffff7,%eax
    2ada:	0f 84 70 04 00 00    	je     2f50 <parse_expression_precedence+0x490>
    2ae0:	83 fe 91             	cmp    $0xffffff91,%esi
    2ae3:	0f 84 0d 07 00 00    	je     31f6 <parse_expression_precedence+0x736>
    2ae9:	83 fe 87             	cmp    $0xffffff87,%esi
    2aec:	0f 84 b6 06 00 00    	je     31a8 <parse_expression_precedence+0x6e8>
    2af2:	83 fe 86             	cmp    $0xffffff86,%esi
    2af5:	0f 84 cd 05 00 00    	je     30c8 <parse_expression_precedence+0x608>
    2afb:	83 fe 2e             	cmp    $0x2e,%esi
    2afe:	0f 84 c5 07 00 00    	je     32c9 <parse_expression_precedence+0x809>
    2b04:	83 fe 28             	cmp    $0x28,%esi
    2b07:	0f 84 3f 09 00 00    	je     344c <parse_expression_precedence+0x98c>
    2b0d:	8b 13                	mov    (%ebx),%edx
    2b0f:	31 f6                	xor    %esi,%esi
    2b11:	85 d2                	test   %edx,%edx
    2b13:	0f 84 03 07 00 00    	je     321c <parse_expression_precedence+0x75c>
    2b19:	89 75 d4             	mov    %esi,-0x2c(%ebp)
    2b1c:	8d 7d d4             	lea    -0x2c(%ebp),%edi
    2b1f:	85 d2                	test   %edx,%edx
    2b21:	0f 85 7c 00 00 00    	jne    2ba3 <parse_expression_precedence+0xe3>
    2b27:	90                   	nop
    2b28:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    2b2e:	83 f8 2e             	cmp    $0x2e,%eax
    2b31:	0f 84 b9 01 00 00    	je     2cf0 <parse_expression_precedence+0x230>
    2b37:	83 f8 5b             	cmp    $0x5b,%eax
    2b3a:	75 67                	jne    2ba3 <parse_expression_precedence+0xe3>
    2b3c:	89 d8                	mov    %ebx,%eax
    2b3e:	e8 cd f5 ff ff       	call   2110 <next_token>
    2b43:	31 d2                	xor    %edx,%edx
    2b45:	89 d8                	mov    %ebx,%eax
    2b47:	e8 74 ff ff ff       	call   2ac0 <parse_expression_precedence>
    2b4c:	8b 93 20 10 00 00    	mov    0x1020(%ebx),%edx
    2b52:	83 fa 3a             	cmp    $0x3a,%edx
    2b55:	89 c6                	mov    %eax,%esi
    2b57:	0f 94 c1             	sete   %cl
    2b5a:	83 fa 2c             	cmp    $0x2c,%edx
    2b5d:	0f 84 9d 00 00 00    	je     2c00 <parse_expression_precedence+0x140>
    2b63:	84 c9                	test   %cl,%cl
    2b65:	0f 85 95 00 00 00    	jne    2c00 <parse_expression_precedence+0x140>
    2b6b:	83 fa 5d             	cmp    $0x5d,%edx
    2b6e:	0f 85 bc 04 00 00    	jne    3030 <parse_expression_precedence+0x570>
    2b74:	89 d8                	mov    %ebx,%eax
    2b76:	e8 95 f5 ff ff       	call   2110 <next_token>
    2b7b:	8b 03                	mov    (%ebx),%eax
    2b7d:	85 c0                	test   %eax,%eax
    2b7f:	0f 85 c3 04 00 00    	jne    3048 <parse_expression_precedence+0x588>
    2b85:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    2b88:	56                   	push   %esi
    2b89:	50                   	push   %eax
    2b8a:	6a 0e                	push   $0xe
    2b8c:	57                   	push   %edi
    2b8d:	e8 ce ba 00 00       	call   e660 <bithenge_binary_expression>
    2b92:	83 c4 10             	add    $0x10,%esp
    2b95:	85 c0                	test   %eax,%eax
    2b97:	0f 85 f5 01 00 00    	jne    2d92 <parse_expression_precedence+0x2d2>
    2b9d:	8b 13                	mov    (%ebx),%edx
    2b9f:	85 d2                	test   %edx,%edx
    2ba1:	74 85                	je     2b28 <parse_expression_precedence+0x68>
    2ba3:	8b 75 d4             	mov    -0x2c(%ebp),%esi
    2ba6:	89 75 d0             	mov    %esi,-0x30(%ebp)
    2ba9:	8d 75 d0             	lea    -0x30(%ebp),%esi
    2bac:	85 d2                	test   %edx,%edx
    2bae:	0f 85 c2 05 00 00    	jne    3176 <parse_expression_precedence+0x6b6>
    2bb4:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    2bba:	83 f8 8b             	cmp    $0xffffff8b,%eax
    2bbd:	0f 84 15 04 00 00    	je     2fd8 <parse_expression_precedence+0x518>
    2bc3:	0f 8e 67 02 00 00    	jle    2e30 <parse_expression_precedence+0x370>
    2bc9:	83 f8 2b             	cmp    $0x2b,%eax
    2bcc:	0f 84 3e 04 00 00    	je     3010 <parse_expression_precedence+0x550>
    2bd2:	0f 8f 90 02 00 00    	jg     2e68 <parse_expression_precedence+0x3a8>
    2bd8:	83 f8 25             	cmp    $0x25,%eax
    2bdb:	0f 84 47 04 00 00    	je     3028 <parse_expression_precedence+0x568>
    2be1:	83 f8 2a             	cmp    $0x2a,%eax
    2be4:	0f 84 36 04 00 00    	je     3020 <parse_expression_precedence+0x560>
    2bea:	83 f8 8c             	cmp    $0xffffff8c,%eax
    2bed:	0f 84 e5 01 00 00    	je     2dd8 <parse_expression_precedence+0x318>
    2bf3:	8b 45 d0             	mov    -0x30(%ebp),%eax
    2bf6:	8d 65 f4             	lea    -0xc(%ebp),%esp
    2bf9:	5b                   	pop    %ebx
    2bfa:	5e                   	pop    %esi
    2bfb:	5f                   	pop    %edi
    2bfc:	5d                   	pop    %ebp
    2bfd:	c3                   	ret    
    2bfe:	66 90                	xchg   %ax,%ax
    2c00:	89 d8                	mov    %ebx,%eax
    2c02:	88 4d c4             	mov    %cl,-0x3c(%ebp)
    2c05:	89 55 c0             	mov    %edx,-0x40(%ebp)
    2c08:	e8 03 f5 ff ff       	call   2110 <next_token>
    2c0d:	83 bb 20 10 00 00 5d 	cmpl   $0x5d,0x1020(%ebx)
    2c14:	8a 4d c4             	mov    -0x3c(%ebp),%cl
    2c17:	75 0c                	jne    2c25 <parse_expression_precedence+0x165>
    2c19:	8b 55 c0             	mov    -0x40(%ebp),%edx
    2c1c:	83 fa 3a             	cmp    $0x3a,%edx
    2c1f:	0f 84 2b 01 00 00    	je     2d50 <parse_expression_precedence+0x290>
    2c25:	31 d2                	xor    %edx,%edx
    2c27:	89 d8                	mov    %ebx,%eax
    2c29:	88 4d c0             	mov    %cl,-0x40(%ebp)
    2c2c:	e8 8f fe ff ff       	call   2ac0 <parse_expression_precedence>
    2c31:	83 bb 20 10 00 00 5d 	cmpl   $0x5d,0x1020(%ebx)
    2c38:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    2c3b:	8a 4d c0             	mov    -0x40(%ebp),%cl
    2c3e:	0f 84 13 01 00 00    	je     2d57 <parse_expression_precedence+0x297>
    2c44:	8b 03                	mov    (%ebx),%eax
    2c46:	85 c0                	test   %eax,%eax
    2c48:	0f 84 72 01 00 00    	je     2dc0 <parse_expression_precedence+0x300>
    2c4e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    2c51:	85 c0                	test   %eax,%eax
    2c53:	74 2b                	je     2c80 <parse_expression_precedence+0x1c0>
    2c55:	8b 08                	mov    (%eax),%ecx
    2c57:	85 c9                	test   %ecx,%ecx
    2c59:	0f 84 1d 09 00 00    	je     357c <parse_expression_precedence+0xabc>
    2c5f:	8b 50 04             	mov    0x4(%eax),%edx
    2c62:	85 d2                	test   %edx,%edx
    2c64:	0f 84 00 09 00 00    	je     356a <parse_expression_precedence+0xaaa>
    2c6a:	4a                   	dec    %edx
    2c6b:	89 50 04             	mov    %edx,0x4(%eax)
    2c6e:	85 d2                	test   %edx,%edx
    2c70:	75 0e                	jne    2c80 <parse_expression_precedence+0x1c0>
    2c72:	83 ec 0c             	sub    $0xc,%esp
    2c75:	50                   	push   %eax
    2c76:	ff 51 04             	call   *0x4(%ecx)
    2c79:	83 c4 10             	add    $0x10,%esp
    2c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    2c80:	85 f6                	test   %esi,%esi
    2c82:	74 27                	je     2cab <parse_expression_precedence+0x1eb>
    2c84:	8b 16                	mov    (%esi),%edx
    2c86:	85 d2                	test   %edx,%edx
    2c88:	0f 84 ee 08 00 00    	je     357c <parse_expression_precedence+0xabc>
    2c8e:	8b 46 04             	mov    0x4(%esi),%eax
    2c91:	85 c0                	test   %eax,%eax
    2c93:	0f 84 d1 08 00 00    	je     356a <parse_expression_precedence+0xaaa>
    2c99:	48                   	dec    %eax
    2c9a:	89 46 04             	mov    %eax,0x4(%esi)
    2c9d:	85 c0                	test   %eax,%eax
    2c9f:	75 0a                	jne    2cab <parse_expression_precedence+0x1eb>
    2ca1:	83 ec 0c             	sub    $0xc,%esp
    2ca4:	56                   	push   %esi
    2ca5:	ff 52 04             	call   *0x4(%edx)
    2ca8:	83 c4 10             	add    $0x10,%esp
    2cab:	8b 75 c4             	mov    -0x3c(%ebp),%esi
    2cae:	85 f6                	test   %esi,%esi
    2cb0:	0f 84 e3 03 00 00    	je     3099 <parse_expression_precedence+0x5d9>
    2cb6:	8b 7d c4             	mov    -0x3c(%ebp),%edi
    2cb9:	8b 17                	mov    (%edi),%edx
    2cbb:	85 d2                	test   %edx,%edx
    2cbd:	0f 84 b9 08 00 00    	je     357c <parse_expression_precedence+0xabc>
    2cc3:	8b 47 04             	mov    0x4(%edi),%eax
    2cc6:	85 c0                	test   %eax,%eax
    2cc8:	0f 84 9c 08 00 00    	je     356a <parse_expression_precedence+0xaaa>
    2cce:	48                   	dec    %eax
    2ccf:	89 47 04             	mov    %eax,0x4(%edi)
    2cd2:	85 c0                	test   %eax,%eax
    2cd4:	0f 85 bf 03 00 00    	jne    3099 <parse_expression_precedence+0x5d9>
    2cda:	83 ec 0c             	sub    $0xc,%esp
    2cdd:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    2ce0:	31 f6                	xor    %esi,%esi
    2ce2:	51                   	push   %ecx
    2ce3:	ff 52 04             	call   *0x4(%edx)
    2ce6:	8b 13                	mov    (%ebx),%edx
    2ce8:	83 c4 10             	add    $0x10,%esp
    2ceb:	e9 b6 fe ff ff       	jmp    2ba6 <parse_expression_precedence+0xe6>
    2cf0:	89 d8                	mov    %ebx,%eax
    2cf2:	e8 19 f4 ff ff       	call   2110 <next_token>
    2cf7:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    2cfe:	0f 84 a4 03 00 00    	je     30a8 <parse_expression_precedence+0x5e8>
    2d04:	8b 03                	mov    (%ebx),%eax
    2d06:	85 c0                	test   %eax,%eax
    2d08:	0f 84 aa 01 00 00    	je     2eb8 <parse_expression_precedence+0x3f8>
    2d0e:	31 f6                	xor    %esi,%esi
    2d10:	83 ec 0c             	sub    $0xc,%esp
    2d13:	56                   	push   %esi
    2d14:	e8 d7 f3 00 00       	call   120f0 <free@plt>
    2d19:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    2d1c:	83 c4 10             	add    $0x10,%esp
    2d1f:	85 d2                	test   %edx,%edx
    2d21:	74 21                	je     2d44 <parse_expression_precedence+0x284>
    2d23:	8b 0a                	mov    (%edx),%ecx
    2d25:	85 c9                	test   %ecx,%ecx
    2d27:	0f 84 4f 08 00 00    	je     357c <parse_expression_precedence+0xabc>
    2d2d:	8b 42 04             	mov    0x4(%edx),%eax
    2d30:	85 c0                	test   %eax,%eax
    2d32:	0f 84 32 08 00 00    	je     356a <parse_expression_precedence+0xaaa>
    2d38:	48                   	dec    %eax
    2d39:	89 42 04             	mov    %eax,0x4(%edx)
    2d3c:	85 c0                	test   %eax,%eax
    2d3e:	0f 84 4c 06 00 00    	je     3390 <parse_expression_precedence+0x8d0>
    2d44:	8b 13                	mov    (%ebx),%edx
    2d46:	31 f6                	xor    %esi,%esi
    2d48:	e9 59 fe ff ff       	jmp    2ba6 <parse_expression_precedence+0xe6>
    2d4d:	8d 76 00             	lea    0x0(%esi),%esi
    2d50:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
    2d57:	89 d8                	mov    %ebx,%eax
    2d59:	88 4d c0             	mov    %cl,-0x40(%ebp)
    2d5c:	e8 af f3 ff ff       	call   2110 <next_token>
    2d61:	8a 4d c0             	mov    -0x40(%ebp),%cl
    2d64:	8b 03                	mov    (%ebx),%eax
    2d66:	85 c0                	test   %eax,%eax
    2d68:	0f 85 e0 fe ff ff    	jne    2c4e <parse_expression_precedence+0x18e>
    2d6e:	83 ec 0c             	sub    $0xc,%esp
    2d71:	81 e1 ff 00 00 00    	and    $0xff,%ecx
    2d77:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    2d7a:	51                   	push   %ecx
    2d7b:	50                   	push   %eax
    2d7c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    2d7f:	56                   	push   %esi
    2d80:	50                   	push   %eax
    2d81:	57                   	push   %edi
    2d82:	e8 f9 ba 00 00       	call   e880 <bithenge_subblob_expression>
    2d87:	83 c4 20             	add    $0x20,%esp
    2d8a:	85 c0                	test   %eax,%eax
    2d8c:	0f 84 0b fe ff ff    	je     2b9d <parse_expression_precedence+0xdd>
    2d92:	8b 13                	mov    (%ebx),%edx
    2d94:	31 f6                	xor    %esi,%esi
    2d96:	85 d2                	test   %edx,%edx
    2d98:	0f 85 08 fe ff ff    	jne    2ba6 <parse_expression_precedence+0xe6>
    2d9e:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    2da5:	0f 84 84 06 00 00    	je     342f <parse_expression_precedence+0x96f>
    2dab:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    2db2:	ff ff ff 
    2db5:	89 03                	mov    %eax,(%ebx)
    2db7:	89 c2                	mov    %eax,%edx
    2db9:	31 f6                	xor    %esi,%esi
    2dbb:	e9 e6 fd ff ff       	jmp    2ba6 <parse_expression_precedence+0xe6>
    2dc0:	ba 85 13 01 00       	mov    $0x11385,%edx
    2dc5:	89 d8                	mov    %ebx,%eax
    2dc7:	88 4d c0             	mov    %cl,-0x40(%ebp)
    2dca:	e8 41 f2 ff ff       	call   2010 <syntax_error.part.2>
    2dcf:	8a 4d c0             	mov    -0x40(%ebp),%cl
    2dd2:	eb 90                	jmp    2d64 <parse_expression_precedence+0x2a4>
    2dd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    2dd8:	b9 0d 00 00 00       	mov    $0xd,%ecx
    2ddd:	bf 01 00 00 00       	mov    $0x1,%edi
    2de2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    2de8:	39 7d bc             	cmp    %edi,-0x44(%ebp)
    2deb:	0f 83 02 fe ff ff    	jae    2bf3 <parse_expression_precedence+0x133>
    2df1:	89 d8                	mov    %ebx,%eax
    2df3:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
    2df6:	e8 15 f3 ff ff       	call   2110 <next_token>
    2dfb:	89 fa                	mov    %edi,%edx
    2dfd:	89 d8                	mov    %ebx,%eax
    2dff:	e8 bc fc ff ff       	call   2ac0 <parse_expression_precedence>
    2e04:	8b 3b                	mov    (%ebx),%edi
    2e06:	85 ff                	test   %edi,%edi
    2e08:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    2e0b:	0f 85 40 03 00 00    	jne    3151 <parse_expression_precedence+0x691>
    2e11:	8b 55 d0             	mov    -0x30(%ebp),%edx
    2e14:	50                   	push   %eax
    2e15:	52                   	push   %edx
    2e16:	51                   	push   %ecx
    2e17:	56                   	push   %esi
    2e18:	e8 43 b8 00 00       	call   e660 <bithenge_binary_expression>
    2e1d:	83 c4 10             	add    $0x10,%esp
    2e20:	85 c0                	test   %eax,%eax
    2e22:	0f 85 26 04 00 00    	jne    324e <parse_expression_precedence+0x78e>
    2e28:	8b 13                	mov    (%ebx),%edx
    2e2a:	e9 7d fd ff ff       	jmp    2bac <parse_expression_precedence+0xec>
    2e2f:	90                   	nop
    2e30:	83 f8 83             	cmp    $0xffffff83,%eax
    2e33:	0f 84 8f 01 00 00    	je     2fc8 <parse_expression_precedence+0x508>
    2e39:	7e 5d                	jle    2e98 <parse_expression_precedence+0x3d8>
    2e3b:	83 f8 88             	cmp    $0xffffff88,%eax
    2e3e:	0f 84 9c 01 00 00    	je     2fe0 <parse_expression_precedence+0x520>
    2e44:	83 f8 8a             	cmp    $0xffffff8a,%eax
    2e47:	0f 84 b3 01 00 00    	je     3000 <parse_expression_precedence+0x540>
    2e4d:	83 f8 85             	cmp    $0xffffff85,%eax
    2e50:	0f 85 9d fd ff ff    	jne    2bf3 <parse_expression_precedence+0x133>
    2e56:	b9 09 00 00 00       	mov    $0x9,%ecx
    2e5b:	bf 03 00 00 00       	mov    $0x3,%edi
    2e60:	eb 86                	jmp    2de8 <parse_expression_precedence+0x328>
    2e62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    2e68:	83 f8 3c             	cmp    $0x3c,%eax
    2e6b:	0f 84 47 01 00 00    	je     2fb8 <parse_expression_precedence+0x4f8>
    2e71:	83 f8 3e             	cmp    $0x3e,%eax
    2e74:	0f 84 2e 01 00 00    	je     2fa8 <parse_expression_precedence+0x4e8>
    2e7a:	83 f8 2d             	cmp    $0x2d,%eax
    2e7d:	0f 85 70 fd ff ff    	jne    2bf3 <parse_expression_precedence+0x133>
    2e83:	b9 02 00 00 00       	mov    $0x2,%ecx
    2e88:	bf 04 00 00 00       	mov    $0x4,%edi
    2e8d:	e9 56 ff ff ff       	jmp    2de8 <parse_expression_precedence+0x328>
    2e92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    2e98:	83 f8 81             	cmp    $0xffffff81,%eax
    2e9b:	0f 84 4f 01 00 00    	je     2ff0 <parse_expression_precedence+0x530>
    2ea1:	83 f8 82             	cmp    $0xffffff82,%eax
    2ea4:	0f 85 49 fd ff ff    	jne    2bf3 <parse_expression_precedence+0x133>
    2eaa:	b9 0f 00 00 00       	mov    $0xf,%ecx
    2eaf:	eb d7                	jmp    2e88 <parse_expression_precedence+0x3c8>
    2eb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    2eb8:	ba 2c 14 01 00       	mov    $0x1142c,%edx
    2ebd:	89 d8                	mov    %ebx,%eax
    2ebf:	e8 4c f1 ff ff       	call   2010 <syntax_error.part.2>
    2ec4:	31 f6                	xor    %esi,%esi
    2ec6:	8b 03                	mov    (%ebx),%eax
    2ec8:	85 c0                	test   %eax,%eax
    2eca:	0f 85 40 fe ff ff    	jne    2d10 <parse_expression_precedence+0x250>
    2ed0:	50                   	push   %eax
    2ed1:	8d 45 d8             	lea    -0x28(%ebp),%eax
    2ed4:	6a 01                	push   $0x1
    2ed6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
    2edd:	56                   	push   %esi
    2ede:	50                   	push   %eax
    2edf:	e8 bc 8b 00 00       	call   baa0 <bithenge_new_string_node>
    2ee4:	83 c4 10             	add    $0x10,%esp
    2ee7:	85 c0                	test   %eax,%eax
    2ee9:	0f 85 91 03 00 00    	jne    3280 <parse_expression_precedence+0x7c0>
    2eef:	8b 4d d8             	mov    -0x28(%ebp),%ecx
    2ef2:	8d 45 dc             	lea    -0x24(%ebp),%eax
    2ef5:	52                   	push   %edx
    2ef6:	52                   	push   %edx
    2ef7:	51                   	push   %ecx
    2ef8:	50                   	push   %eax
    2ef9:	e8 c2 b8 00 00       	call   e7c0 <bithenge_const_expression>
    2efe:	83 c4 10             	add    $0x10,%esp
    2f01:	85 c0                	test   %eax,%eax
    2f03:	0f 85 77 03 00 00    	jne    3280 <parse_expression_precedence+0x7c0>
    2f09:	8b 45 dc             	mov    -0x24(%ebp),%eax
    2f0c:	50                   	push   %eax
    2f0d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    2f10:	50                   	push   %eax
    2f11:	6a 0e                	push   $0xe
    2f13:	57                   	push   %edi
    2f14:	e8 47 b7 00 00       	call   e660 <bithenge_binary_expression>
    2f19:	83 c4 10             	add    $0x10,%esp
    2f1c:	85 c0                	test   %eax,%eax
    2f1e:	0f 84 79 fc ff ff    	je     2b9d <parse_expression_precedence+0xdd>
    2f24:	8b 13                	mov    (%ebx),%edx
    2f26:	85 d2                	test   %edx,%edx
    2f28:	0f 85 18 fe ff ff    	jne    2d46 <parse_expression_precedence+0x286>
    2f2e:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    2f35:	0f 84 d7 05 00 00    	je     3512 <parse_expression_precedence+0xa52>
    2f3b:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    2f42:	ff ff ff 
    2f45:	89 03                	mov    %eax,(%ebx)
    2f47:	89 c2                	mov    %eax,%edx
    2f49:	31 f6                	xor    %esi,%esi
    2f4b:	e9 56 fc ff ff       	jmp    2ba6 <parse_expression_precedence+0xe6>
    2f50:	89 d8                	mov    %ebx,%eax
    2f52:	e8 b9 f1 ff ff       	call   2110 <next_token>
    2f57:	50                   	push   %eax
    2f58:	50                   	push   %eax
    2f59:	31 c0                	xor    %eax,%eax
    2f5b:	83 fe 97             	cmp    $0xffffff97,%esi
    2f5e:	0f 94 c0             	sete   %al
    2f61:	50                   	push   %eax
    2f62:	8d 45 e0             	lea    -0x20(%ebp),%eax
    2f65:	50                   	push   %eax
    2f66:	e8 85 8a 00 00       	call   b9f0 <bithenge_new_boolean_node>
    2f6b:	83 c4 10             	add    $0x10,%esp
    2f6e:	85 c0                	test   %eax,%eax
    2f70:	0f 84 5c 02 00 00    	je     31d2 <parse_expression_precedence+0x712>
    2f76:	8b 13                	mov    (%ebx),%edx
    2f78:	31 f6                	xor    %esi,%esi
    2f7a:	85 d2                	test   %edx,%edx
    2f7c:	0f 85 97 fb ff ff    	jne    2b19 <parse_expression_precedence+0x59>
    2f82:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    2f89:	0f 84 e9 04 00 00    	je     3478 <parse_expression_precedence+0x9b8>
    2f8f:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    2f96:	ff ff ff 
    2f99:	89 03                	mov    %eax,(%ebx)
    2f9b:	89 c2                	mov    %eax,%edx
    2f9d:	31 f6                	xor    %esi,%esi
    2f9f:	e9 75 fb ff ff       	jmp    2b19 <parse_expression_precedence+0x59>
    2fa4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    2fa8:	b9 07 00 00 00       	mov    $0x7,%ecx
    2fad:	e9 a9 fe ff ff       	jmp    2e5b <parse_expression_precedence+0x39b>
    2fb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    2fb8:	b9 06 00 00 00       	mov    $0x6,%ecx
    2fbd:	e9 99 fe ff ff       	jmp    2e5b <parse_expression_precedence+0x39b>
    2fc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    2fc8:	b9 0a 00 00 00       	mov    $0xa,%ecx
    2fcd:	bf 02 00 00 00       	mov    $0x2,%edi
    2fd2:	e9 11 fe ff ff       	jmp    2de8 <parse_expression_precedence+0x328>
    2fd7:	90                   	nop
    2fd8:	b9 0b 00 00 00       	mov    $0xb,%ecx
    2fdd:	eb ee                	jmp    2fcd <parse_expression_precedence+0x50d>
    2fdf:	90                   	nop
    2fe0:	b9 04 00 00 00       	mov    $0x4,%ecx
    2fe5:	bf 05 00 00 00       	mov    $0x5,%edi
    2fea:	e9 f9 fd ff ff       	jmp    2de8 <parse_expression_precedence+0x328>
    2fef:	90                   	nop
    2ff0:	b9 0c 00 00 00       	mov    $0xc,%ecx
    2ff5:	e9 e3 fd ff ff       	jmp    2ddd <parse_expression_precedence+0x31d>
    2ffa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    3000:	b9 08 00 00 00       	mov    $0x8,%ecx
    3005:	e9 51 fe ff ff       	jmp    2e5b <parse_expression_precedence+0x39b>
    300a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    3010:	b9 01 00 00 00       	mov    $0x1,%ecx
    3015:	e9 6e fe ff ff       	jmp    2e88 <parse_expression_precedence+0x3c8>
    301a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    3020:	b9 03 00 00 00       	mov    $0x3,%ecx
    3025:	eb be                	jmp    2fe5 <parse_expression_precedence+0x525>
    3027:	90                   	nop
    3028:	b9 05 00 00 00       	mov    $0x5,%ecx
    302d:	eb b6                	jmp    2fe5 <parse_expression_precedence+0x525>
    302f:	90                   	nop
    3030:	8b 03                	mov    (%ebx),%eax
    3032:	85 c0                	test   %eax,%eax
    3034:	75 12                	jne    3048 <parse_expression_precedence+0x588>
    3036:	ba d5 13 01 00       	mov    $0x113d5,%edx
    303b:	89 d8                	mov    %ebx,%eax
    303d:	e8 ce ef ff ff       	call   2010 <syntax_error.part.2>
    3042:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    3048:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    304b:	85 d2                	test   %edx,%edx
    304d:	74 21                	je     3070 <parse_expression_precedence+0x5b0>
    304f:	8b 0a                	mov    (%edx),%ecx
    3051:	85 c9                	test   %ecx,%ecx
    3053:	0f 84 23 05 00 00    	je     357c <parse_expression_precedence+0xabc>
    3059:	8b 42 04             	mov    0x4(%edx),%eax
    305c:	85 c0                	test   %eax,%eax
    305e:	0f 84 06 05 00 00    	je     356a <parse_expression_precedence+0xaaa>
    3064:	48                   	dec    %eax
    3065:	89 42 04             	mov    %eax,0x4(%edx)
    3068:	85 c0                	test   %eax,%eax
    306a:	0f 84 bf 00 00 00    	je     312f <parse_expression_precedence+0x66f>
    3070:	85 f6                	test   %esi,%esi
    3072:	0f 84 f9 03 00 00    	je     3471 <parse_expression_precedence+0x9b1>
    3078:	8b 16                	mov    (%esi),%edx
    307a:	85 d2                	test   %edx,%edx
    307c:	0f 84 fa 04 00 00    	je     357c <parse_expression_precedence+0xabc>
    3082:	8b 46 04             	mov    0x4(%esi),%eax
    3085:	85 c0                	test   %eax,%eax
    3087:	0f 84 dd 04 00 00    	je     356a <parse_expression_precedence+0xaaa>
    308d:	48                   	dec    %eax
    308e:	89 46 04             	mov    %eax,0x4(%esi)
    3091:	85 c0                	test   %eax,%eax
    3093:	0f 84 a5 00 00 00    	je     313e <parse_expression_precedence+0x67e>
    3099:	8b 13                	mov    (%ebx),%edx
    309b:	31 f6                	xor    %esi,%esi
    309d:	e9 04 fb ff ff       	jmp    2ba6 <parse_expression_precedence+0xe6>
    30a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    30a8:	8b b3 24 10 00 00    	mov    0x1024(%ebx),%esi
    30ae:	89 d8                	mov    %ebx,%eax
    30b0:	c7 83 24 10 00 00 00 	movl   $0x0,0x1024(%ebx)
    30b7:	00 00 00 
    30ba:	e8 51 f0 ff ff       	call   2110 <next_token>
    30bf:	e9 02 fe ff ff       	jmp    2ec6 <parse_expression_precedence+0x406>
    30c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    30c8:	8b 83 30 10 00 00    	mov    0x1030(%ebx),%eax
    30ce:	31 f6                	xor    %esi,%esi
    30d0:	85 c0                	test   %eax,%eax
    30d2:	7f 0f                	jg     30e3 <parse_expression_precedence+0x623>
    30d4:	eb 32                	jmp    3108 <parse_expression_precedence+0x648>
    30d6:	66 90                	xchg   %ax,%ax
    30d8:	46                   	inc    %esi
    30d9:	8b 83 30 10 00 00    	mov    0x1030(%ebx),%eax
    30df:	39 c6                	cmp    %eax,%esi
    30e1:	7d 25                	jge    3108 <parse_expression_precedence+0x648>
    30e3:	8b 8b 24 10 00 00    	mov    0x1024(%ebx),%ecx
    30e9:	8b 83 2c 10 00 00    	mov    0x102c(%ebx),%eax
    30ef:	52                   	push   %edx
    30f0:	52                   	push   %edx
    30f1:	51                   	push   %ecx
    30f2:	8b 3c b0             	mov    (%eax,%esi,4),%edi
    30f5:	57                   	push   %edi
    30f6:	e8 c5 ee 00 00       	call   11fc0 <str_cmp@plt>
    30fb:	83 c4 10             	add    $0x10,%esp
    30fe:	85 c0                	test   %eax,%eax
    3100:	75 d6                	jne    30d8 <parse_expression_precedence+0x618>
    3102:	8b 83 30 10 00 00    	mov    0x1030(%ebx),%eax
    3108:	39 c6                	cmp    %eax,%esi
    310a:	0f 85 1f 01 00 00    	jne    322f <parse_expression_precedence+0x76f>
    3110:	8b 13                	mov    (%ebx),%edx
    3112:	31 f6                	xor    %esi,%esi
    3114:	85 d2                	test   %edx,%edx
    3116:	0f 85 fd f9 ff ff    	jne    2b19 <parse_expression_precedence+0x59>
    311c:	ba 90 13 01 00       	mov    $0x11390,%edx
    3121:	89 d8                	mov    %ebx,%eax
    3123:	e8 e8 ee ff ff       	call   2010 <syntax_error.part.2>
    3128:	8b 13                	mov    (%ebx),%edx
    312a:	e9 ea f9 ff ff       	jmp    2b19 <parse_expression_precedence+0x59>
    312f:	83 ec 0c             	sub    $0xc,%esp
    3132:	52                   	push   %edx
    3133:	ff 51 04             	call   *0x4(%ecx)
    3136:	83 c4 10             	add    $0x10,%esp
    3139:	e9 32 ff ff ff       	jmp    3070 <parse_expression_precedence+0x5b0>
    313e:	83 ec 0c             	sub    $0xc,%esp
    3141:	56                   	push   %esi
    3142:	31 f6                	xor    %esi,%esi
    3144:	ff 52 04             	call   *0x4(%edx)
    3147:	8b 13                	mov    (%ebx),%edx
    3149:	83 c4 10             	add    $0x10,%esp
    314c:	e9 55 fa ff ff       	jmp    2ba6 <parse_expression_precedence+0xe6>
    3151:	85 c0                	test   %eax,%eax
    3153:	74 21                	je     3176 <parse_expression_precedence+0x6b6>
    3155:	8b 08                	mov    (%eax),%ecx
    3157:	85 c9                	test   %ecx,%ecx
    3159:	0f 84 1d 04 00 00    	je     357c <parse_expression_precedence+0xabc>
    315f:	8b 50 04             	mov    0x4(%eax),%edx
    3162:	85 d2                	test   %edx,%edx
    3164:	0f 84 00 04 00 00    	je     356a <parse_expression_precedence+0xaaa>
    316a:	4a                   	dec    %edx
    316b:	89 50 04             	mov    %edx,0x4(%eax)
    316e:	85 d2                	test   %edx,%edx
    3170:	0f 84 dd 01 00 00    	je     3353 <parse_expression_precedence+0x893>
    3176:	8b 55 d0             	mov    -0x30(%ebp),%edx
    3179:	85 d2                	test   %edx,%edx
    317b:	74 21                	je     319e <parse_expression_precedence+0x6de>
    317d:	8b 0a                	mov    (%edx),%ecx
    317f:	85 c9                	test   %ecx,%ecx
    3181:	0f 84 f5 03 00 00    	je     357c <parse_expression_precedence+0xabc>
    3187:	8b 42 04             	mov    0x4(%edx),%eax
    318a:	85 c0                	test   %eax,%eax
    318c:	0f 84 d8 03 00 00    	je     356a <parse_expression_precedence+0xaaa>
    3192:	48                   	dec    %eax
    3193:	89 42 04             	mov    %eax,0x4(%edx)
    3196:	85 c0                	test   %eax,%eax
    3198:	0f 84 a4 01 00 00    	je     3342 <parse_expression_precedence+0x882>
    319e:	31 c0                	xor    %eax,%eax
    31a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
    31a3:	5b                   	pop    %ebx
    31a4:	5e                   	pop    %esi
    31a5:	5f                   	pop    %edi
    31a6:	5d                   	pop    %ebp
    31a7:	c3                   	ret    
    31a8:	89 d8                	mov    %ebx,%eax
    31aa:	8b b3 24 10 00 00    	mov    0x1024(%ebx),%esi
    31b0:	8b bb 28 10 00 00    	mov    0x1028(%ebx),%edi
    31b6:	e8 55 ef ff ff       	call   2110 <next_token>
    31bb:	50                   	push   %eax
    31bc:	8d 45 e0             	lea    -0x20(%ebp),%eax
    31bf:	57                   	push   %edi
    31c0:	56                   	push   %esi
    31c1:	50                   	push   %eax
    31c2:	e8 69 88 00 00       	call   ba30 <bithenge_new_integer_node>
    31c7:	83 c4 10             	add    $0x10,%esp
    31ca:	85 c0                	test   %eax,%eax
    31cc:	0f 85 a4 fd ff ff    	jne    2f76 <parse_expression_precedence+0x4b6>
    31d2:	50                   	push   %eax
    31d3:	50                   	push   %eax
    31d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
    31d7:	50                   	push   %eax
    31d8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    31db:	50                   	push   %eax
    31dc:	e8 df b5 00 00       	call   e7c0 <bithenge_const_expression>
    31e1:	83 c4 10             	add    $0x10,%esp
    31e4:	85 c0                	test   %eax,%eax
    31e6:	0f 85 8a fd ff ff    	jne    2f76 <parse_expression_precedence+0x4b6>
    31ec:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    31ef:	8b 13                	mov    (%ebx),%edx
    31f1:	e9 23 f9 ff ff       	jmp    2b19 <parse_expression_precedence+0x59>
    31f6:	89 d8                	mov    %ebx,%eax
    31f8:	e8 13 ef ff ff       	call   2110 <next_token>
    31fd:	83 ec 0c             	sub    $0xc,%esp
    3200:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    3203:	c6 83 34 10 00 00 01 	movb   $0x1,0x1034(%ebx)
    320a:	50                   	push   %eax
    320b:	e8 30 b5 00 00       	call   e740 <bithenge_in_node_expression>
    3210:	83 c4 10             	add    $0x10,%esp
    3213:	85 c0                	test   %eax,%eax
    3215:	74 d5                	je     31ec <parse_expression_precedence+0x72c>
    3217:	e9 5a fd ff ff       	jmp    2f76 <parse_expression_precedence+0x4b6>
    321c:	ba c1 13 01 00       	mov    $0x113c1,%edx
    3221:	89 d8                	mov    %ebx,%eax
    3223:	e8 e8 ed ff ff       	call   2010 <syntax_error.part.2>
    3228:	8b 13                	mov    (%ebx),%edx
    322a:	e9 ea f8 ff ff       	jmp    2b19 <parse_expression_precedence+0x59>
    322f:	89 d8                	mov    %ebx,%eax
    3231:	e8 da ee ff ff       	call   2110 <next_token>
    3236:	50                   	push   %eax
    3237:	50                   	push   %eax
    3238:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    323b:	56                   	push   %esi
    323c:	50                   	push   %eax
    323d:	e8 3e b5 00 00       	call   e780 <bithenge_param_expression>
    3242:	83 c4 10             	add    $0x10,%esp
    3245:	85 c0                	test   %eax,%eax
    3247:	74 a3                	je     31ec <parse_expression_precedence+0x72c>
    3249:	e9 28 fd ff ff       	jmp    2f76 <parse_expression_precedence+0x4b6>
    324e:	8b 13                	mov    (%ebx),%edx
    3250:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    3257:	85 d2                	test   %edx,%edx
    3259:	0f 85 4d f9 ff ff    	jne    2bac <parse_expression_precedence+0xec>
    325f:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    3266:	0f 84 c3 02 00 00    	je     352f <parse_expression_precedence+0xa6f>
    326c:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    3273:	ff ff ff 
    3276:	89 03                	mov    %eax,(%ebx)
    3278:	89 c2                	mov    %eax,%edx
    327a:	e9 2d f9 ff ff       	jmp    2bac <parse_expression_precedence+0xec>
    327f:	90                   	nop
    3280:	8b 13                	mov    (%ebx),%edx
    3282:	85 d2                	test   %edx,%edx
    3284:	0f 84 e6 00 00 00    	je     3370 <parse_expression_precedence+0x8b0>
    328a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    328d:	85 c9                	test   %ecx,%ecx
    328f:	0f 84 b1 fa ff ff    	je     2d46 <parse_expression_precedence+0x286>
    3295:	8b 31                	mov    (%ecx),%esi
    3297:	85 f6                	test   %esi,%esi
    3299:	0f 84 dd 02 00 00    	je     357c <parse_expression_precedence+0xabc>
    329f:	8b 41 04             	mov    0x4(%ecx),%eax
    32a2:	85 c0                	test   %eax,%eax
    32a4:	0f 84 c0 02 00 00    	je     356a <parse_expression_precedence+0xaaa>
    32aa:	48                   	dec    %eax
    32ab:	89 41 04             	mov    %eax,0x4(%ecx)
    32ae:	85 c0                	test   %eax,%eax
    32b0:	0f 85 90 fa ff ff    	jne    2d46 <parse_expression_precedence+0x286>
    32b6:	83 ec 0c             	sub    $0xc,%esp
    32b9:	51                   	push   %ecx
    32ba:	ff 56 04             	call   *0x4(%esi)
    32bd:	8b 13                	mov    (%ebx),%edx
    32bf:	83 c4 10             	add    $0x10,%esp
    32c2:	31 f6                	xor    %esi,%esi
    32c4:	e9 dd f8 ff ff       	jmp    2ba6 <parse_expression_precedence+0xe6>
    32c9:	89 d8                	mov    %ebx,%eax
    32cb:	e8 40 ee ff ff       	call   2110 <next_token>
    32d0:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    32d7:	0f 84 c6 00 00 00    	je     33a3 <parse_expression_precedence+0x8e3>
    32dd:	8b 03                	mov    (%ebx),%eax
    32df:	85 c0                	test   %eax,%eax
    32e1:	0f 84 ae 01 00 00    	je     3495 <parse_expression_precedence+0x9d5>
    32e7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    32ee:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    32f5:	31 c0                	xor    %eax,%eax
    32f7:	83 ec 0c             	sub    $0xc,%esp
    32fa:	50                   	push   %eax
    32fb:	e8 f0 ed 00 00       	call   120f0 <free@plt>
    3300:	8b 55 e0             	mov    -0x20(%ebp),%edx
    3303:	58                   	pop    %eax
    3304:	52                   	push   %edx
    3305:	e8 16 83 00 00       	call   b620 <bithenge_node_dec_ref>
    330a:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    330d:	83 c4 10             	add    $0x10,%esp
    3310:	85 f6                	test   %esi,%esi
    3312:	0f 84 10 ff ff ff    	je     3228 <parse_expression_precedence+0x768>
    3318:	8b 16                	mov    (%esi),%edx
    331a:	85 d2                	test   %edx,%edx
    331c:	0f 84 5a 02 00 00    	je     357c <parse_expression_precedence+0xabc>
    3322:	8b 46 04             	mov    0x4(%esi),%eax
    3325:	85 c0                	test   %eax,%eax
    3327:	0f 84 3d 02 00 00    	je     356a <parse_expression_precedence+0xaaa>
    332d:	48                   	dec    %eax
    332e:	89 46 04             	mov    %eax,0x4(%esi)
    3331:	85 c0                	test   %eax,%eax
    3333:	0f 84 a9 01 00 00    	je     34e2 <parse_expression_precedence+0xa22>
    3339:	8b 13                	mov    (%ebx),%edx
    333b:	31 f6                	xor    %esi,%esi
    333d:	e9 d7 f7 ff ff       	jmp    2b19 <parse_expression_precedence+0x59>
    3342:	83 ec 0c             	sub    $0xc,%esp
    3345:	52                   	push   %edx
    3346:	ff 51 04             	call   *0x4(%ecx)
    3349:	83 c4 10             	add    $0x10,%esp
    334c:	31 c0                	xor    %eax,%eax
    334e:	e9 4d fe ff ff       	jmp    31a0 <parse_expression_precedence+0x6e0>
    3353:	83 ec 0c             	sub    $0xc,%esp
    3356:	50                   	push   %eax
    3357:	ff 51 04             	call   *0x4(%ecx)
    335a:	8b 0b                	mov    (%ebx),%ecx
    335c:	83 c4 10             	add    $0x10,%esp
    335f:	85 c9                	test   %ecx,%ecx
    3361:	0f 84 8c f8 ff ff    	je     2bf3 <parse_expression_precedence+0x133>
    3367:	e9 0a fe ff ff       	jmp    3176 <parse_expression_precedence+0x6b6>
    336c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    3370:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    3377:	0f 84 78 01 00 00    	je     34f5 <parse_expression_precedence+0xa35>
    337d:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    3384:	ff ff ff 
    3387:	89 03                	mov    %eax,(%ebx)
    3389:	89 c2                	mov    %eax,%edx
    338b:	e9 fa fe ff ff       	jmp    328a <parse_expression_precedence+0x7ca>
    3390:	83 ec 0c             	sub    $0xc,%esp
    3393:	31 f6                	xor    %esi,%esi
    3395:	52                   	push   %edx
    3396:	ff 51 04             	call   *0x4(%ecx)
    3399:	8b 13                	mov    (%ebx),%edx
    339b:	83 c4 10             	add    $0x10,%esp
    339e:	e9 03 f8 ff ff       	jmp    2ba6 <parse_expression_precedence+0xe6>
    33a3:	8b b3 24 10 00 00    	mov    0x1024(%ebx),%esi
    33a9:	89 d8                	mov    %ebx,%eax
    33ab:	c7 83 24 10 00 00 00 	movl   $0x0,0x1024(%ebx)
    33b2:	00 00 00 
    33b5:	e8 56 ed ff ff       	call   2110 <next_token>
    33ba:	8b 03                	mov    (%ebx),%eax
    33bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    33c3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    33ca:	85 c0                	test   %eax,%eax
    33cc:	0f 85 09 01 00 00    	jne    34db <parse_expression_precedence+0xa1b>
    33d2:	50                   	push   %eax
    33d3:	8d 45 e0             	lea    -0x20(%ebp),%eax
    33d6:	6a 01                	push   $0x1
    33d8:	56                   	push   %esi
    33d9:	50                   	push   %eax
    33da:	e8 c1 86 00 00       	call   baa0 <bithenge_new_string_node>
    33df:	8b 13                	mov    (%ebx),%edx
    33e1:	83 c4 10             	add    $0x10,%esp
    33e4:	89 c6                	mov    %eax,%esi
    33e6:	85 d2                	test   %edx,%edx
    33e8:	75 08                	jne    33f2 <parse_expression_precedence+0x932>
    33ea:	85 c0                	test   %eax,%eax
    33ec:	0f 85 c9 00 00 00    	jne    34bb <parse_expression_precedence+0x9fb>
    33f2:	85 d2                	test   %edx,%edx
    33f4:	0f 85 69 01 00 00    	jne    3563 <parse_expression_precedence+0xaa3>
    33fa:	50                   	push   %eax
    33fb:	50                   	push   %eax
    33fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
    33ff:	50                   	push   %eax
    3400:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    3403:	50                   	push   %eax
    3404:	e8 17 b4 00 00       	call   e820 <bithenge_scope_member_expression>
    3409:	83 c4 10             	add    $0x10,%esp
    340c:	89 c6                	mov    %eax,%esi
    340e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    3415:	85 c0                	test   %eax,%eax
    3417:	0f 85 8d 00 00 00    	jne    34aa <parse_expression_precedence+0x9ea>
    341d:	8b 13                	mov    (%ebx),%edx
    341f:	85 d2                	test   %edx,%edx
    3421:	0f 85 3c 01 00 00    	jne    3563 <parse_expression_precedence+0xaa3>
    3427:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    342a:	e9 ea f6 ff ff       	jmp    2b19 <parse_expression_precedence+0x59>
    342f:	83 ec 0c             	sub    $0xc,%esp
    3432:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    3435:	8b 83 24 10 00 00    	mov    0x1024(%ebx),%eax
    343b:	50                   	push   %eax
    343c:	e8 af ec 00 00       	call   120f0 <free@plt>
    3441:	83 c4 10             	add    $0x10,%esp
    3444:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    3447:	e9 5f f9 ff ff       	jmp    2dab <parse_expression_precedence+0x2eb>
    344c:	89 d8                	mov    %ebx,%eax
    344e:	e8 bd ec ff ff       	call   2110 <next_token>
    3453:	31 d2                	xor    %edx,%edx
    3455:	89 d8                	mov    %ebx,%eax
    3457:	e8 64 f6 ff ff       	call   2ac0 <parse_expression_precedence>
    345c:	ba 29 00 00 00       	mov    $0x29,%edx
    3461:	89 c6                	mov    %eax,%esi
    3463:	89 d8                	mov    %ebx,%eax
    3465:	e8 36 f5 ff ff       	call   29a0 <expect>
    346a:	8b 13                	mov    (%ebx),%edx
    346c:	e9 a8 f6 ff ff       	jmp    2b19 <parse_expression_precedence+0x59>
    3471:	8b 13                	mov    (%ebx),%edx
    3473:	e9 2e f7 ff ff       	jmp    2ba6 <parse_expression_precedence+0xe6>
    3478:	83 ec 0c             	sub    $0xc,%esp
    347b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    347e:	8b 83 24 10 00 00    	mov    0x1024(%ebx),%eax
    3484:	50                   	push   %eax
    3485:	e8 66 ec 00 00       	call   120f0 <free@plt>
    348a:	83 c4 10             	add    $0x10,%esp
    348d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    3490:	e9 fa fa ff ff       	jmp    2f8f <parse_expression_precedence+0x4cf>
    3495:	89 d8                	mov    %ebx,%eax
    3497:	ba 2c 14 01 00       	mov    $0x1142c,%edx
    349c:	e8 6f eb ff ff       	call   2010 <syntax_error.part.2>
    34a1:	31 f6                	xor    %esi,%esi
    34a3:	8b 03                	mov    (%ebx),%eax
    34a5:	e9 12 ff ff ff       	jmp    33bc <parse_expression_precedence+0x8fc>
    34aa:	8b 3b                	mov    (%ebx),%edi
    34ac:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    34b3:	85 ff                	test   %edi,%edi
    34b5:	0f 85 a8 00 00 00    	jne    3563 <parse_expression_precedence+0xaa3>
    34bb:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    34c2:	0f 84 84 00 00 00    	je     354c <parse_expression_precedence+0xa8c>
    34c8:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    34cf:	ff ff ff 
    34d2:	89 33                	mov    %esi,(%ebx)
    34d4:	31 c0                	xor    %eax,%eax
    34d6:	e9 1c fe ff ff       	jmp    32f7 <parse_expression_precedence+0x837>
    34db:	89 f0                	mov    %esi,%eax
    34dd:	e9 15 fe ff ff       	jmp    32f7 <parse_expression_precedence+0x837>
    34e2:	83 ec 0c             	sub    $0xc,%esp
    34e5:	56                   	push   %esi
    34e6:	31 f6                	xor    %esi,%esi
    34e8:	ff 52 04             	call   *0x4(%edx)
    34eb:	8b 13                	mov    (%ebx),%edx
    34ed:	83 c4 10             	add    $0x10,%esp
    34f0:	e9 24 f6 ff ff       	jmp    2b19 <parse_expression_precedence+0x59>
    34f5:	83 ec 0c             	sub    $0xc,%esp
    34f8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    34fb:	8b 83 24 10 00 00    	mov    0x1024(%ebx),%eax
    3501:	50                   	push   %eax
    3502:	e8 e9 eb 00 00       	call   120f0 <free@plt>
    3507:	83 c4 10             	add    $0x10,%esp
    350a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    350d:	e9 6b fe ff ff       	jmp    337d <parse_expression_precedence+0x8bd>
    3512:	83 ec 0c             	sub    $0xc,%esp
    3515:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    3518:	8b 83 24 10 00 00    	mov    0x1024(%ebx),%eax
    351e:	50                   	push   %eax
    351f:	e8 cc eb 00 00       	call   120f0 <free@plt>
    3524:	83 c4 10             	add    $0x10,%esp
    3527:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    352a:	e9 0c fa ff ff       	jmp    2f3b <parse_expression_precedence+0x47b>
    352f:	83 ec 0c             	sub    $0xc,%esp
    3532:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    3535:	8b 83 24 10 00 00    	mov    0x1024(%ebx),%eax
    353b:	50                   	push   %eax
    353c:	e8 af eb 00 00       	call   120f0 <free@plt>
    3541:	83 c4 10             	add    $0x10,%esp
    3544:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    3547:	e9 20 fd ff ff       	jmp    326c <parse_expression_precedence+0x7ac>
    354c:	83 ec 0c             	sub    $0xc,%esp
    354f:	8b 8b 24 10 00 00    	mov    0x1024(%ebx),%ecx
    3555:	51                   	push   %ecx
    3556:	e8 95 eb 00 00       	call   120f0 <free@plt>
    355b:	83 c4 10             	add    $0x10,%esp
    355e:	e9 65 ff ff ff       	jmp    34c8 <parse_expression_precedence+0xa08>
    3563:	31 c0                	xor    %eax,%eax
    3565:	e9 8d fd ff ff       	jmp    32f7 <parse_expression_precedence+0x837>
    356a:	50                   	push   %eax
    356b:	6a 4c                	push   $0x4c
    356d:	68 a3 13 01 00       	push   $0x113a3
    3572:	68 6b 11 01 00       	push   $0x1116b
    3577:	e8 94 e9 00 00       	call   11f10 <assert_abort@plt>
    357c:	50                   	push   %eax
    357d:	6a 4b                	push   $0x4b
    357f:	68 a3 13 01 00       	push   $0x113a3
    3584:	68 61 11 01 00       	push   $0x11161
    3589:	e8 82 e9 00 00       	call   11f10 <assert_abort@plt>
    358e:	66 90                	xchg   %ax,%ax

00003590 <parse_transform>:
    3590:	55                   	push   %ebp
    3591:	89 e5                	mov    %esp,%ebp
    3593:	57                   	push   %edi
    3594:	56                   	push   %esi
    3595:	53                   	push   %ebx
    3596:	83 ec 5c             	sub    $0x5c,%esp
    3599:	89 c7                	mov    %eax,%edi
    359b:	8b 80 20 10 00 00    	mov    0x1020(%eax),%eax
    35a1:	83 f8 28             	cmp    $0x28,%eax
    35a4:	0f 84 4e 07 00 00    	je     3cf8 <parse_transform+0x768>
    35aa:	83 f8 8d             	cmp    $0xffffff8d,%eax
    35ad:	0f 84 0d 0a 00 00    	je     3fc0 <parse_transform+0xa30>
    35b3:	83 f8 86             	cmp    $0xffffff86,%eax
    35b6:	0f 84 3a 0b 00 00    	je     40f6 <parse_transform+0xb66>
    35bc:	83 f8 90             	cmp    $0xffffff90,%eax
    35bf:	0f 84 2b 0c 00 00    	je     41f0 <parse_transform+0xc60>
    35c5:	83 f8 92             	cmp    $0xffffff92,%eax
    35c8:	0f 84 9a 07 00 00    	je     3d68 <parse_transform+0x7d8>
    35ce:	83 f8 93             	cmp    $0xffffff93,%eax
    35d1:	0f 84 95 0a 00 00    	je     406c <parse_transform+0xadc>
    35d7:	83 f8 94             	cmp    $0xffffff94,%eax
    35da:	0f 84 33 0d 00 00    	je     4313 <parse_transform+0xd83>
    35e0:	83 f8 95             	cmp    $0xffffff95,%eax
    35e3:	0f 84 cb 0e 00 00    	je     44b4 <parse_transform+0xf24>
    35e9:	8b 1f                	mov    (%edi),%ebx
    35eb:	31 f6                	xor    %esi,%esi
    35ed:	85 db                	test   %ebx,%ebx
    35ef:	0f 84 13 08 00 00    	je     3e08 <parse_transform+0x878>
    35f5:	89 75 c4             	mov    %esi,-0x3c(%ebp)
    35f8:	83 f8 89             	cmp    $0xffffff89,%eax
    35fb:	0f 85 d8 08 00 00    	jne    3ed9 <parse_transform+0x949>
    3601:	c7 45 b0 04 00 00 00 	movl   $0x4,-0x50(%ebp)
    3608:	be 01 00 00 00       	mov    $0x1,%esi
    360d:	31 db                	xor    %ebx,%ebx
    360f:	90                   	nop
    3610:	89 f8                	mov    %edi,%eax
    3612:	e8 f9 ea ff ff       	call   2110 <next_token>
    3617:	8b 0f                	mov    (%edi),%ecx
    3619:	85 c9                	test   %ecx,%ecx
    361b:	74 53                	je     3670 <parse_transform+0xe0>
    361d:	85 db                	test   %ebx,%ebx
    361f:	0f 95 c1             	setne  %cl
    3622:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    3628:	83 fe 01             	cmp    $0x1,%esi
    362b:	0f 86 b4 08 00 00    	jbe    3ee5 <parse_transform+0x955>
    3631:	84 c9                	test   %cl,%cl
    3633:	0f 84 ac 08 00 00    	je     3ee5 <parse_transform+0x955>
    3639:	4e                   	dec    %esi
    363a:	8b 14 b3             	mov    (%ebx,%esi,4),%edx
    363d:	85 d2                	test   %edx,%edx
    363f:	74 e7                	je     3628 <parse_transform+0x98>
    3641:	8b 3a                	mov    (%edx),%edi
    3643:	85 ff                	test   %edi,%edi
    3645:	0f 84 85 12 00 00    	je     48d0 <parse_transform+0x1340>
    364b:	8b 42 04             	mov    0x4(%edx),%eax
    364e:	85 c0                	test   %eax,%eax
    3650:	0f 84 b9 12 00 00    	je     490f <parse_transform+0x137f>
    3656:	48                   	dec    %eax
    3657:	89 42 04             	mov    %eax,0x4(%edx)
    365a:	85 c0                	test   %eax,%eax
    365c:	75 ca                	jne    3628 <parse_transform+0x98>
    365e:	83 ec 0c             	sub    $0xc,%esp
    3661:	88 4d b4             	mov    %cl,-0x4c(%ebp)
    3664:	52                   	push   %edx
    3665:	ff 57 0c             	call   *0xc(%edi)
    3668:	83 c4 10             	add    $0x10,%esp
    366b:	8a 4d b4             	mov    -0x4c(%ebp),%cl
    366e:	eb b8                	jmp    3628 <parse_transform+0x98>
    3670:	8d 46 01             	lea    0x1(%esi),%eax
    3673:	52                   	push   %edx
    3674:	89 45 a8             	mov    %eax,-0x58(%ebp)
    3677:	52                   	push   %edx
    3678:	c1 e0 02             	shl    $0x2,%eax
    367b:	50                   	push   %eax
    367c:	53                   	push   %ebx
    367d:	e8 1e e9 00 00       	call   11fa0 <realloc@plt>
    3682:	83 c4 10             	add    $0x10,%esp
    3685:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    3688:	85 c0                	test   %eax,%eax
    368a:	0f 84 48 01 00 00    	je     37d8 <parse_transform+0x248>
    3690:	8b 1f                	mov    (%edi),%ebx
    3692:	85 db                	test   %ebx,%ebx
    3694:	0f 85 5a 12 00 00    	jne    48f4 <parse_transform+0x1364>
    369a:	8b 55 b0             	mov    -0x50(%ebp),%edx
    369d:	01 d0                	add    %edx,%eax
    369f:	89 45 ac             	mov    %eax,-0x54(%ebp)
    36a2:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    36a8:	83 f8 28             	cmp    $0x28,%eax
    36ab:	0f 84 b7 00 00 00    	je     3768 <parse_transform+0x1d8>
    36b1:	83 f8 8d             	cmp    $0xffffff8d,%eax
    36b4:	0f 84 4e 01 00 00    	je     3808 <parse_transform+0x278>
    36ba:	83 f8 86             	cmp    $0xffffff86,%eax
    36bd:	0f 84 ad 02 00 00    	je     3970 <parse_transform+0x3e0>
    36c3:	83 f8 90             	cmp    $0xffffff90,%eax
    36c6:	0f 84 5c 03 00 00    	je     3a28 <parse_transform+0x498>
    36cc:	83 f8 92             	cmp    $0xffffff92,%eax
    36cf:	0f 84 e3 01 00 00    	je     38b8 <parse_transform+0x328>
    36d5:	83 f8 93             	cmp    $0xffffff93,%eax
    36d8:	0f 84 62 03 00 00    	je     3a40 <parse_transform+0x4b0>
    36de:	83 f8 94             	cmp    $0xffffff94,%eax
    36e1:	0f 84 c9 03 00 00    	je     3ab0 <parse_transform+0x520>
    36e7:	83 f8 95             	cmp    $0xffffff95,%eax
    36ea:	0f 84 f8 03 00 00    	je     3ae8 <parse_transform+0x558>
    36f0:	ba 78 14 01 00       	mov    $0x11478,%edx
    36f5:	89 f8                	mov    %edi,%eax
    36f7:	e8 14 e9 ff ff       	call   2010 <syntax_error.part.2>
    36fc:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3702:	31 f6                	xor    %esi,%esi
    3704:	8b 55 ac             	mov    -0x54(%ebp),%edx
    3707:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
    370a:	89 32                	mov    %esi,(%edx)
    370c:	8b 55 b0             	mov    -0x50(%ebp),%edx
    370f:	83 c2 04             	add    $0x4,%edx
    3712:	8b 75 a8             	mov    -0x58(%ebp),%esi
    3715:	89 55 b0             	mov    %edx,-0x50(%ebp)
    3718:	83 f8 89             	cmp    $0xffffff89,%eax
    371b:	0f 84 ef fe ff ff    	je     3610 <parse_transform+0x80>
    3721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    3728:	8b 07                	mov    (%edi),%eax
    372a:	85 c0                	test   %eax,%eax
    372c:	0f 85 77 0d 00 00    	jne    44a9 <parse_transform+0xf19>
    3732:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
    3735:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    3738:	89 01                	mov    %eax,(%ecx)
    373a:	8b 45 a8             	mov    -0x58(%ebp),%eax
    373d:	56                   	push   %esi
    373e:	50                   	push   %eax
    373f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
    3742:	51                   	push   %ecx
    3743:	50                   	push   %eax
    3744:	e8 a7 99 00 00       	call   d0f0 <bithenge_new_composed_transform>
    3749:	83 c4 10             	add    $0x10,%esp
    374c:	85 c0                	test   %eax,%eax
    374e:	0f 85 f4 03 00 00    	jne    3b48 <parse_transform+0x5b8>
    3754:	8b 75 c4             	mov    -0x3c(%ebp),%esi
    3757:	8d 65 f4             	lea    -0xc(%ebp),%esp
    375a:	89 f0                	mov    %esi,%eax
    375c:	5b                   	pop    %ebx
    375d:	5e                   	pop    %esi
    375e:	5f                   	pop    %edi
    375f:	5d                   	pop    %ebp
    3760:	c3                   	ret    
    3761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    3768:	89 f8                	mov    %edi,%eax
    376a:	e8 a1 e9 ff ff       	call   2110 <next_token>
    376f:	31 d2                	xor    %edx,%edx
    3771:	c6 87 34 10 00 00 00 	movb   $0x0,0x1034(%edi)
    3778:	89 f8                	mov    %edi,%eax
    377a:	e8 41 f3 ff ff       	call   2ac0 <parse_expression_precedence>
    377f:	83 bf 20 10 00 00 29 	cmpl   $0x29,0x1020(%edi)
    3786:	89 c3                	mov    %eax,%ebx
    3788:	0f 84 1a 04 00 00    	je     3ba8 <parse_transform+0x618>
    378e:	8b 07                	mov    (%edi),%eax
    3790:	85 c0                	test   %eax,%eax
    3792:	0f 84 60 03 00 00    	je     3af8 <parse_transform+0x568>
    3798:	85 db                	test   %ebx,%ebx
    379a:	0f 84 5c ff ff ff    	je     36fc <parse_transform+0x16c>
    37a0:	8b 13                	mov    (%ebx),%edx
    37a2:	85 d2                	test   %edx,%edx
    37a4:	0f 84 53 11 00 00    	je     48fd <parse_transform+0x136d>
    37aa:	8b 43 04             	mov    0x4(%ebx),%eax
    37ad:	85 c0                	test   %eax,%eax
    37af:	0f 84 2d 11 00 00    	je     48e2 <parse_transform+0x1352>
    37b5:	48                   	dec    %eax
    37b6:	89 43 04             	mov    %eax,0x4(%ebx)
    37b9:	85 c0                	test   %eax,%eax
    37bb:	0f 85 3b ff ff ff    	jne    36fc <parse_transform+0x16c>
    37c1:	83 ec 0c             	sub    $0xc,%esp
    37c4:	31 f6                	xor    %esi,%esi
    37c6:	53                   	push   %ebx
    37c7:	ff 52 04             	call   *0x4(%edx)
    37ca:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    37d0:	83 c4 10             	add    $0x10,%esp
    37d3:	e9 2c ff ff ff       	jmp    3704 <parse_transform+0x174>
    37d8:	8b 07                	mov    (%edi),%eax
    37da:	85 c0                	test   %eax,%eax
    37dc:	0f 85 3b fe ff ff    	jne    361d <parse_transform+0x8d>
    37e2:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    37e9:	0f 84 a3 0c 00 00    	je     4492 <parse_transform+0xf02>
    37ef:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    37f6:	ff ff ff 
    37f9:	c7 07 fe ff ff ff    	movl   $0xfffffffe,(%edi)
    37ff:	e9 19 fe ff ff       	jmp    361d <parse_transform+0x8d>
    3804:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    3808:	ba 8d ff ff ff       	mov    $0xffffff8d,%edx
    380d:	89 f8                	mov    %edi,%eax
    380f:	e8 8c f1 ff ff       	call   29a0 <expect>
    3814:	ba 7b 00 00 00       	mov    $0x7b,%edx
    3819:	89 f8                	mov    %edi,%eax
    381b:	e8 80 f1 ff ff       	call   29a0 <expect>
    3820:	89 f8                	mov    %edi,%eax
    3822:	e8 69 fd ff ff       	call   3590 <parse_transform>
    3827:	ba 7d 00 00 00       	mov    $0x7d,%edx
    382c:	89 c6                	mov    %eax,%esi
    382e:	89 f8                	mov    %edi,%eax
    3830:	e8 6b f1 ff ff       	call   29a0 <expect>
    3835:	ba 98 ff ff ff       	mov    $0xffffff98,%edx
    383a:	89 f8                	mov    %edi,%eax
    383c:	e8 5f f1 ff ff       	call   29a0 <expect>
    3841:	ba 28 00 00 00       	mov    $0x28,%edx
    3846:	89 f8                	mov    %edi,%eax
    3848:	e8 53 f1 ff ff       	call   29a0 <expect>
    384d:	31 d2                	xor    %edx,%edx
    384f:	89 f8                	mov    %edi,%eax
    3851:	e8 6a f2 ff ff       	call   2ac0 <parse_expression_precedence>
    3856:	ba 29 00 00 00       	mov    $0x29,%edx
    385b:	89 c3                	mov    %eax,%ebx
    385d:	89 f8                	mov    %edi,%eax
    385f:	e8 3c f1 ff ff       	call   29a0 <expect>
    3864:	8b 07                	mov    (%edi),%eax
    3866:	85 c0                	test   %eax,%eax
    3868:	0f 85 1b 04 00 00    	jne    3c89 <parse_transform+0x6f9>
    386e:	50                   	push   %eax
    386f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    3872:	53                   	push   %ebx
    3873:	56                   	push   %esi
    3874:	50                   	push   %eax
    3875:	e8 d6 50 00 00       	call   8950 <bithenge_do_while_transform>
    387a:	83 c4 10             	add    $0x10,%esp
    387d:	85 c0                	test   %eax,%eax
    387f:	0f 84 d8 00 00 00    	je     395d <parse_transform+0x3cd>
    3885:	8b 1f                	mov    (%edi),%ebx
    3887:	85 db                	test   %ebx,%ebx
    3889:	0f 85 6d fe ff ff    	jne    36fc <parse_transform+0x16c>
    388f:	8b 5d ac             	mov    -0x54(%ebp),%ebx
    3892:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    3899:	0f 84 72 09 00 00    	je     4211 <parse_transform+0xc81>
    389f:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    38a6:	ff ff ff 
    38a9:	89 07                	mov    %eax,(%edi)
    38ab:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
    38b1:	e9 72 fe ff ff       	jmp    3728 <parse_transform+0x198>
    38b6:	66 90                	xchg   %ax,%ax
    38b8:	ba 92 ff ff ff       	mov    $0xffffff92,%edx
    38bd:	89 f8                	mov    %edi,%eax
    38bf:	e8 dc f0 ff ff       	call   29a0 <expect>
    38c4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    38cb:	83 bf 20 10 00 00 28 	cmpl   $0x28,0x1020(%edi)
    38d2:	0f 84 e0 02 00 00    	je     3bb8 <parse_transform+0x628>
    38d8:	ba 7b 00 00 00       	mov    $0x7b,%edx
    38dd:	89 f8                	mov    %edi,%eax
    38df:	e8 bc f0 ff ff       	call   29a0 <expect>
    38e4:	89 f8                	mov    %edi,%eax
    38e6:	e8 a5 fc ff ff       	call   3590 <parse_transform>
    38eb:	ba 7d 00 00 00       	mov    $0x7d,%edx
    38f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    38f3:	89 f8                	mov    %edi,%eax
    38f5:	e8 a6 f0 ff ff       	call   29a0 <expect>
    38fa:	8b 37                	mov    (%edi),%esi
    38fc:	85 f6                	test   %esi,%esi
    38fe:	0f 85 ba 09 00 00    	jne    42be <parse_transform+0xd2e>
    3904:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    3907:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    390a:	51                   	push   %ecx
    390b:	51                   	push   %ecx
    390c:	53                   	push   %ebx
    390d:	50                   	push   %eax
    390e:	e8 7d 9a 00 00       	call   d390 <bithenge_partial_transform>
    3913:	83 c4 10             	add    $0x10,%esp
    3916:	85 c0                	test   %eax,%eax
    3918:	0f 85 df 09 00 00    	jne    42fd <parse_transform+0xd6d>
    391e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
    3921:	85 db                	test   %ebx,%ebx
    3923:	74 38                	je     395d <parse_transform+0x3cd>
    3925:	83 ec 0c             	sub    $0xc,%esp
    3928:	6a 08                	push   $0x8
    392a:	e8 31 e5 00 00       	call   11e60 <malloc@plt>
    392f:	83 c4 10             	add    $0x10,%esp
    3932:	85 c0                	test   %eax,%eax
    3934:	0f 84 2e 0c 00 00    	je     4568 <parse_transform+0xfd8>
    393a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    393d:	89 10                	mov    %edx,(%eax)
    393f:	8b 55 dc             	mov    -0x24(%ebp),%edx
    3942:	89 50 04             	mov    %edx,0x4(%eax)
    3945:	52                   	push   %edx
    3946:	6a 02                	push   $0x2
    3948:	50                   	push   %eax
    3949:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    394c:	50                   	push   %eax
    394d:	e8 9e 97 00 00       	call   d0f0 <bithenge_new_composed_transform>
    3952:	83 c4 10             	add    $0x10,%esp
    3955:	85 c0                	test   %eax,%eax
    3957:	0f 85 28 ff ff ff    	jne    3885 <parse_transform+0x2f5>
    395d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    3960:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3966:	e9 99 fd ff ff       	jmp    3704 <parse_transform+0x174>
    396b:	90                   	nop
    396c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    3970:	8b 97 24 10 00 00    	mov    0x1024(%edi),%edx
    3976:	8b 47 04             	mov    0x4(%edi),%eax
    3979:	e8 f2 e5 ff ff       	call   1f70 <get_named_transform.isra.7>
    397e:	89 45 d8             	mov    %eax,-0x28(%ebp)
    3981:	85 c0                	test   %eax,%eax
    3983:	0f 84 97 04 00 00    	je     3e20 <parse_transform+0x890>
    3989:	89 f8                	mov    %edi,%eax
    398b:	e8 80 e7 ff ff       	call   2110 <next_token>
    3990:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
    3997:	83 bf 20 10 00 00 28 	cmpl   $0x28,0x1020(%edi)
    399e:	0f 84 97 04 00 00    	je     3e3b <parse_transform+0x8ab>
    39a4:	8b 07                	mov    (%edi),%eax
    39a6:	85 c0                	test   %eax,%eax
    39a8:	75 48                	jne    39f2 <parse_transform+0x462>
    39aa:	8b 75 d8             	mov    -0x28(%ebp),%esi
    39ad:	85 f6                	test   %esi,%esi
    39af:	0f 84 09 0f 00 00    	je     48be <parse_transform+0x132e>
    39b5:	39 5e 08             	cmp    %ebx,0x8(%esi)
    39b8:	74 15                	je     39cf <parse_transform+0x43f>
    39ba:	89 f8                	mov    %edi,%eax
    39bc:	ba 50 14 01 00       	mov    $0x11450,%edx
    39c1:	e8 4a e6 ff ff       	call   2010 <syntax_error.part.2>
    39c6:	8b 07                	mov    (%edi),%eax
    39c8:	85 c0                	test   %eax,%eax
    39ca:	75 26                	jne    39f2 <parse_transform+0x462>
    39cc:	8b 75 d8             	mov    -0x28(%ebp),%esi
    39cf:	85 db                	test   %ebx,%ebx
    39d1:	0f 85 a9 01 00 00    	jne    3b80 <parse_transform+0x5f0>
    39d7:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    39dd:	e9 22 fd ff ff       	jmp    3704 <parse_transform+0x174>
    39e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    39e8:	83 ec 0c             	sub    $0xc,%esp
    39eb:	52                   	push   %edx
    39ec:	ff 51 04             	call   *0x4(%ecx)
    39ef:	83 c4 10             	add    $0x10,%esp
    39f2:	4b                   	dec    %ebx
    39f3:	83 fb ff             	cmp    $0xffffffff,%ebx
    39f6:	0f 84 db 06 00 00    	je     40d7 <parse_transform+0xb47>
    39fc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
    39ff:	8b 14 98             	mov    (%eax,%ebx,4),%edx
    3a02:	85 d2                	test   %edx,%edx
    3a04:	74 ec                	je     39f2 <parse_transform+0x462>
    3a06:	8b 0a                	mov    (%edx),%ecx
    3a08:	85 c9                	test   %ecx,%ecx
    3a0a:	0f 84 ed 0e 00 00    	je     48fd <parse_transform+0x136d>
    3a10:	8b 42 04             	mov    0x4(%edx),%eax
    3a13:	85 c0                	test   %eax,%eax
    3a15:	0f 84 c7 0e 00 00    	je     48e2 <parse_transform+0x1352>
    3a1b:	48                   	dec    %eax
    3a1c:	89 42 04             	mov    %eax,0x4(%edx)
    3a1f:	85 c0                	test   %eax,%eax
    3a21:	75 cf                	jne    39f2 <parse_transform+0x462>
    3a23:	eb c3                	jmp    39e8 <parse_transform+0x458>
    3a25:	8d 76 00             	lea    0x0(%esi),%esi
    3a28:	31 d2                	xor    %edx,%edx
    3a2a:	89 f8                	mov    %edi,%eax
    3a2c:	e8 1f 0f 00 00       	call   4950 <parse_if>
    3a31:	89 c6                	mov    %eax,%esi
    3a33:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3a39:	e9 c6 fc ff ff       	jmp    3704 <parse_transform+0x174>
    3a3e:	66 90                	xchg   %ax,%ax
    3a40:	ba 93 ff ff ff       	mov    $0xffffff93,%edx
    3a45:	89 f8                	mov    %edi,%eax
    3a47:	e8 54 ef ff ff       	call   29a0 <expect>
    3a4c:	83 bf 20 10 00 00 28 	cmpl   $0x28,0x1020(%edi)
    3a53:	0f 84 e7 01 00 00    	je     3c40 <parse_transform+0x6b0>
    3a59:	ba 7b 00 00 00       	mov    $0x7b,%edx
    3a5e:	89 f8                	mov    %edi,%eax
    3a60:	e8 3b ef ff ff       	call   29a0 <expect>
    3a65:	89 f8                	mov    %edi,%eax
    3a67:	e8 24 fb ff ff       	call   3590 <parse_transform>
    3a6c:	ba 7d 00 00 00       	mov    $0x7d,%edx
    3a71:	89 c6                	mov    %eax,%esi
    3a73:	89 f8                	mov    %edi,%eax
    3a75:	e8 26 ef ff ff       	call   29a0 <expect>
    3a7a:	8b 07                	mov    (%edi),%eax
    3a7c:	85 c0                	test   %eax,%eax
    3a7e:	0f 85 30 02 00 00    	jne    3cb4 <parse_transform+0x724>
    3a84:	31 db                	xor    %ebx,%ebx
    3a86:	50                   	push   %eax
    3a87:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    3a8a:	53                   	push   %ebx
    3a8b:	56                   	push   %esi
    3a8c:	50                   	push   %eax
    3a8d:	e8 7e 4d 00 00       	call   8810 <bithenge_repeat_transform>
    3a92:	83 c4 10             	add    $0x10,%esp
    3a95:	85 c0                	test   %eax,%eax
    3a97:	0f 85 e8 fd ff ff    	jne    3885 <parse_transform+0x2f5>
    3a9d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    3aa0:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3aa6:	e9 59 fc ff ff       	jmp    3704 <parse_transform+0x174>
    3aab:	90                   	nop
    3aac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    3ab0:	89 f8                	mov    %edi,%eax
    3ab2:	e8 59 e6 ff ff       	call   2110 <next_token>
    3ab7:	ba 7b 00 00 00       	mov    $0x7b,%edx
    3abc:	89 f8                	mov    %edi,%eax
    3abe:	e8 dd ee ff ff       	call   29a0 <expect>
    3ac3:	89 f8                	mov    %edi,%eax
    3ac5:	e8 e6 12 00 00       	call   4db0 <parse_struct>
    3aca:	ba 7d 00 00 00       	mov    $0x7d,%edx
    3acf:	89 c6                	mov    %eax,%esi
    3ad1:	89 f8                	mov    %edi,%eax
    3ad3:	e8 c8 ee ff ff       	call   29a0 <expect>
    3ad8:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3ade:	e9 21 fc ff ff       	jmp    3704 <parse_transform+0x174>
    3ae3:	90                   	nop
    3ae4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    3ae8:	31 d2                	xor    %edx,%edx
    3aea:	89 f8                	mov    %edi,%eax
    3aec:	e8 6f 16 00 00       	call   5160 <parse_switch>
    3af1:	89 c6                	mov    %eax,%esi
    3af3:	e9 df fe ff ff       	jmp    39d7 <parse_transform+0x447>
    3af8:	ba 85 13 01 00       	mov    $0x11385,%edx
    3afd:	89 f8                	mov    %edi,%eax
    3aff:	e8 0c e5 ff ff       	call   2010 <syntax_error.part.2>
    3b04:	8b 07                	mov    (%edi),%eax
    3b06:	85 c0                	test   %eax,%eax
    3b08:	0f 85 8a fc ff ff    	jne    3798 <parse_transform+0x208>
    3b0e:	80 bf 34 10 00 00 00 	cmpb   $0x0,0x1034(%edi)
    3b15:	74 19                	je     3b30 <parse_transform+0x5a0>
    3b17:	50                   	push   %eax
    3b18:	50                   	push   %eax
    3b19:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    3b1c:	53                   	push   %ebx
    3b1d:	50                   	push   %eax
    3b1e:	e8 ed af 00 00       	call   eb10 <bithenge_expression_transform>
    3b23:	83 c4 10             	add    $0x10,%esp
    3b26:	e9 6a ff ff ff       	jmp    3a95 <parse_transform+0x505>
    3b2b:	90                   	nop
    3b2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    3b30:	50                   	push   %eax
    3b31:	50                   	push   %eax
    3b32:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    3b35:	53                   	push   %ebx
    3b36:	50                   	push   %eax
    3b37:	e8 94 b0 00 00       	call   ebd0 <bithenge_inputless_transform>
    3b3c:	83 c4 10             	add    $0x10,%esp
    3b3f:	e9 51 ff ff ff       	jmp    3a95 <parse_transform+0x505>
    3b44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    3b48:	8b 1f                	mov    (%edi),%ebx
    3b4a:	85 db                	test   %ebx,%ebx
    3b4c:	74 0c                	je     3b5a <parse_transform+0x5ca>
    3b4e:	31 f6                	xor    %esi,%esi
    3b50:	8d 65 f4             	lea    -0xc(%ebp),%esp
    3b53:	89 f0                	mov    %esi,%eax
    3b55:	5b                   	pop    %ebx
    3b56:	5e                   	pop    %esi
    3b57:	5f                   	pop    %edi
    3b58:	5d                   	pop    %ebp
    3b59:	c3                   	ret    
    3b5a:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    3b61:	0f 84 4e 0a 00 00    	je     45b5 <parse_transform+0x1025>
    3b67:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    3b6e:	ff ff ff 
    3b71:	89 07                	mov    %eax,(%edi)
    3b73:	31 f6                	xor    %esi,%esi
    3b75:	e9 dd fb ff ff       	jmp    3757 <parse_transform+0x1c7>
    3b7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    3b80:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
    3b83:	8d 45 d8             	lea    -0x28(%ebp),%eax
    3b86:	51                   	push   %ecx
    3b87:	53                   	push   %ebx
    3b88:	56                   	push   %esi
    3b89:	50                   	push   %eax
    3b8a:	e8 11 ae 00 00       	call   e9a0 <bithenge_param_wrapper>
    3b8f:	83 c4 10             	add    $0x10,%esp
    3b92:	85 c0                	test   %eax,%eax
    3b94:	0f 85 eb fc ff ff    	jne    3885 <parse_transform+0x2f5>
    3b9a:	8b 75 d8             	mov    -0x28(%ebp),%esi
    3b9d:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3ba3:	e9 5c fb ff ff       	jmp    3704 <parse_transform+0x174>
    3ba8:	89 f8                	mov    %edi,%eax
    3baa:	e8 61 e5 ff ff       	call   2110 <next_token>
    3baf:	e9 50 ff ff ff       	jmp    3b04 <parse_transform+0x574>
    3bb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    3bb8:	89 f8                	mov    %edi,%eax
    3bba:	e8 51 e5 ff ff       	call   2110 <next_token>
    3bbf:	31 d2                	xor    %edx,%edx
    3bc1:	89 f8                	mov    %edi,%eax
    3bc3:	e8 f8 ee ff ff       	call   2ac0 <parse_expression_precedence>
    3bc8:	ba 29 00 00 00       	mov    $0x29,%edx
    3bcd:	89 45 e0             	mov    %eax,-0x20(%ebp)
    3bd0:	89 f8                	mov    %edi,%eax
    3bd2:	e8 c9 ed ff ff       	call   29a0 <expect>
    3bd7:	83 ec 0c             	sub    $0xc,%esp
    3bda:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    3bdd:	50                   	push   %eax
    3bde:	e8 5d ab 00 00       	call   e740 <bithenge_in_node_expression>
    3be3:	83 c4 10             	add    $0x10,%esp
    3be6:	85 c0                	test   %eax,%eax
    3be8:	0f 84 6b 03 00 00    	je     3f59 <parse_transform+0x9c9>
    3bee:	8b 17                	mov    (%edi),%edx
    3bf0:	85 d2                	test   %edx,%edx
    3bf2:	0f 84 46 09 00 00    	je     453e <parse_transform+0xfae>
    3bf8:	8b 45 e0             	mov    -0x20(%ebp),%eax
    3bfb:	85 c0                	test   %eax,%eax
    3bfd:	0f 84 f9 fa ff ff    	je     36fc <parse_transform+0x16c>
    3c03:	8b 08                	mov    (%eax),%ecx
    3c05:	85 c9                	test   %ecx,%ecx
    3c07:	0f 84 f0 0c 00 00    	je     48fd <parse_transform+0x136d>
    3c0d:	8b 50 04             	mov    0x4(%eax),%edx
    3c10:	85 d2                	test   %edx,%edx
    3c12:	0f 84 ca 0c 00 00    	je     48e2 <parse_transform+0x1352>
    3c18:	4a                   	dec    %edx
    3c19:	89 50 04             	mov    %edx,0x4(%eax)
    3c1c:	85 d2                	test   %edx,%edx
    3c1e:	0f 85 d8 fa ff ff    	jne    36fc <parse_transform+0x16c>
    3c24:	83 ec 0c             	sub    $0xc,%esp
    3c27:	50                   	push   %eax
    3c28:	ff 51 04             	call   *0x4(%ecx)
    3c2b:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3c31:	83 c4 10             	add    $0x10,%esp
    3c34:	e9 c9 fa ff ff       	jmp    3702 <parse_transform+0x172>
    3c39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    3c40:	89 f8                	mov    %edi,%eax
    3c42:	e8 c9 e4 ff ff       	call   2110 <next_token>
    3c47:	31 d2                	xor    %edx,%edx
    3c49:	89 f8                	mov    %edi,%eax
    3c4b:	e8 70 ee ff ff       	call   2ac0 <parse_expression_precedence>
    3c50:	ba 29 00 00 00       	mov    $0x29,%edx
    3c55:	89 c3                	mov    %eax,%ebx
    3c57:	89 f8                	mov    %edi,%eax
    3c59:	e8 42 ed ff ff       	call   29a0 <expect>
    3c5e:	ba 7b 00 00 00       	mov    $0x7b,%edx
    3c63:	89 f8                	mov    %edi,%eax
    3c65:	e8 36 ed ff ff       	call   29a0 <expect>
    3c6a:	89 f8                	mov    %edi,%eax
    3c6c:	e8 1f f9 ff ff       	call   3590 <parse_transform>
    3c71:	ba 7d 00 00 00       	mov    $0x7d,%edx
    3c76:	89 c6                	mov    %eax,%esi
    3c78:	89 f8                	mov    %edi,%eax
    3c7a:	e8 21 ed ff ff       	call   29a0 <expect>
    3c7f:	8b 07                	mov    (%edi),%eax
    3c81:	85 c0                	test   %eax,%eax
    3c83:	0f 84 fd fd ff ff    	je     3a86 <parse_transform+0x4f6>
    3c89:	85 db                	test   %ebx,%ebx
    3c8b:	74 27                	je     3cb4 <parse_transform+0x724>
    3c8d:	8b 13                	mov    (%ebx),%edx
    3c8f:	85 d2                	test   %edx,%edx
    3c91:	0f 84 66 0c 00 00    	je     48fd <parse_transform+0x136d>
    3c97:	8b 43 04             	mov    0x4(%ebx),%eax
    3c9a:	85 c0                	test   %eax,%eax
    3c9c:	0f 84 40 0c 00 00    	je     48e2 <parse_transform+0x1352>
    3ca2:	48                   	dec    %eax
    3ca3:	89 43 04             	mov    %eax,0x4(%ebx)
    3ca6:	85 c0                	test   %eax,%eax
    3ca8:	75 0a                	jne    3cb4 <parse_transform+0x724>
    3caa:	83 ec 0c             	sub    $0xc,%esp
    3cad:	53                   	push   %ebx
    3cae:	ff 52 04             	call   *0x4(%edx)
    3cb1:	83 c4 10             	add    $0x10,%esp
    3cb4:	85 f6                	test   %esi,%esi
    3cb6:	0f 84 1b fd ff ff    	je     39d7 <parse_transform+0x447>
    3cbc:	8b 16                	mov    (%esi),%edx
    3cbe:	85 d2                	test   %edx,%edx
    3cc0:	0f 84 0a 0c 00 00    	je     48d0 <parse_transform+0x1340>
    3cc6:	8b 46 04             	mov    0x4(%esi),%eax
    3cc9:	85 c0                	test   %eax,%eax
    3ccb:	0f 84 3e 0c 00 00    	je     490f <parse_transform+0x137f>
    3cd1:	48                   	dec    %eax
    3cd2:	89 46 04             	mov    %eax,0x4(%esi)
    3cd5:	85 c0                	test   %eax,%eax
    3cd7:	0f 85 1f fa ff ff    	jne    36fc <parse_transform+0x16c>
    3cdd:	83 ec 0c             	sub    $0xc,%esp
    3ce0:	56                   	push   %esi
    3ce1:	31 f6                	xor    %esi,%esi
    3ce3:	ff 52 0c             	call   *0xc(%edx)
    3ce6:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3cec:	83 c4 10             	add    $0x10,%esp
    3cef:	e9 10 fa ff ff       	jmp    3704 <parse_transform+0x174>
    3cf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    3cf8:	89 f8                	mov    %edi,%eax
    3cfa:	e8 11 e4 ff ff       	call   2110 <next_token>
    3cff:	31 d2                	xor    %edx,%edx
    3d01:	c6 87 34 10 00 00 00 	movb   $0x0,0x1034(%edi)
    3d08:	89 f8                	mov    %edi,%eax
    3d0a:	e8 b1 ed ff ff       	call   2ac0 <parse_expression_precedence>
    3d0f:	83 bf 20 10 00 00 29 	cmpl   $0x29,0x1020(%edi)
    3d16:	89 c3                	mov    %eax,%ebx
    3d18:	0f 84 3e 08 00 00    	je     455c <parse_transform+0xfcc>
    3d1e:	8b 17                	mov    (%edi),%edx
    3d20:	85 d2                	test   %edx,%edx
    3d22:	0f 84 a2 07 00 00    	je     44ca <parse_transform+0xf3a>
    3d28:	85 db                	test   %ebx,%ebx
    3d2a:	0f 84 c8 00 00 00    	je     3df8 <parse_transform+0x868>
    3d30:	8b 13                	mov    (%ebx),%edx
    3d32:	85 d2                	test   %edx,%edx
    3d34:	0f 84 c3 0b 00 00    	je     48fd <parse_transform+0x136d>
    3d3a:	8b 43 04             	mov    0x4(%ebx),%eax
    3d3d:	85 c0                	test   %eax,%eax
    3d3f:	0f 84 9d 0b 00 00    	je     48e2 <parse_transform+0x1352>
    3d45:	48                   	dec    %eax
    3d46:	89 43 04             	mov    %eax,0x4(%ebx)
    3d49:	85 c0                	test   %eax,%eax
    3d4b:	0f 85 a7 00 00 00    	jne    3df8 <parse_transform+0x868>
    3d51:	83 ec 0c             	sub    $0xc,%esp
    3d54:	31 f6                	xor    %esi,%esi
    3d56:	53                   	push   %ebx
    3d57:	ff 52 04             	call   *0x4(%edx)
    3d5a:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3d60:	83 c4 10             	add    $0x10,%esp
    3d63:	e9 8d f8 ff ff       	jmp    35f5 <parse_transform+0x65>
    3d68:	ba 92 ff ff ff       	mov    $0xffffff92,%edx
    3d6d:	89 f8                	mov    %edi,%eax
    3d6f:	e8 2c ec ff ff       	call   29a0 <expect>
    3d74:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    3d7b:	83 bf 20 10 00 00 28 	cmpl   $0x28,0x1020(%edi)
    3d82:	0f 85 a6 04 00 00    	jne    422e <parse_transform+0xc9e>
    3d88:	89 f8                	mov    %edi,%eax
    3d8a:	e8 81 e3 ff ff       	call   2110 <next_token>
    3d8f:	31 d2                	xor    %edx,%edx
    3d91:	89 f8                	mov    %edi,%eax
    3d93:	e8 28 ed ff ff       	call   2ac0 <parse_expression_precedence>
    3d98:	ba 29 00 00 00       	mov    $0x29,%edx
    3d9d:	89 45 d0             	mov    %eax,-0x30(%ebp)
    3da0:	89 f8                	mov    %edi,%eax
    3da2:	e8 f9 eb ff ff       	call   29a0 <expect>
    3da7:	83 ec 0c             	sub    $0xc,%esp
    3daa:	8d 45 d4             	lea    -0x2c(%ebp),%eax
    3dad:	50                   	push   %eax
    3dae:	e8 8d a9 00 00       	call   e740 <bithenge_in_node_expression>
    3db3:	83 c4 10             	add    $0x10,%esp
    3db6:	89 c3                	mov    %eax,%ebx
    3db8:	85 c0                	test   %eax,%eax
    3dba:	0f 84 09 09 00 00    	je     46c9 <parse_transform+0x1139>
    3dc0:	8b 07                	mov    (%edi),%eax
    3dc2:	85 c0                	test   %eax,%eax
    3dc4:	0f 84 6f 0a 00 00    	je     4839 <parse_transform+0x12a9>
    3dca:	8b 45 d0             	mov    -0x30(%ebp),%eax
    3dcd:	85 c0                	test   %eax,%eax
    3dcf:	74 27                	je     3df8 <parse_transform+0x868>
    3dd1:	8b 08                	mov    (%eax),%ecx
    3dd3:	85 c9                	test   %ecx,%ecx
    3dd5:	0f 84 22 0b 00 00    	je     48fd <parse_transform+0x136d>
    3ddb:	8b 50 04             	mov    0x4(%eax),%edx
    3dde:	85 d2                	test   %edx,%edx
    3de0:	0f 84 fc 0a 00 00    	je     48e2 <parse_transform+0x1352>
    3de6:	4a                   	dec    %edx
    3de7:	89 50 04             	mov    %edx,0x4(%eax)
    3dea:	85 d2                	test   %edx,%edx
    3dec:	75 0a                	jne    3df8 <parse_transform+0x868>
    3dee:	83 ec 0c             	sub    $0xc,%esp
    3df1:	50                   	push   %eax
    3df2:	ff 51 04             	call   *0x4(%ecx)
    3df5:	83 c4 10             	add    $0x10,%esp
    3df8:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3dfe:	31 f6                	xor    %esi,%esi
    3e00:	e9 f0 f7 ff ff       	jmp    35f5 <parse_transform+0x65>
    3e05:	8d 76 00             	lea    0x0(%esi),%esi
    3e08:	ba 78 14 01 00       	mov    $0x11478,%edx
    3e0d:	89 f8                	mov    %edi,%eax
    3e0f:	e8 fc e1 ff ff       	call   2010 <syntax_error.part.2>
    3e14:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3e1a:	e9 d6 f7 ff ff       	jmp    35f5 <parse_transform+0x65>
    3e1f:	90                   	nop
    3e20:	8b 37                	mov    (%edi),%esi
    3e22:	85 f6                	test   %esi,%esi
    3e24:	0f 85 5f fb ff ff    	jne    3989 <parse_transform+0x3f9>
    3e2a:	ba ef 13 01 00       	mov    $0x113ef,%edx
    3e2f:	89 f8                	mov    %edi,%eax
    3e31:	e8 da e1 ff ff       	call   2010 <syntax_error.part.2>
    3e36:	e9 4e fb ff ff       	jmp    3989 <parse_transform+0x3f9>
    3e3b:	89 f8                	mov    %edi,%eax
    3e3d:	e8 ce e2 ff ff       	call   2110 <next_token>
    3e42:	8b 07                	mov    (%edi),%eax
    3e44:	89 45 9c             	mov    %eax,-0x64(%ebp)
    3e47:	85 c0                	test   %eax,%eax
    3e49:	75 7d                	jne    3ec8 <parse_transform+0x938>
    3e4b:	83 bf 20 10 00 00 29 	cmpl   $0x29,0x1020(%edi)
    3e52:	0f 84 9d 09 00 00    	je     47f5 <parse_transform+0x1265>
    3e58:	40                   	inc    %eax
    3e59:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
    3e5c:	89 45 a0             	mov    %eax,-0x60(%ebp)
    3e5f:	52                   	push   %edx
    3e60:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
    3e67:	52                   	push   %edx
    3e68:	53                   	push   %ebx
    3e69:	51                   	push   %ecx
    3e6a:	e8 31 e1 00 00       	call   11fa0 <realloc@plt>
    3e6f:	83 c4 10             	add    $0x10,%esp
    3e72:	89 c6                	mov    %eax,%esi
    3e74:	85 c0                	test   %eax,%eax
    3e76:	0f 84 b2 00 00 00    	je     3f2e <parse_transform+0x99e>
    3e7c:	8b 07                	mov    (%edi),%eax
    3e7e:	85 c0                	test   %eax,%eax
    3e80:	0f 85 ec 09 00 00    	jne    4872 <parse_transform+0x12e2>
    3e86:	31 d2                	xor    %edx,%edx
    3e88:	89 f8                	mov    %edi,%eax
    3e8a:	e8 31 ec ff ff       	call   2ac0 <parse_expression_precedence>
    3e8f:	8d 5c 1e fc          	lea    -0x4(%esi,%ebx,1),%ebx
    3e93:	89 03                	mov    %eax,(%ebx)
    3e95:	8b 07                	mov    (%edi),%eax
    3e97:	85 c0                	test   %eax,%eax
    3e99:	0f 85 67 03 00 00    	jne    4206 <parse_transform+0xc76>
    3e9f:	83 bf 20 10 00 00 29 	cmpl   $0x29,0x1020(%edi)
    3ea6:	0f 84 5a 03 00 00    	je     4206 <parse_transform+0xc76>
    3eac:	ba 2c 00 00 00       	mov    $0x2c,%edx
    3eb1:	89 f8                	mov    %edi,%eax
    3eb3:	e8 e8 ea ff ff       	call   29a0 <expect>
    3eb8:	8b 1f                	mov    (%edi),%ebx
    3eba:	89 75 a4             	mov    %esi,-0x5c(%ebp)
    3ebd:	85 db                	test   %ebx,%ebx
    3ebf:	0f 84 2d 04 00 00    	je     42f2 <parse_transform+0xd62>
    3ec5:	8b 5d a0             	mov    -0x60(%ebp),%ebx
    3ec8:	ba 29 00 00 00       	mov    $0x29,%edx
    3ecd:	89 f8                	mov    %edi,%eax
    3ecf:	e8 cc ea ff ff       	call   29a0 <expect>
    3ed4:	e9 cb fa ff ff       	jmp    39a4 <parse_transform+0x414>
    3ed9:	8b 07                	mov    (%edi),%eax
    3edb:	85 c0                	test   %eax,%eax
    3edd:	0f 84 74 f8 ff ff    	je     3757 <parse_transform+0x1c7>
    3ee3:	31 db                	xor    %ebx,%ebx
    3ee5:	83 ec 0c             	sub    $0xc,%esp
    3ee8:	53                   	push   %ebx
    3ee9:	e8 02 e2 00 00       	call   120f0 <free@plt>
    3eee:	8b 55 c4             	mov    -0x3c(%ebp),%edx
    3ef1:	83 c4 10             	add    $0x10,%esp
    3ef4:	85 d2                	test   %edx,%edx
    3ef6:	0f 84 52 fc ff ff    	je     3b4e <parse_transform+0x5be>
    3efc:	8b 0a                	mov    (%edx),%ecx
    3efe:	85 c9                	test   %ecx,%ecx
    3f00:	0f 84 ca 09 00 00    	je     48d0 <parse_transform+0x1340>
    3f06:	8b 42 04             	mov    0x4(%edx),%eax
    3f09:	85 c0                	test   %eax,%eax
    3f0b:	0f 84 fe 09 00 00    	je     490f <parse_transform+0x137f>
    3f11:	48                   	dec    %eax
    3f12:	89 42 04             	mov    %eax,0x4(%edx)
    3f15:	85 c0                	test   %eax,%eax
    3f17:	0f 85 31 fc ff ff    	jne    3b4e <parse_transform+0x5be>
    3f1d:	83 ec 0c             	sub    $0xc,%esp
    3f20:	31 f6                	xor    %esi,%esi
    3f22:	52                   	push   %edx
    3f23:	ff 51 0c             	call   *0xc(%ecx)
    3f26:	83 c4 10             	add    $0x10,%esp
    3f29:	e9 22 fc ff ff       	jmp    3b50 <parse_transform+0x5c0>
    3f2e:	8b 07                	mov    (%edi),%eax
    3f30:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
    3f33:	85 c0                	test   %eax,%eax
    3f35:	75 91                	jne    3ec8 <parse_transform+0x938>
    3f37:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    3f3e:	0f 84 5b 08 00 00    	je     479f <parse_transform+0x120f>
    3f44:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    3f4b:	ff ff ff 
    3f4e:	c7 07 fe ff ff ff    	movl   $0xfffffffe,(%edi)
    3f54:	e9 6f ff ff ff       	jmp    3ec8 <parse_transform+0x938>
    3f59:	8b 37                	mov    (%edi),%esi
    3f5b:	85 f6                	test   %esi,%esi
    3f5d:	0f 85 95 fc ff ff    	jne    3bf8 <parse_transform+0x668>
    3f63:	83 ec 0c             	sub    $0xc,%esp
    3f66:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    3f69:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    3f6c:	8d 45 e0             	lea    -0x20(%ebp),%eax
    3f6f:	6a 01                	push   $0x1
    3f71:	6a 00                	push   $0x0
    3f73:	51                   	push   %ecx
    3f74:	53                   	push   %ebx
    3f75:	50                   	push   %eax
    3f76:	e8 05 a9 00 00       	call   e880 <bithenge_subblob_expression>
    3f7b:	83 c4 20             	add    $0x20,%esp
    3f7e:	85 c0                	test   %eax,%eax
    3f80:	0f 85 8b 05 00 00    	jne    4511 <parse_transform+0xf81>
    3f86:	8b 5d e0             	mov    -0x20(%ebp),%ebx
    3f89:	8d 45 dc             	lea    -0x24(%ebp),%eax
    3f8c:	51                   	push   %ecx
    3f8d:	51                   	push   %ecx
    3f8e:	53                   	push   %ebx
    3f8f:	50                   	push   %eax
    3f90:	e8 7b ab 00 00       	call   eb10 <bithenge_expression_transform>
    3f95:	83 c4 10             	add    $0x10,%esp
    3f98:	85 c0                	test   %eax,%eax
    3f9a:	0f 84 38 f9 ff ff    	je     38d8 <parse_transform+0x348>
    3fa0:	8b 17                	mov    (%edi),%edx
    3fa2:	85 d2                	test   %edx,%edx
    3fa4:	0f 85 52 f7 ff ff    	jne    36fc <parse_transform+0x16c>
    3faa:	89 c2                	mov    %eax,%edx
    3fac:	89 f8                	mov    %edi,%eax
    3fae:	e8 0d df ff ff       	call   1ec0 <error_errno.part.1>
    3fb3:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    3fb9:	e9 44 f7 ff ff       	jmp    3702 <parse_transform+0x172>
    3fbe:	66 90                	xchg   %ax,%ax
    3fc0:	ba 8d ff ff ff       	mov    $0xffffff8d,%edx
    3fc5:	89 f8                	mov    %edi,%eax
    3fc7:	e8 d4 e9 ff ff       	call   29a0 <expect>
    3fcc:	ba 7b 00 00 00       	mov    $0x7b,%edx
    3fd1:	89 f8                	mov    %edi,%eax
    3fd3:	e8 c8 e9 ff ff       	call   29a0 <expect>
    3fd8:	89 f8                	mov    %edi,%eax
    3fda:	e8 b1 f5 ff ff       	call   3590 <parse_transform>
    3fdf:	ba 7d 00 00 00       	mov    $0x7d,%edx
    3fe4:	89 c6                	mov    %eax,%esi
    3fe6:	89 f8                	mov    %edi,%eax
    3fe8:	e8 b3 e9 ff ff       	call   29a0 <expect>
    3fed:	ba 98 ff ff ff       	mov    $0xffffff98,%edx
    3ff2:	89 f8                	mov    %edi,%eax
    3ff4:	e8 a7 e9 ff ff       	call   29a0 <expect>
    3ff9:	ba 28 00 00 00       	mov    $0x28,%edx
    3ffe:	89 f8                	mov    %edi,%eax
    4000:	e8 9b e9 ff ff       	call   29a0 <expect>
    4005:	31 d2                	xor    %edx,%edx
    4007:	89 f8                	mov    %edi,%eax
    4009:	e8 b2 ea ff ff       	call   2ac0 <parse_expression_precedence>
    400e:	ba 29 00 00 00       	mov    $0x29,%edx
    4013:	89 c3                	mov    %eax,%ebx
    4015:	89 f8                	mov    %edi,%eax
    4017:	e8 84 e9 ff ff       	call   29a0 <expect>
    401c:	8b 07                	mov    (%edi),%eax
    401e:	85 c0                	test   %eax,%eax
    4020:	0f 85 fe 06 00 00    	jne    4724 <parse_transform+0x1194>
    4026:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    4029:	51                   	push   %ecx
    402a:	53                   	push   %ebx
    402b:	56                   	push   %esi
    402c:	50                   	push   %eax
    402d:	e8 1e 49 00 00       	call   8950 <bithenge_do_while_transform>
    4032:	83 c4 10             	add    $0x10,%esp
    4035:	85 c0                	test   %eax,%eax
    4037:	0f 84 8c 00 00 00    	je     40c9 <parse_transform+0xb39>
    403d:	8b 17                	mov    (%edi),%edx
    403f:	85 d2                	test   %edx,%edx
    4041:	0f 85 b1 fd ff ff    	jne    3df8 <parse_transform+0x868>
    4047:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    404e:	0f 84 2e 07 00 00    	je     4782 <parse_transform+0x11f2>
    4054:	89 07                	mov    %eax,(%edi)
    4056:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    405d:	ff ff ff 
    4060:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
    4065:	31 f6                	xor    %esi,%esi
    4067:	e9 89 f5 ff ff       	jmp    35f5 <parse_transform+0x65>
    406c:	ba 93 ff ff ff       	mov    $0xffffff93,%edx
    4071:	89 f8                	mov    %edi,%eax
    4073:	e8 28 e9 ff ff       	call   29a0 <expect>
    4078:	83 bf 20 10 00 00 28 	cmpl   $0x28,0x1020(%edi)
    407f:	0f 84 e8 02 00 00    	je     436d <parse_transform+0xddd>
    4085:	ba 7b 00 00 00       	mov    $0x7b,%edx
    408a:	89 f8                	mov    %edi,%eax
    408c:	e8 0f e9 ff ff       	call   29a0 <expect>
    4091:	89 f8                	mov    %edi,%eax
    4093:	e8 f8 f4 ff ff       	call   3590 <parse_transform>
    4098:	ba 7d 00 00 00       	mov    $0x7d,%edx
    409d:	89 c6                	mov    %eax,%esi
    409f:	89 f8                	mov    %edi,%eax
    40a1:	e8 fa e8 ff ff       	call   29a0 <expect>
    40a6:	8b 17                	mov    (%edi),%edx
    40a8:	85 d2                	test   %edx,%edx
    40aa:	0f 85 31 03 00 00    	jne    43e1 <parse_transform+0xe51>
    40b0:	31 db                	xor    %ebx,%ebx
    40b2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    40b5:	51                   	push   %ecx
    40b6:	53                   	push   %ebx
    40b7:	56                   	push   %esi
    40b8:	50                   	push   %eax
    40b9:	e8 52 47 00 00       	call   8810 <bithenge_repeat_transform>
    40be:	83 c4 10             	add    $0x10,%esp
    40c1:	85 c0                	test   %eax,%eax
    40c3:	0f 85 74 ff ff ff    	jne    403d <parse_transform+0xaad>
    40c9:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    40cc:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    40d2:	e9 1e f5 ff ff       	jmp    35f5 <parse_transform+0x65>
    40d7:	83 ec 0c             	sub    $0xc,%esp
    40da:	8b 75 a4             	mov    -0x5c(%ebp),%esi
    40dd:	56                   	push   %esi
    40de:	e8 0d e0 00 00       	call   120f0 <free@plt>
    40e3:	8b 75 d8             	mov    -0x28(%ebp),%esi
    40e6:	83 c4 10             	add    $0x10,%esp
    40e9:	85 f6                	test   %esi,%esi
    40eb:	0f 85 cb fb ff ff    	jne    3cbc <parse_transform+0x72c>
    40f1:	e9 e1 f8 ff ff       	jmp    39d7 <parse_transform+0x447>
    40f6:	8b 97 24 10 00 00    	mov    0x1024(%edi),%edx
    40fc:	8b 47 04             	mov    0x4(%edi),%eax
    40ff:	e8 6c de ff ff       	call   1f70 <get_named_transform.isra.7>
    4104:	89 45 c8             	mov    %eax,-0x38(%ebp)
    4107:	85 c0                	test   %eax,%eax
    4109:	0f 84 c3 04 00 00    	je     45d2 <parse_transform+0x1042>
    410f:	89 f8                	mov    %edi,%eax
    4111:	e8 fa df ff ff       	call   2110 <next_token>
    4116:	83 bf 20 10 00 00 28 	cmpl   $0x28,0x1020(%edi)
    411d:	0f 84 d8 04 00 00    	je     45fb <parse_transform+0x106b>
    4123:	31 db                	xor    %ebx,%ebx
    4125:	31 c9                	xor    %ecx,%ecx
    4127:	8b 37                	mov    (%edi),%esi
    4129:	85 f6                	test   %esi,%esi
    412b:	0f 85 8f 00 00 00    	jne    41c0 <parse_transform+0xc30>
    4131:	8b 75 c8             	mov    -0x38(%ebp),%esi
    4134:	85 f6                	test   %esi,%esi
    4136:	0f 84 82 07 00 00    	je     48be <parse_transform+0x132e>
    413c:	39 5e 08             	cmp    %ebx,0x8(%esi)
    413f:	74 1b                	je     415c <parse_transform+0xbcc>
    4141:	ba 50 14 01 00       	mov    $0x11450,%edx
    4146:	89 f8                	mov    %edi,%eax
    4148:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
    414b:	e8 c0 de ff ff       	call   2010 <syntax_error.part.2>
    4150:	8b 0f                	mov    (%edi),%ecx
    4152:	85 c9                	test   %ecx,%ecx
    4154:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
    4157:	75 67                	jne    41c0 <parse_transform+0xc30>
    4159:	8b 75 c8             	mov    -0x38(%ebp),%esi
    415c:	85 db                	test   %ebx,%ebx
    415e:	0f 84 b0 fc ff ff    	je     3e14 <parse_transform+0x884>
    4164:	8d 45 c8             	lea    -0x38(%ebp),%eax
    4167:	52                   	push   %edx
    4168:	51                   	push   %ecx
    4169:	56                   	push   %esi
    416a:	50                   	push   %eax
    416b:	e8 30 a8 00 00       	call   e9a0 <bithenge_param_wrapper>
    4170:	83 c4 10             	add    $0x10,%esp
    4173:	89 c3                	mov    %eax,%ebx
    4175:	85 c0                	test   %eax,%eax
    4177:	0f 84 70 04 00 00    	je     45ed <parse_transform+0x105d>
    417d:	8b 07                	mov    (%edi),%eax
    417f:	85 c0                	test   %eax,%eax
    4181:	0f 85 71 fc ff ff    	jne    3df8 <parse_transform+0x868>
    4187:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    418e:	0f 84 8d 07 00 00    	je     4921 <parse_transform+0x1391>
    4194:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    419b:	ff ff ff 
    419e:	89 1f                	mov    %ebx,(%edi)
    41a0:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
    41a5:	31 f6                	xor    %esi,%esi
    41a7:	e9 49 f4 ff ff       	jmp    35f5 <parse_transform+0x65>
    41ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    41b0:	83 ec 0c             	sub    $0xc,%esp
    41b3:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
    41b6:	52                   	push   %edx
    41b7:	ff 56 04             	call   *0x4(%esi)
    41ba:	83 c4 10             	add    $0x10,%esp
    41bd:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
    41c0:	4b                   	dec    %ebx
    41c1:	83 fb ff             	cmp    $0xffffffff,%ebx
    41c4:	0f 84 92 05 00 00    	je     475c <parse_transform+0x11cc>
    41ca:	8b 14 99             	mov    (%ecx,%ebx,4),%edx
    41cd:	85 d2                	test   %edx,%edx
    41cf:	74 ef                	je     41c0 <parse_transform+0xc30>
    41d1:	8b 32                	mov    (%edx),%esi
    41d3:	85 f6                	test   %esi,%esi
    41d5:	0f 84 22 07 00 00    	je     48fd <parse_transform+0x136d>
    41db:	8b 42 04             	mov    0x4(%edx),%eax
    41de:	85 c0                	test   %eax,%eax
    41e0:	0f 84 fc 06 00 00    	je     48e2 <parse_transform+0x1352>
    41e6:	48                   	dec    %eax
    41e7:	89 42 04             	mov    %eax,0x4(%edx)
    41ea:	85 c0                	test   %eax,%eax
    41ec:	75 d2                	jne    41c0 <parse_transform+0xc30>
    41ee:	eb c0                	jmp    41b0 <parse_transform+0xc20>
    41f0:	31 d2                	xor    %edx,%edx
    41f2:	89 f8                	mov    %edi,%eax
    41f4:	e8 57 07 00 00       	call   4950 <parse_if>
    41f9:	89 c6                	mov    %eax,%esi
    41fb:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    4201:	e9 ef f3 ff ff       	jmp    35f5 <parse_transform+0x65>
    4206:	8b 5d a0             	mov    -0x60(%ebp),%ebx
    4209:	89 75 a4             	mov    %esi,-0x5c(%ebp)
    420c:	e9 b7 fc ff ff       	jmp    3ec8 <parse_transform+0x938>
    4211:	83 ec 0c             	sub    $0xc,%esp
    4214:	8b 8f 24 10 00 00    	mov    0x1024(%edi),%ecx
    421a:	89 45 b0             	mov    %eax,-0x50(%ebp)
    421d:	51                   	push   %ecx
    421e:	e8 cd de 00 00       	call   120f0 <free@plt>
    4223:	83 c4 10             	add    $0x10,%esp
    4226:	8b 45 b0             	mov    -0x50(%ebp),%eax
    4229:	e9 71 f6 ff ff       	jmp    389f <parse_transform+0x30f>
    422e:	ba 7b 00 00 00       	mov    $0x7b,%edx
    4233:	89 f8                	mov    %edi,%eax
    4235:	e8 66 e7 ff ff       	call   29a0 <expect>
    423a:	89 f8                	mov    %edi,%eax
    423c:	e8 4f f3 ff ff       	call   3590 <parse_transform>
    4241:	ba 7d 00 00 00       	mov    $0x7d,%edx
    4246:	89 45 e0             	mov    %eax,-0x20(%ebp)
    4249:	89 f8                	mov    %edi,%eax
    424b:	e8 50 e7 ff ff       	call   29a0 <expect>
    4250:	8b 37                	mov    (%edi),%esi
    4252:	85 f6                	test   %esi,%esi
    4254:	0f 85 c7 01 00 00    	jne    4421 <parse_transform+0xe91>
    425a:	8b 5d e0             	mov    -0x20(%ebp),%ebx
    425d:	51                   	push   %ecx
    425e:	51                   	push   %ecx
    425f:	53                   	push   %ebx
    4260:	8d 5d e0             	lea    -0x20(%ebp),%ebx
    4263:	53                   	push   %ebx
    4264:	e8 27 91 00 00       	call   d390 <bithenge_partial_transform>
    4269:	83 c4 10             	add    $0x10,%esp
    426c:	85 c0                	test   %eax,%eax
    426e:	0f 85 45 05 00 00    	jne    47b9 <parse_transform+0x1229>
    4274:	8b 75 cc             	mov    -0x34(%ebp),%esi
    4277:	85 f6                	test   %esi,%esi
    4279:	74 35                	je     42b0 <parse_transform+0xd20>
    427b:	83 ec 0c             	sub    $0xc,%esp
    427e:	6a 08                	push   $0x8
    4280:	e8 db db 00 00       	call   11e60 <malloc@plt>
    4285:	83 c4 10             	add    $0x10,%esp
    4288:	85 c0                	test   %eax,%eax
    428a:	0f 84 c7 05 00 00    	je     4857 <parse_transform+0x12c7>
    4290:	8b 55 e0             	mov    -0x20(%ebp),%edx
    4293:	89 10                	mov    %edx,(%eax)
    4295:	8b 55 cc             	mov    -0x34(%ebp),%edx
    4298:	89 50 04             	mov    %edx,0x4(%eax)
    429b:	52                   	push   %edx
    429c:	6a 02                	push   $0x2
    429e:	50                   	push   %eax
    429f:	53                   	push   %ebx
    42a0:	e8 4b 8e 00 00       	call   d0f0 <bithenge_new_composed_transform>
    42a5:	83 c4 10             	add    $0x10,%esp
    42a8:	85 c0                	test   %eax,%eax
    42aa:	0f 85 8d fd ff ff    	jne    403d <parse_transform+0xaad>
    42b0:	8b 75 e0             	mov    -0x20(%ebp),%esi
    42b3:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    42b9:	e9 37 f3 ff ff       	jmp    35f5 <parse_transform+0x65>
    42be:	8b 55 dc             	mov    -0x24(%ebp),%edx
    42c1:	85 d2                	test   %edx,%edx
    42c3:	74 1d                	je     42e2 <parse_transform+0xd52>
    42c5:	8b 0a                	mov    (%edx),%ecx
    42c7:	85 c9                	test   %ecx,%ecx
    42c9:	0f 84 01 06 00 00    	je     48d0 <parse_transform+0x1340>
    42cf:	8b 42 04             	mov    0x4(%edx),%eax
    42d2:	85 c0                	test   %eax,%eax
    42d4:	0f 84 35 06 00 00    	je     490f <parse_transform+0x137f>
    42da:	48                   	dec    %eax
    42db:	89 42 04             	mov    %eax,0x4(%edx)
    42de:	85 c0                	test   %eax,%eax
    42e0:	74 64                	je     4346 <parse_transform+0xdb6>
    42e2:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    42e5:	85 f6                	test   %esi,%esi
    42e7:	0f 85 cf f9 ff ff    	jne    3cbc <parse_transform+0x72c>
    42ed:	e9 e5 f6 ff ff       	jmp    39d7 <parse_transform+0x447>
    42f2:	8b 45 a0             	mov    -0x60(%ebp),%eax
    42f5:	89 45 9c             	mov    %eax,-0x64(%ebp)
    42f8:	e9 5b fb ff ff       	jmp    3e58 <parse_transform+0x8c8>
    42fd:	8b 17                	mov    (%edi),%edx
    42ff:	85 d2                	test   %edx,%edx
    4301:	74 4f                	je     4352 <parse_transform+0xdc2>
    4303:	8b 75 dc             	mov    -0x24(%ebp),%esi
    4306:	85 f6                	test   %esi,%esi
    4308:	0f 85 ae f9 ff ff    	jne    3cbc <parse_transform+0x72c>
    430e:	e9 c4 f6 ff ff       	jmp    39d7 <parse_transform+0x447>
    4313:	89 f8                	mov    %edi,%eax
    4315:	e8 f6 dd ff ff       	call   2110 <next_token>
    431a:	ba 7b 00 00 00       	mov    $0x7b,%edx
    431f:	89 f8                	mov    %edi,%eax
    4321:	e8 7a e6 ff ff       	call   29a0 <expect>
    4326:	89 f8                	mov    %edi,%eax
    4328:	e8 83 0a 00 00       	call   4db0 <parse_struct>
    432d:	ba 7d 00 00 00       	mov    $0x7d,%edx
    4332:	89 c6                	mov    %eax,%esi
    4334:	89 f8                	mov    %edi,%eax
    4336:	e8 65 e6 ff ff       	call   29a0 <expect>
    433b:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    4341:	e9 af f2 ff ff       	jmp    35f5 <parse_transform+0x65>
    4346:	83 ec 0c             	sub    $0xc,%esp
    4349:	52                   	push   %edx
    434a:	ff 51 0c             	call   *0xc(%ecx)
    434d:	83 c4 10             	add    $0x10,%esp
    4350:	eb 90                	jmp    42e2 <parse_transform+0xd52>
    4352:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    4359:	0f 84 bd 04 00 00    	je     481c <parse_transform+0x128c>
    435f:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    4366:	ff ff ff 
    4369:	89 07                	mov    %eax,(%edi)
    436b:	eb 96                	jmp    4303 <parse_transform+0xd73>
    436d:	89 f8                	mov    %edi,%eax
    436f:	e8 9c dd ff ff       	call   2110 <next_token>
    4374:	31 d2                	xor    %edx,%edx
    4376:	89 f8                	mov    %edi,%eax
    4378:	e8 43 e7 ff ff       	call   2ac0 <parse_expression_precedence>
    437d:	ba 29 00 00 00       	mov    $0x29,%edx
    4382:	89 c3                	mov    %eax,%ebx
    4384:	89 f8                	mov    %edi,%eax
    4386:	e8 15 e6 ff ff       	call   29a0 <expect>
    438b:	ba 7b 00 00 00       	mov    $0x7b,%edx
    4390:	89 f8                	mov    %edi,%eax
    4392:	e8 09 e6 ff ff       	call   29a0 <expect>
    4397:	89 f8                	mov    %edi,%eax
    4399:	e8 f2 f1 ff ff       	call   3590 <parse_transform>
    439e:	ba 7d 00 00 00       	mov    $0x7d,%edx
    43a3:	89 c6                	mov    %eax,%esi
    43a5:	89 f8                	mov    %edi,%eax
    43a7:	e8 f4 e5 ff ff       	call   29a0 <expect>
    43ac:	8b 07                	mov    (%edi),%eax
    43ae:	85 c0                	test   %eax,%eax
    43b0:	0f 84 fc fc ff ff    	je     40b2 <parse_transform+0xb22>
    43b6:	85 db                	test   %ebx,%ebx
    43b8:	74 27                	je     43e1 <parse_transform+0xe51>
    43ba:	8b 13                	mov    (%ebx),%edx
    43bc:	85 d2                	test   %edx,%edx
    43be:	0f 84 39 05 00 00    	je     48fd <parse_transform+0x136d>
    43c4:	8b 43 04             	mov    0x4(%ebx),%eax
    43c7:	85 c0                	test   %eax,%eax
    43c9:	0f 84 13 05 00 00    	je     48e2 <parse_transform+0x1352>
    43cf:	48                   	dec    %eax
    43d0:	89 43 04             	mov    %eax,0x4(%ebx)
    43d3:	85 c0                	test   %eax,%eax
    43d5:	75 0a                	jne    43e1 <parse_transform+0xe51>
    43d7:	83 ec 0c             	sub    $0xc,%esp
    43da:	53                   	push   %ebx
    43db:	ff 52 04             	call   *0x4(%edx)
    43de:	83 c4 10             	add    $0x10,%esp
    43e1:	85 f6                	test   %esi,%esi
    43e3:	0f 84 2b fa ff ff    	je     3e14 <parse_transform+0x884>
    43e9:	8b 16                	mov    (%esi),%edx
    43eb:	85 d2                	test   %edx,%edx
    43ed:	0f 84 dd 04 00 00    	je     48d0 <parse_transform+0x1340>
    43f3:	8b 46 04             	mov    0x4(%esi),%eax
    43f6:	85 c0                	test   %eax,%eax
    43f8:	0f 84 11 05 00 00    	je     490f <parse_transform+0x137f>
    43fe:	48                   	dec    %eax
    43ff:	89 46 04             	mov    %eax,0x4(%esi)
    4402:	85 c0                	test   %eax,%eax
    4404:	0f 85 ee f9 ff ff    	jne    3df8 <parse_transform+0x868>
    440a:	83 ec 0c             	sub    $0xc,%esp
    440d:	56                   	push   %esi
    440e:	31 f6                	xor    %esi,%esi
    4410:	ff 52 0c             	call   *0xc(%edx)
    4413:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    4419:	83 c4 10             	add    $0x10,%esp
    441c:	e9 d4 f1 ff ff       	jmp    35f5 <parse_transform+0x65>
    4421:	8b 45 cc             	mov    -0x34(%ebp),%eax
    4424:	85 c0                	test   %eax,%eax
    4426:	74 27                	je     444f <parse_transform+0xebf>
    4428:	8b 08                	mov    (%eax),%ecx
    442a:	85 c9                	test   %ecx,%ecx
    442c:	0f 84 9e 04 00 00    	je     48d0 <parse_transform+0x1340>
    4432:	8b 50 04             	mov    0x4(%eax),%edx
    4435:	85 d2                	test   %edx,%edx
    4437:	0f 84 d2 04 00 00    	je     490f <parse_transform+0x137f>
    443d:	4a                   	dec    %edx
    443e:	89 50 04             	mov    %edx,0x4(%eax)
    4441:	85 d2                	test   %edx,%edx
    4443:	75 0a                	jne    444f <parse_transform+0xebf>
    4445:	83 ec 0c             	sub    $0xc,%esp
    4448:	50                   	push   %eax
    4449:	ff 51 0c             	call   *0xc(%ecx)
    444c:	83 c4 10             	add    $0x10,%esp
    444f:	8b 75 e0             	mov    -0x20(%ebp),%esi
    4452:	85 f6                	test   %esi,%esi
    4454:	0f 84 ba f9 ff ff    	je     3e14 <parse_transform+0x884>
    445a:	8b 16                	mov    (%esi),%edx
    445c:	85 d2                	test   %edx,%edx
    445e:	0f 84 6c 04 00 00    	je     48d0 <parse_transform+0x1340>
    4464:	8b 46 04             	mov    0x4(%esi),%eax
    4467:	85 c0                	test   %eax,%eax
    4469:	0f 84 a0 04 00 00    	je     490f <parse_transform+0x137f>
    446f:	48                   	dec    %eax
    4470:	89 46 04             	mov    %eax,0x4(%esi)
    4473:	85 c0                	test   %eax,%eax
    4475:	0f 85 7d f9 ff ff    	jne    3df8 <parse_transform+0x868>
    447b:	83 ec 0c             	sub    $0xc,%esp
    447e:	56                   	push   %esi
    447f:	31 f6                	xor    %esi,%esi
    4481:	ff 52 0c             	call   *0xc(%edx)
    4484:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    448a:	83 c4 10             	add    $0x10,%esp
    448d:	e9 63 f1 ff ff       	jmp    35f5 <parse_transform+0x65>
    4492:	83 ec 0c             	sub    $0xc,%esp
    4495:	8b 8f 24 10 00 00    	mov    0x1024(%edi),%ecx
    449b:	51                   	push   %ecx
    449c:	e8 4f dc 00 00       	call   120f0 <free@plt>
    44a1:	83 c4 10             	add    $0x10,%esp
    44a4:	e9 46 f3 ff ff       	jmp    37ef <parse_transform+0x25f>
    44a9:	8b 75 a8             	mov    -0x58(%ebp),%esi
    44ac:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
    44af:	e9 69 f1 ff ff       	jmp    361d <parse_transform+0x8d>
    44b4:	31 d2                	xor    %edx,%edx
    44b6:	89 f8                	mov    %edi,%eax
    44b8:	e8 a3 0c 00 00       	call   5160 <parse_switch>
    44bd:	89 c6                	mov    %eax,%esi
    44bf:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    44c5:	e9 2b f1 ff ff       	jmp    35f5 <parse_transform+0x65>
    44ca:	ba 85 13 01 00       	mov    $0x11385,%edx
    44cf:	89 f8                	mov    %edi,%eax
    44d1:	e8 3a db ff ff       	call   2010 <syntax_error.part.2>
    44d6:	8b 07                	mov    (%edi),%eax
    44d8:	85 c0                	test   %eax,%eax
    44da:	0f 85 48 f8 ff ff    	jne    3d28 <parse_transform+0x798>
    44e0:	80 bf 34 10 00 00 00 	cmpb   $0x0,0x1034(%edi)
    44e7:	74 14                	je     44fd <parse_transform+0xf6d>
    44e9:	50                   	push   %eax
    44ea:	50                   	push   %eax
    44eb:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    44ee:	53                   	push   %ebx
    44ef:	50                   	push   %eax
    44f0:	e8 1b a6 00 00       	call   eb10 <bithenge_expression_transform>
    44f5:	83 c4 10             	add    $0x10,%esp
    44f8:	e9 c4 fb ff ff       	jmp    40c1 <parse_transform+0xb31>
    44fd:	50                   	push   %eax
    44fe:	50                   	push   %eax
    44ff:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    4502:	53                   	push   %ebx
    4503:	50                   	push   %eax
    4504:	e8 c7 a6 00 00       	call   ebd0 <bithenge_inputless_transform>
    4509:	83 c4 10             	add    $0x10,%esp
    450c:	e9 b0 fb ff ff       	jmp    40c1 <parse_transform+0xb31>
    4511:	8b 17                	mov    (%edi),%edx
    4513:	85 d2                	test   %edx,%edx
    4515:	0f 85 e1 f1 ff ff    	jne    36fc <parse_transform+0x16c>
    451b:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    4522:	0f 84 d7 02 00 00    	je     47ff <parse_transform+0x126f>
    4528:	89 07                	mov    %eax,(%edi)
    452a:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    4531:	ff ff ff 
    4534:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
    4539:	e9 c4 f1 ff ff       	jmp    3702 <parse_transform+0x172>
    453e:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    4545:	0f 84 8d 02 00 00    	je     47d8 <parse_transform+0x1248>
    454b:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    4552:	ff ff ff 
    4555:	89 07                	mov    %eax,(%edi)
    4557:	e9 9c f6 ff ff       	jmp    3bf8 <parse_transform+0x668>
    455c:	89 f8                	mov    %edi,%eax
    455e:	e8 ad db ff ff       	call   2110 <next_token>
    4563:	e9 6e ff ff ff       	jmp    44d6 <parse_transform+0xf46>
    4568:	8b 0f                	mov    (%edi),%ecx
    456a:	85 c9                	test   %ecx,%ecx
    456c:	75 0c                	jne    457a <parse_transform+0xfea>
    456e:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
    4573:	89 f8                	mov    %edi,%eax
    4575:	e8 46 d9 ff ff       	call   1ec0 <error_errno.part.1>
    457a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    457d:	85 c0                	test   %eax,%eax
    457f:	0f 84 7e fd ff ff    	je     4303 <parse_transform+0xd73>
    4585:	8b 08                	mov    (%eax),%ecx
    4587:	85 c9                	test   %ecx,%ecx
    4589:	0f 84 41 03 00 00    	je     48d0 <parse_transform+0x1340>
    458f:	8b 50 04             	mov    0x4(%eax),%edx
    4592:	85 d2                	test   %edx,%edx
    4594:	0f 84 75 03 00 00    	je     490f <parse_transform+0x137f>
    459a:	4a                   	dec    %edx
    459b:	89 50 04             	mov    %edx,0x4(%eax)
    459e:	85 d2                	test   %edx,%edx
    45a0:	0f 85 5d fd ff ff    	jne    4303 <parse_transform+0xd73>
    45a6:	83 ec 0c             	sub    $0xc,%esp
    45a9:	50                   	push   %eax
    45aa:	ff 51 0c             	call   *0xc(%ecx)
    45ad:	83 c4 10             	add    $0x10,%esp
    45b0:	e9 4e fd ff ff       	jmp    4303 <parse_transform+0xd73>
    45b5:	83 ec 0c             	sub    $0xc,%esp
    45b8:	8b 8f 24 10 00 00    	mov    0x1024(%edi),%ecx
    45be:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    45c1:	51                   	push   %ecx
    45c2:	e8 29 db 00 00       	call   120f0 <free@plt>
    45c7:	83 c4 10             	add    $0x10,%esp
    45ca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    45cd:	e9 95 f5 ff ff       	jmp    3b67 <parse_transform+0x5d7>
    45d2:	8b 17                	mov    (%edi),%edx
    45d4:	85 d2                	test   %edx,%edx
    45d6:	0f 85 33 fb ff ff    	jne    410f <parse_transform+0xb7f>
    45dc:	ba ef 13 01 00       	mov    $0x113ef,%edx
    45e1:	89 f8                	mov    %edi,%eax
    45e3:	e8 28 da ff ff       	call   2010 <syntax_error.part.2>
    45e8:	e9 22 fb ff ff       	jmp    410f <parse_transform+0xb7f>
    45ed:	8b 75 c8             	mov    -0x38(%ebp),%esi
    45f0:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    45f6:	e9 fa ef ff ff       	jmp    35f5 <parse_transform+0x65>
    45fb:	89 f8                	mov    %edi,%eax
    45fd:	e8 0e db ff ff       	call   2110 <next_token>
    4602:	8b 07                	mov    (%edi),%eax
    4604:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    4607:	85 c0                	test   %eax,%eax
    4609:	0f 85 6e 02 00 00    	jne    487d <parse_transform+0x12ed>
    460f:	31 c9                	xor    %ecx,%ecx
    4611:	31 db                	xor    %ebx,%ebx
    4613:	83 bf 20 10 00 00 29 	cmpl   $0x29,0x1020(%edi)
    461a:	74 6e                	je     468a <parse_transform+0x10fa>
    461c:	40                   	inc    %eax
    461d:	89 4d ac             	mov    %ecx,-0x54(%ebp)
    4620:	89 45 b0             	mov    %eax,-0x50(%ebp)
    4623:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
    462a:	50                   	push   %eax
    462b:	50                   	push   %eax
    462c:	53                   	push   %ebx
    462d:	51                   	push   %ecx
    462e:	e8 6d d9 00 00       	call   11fa0 <realloc@plt>
    4633:	83 c4 10             	add    $0x10,%esp
    4636:	89 c6                	mov    %eax,%esi
    4638:	85 c0                	test   %eax,%eax
    463a:	8b 4d ac             	mov    -0x54(%ebp),%ecx
    463d:	74 62                	je     46a1 <parse_transform+0x1111>
    463f:	8b 07                	mov    (%edi),%eax
    4641:	85 c0                	test   %eax,%eax
    4643:	0f 85 3d 02 00 00    	jne    4886 <parse_transform+0x12f6>
    4649:	31 d2                	xor    %edx,%edx
    464b:	89 f8                	mov    %edi,%eax
    464d:	e8 6e e4 ff ff       	call   2ac0 <parse_expression_precedence>
    4652:	8d 5c 1e fc          	lea    -0x4(%esi,%ebx,1),%ebx
    4656:	89 03                	mov    %eax,(%ebx)
    4658:	8b 07                	mov    (%edi),%eax
    465a:	85 c0                	test   %eax,%eax
    465c:	0f 85 16 01 00 00    	jne    4778 <parse_transform+0x11e8>
    4662:	83 bf 20 10 00 00 29 	cmpl   $0x29,0x1020(%edi)
    4669:	0f 84 09 01 00 00    	je     4778 <parse_transform+0x11e8>
    466f:	89 f8                	mov    %edi,%eax
    4671:	ba 2c 00 00 00       	mov    $0x2c,%edx
    4676:	e8 25 e3 ff ff       	call   29a0 <expect>
    467b:	8b 07                	mov    (%edi),%eax
    467d:	89 f1                	mov    %esi,%ecx
    467f:	85 c0                	test   %eax,%eax
    4681:	0f 84 46 01 00 00    	je     47cd <parse_transform+0x123d>
    4687:	8b 5d b0             	mov    -0x50(%ebp),%ebx
    468a:	ba 29 00 00 00       	mov    $0x29,%edx
    468f:	89 f8                	mov    %edi,%eax
    4691:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
    4694:	e8 07 e3 ff ff       	call   29a0 <expect>
    4699:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
    469c:	e9 86 fa ff ff       	jmp    4127 <parse_transform+0xb97>
    46a1:	8b 07                	mov    (%edi),%eax
    46a3:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
    46a6:	85 c0                	test   %eax,%eax
    46a8:	75 e0                	jne    468a <parse_transform+0x10fa>
    46aa:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    46b1:	0f 84 d9 01 00 00    	je     4890 <parse_transform+0x1300>
    46b7:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    46be:	ff ff ff 
    46c1:	c7 07 fe ff ff ff    	movl   $0xfffffffe,(%edi)
    46c7:	eb c1                	jmp    468a <parse_transform+0x10fa>
    46c9:	8b 07                	mov    (%edi),%eax
    46cb:	85 c0                	test   %eax,%eax
    46cd:	0f 85 f7 f6 ff ff    	jne    3dca <parse_transform+0x83a>
    46d3:	83 ec 0c             	sub    $0xc,%esp
    46d6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    46d9:	8b 75 d0             	mov    -0x30(%ebp),%esi
    46dc:	6a 01                	push   $0x1
    46de:	6a 00                	push   $0x0
    46e0:	56                   	push   %esi
    46e1:	50                   	push   %eax
    46e2:	8d 45 d0             	lea    -0x30(%ebp),%eax
    46e5:	50                   	push   %eax
    46e6:	e8 95 a1 00 00       	call   e880 <bithenge_subblob_expression>
    46eb:	83 c4 20             	add    $0x20,%esp
    46ee:	85 c0                	test   %eax,%eax
    46f0:	75 1a                	jne    470c <parse_transform+0x117c>
    46f2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
    46f5:	8d 45 cc             	lea    -0x34(%ebp),%eax
    46f8:	51                   	push   %ecx
    46f9:	51                   	push   %ecx
    46fa:	53                   	push   %ebx
    46fb:	50                   	push   %eax
    46fc:	e8 0f a4 00 00       	call   eb10 <bithenge_expression_transform>
    4701:	83 c4 10             	add    $0x10,%esp
    4704:	85 c0                	test   %eax,%eax
    4706:	0f 84 22 fb ff ff    	je     422e <parse_transform+0xc9e>
    470c:	8b 17                	mov    (%edi),%edx
    470e:	85 d2                	test   %edx,%edx
    4710:	0f 85 e2 f6 ff ff    	jne    3df8 <parse_transform+0x868>
    4716:	89 c2                	mov    %eax,%edx
    4718:	89 f8                	mov    %edi,%eax
    471a:	e8 a1 d7 ff ff       	call   1ec0 <error_errno.part.1>
    471f:	e9 d4 f6 ff ff       	jmp    3df8 <parse_transform+0x868>
    4724:	85 db                	test   %ebx,%ebx
    4726:	74 27                	je     474f <parse_transform+0x11bf>
    4728:	8b 13                	mov    (%ebx),%edx
    472a:	85 d2                	test   %edx,%edx
    472c:	0f 84 cb 01 00 00    	je     48fd <parse_transform+0x136d>
    4732:	8b 43 04             	mov    0x4(%ebx),%eax
    4735:	85 c0                	test   %eax,%eax
    4737:	0f 84 a5 01 00 00    	je     48e2 <parse_transform+0x1352>
    473d:	48                   	dec    %eax
    473e:	89 43 04             	mov    %eax,0x4(%ebx)
    4741:	85 c0                	test   %eax,%eax
    4743:	75 0a                	jne    474f <parse_transform+0x11bf>
    4745:	83 ec 0c             	sub    $0xc,%esp
    4748:	53                   	push   %ebx
    4749:	ff 52 04             	call   *0x4(%edx)
    474c:	83 c4 10             	add    $0x10,%esp
    474f:	85 f6                	test   %esi,%esi
    4751:	0f 85 03 fd ff ff    	jne    445a <parse_transform+0xeca>
    4757:	e9 b8 f6 ff ff       	jmp    3e14 <parse_transform+0x884>
    475c:	83 ec 0c             	sub    $0xc,%esp
    475f:	51                   	push   %ecx
    4760:	e8 8b d9 00 00       	call   120f0 <free@plt>
    4765:	8b 75 c8             	mov    -0x38(%ebp),%esi
    4768:	83 c4 10             	add    $0x10,%esp
    476b:	85 f6                	test   %esi,%esi
    476d:	0f 85 e7 fc ff ff    	jne    445a <parse_transform+0xeca>
    4773:	e9 9c f6 ff ff       	jmp    3e14 <parse_transform+0x884>
    4778:	8b 5d b0             	mov    -0x50(%ebp),%ebx
    477b:	89 f1                	mov    %esi,%ecx
    477d:	e9 08 ff ff ff       	jmp    468a <parse_transform+0x10fa>
    4782:	83 ec 0c             	sub    $0xc,%esp
    4785:	8b b7 24 10 00 00    	mov    0x1024(%edi),%esi
    478b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    478e:	56                   	push   %esi
    478f:	e8 5c d9 00 00       	call   120f0 <free@plt>
    4794:	83 c4 10             	add    $0x10,%esp
    4797:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    479a:	e9 b5 f8 ff ff       	jmp    4054 <parse_transform+0xac4>
    479f:	83 ec 0c             	sub    $0xc,%esp
    47a2:	8b 87 24 10 00 00    	mov    0x1024(%edi),%eax
    47a8:	50                   	push   %eax
    47a9:	e8 42 d9 00 00       	call   120f0 <free@plt>
    47ae:	83 c4 10             	add    $0x10,%esp
    47b1:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
    47b4:	e9 8b f7 ff ff       	jmp    3f44 <parse_transform+0x9b4>
    47b9:	8b 17                	mov    (%edi),%edx
    47bb:	85 d2                	test   %edx,%edx
    47bd:	75 09                	jne    47c8 <parse_transform+0x1238>
    47bf:	89 c2                	mov    %eax,%edx
    47c1:	89 f8                	mov    %edi,%eax
    47c3:	e8 f8 d6 ff ff       	call   1ec0 <error_errno.part.1>
    47c8:	8b 75 cc             	mov    -0x34(%ebp),%esi
    47cb:	eb 82                	jmp    474f <parse_transform+0x11bf>
    47cd:	8b 45 b0             	mov    -0x50(%ebp),%eax
    47d0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    47d3:	e9 44 fe ff ff       	jmp    461c <parse_transform+0x108c>
    47d8:	83 ec 0c             	sub    $0xc,%esp
    47db:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    47de:	8b 87 24 10 00 00    	mov    0x1024(%edi),%eax
    47e4:	50                   	push   %eax
    47e5:	e8 06 d9 00 00       	call   120f0 <free@plt>
    47ea:	83 c4 10             	add    $0x10,%esp
    47ed:	8b 45 a4             	mov    -0x5c(%ebp),%eax
    47f0:	e9 56 fd ff ff       	jmp    454b <parse_transform+0xfbb>
    47f5:	31 db                	xor    %ebx,%ebx
    47f7:	89 5d a4             	mov    %ebx,-0x5c(%ebp)
    47fa:	e9 c9 f6 ff ff       	jmp    3ec8 <parse_transform+0x938>
    47ff:	83 ec 0c             	sub    $0xc,%esp
    4802:	8b b7 24 10 00 00    	mov    0x1024(%edi),%esi
    4808:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    480b:	56                   	push   %esi
    480c:	e8 df d8 00 00       	call   120f0 <free@plt>
    4811:	83 c4 10             	add    $0x10,%esp
    4814:	8b 45 a4             	mov    -0x5c(%ebp),%eax
    4817:	e9 0c fd ff ff       	jmp    4528 <parse_transform+0xf98>
    481c:	83 ec 0c             	sub    $0xc,%esp
    481f:	8b b7 24 10 00 00    	mov    0x1024(%edi),%esi
    4825:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    4828:	56                   	push   %esi
    4829:	e8 c2 d8 00 00       	call   120f0 <free@plt>
    482e:	83 c4 10             	add    $0x10,%esp
    4831:	8b 45 a4             	mov    -0x5c(%ebp),%eax
    4834:	e9 26 fb ff ff       	jmp    435f <parse_transform+0xdcf>
    4839:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    4840:	0f 84 f2 00 00 00    	je     4938 <parse_transform+0x13a8>
    4846:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    484d:	ff ff ff 
    4850:	89 1f                	mov    %ebx,(%edi)
    4852:	e9 73 f5 ff ff       	jmp    3dca <parse_transform+0x83a>
    4857:	8b 0f                	mov    (%edi),%ecx
    4859:	85 c9                	test   %ecx,%ecx
    485b:	74 53                	je     48b0 <parse_transform+0x1320>
    485d:	8b 45 e0             	mov    -0x20(%ebp),%eax
    4860:	e8 ab d6 ff ff       	call   1f10 <bithenge_transform_dec_ref>
    4865:	8b 45 cc             	mov    -0x34(%ebp),%eax
    4868:	e8 a3 d6 ff ff       	call   1f10 <bithenge_transform_dec_ref>
    486d:	e9 86 f5 ff ff       	jmp    3df8 <parse_transform+0x868>
    4872:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
    4875:	89 75 a4             	mov    %esi,-0x5c(%ebp)
    4878:	e9 4b f6 ff ff       	jmp    3ec8 <parse_transform+0x938>
    487d:	31 db                	xor    %ebx,%ebx
    487f:	31 c9                	xor    %ecx,%ecx
    4881:	e9 04 fe ff ff       	jmp    468a <parse_transform+0x10fa>
    4886:	89 f1                	mov    %esi,%ecx
    4888:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
    488b:	e9 fa fd ff ff       	jmp    468a <parse_transform+0x10fa>
    4890:	83 ec 0c             	sub    $0xc,%esp
    4893:	8b 87 24 10 00 00    	mov    0x1024(%edi),%eax
    4899:	89 4d b0             	mov    %ecx,-0x50(%ebp)
    489c:	50                   	push   %eax
    489d:	e8 4e d8 00 00       	call   120f0 <free@plt>
    48a2:	83 c4 10             	add    $0x10,%esp
    48a5:	8b 4d b0             	mov    -0x50(%ebp),%ecx
    48a8:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
    48ab:	e9 07 fe ff ff       	jmp    46b7 <parse_transform+0x1127>
    48b0:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
    48b5:	89 f8                	mov    %edi,%eax
    48b7:	e8 04 d6 ff ff       	call   1ec0 <error_errno.part.1>
    48bc:	eb 9f                	jmp    485d <parse_transform+0x12cd>
    48be:	53                   	push   %ebx
    48bf:	6a 62                	push   $0x62
    48c1:	68 18 13 01 00       	push   $0x11318
    48c6:	68 35 13 01 00       	push   $0x11335
    48cb:	e8 40 d6 00 00       	call   11f10 <assert_abort@plt>
    48d0:	56                   	push   %esi
    48d1:	6a 74                	push   $0x74
    48d3:	68 18 13 01 00       	push   $0x11318
    48d8:	68 61 11 01 00       	push   $0x11161
    48dd:	e8 2e d6 00 00       	call   11f10 <assert_abort@plt>
    48e2:	50                   	push   %eax
    48e3:	6a 4c                	push   $0x4c
    48e5:	68 a3 13 01 00       	push   $0x113a3
    48ea:	68 6b 11 01 00       	push   $0x1116b
    48ef:	e8 1c d6 00 00       	call   11f10 <assert_abort@plt>
    48f4:	89 c3                	mov    %eax,%ebx
    48f6:	b1 01                	mov    $0x1,%cl
    48f8:	e9 2b ed ff ff       	jmp    3628 <parse_transform+0x98>
    48fd:	50                   	push   %eax
    48fe:	6a 4b                	push   $0x4b
    4900:	68 a3 13 01 00       	push   $0x113a3
    4905:	68 61 11 01 00       	push   $0x11161
    490a:	e8 01 d6 00 00       	call   11f10 <assert_abort@plt>
    490f:	53                   	push   %ebx
    4910:	6a 75                	push   $0x75
    4912:	68 18 13 01 00       	push   $0x11318
    4917:	68 6b 11 01 00       	push   $0x1116b
    491c:	e8 ef d5 00 00       	call   11f10 <assert_abort@plt>
    4921:	83 ec 0c             	sub    $0xc,%esp
    4924:	8b 87 24 10 00 00    	mov    0x1024(%edi),%eax
    492a:	50                   	push   %eax
    492b:	e8 c0 d7 00 00       	call   120f0 <free@plt>
    4930:	83 c4 10             	add    $0x10,%esp
    4933:	e9 5c f8 ff ff       	jmp    4194 <parse_transform+0xc04>
    4938:	83 ec 0c             	sub    $0xc,%esp
    493b:	8b 87 24 10 00 00    	mov    0x1024(%edi),%eax
    4941:	50                   	push   %eax
    4942:	e8 a9 d7 00 00       	call   120f0 <free@plt>
    4947:	83 c4 10             	add    $0x10,%esp
    494a:	e9 f7 fe ff ff       	jmp    4846 <parse_transform+0x12b6>
    494f:	90                   	nop

00004950 <parse_if>:
    4950:	55                   	push   %ebp
    4951:	89 e5                	mov    %esp,%ebp
    4953:	57                   	push   %edi
    4954:	56                   	push   %esi
    4955:	53                   	push   %ebx
    4956:	83 ec 2c             	sub    $0x2c,%esp
    4959:	89 c7                	mov    %eax,%edi
    495b:	8b 80 20 10 00 00    	mov    0x1020(%eax),%eax
    4961:	89 d3                	mov    %edx,%ebx
    4963:	83 f8 90             	cmp    $0xffffff90,%eax
    4966:	0f 84 3c 03 00 00    	je     4ca8 <parse_if+0x358>
    496c:	8b 37                	mov    (%edi),%esi
    496e:	85 f6                	test   %esi,%esi
    4970:	0f 84 8a 02 00 00    	je     4c00 <parse_if+0x2b0>
    4976:	83 f8 28             	cmp    $0x28,%eax
    4979:	0f 84 09 03 00 00    	je     4c88 <parse_if+0x338>
    497f:	31 d2                	xor    %edx,%edx
    4981:	89 f8                	mov    %edi,%eax
    4983:	e8 38 e1 ff ff       	call   2ac0 <parse_expression_precedence>
    4988:	89 c6                	mov    %eax,%esi
    498a:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    4990:	83 f8 29             	cmp    $0x29,%eax
    4993:	0f 84 ff 02 00 00    	je     4c98 <parse_if+0x348>
    4999:	8b 17                	mov    (%edi),%edx
    499b:	85 d2                	test   %edx,%edx
    499d:	0f 84 25 02 00 00    	je     4bc8 <parse_if+0x278>
    49a3:	83 f8 7b             	cmp    $0x7b,%eax
    49a6:	0f 84 0c 03 00 00    	je     4cb8 <parse_if+0x368>
    49ac:	89 f8                	mov    %edi,%eax
    49ae:	84 db                	test   %bl,%bl
    49b0:	0f 84 d2 00 00 00    	je     4a88 <parse_if+0x138>
    49b6:	e8 f5 03 00 00       	call   4db0 <parse_struct>
    49bb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    49be:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    49c4:	83 f8 7d             	cmp    $0x7d,%eax
    49c7:	0f 84 d2 00 00 00    	je     4a9f <parse_if+0x14f>
    49cd:	8b 17                	mov    (%edi),%edx
    49cf:	85 d2                	test   %edx,%edx
    49d1:	0f 84 d9 01 00 00    	je     4bb0 <parse_if+0x260>
    49d7:	83 f8 8e             	cmp    $0xffffff8e,%eax
    49da:	0f 84 d8 00 00 00    	je     4ab8 <parse_if+0x168>
    49e0:	84 db                	test   %bl,%bl
    49e2:	0f 85 70 01 00 00    	jne    4b58 <parse_if+0x208>
    49e8:	8b 07                	mov    (%edi),%eax
    49ea:	31 db                	xor    %ebx,%ebx
    49ec:	85 c0                	test   %eax,%eax
    49ee:	0f 84 3c 02 00 00    	je     4c30 <parse_if+0x2e0>
    49f4:	85 f6                	test   %esi,%esi
    49f6:	74 27                	je     4a1f <parse_if+0xcf>
    49f8:	8b 16                	mov    (%esi),%edx
    49fa:	85 d2                	test   %edx,%edx
    49fc:	0f 84 96 03 00 00    	je     4d98 <parse_if+0x448>
    4a02:	8b 46 04             	mov    0x4(%esi),%eax
    4a05:	85 c0                	test   %eax,%eax
    4a07:	0f 84 79 03 00 00    	je     4d86 <parse_if+0x436>
    4a0d:	48                   	dec    %eax
    4a0e:	89 46 04             	mov    %eax,0x4(%esi)
    4a11:	85 c0                	test   %eax,%eax
    4a13:	75 0a                	jne    4a1f <parse_if+0xcf>
    4a15:	83 ec 0c             	sub    $0xc,%esp
    4a18:	56                   	push   %esi
    4a19:	ff 52 04             	call   *0x4(%edx)
    4a1c:	83 c4 10             	add    $0x10,%esp
    4a1f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    4a22:	85 c0                	test   %eax,%eax
    4a24:	74 2a                	je     4a50 <parse_if+0x100>
    4a26:	8b 10                	mov    (%eax),%edx
    4a28:	85 d2                	test   %edx,%edx
    4a2a:	0f 84 44 03 00 00    	je     4d74 <parse_if+0x424>
    4a30:	8b 40 04             	mov    0x4(%eax),%eax
    4a33:	85 c0                	test   %eax,%eax
    4a35:	0f 84 27 03 00 00    	je     4d62 <parse_if+0x412>
    4a3b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    4a3e:	48                   	dec    %eax
    4a3f:	85 c0                	test   %eax,%eax
    4a41:	89 41 04             	mov    %eax,0x4(%ecx)
    4a44:	75 0a                	jne    4a50 <parse_if+0x100>
    4a46:	83 ec 0c             	sub    $0xc,%esp
    4a49:	51                   	push   %ecx
    4a4a:	ff 52 0c             	call   *0xc(%edx)
    4a4d:	83 c4 10             	add    $0x10,%esp
    4a50:	85 db                	test   %ebx,%ebx
    4a52:	74 24                	je     4a78 <parse_if+0x128>
    4a54:	8b 13                	mov    (%ebx),%edx
    4a56:	85 d2                	test   %edx,%edx
    4a58:	0f 84 16 03 00 00    	je     4d74 <parse_if+0x424>
    4a5e:	8b 43 04             	mov    0x4(%ebx),%eax
    4a61:	85 c0                	test   %eax,%eax
    4a63:	0f 84 f9 02 00 00    	je     4d62 <parse_if+0x412>
    4a69:	48                   	dec    %eax
    4a6a:	89 43 04             	mov    %eax,0x4(%ebx)
    4a6d:	85 c0                	test   %eax,%eax
    4a6f:	0f 84 63 02 00 00    	je     4cd8 <parse_if+0x388>
    4a75:	8d 76 00             	lea    0x0(%esi),%esi
    4a78:	31 c0                	xor    %eax,%eax
    4a7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
    4a7d:	5b                   	pop    %ebx
    4a7e:	5e                   	pop    %esi
    4a7f:	5f                   	pop    %edi
    4a80:	5d                   	pop    %ebp
    4a81:	c3                   	ret    
    4a82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    4a88:	e8 03 eb ff ff       	call   3590 <parse_transform>
    4a8d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    4a90:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    4a96:	83 f8 7d             	cmp    $0x7d,%eax
    4a99:	0f 85 2e ff ff ff    	jne    49cd <parse_if+0x7d>
    4a9f:	89 f8                	mov    %edi,%eax
    4aa1:	e8 6a d6 ff ff       	call   2110 <next_token>
    4aa6:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    4aac:	83 f8 8e             	cmp    $0xffffff8e,%eax
    4aaf:	0f 85 2b ff ff ff    	jne    49e0 <parse_if+0x90>
    4ab5:	8d 76 00             	lea    0x0(%esi),%esi
    4ab8:	89 f8                	mov    %edi,%eax
    4aba:	e8 51 d6 ff ff       	call   2110 <next_token>
    4abf:	83 bf 20 10 00 00 7b 	cmpl   $0x7b,0x1020(%edi)
    4ac6:	0f 84 3c 02 00 00    	je     4d08 <parse_if+0x3b8>
    4acc:	8b 07                	mov    (%edi),%eax
    4ace:	85 c0                	test   %eax,%eax
    4ad0:	0f 84 1a 02 00 00    	je     4cf0 <parse_if+0x3a0>
    4ad6:	89 f8                	mov    %edi,%eax
    4ad8:	84 db                	test   %bl,%bl
    4ada:	0f 84 e8 01 00 00    	je     4cc8 <parse_if+0x378>
    4ae0:	e8 cb 02 00 00       	call   4db0 <parse_struct>
    4ae5:	89 c3                	mov    %eax,%ebx
    4ae7:	83 bf 20 10 00 00 7d 	cmpl   $0x7d,0x1020(%edi)
    4aee:	0f 84 24 02 00 00    	je     4d18 <parse_if+0x3c8>
    4af4:	8b 0f                	mov    (%edi),%ecx
    4af6:	85 c9                	test   %ecx,%ecx
    4af8:	0f 85 f6 fe ff ff    	jne    49f4 <parse_if+0xa4>
    4afe:	ba 85 13 01 00       	mov    $0x11385,%edx
    4b03:	89 f8                	mov    %edi,%eax
    4b05:	e8 06 d5 ff ff       	call   2010 <syntax_error.part.2>
    4b0a:	8b 17                	mov    (%edi),%edx
    4b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4b10:	85 d2                	test   %edx,%edx
    4b12:	0f 85 dc fe ff ff    	jne    49f4 <parse_if+0xa4>
    4b18:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    4b1b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    4b1e:	53                   	push   %ebx
    4b1f:	51                   	push   %ecx
    4b20:	56                   	push   %esi
    4b21:	50                   	push   %eax
    4b22:	e8 e9 86 00 00       	call   d210 <bithenge_if_transform>
    4b27:	83 c4 10             	add    $0x10,%esp
    4b2a:	85 c0                	test   %eax,%eax
    4b2c:	74 72                	je     4ba0 <parse_if+0x250>
    4b2e:	8b 17                	mov    (%edi),%edx
    4b30:	85 d2                	test   %edx,%edx
    4b32:	0f 85 40 ff ff ff    	jne    4a78 <parse_if+0x128>
    4b38:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    4b3f:	0f 84 e3 01 00 00    	je     4d28 <parse_if+0x3d8>
    4b45:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    4b4c:	ff ff ff 
    4b4f:	89 07                	mov    %eax,(%edi)
    4b51:	e9 22 ff ff ff       	jmp    4a78 <parse_if+0x128>
    4b56:	66 90                	xchg   %ax,%ax
    4b58:	83 ec 0c             	sub    $0xc,%esp
    4b5b:	8d 45 dc             	lea    -0x24(%ebp),%eax
    4b5e:	50                   	push   %eax
    4b5f:	e8 6c 6d 00 00       	call   b8d0 <bithenge_new_empty_internal_node>
    4b64:	83 c4 10             	add    $0x10,%esp
    4b67:	85 c0                	test   %eax,%eax
    4b69:	0f 84 d9 00 00 00    	je     4c48 <parse_if+0x2f8>
    4b6f:	8b 17                	mov    (%edi),%edx
    4b71:	31 db                	xor    %ebx,%ebx
    4b73:	85 d2                	test   %edx,%edx
    4b75:	75 99                	jne    4b10 <parse_if+0x1c0>
    4b77:	83 bf 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%edi)
    4b7e:	0f 84 c1 01 00 00    	je     4d45 <parse_if+0x3f5>
    4b84:	c7 87 20 10 00 00 80 	movl   $0xffffff80,0x1020(%edi)
    4b8b:	ff ff ff 
    4b8e:	89 07                	mov    %eax,(%edi)
    4b90:	89 c2                	mov    %eax,%edx
    4b92:	31 db                	xor    %ebx,%ebx
    4b94:	e9 77 ff ff ff       	jmp    4b10 <parse_if+0x1c0>
    4b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    4ba0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    4ba3:	8d 65 f4             	lea    -0xc(%ebp),%esp
    4ba6:	5b                   	pop    %ebx
    4ba7:	5e                   	pop    %esi
    4ba8:	5f                   	pop    %edi
    4ba9:	5d                   	pop    %ebp
    4baa:	c3                   	ret    
    4bab:	90                   	nop
    4bac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4bb0:	89 f8                	mov    %edi,%eax
    4bb2:	ba 85 13 01 00       	mov    $0x11385,%edx
    4bb7:	e8 54 d4 ff ff       	call   2010 <syntax_error.part.2>
    4bbc:	8b 87 20 10 00 00    	mov    0x1020(%edi),%eax
    4bc2:	e9 10 fe ff ff       	jmp    49d7 <parse_if+0x87>
    4bc7:	90                   	nop
    4bc8:	ba 85 13 01 00       	mov    $0x11385,%edx
    4bcd:	89 f8                	mov    %edi,%eax
    4bcf:	e8 3c d4 ff ff       	call   2010 <syntax_error.part.2>
    4bd4:	83 bf 20 10 00 00 7b 	cmpl   $0x7b,0x1020(%edi)
    4bdb:	0f 84 d7 00 00 00    	je     4cb8 <parse_if+0x368>
    4be1:	8b 0f                	mov    (%edi),%ecx
    4be3:	85 c9                	test   %ecx,%ecx
    4be5:	0f 85 c1 fd ff ff    	jne    49ac <parse_if+0x5c>
    4beb:	ba 85 13 01 00       	mov    $0x11385,%edx
    4bf0:	89 f8                	mov    %edi,%eax
    4bf2:	e8 19 d4 ff ff       	call   2010 <syntax_error.part.2>
    4bf7:	e9 b0 fd ff ff       	jmp    49ac <parse_if+0x5c>
    4bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4c00:	ba 85 13 01 00       	mov    $0x11385,%edx
    4c05:	89 f8                	mov    %edi,%eax
    4c07:	e8 04 d4 ff ff       	call   2010 <syntax_error.part.2>
    4c0c:	83 bf 20 10 00 00 28 	cmpl   $0x28,0x1020(%edi)
    4c13:	74 73                	je     4c88 <parse_if+0x338>
    4c15:	8b 0f                	mov    (%edi),%ecx
    4c17:	85 c9                	test   %ecx,%ecx
    4c19:	0f 85 60 fd ff ff    	jne    497f <parse_if+0x2f>
    4c1f:	ba 85 13 01 00       	mov    $0x11385,%edx
    4c24:	89 f8                	mov    %edi,%eax
    4c26:	e8 e5 d3 ff ff       	call   2010 <syntax_error.part.2>
    4c2b:	e9 4f fd ff ff       	jmp    497f <parse_if+0x2f>
    4c30:	ba 03 14 01 00       	mov    $0x11403,%edx
    4c35:	89 f8                	mov    %edi,%eax
    4c37:	e8 d4 d3 ff ff       	call   2010 <syntax_error.part.2>
    4c3c:	8b 17                	mov    (%edi),%edx
    4c3e:	e9 cd fe ff ff       	jmp    4b10 <parse_if+0x1c0>
    4c43:	90                   	nop
    4c44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4c48:	8b 55 dc             	mov    -0x24(%ebp),%edx
    4c4b:	50                   	push   %eax
    4c4c:	50                   	push   %eax
    4c4d:	8d 45 e0             	lea    -0x20(%ebp),%eax
    4c50:	52                   	push   %edx
    4c51:	50                   	push   %eax
    4c52:	e8 69 9b 00 00       	call   e7c0 <bithenge_const_expression>
    4c57:	83 c4 10             	add    $0x10,%esp
    4c5a:	85 c0                	test   %eax,%eax
    4c5c:	0f 85 0d ff ff ff    	jne    4b6f <parse_if+0x21f>
    4c62:	50                   	push   %eax
    4c63:	50                   	push   %eax
    4c64:	8b 45 e0             	mov    -0x20(%ebp),%eax
    4c67:	50                   	push   %eax
    4c68:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    4c6b:	50                   	push   %eax
    4c6c:	e8 5f 9f 00 00       	call   ebd0 <bithenge_inputless_transform>
    4c71:	83 c4 10             	add    $0x10,%esp
    4c74:	85 c0                	test   %eax,%eax
    4c76:	0f 85 f3 fe ff ff    	jne    4b6f <parse_if+0x21f>
    4c7c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    4c7f:	8b 17                	mov    (%edi),%edx
    4c81:	e9 8a fe ff ff       	jmp    4b10 <parse_if+0x1c0>
    4c86:	66 90                	xchg   %ax,%ax
    4c88:	89 f8                	mov    %edi,%eax
    4c8a:	e8 81 d4 ff ff       	call   2110 <next_token>
    4c8f:	e9 eb fc ff ff       	jmp    497f <parse_if+0x2f>
    4c94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4c98:	89 f8                	mov    %edi,%eax
    4c9a:	e8 71 d4 ff ff       	call   2110 <next_token>
    4c9f:	e9 30 ff ff ff       	jmp    4bd4 <parse_if+0x284>
    4ca4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4ca8:	89 f8                	mov    %edi,%eax
    4caa:	e8 61 d4 ff ff       	call   2110 <next_token>
    4caf:	e9 58 ff ff ff       	jmp    4c0c <parse_if+0x2bc>
    4cb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4cb8:	89 f8                	mov    %edi,%eax
    4cba:	e8 51 d4 ff ff       	call   2110 <next_token>
    4cbf:	e9 e8 fc ff ff       	jmp    49ac <parse_if+0x5c>
    4cc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4cc8:	e8 c3 e8 ff ff       	call   3590 <parse_transform>
    4ccd:	89 c3                	mov    %eax,%ebx
    4ccf:	e9 13 fe ff ff       	jmp    4ae7 <parse_if+0x197>
    4cd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4cd8:	83 ec 0c             	sub    $0xc,%esp
    4cdb:	53                   	push   %ebx
    4cdc:	ff 52 0c             	call   *0xc(%edx)
    4cdf:	83 c4 10             	add    $0x10,%esp
    4ce2:	31 c0                	xor    %eax,%eax
    4ce4:	e9 91 fd ff ff       	jmp    4a7a <parse_if+0x12a>
    4ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    4cf0:	ba 85 13 01 00       	mov    $0x11385,%edx
    4cf5:	89 f8                	mov    %edi,%eax
    4cf7:	e8 14 d3 ff ff       	call   2010 <syntax_error.part.2>
    4cfc:	e9 d5 fd ff ff       	jmp    4ad6 <parse_if+0x186>
    4d01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    4d08:	89 f8                	mov    %edi,%eax
    4d0a:	e8 01 d4 ff ff       	call   2110 <next_token>
    4d0f:	e9 c2 fd ff ff       	jmp    4ad6 <parse_if+0x186>
    4d14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4d18:	89 f8                	mov    %edi,%eax
    4d1a:	e8 f1 d3 ff ff       	call   2110 <next_token>
    4d1f:	8b 17                	mov    (%edi),%edx
    4d21:	e9 ea fd ff ff       	jmp    4b10 <parse_if+0x1c0>
    4d26:	66 90                	xchg   %ax,%ax
    4d28:	83 ec 0c             	sub    $0xc,%esp
    4d2b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    4d2e:	8b 87 24 10 00 00    	mov    0x1024(%edi),%eax
    4d34:	50                   	push   %eax
    4d35:	e8 b6 d3 00 00       	call   120f0 <free@plt>
    4d3a:	83 c4 10             	add    $0x10,%esp
    4d3d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    4d40:	e9 00 fe ff ff       	jmp    4b45 <parse_if+0x1f5>
    4d45:	83 ec 0c             	sub    $0xc,%esp
    4d48:	89 45 d0             	mov    %eax,-0x30(%ebp)
    4d4b:	8b 87 24 10 00 00    	mov    0x1024(%edi),%eax
    4d51:	50                   	push   %eax
    4d52:	e8 99 d3 00 00       	call   120f0 <free@plt>
    4d57:	83 c4 10             	add    $0x10,%esp
    4d5a:	8b 45 d0             	mov    -0x30(%ebp),%eax
    4d5d:	e9 22 fe ff ff       	jmp    4b84 <parse_if+0x234>
    4d62:	53                   	push   %ebx
    4d63:	6a 75                	push   $0x75
    4d65:	68 18 13 01 00       	push   $0x11318
    4d6a:	68 6b 11 01 00       	push   $0x1116b
    4d6f:	e8 9c d1 00 00       	call   11f10 <assert_abort@plt>
    4d74:	56                   	push   %esi
    4d75:	6a 74                	push   $0x74
    4d77:	68 18 13 01 00       	push   $0x11318
    4d7c:	68 61 11 01 00       	push   $0x11161
    4d81:	e8 8a d1 00 00       	call   11f10 <assert_abort@plt>
    4d86:	57                   	push   %edi
    4d87:	6a 4c                	push   $0x4c
    4d89:	68 a3 13 01 00       	push   $0x113a3
    4d8e:	68 6b 11 01 00       	push   $0x1116b
    4d93:	e8 78 d1 00 00       	call   11f10 <assert_abort@plt>
    4d98:	50                   	push   %eax
    4d99:	6a 4b                	push   $0x4b
    4d9b:	68 a3 13 01 00       	push   $0x113a3
    4da0:	68 61 11 01 00       	push   $0x11161
    4da5:	e8 66 d1 00 00       	call   11f10 <assert_abort@plt>
    4daa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

00004db0 <parse_struct>:
    4db0:	55                   	push   %ebp
    4db1:	89 e5                	mov    %esp,%ebp
    4db3:	57                   	push   %edi
    4db4:	56                   	push   %esi
    4db5:	53                   	push   %ebx
    4db6:	83 ec 2c             	sub    $0x2c,%esp
    4db9:	8b 08                	mov    (%eax),%ecx
    4dbb:	85 c9                	test   %ecx,%ecx
    4dbd:	0f 85 cd 02 00 00    	jne    5090 <parse_struct+0x2e0>
    4dc3:	83 ec 0c             	sub    $0xc,%esp
    4dc6:	89 c3                	mov    %eax,%ebx
    4dc8:	6a 08                	push   $0x8
    4dca:	e8 91 d0 00 00       	call   11e60 <malloc@plt>
    4dcf:	83 c4 10             	add    $0x10,%esp
    4dd2:	85 c0                	test   %eax,%eax
    4dd4:	0f 84 8e 02 00 00    	je     5068 <parse_struct+0x2b8>
    4dda:	8b 33                	mov    (%ebx),%esi
    4ddc:	89 45 d0             	mov    %eax,-0x30(%ebp)
    4ddf:	31 ff                	xor    %edi,%edi
    4de1:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
    4de8:	eb 43                	jmp    4e2d <parse_struct+0x7d>
    4dea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    4df0:	89 d8                	mov    %ebx,%eax
    4df2:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    4df5:	e8 16 d3 ff ff       	call   2110 <next_token>
    4dfa:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    4dfd:	8d 76 00             	lea    0x0(%esi),%esi
    4e00:	89 d8                	mov    %ebx,%eax
    4e02:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    4e05:	e8 86 e7 ff ff       	call   3590 <parse_transform>
    4e0a:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    4e0d:	83 bb 20 10 00 00 3b 	cmpl   $0x3b,0x1020(%ebx)
    4e14:	89 41 04             	mov    %eax,0x4(%ecx)
    4e17:	0f 84 33 01 00 00    	je     4f50 <parse_struct+0x1a0>
    4e1d:	8b 33                	mov    (%ebx),%esi
    4e1f:	85 f6                	test   %esi,%esi
    4e21:	74 6d                	je     4e90 <parse_struct+0xe0>
    4e23:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    4e26:	83 c7 08             	add    $0x8,%edi
    4e29:	40                   	inc    %eax
    4e2a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    4e2d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    4e30:	85 f6                	test   %esi,%esi
    4e32:	8d 50 ff             	lea    -0x1(%eax),%edx
    4e35:	0f 85 4d 01 00 00    	jne    4f88 <parse_struct+0x1d8>
    4e3b:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    4e41:	83 f8 7d             	cmp    $0x7d,%eax
    4e44:	0f 84 b6 01 00 00    	je     5000 <parse_struct+0x250>
    4e4a:	83 f8 90             	cmp    $0xffffff90,%eax
    4e4d:	74 79                	je     4ec8 <parse_struct+0x118>
    4e4f:	83 f8 95             	cmp    $0xffffff95,%eax
    4e52:	0f 84 90 00 00 00    	je     4ee8 <parse_struct+0x138>
    4e58:	83 f8 2e             	cmp    $0x2e,%eax
    4e5b:	0f 84 a7 00 00 00    	je     4f08 <parse_struct+0x158>
    4e61:	8b 55 d0             	mov    -0x30(%ebp),%edx
    4e64:	83 f8 89             	cmp    $0xffffff89,%eax
    4e67:	8d 0c 3a             	lea    (%edx,%edi,1),%ecx
    4e6a:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
    4e70:	0f 84 7a ff ff ff    	je     4df0 <parse_struct+0x40>
    4e76:	ba 85 13 01 00       	mov    $0x11385,%edx
    4e7b:	89 d8                	mov    %ebx,%eax
    4e7d:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    4e80:	e8 8b d1 ff ff       	call   2010 <syntax_error.part.2>
    4e85:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    4e88:	e9 73 ff ff ff       	jmp    4e00 <parse_struct+0x50>
    4e8d:	8d 76 00             	lea    0x0(%esi),%esi
    4e90:	ba 85 13 01 00       	mov    $0x11385,%edx
    4e95:	89 d8                	mov    %ebx,%eax
    4e97:	e8 74 d1 ff ff       	call   2010 <syntax_error.part.2>
    4e9c:	8b 33                	mov    (%ebx),%esi
    4e9e:	85 f6                	test   %esi,%esi
    4ea0:	75 81                	jne    4e23 <parse_struct+0x73>
    4ea2:	50                   	push   %eax
    4ea3:	50                   	push   %eax
    4ea4:	8d 47 10             	lea    0x10(%edi),%eax
    4ea7:	50                   	push   %eax
    4ea8:	8b 45 d0             	mov    -0x30(%ebp),%eax
    4eab:	50                   	push   %eax
    4eac:	e8 ef d0 00 00       	call   11fa0 <realloc@plt>
    4eb1:	83 c4 10             	add    $0x10,%esp
    4eb4:	8b 33                	mov    (%ebx),%esi
    4eb6:	85 c0                	test   %eax,%eax
    4eb8:	0f 84 a2 00 00 00    	je     4f60 <parse_struct+0x1b0>
    4ebe:	89 45 d0             	mov    %eax,-0x30(%ebp)
    4ec1:	e9 5d ff ff ff       	jmp    4e23 <parse_struct+0x73>
    4ec6:	66 90                	xchg   %ax,%ax
    4ec8:	8b 45 d0             	mov    -0x30(%ebp),%eax
    4ecb:	ba 01 00 00 00       	mov    $0x1,%edx
    4ed0:	8d 34 38             	lea    (%eax,%edi,1),%esi
    4ed3:	89 d8                	mov    %ebx,%eax
    4ed5:	e8 76 fa ff ff       	call   4950 <parse_if>
    4eda:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
    4ee0:	89 46 04             	mov    %eax,0x4(%esi)
    4ee3:	eb b7                	jmp    4e9c <parse_struct+0xec>
    4ee5:	8d 76 00             	lea    0x0(%esi),%esi
    4ee8:	8b 45 d0             	mov    -0x30(%ebp),%eax
    4eeb:	ba 01 00 00 00       	mov    $0x1,%edx
    4ef0:	8d 34 38             	lea    (%eax,%edi,1),%esi
    4ef3:	89 d8                	mov    %ebx,%eax
    4ef5:	e8 66 02 00 00       	call   5160 <parse_switch>
    4efa:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
    4f00:	89 46 04             	mov    %eax,0x4(%esi)
    4f03:	eb 97                	jmp    4e9c <parse_struct+0xec>
    4f05:	8d 76 00             	lea    0x0(%esi),%esi
    4f08:	89 d8                	mov    %ebx,%eax
    4f0a:	e8 01 d2 ff ff       	call   2110 <next_token>
    4f0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
    4f12:	8d 0c 38             	lea    (%eax,%edi,1),%ecx
    4f15:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    4f1b:	83 f8 86             	cmp    $0xffffff86,%eax
    4f1e:	0f 84 9c 01 00 00    	je     50c0 <parse_struct+0x310>
    4f24:	31 d2                	xor    %edx,%edx
    4f26:	83 3b 00             	cmpl   $0x0,(%ebx)
    4f29:	0f 84 71 01 00 00    	je     50a0 <parse_struct+0x2f0>
    4f2f:	89 11                	mov    %edx,(%ecx)
    4f31:	83 f8 89             	cmp    $0xffffff89,%eax
    4f34:	0f 84 b6 fe ff ff    	je     4df0 <parse_struct+0x40>
    4f3a:	8b 03                	mov    (%ebx),%eax
    4f3c:	85 c0                	test   %eax,%eax
    4f3e:	0f 85 bc fe ff ff    	jne    4e00 <parse_struct+0x50>
    4f44:	e9 2d ff ff ff       	jmp    4e76 <parse_struct+0xc6>
    4f49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    4f50:	89 d8                	mov    %ebx,%eax
    4f52:	e8 b9 d1 ff ff       	call   2110 <next_token>
    4f57:	e9 40 ff ff ff       	jmp    4e9c <parse_struct+0xec>
    4f5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4f60:	85 f6                	test   %esi,%esi
    4f62:	0f 85 bb fe ff ff    	jne    4e23 <parse_struct+0x73>
    4f68:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    4f6f:	0f 84 79 01 00 00    	je     50ee <parse_struct+0x33e>
    4f75:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    4f7c:	ff ff ff 
    4f7f:	c7 03 fe ff ff ff    	movl   $0xfffffffe,(%ebx)
    4f85:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    4f88:	8b 45 d0             	mov    -0x30(%ebp),%eax
    4f8b:	8d 5a ff             	lea    -0x1(%edx),%ebx
    4f8e:	8d 34 d0             	lea    (%eax,%edx,8),%esi
    4f91:	eb 46                	jmp    4fd9 <parse_struct+0x229>
    4f93:	90                   	nop
    4f94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    4f98:	83 ec 0c             	sub    $0xc,%esp
    4f9b:	8b 46 f8             	mov    -0x8(%esi),%eax
    4f9e:	50                   	push   %eax
    4f9f:	e8 4c d1 00 00       	call   120f0 <free@plt>
    4fa4:	8b 56 fc             	mov    -0x4(%esi),%edx
    4fa7:	83 c4 10             	add    $0x10,%esp
    4faa:	85 d2                	test   %edx,%edx
    4fac:	74 27                	je     4fd5 <parse_struct+0x225>
    4fae:	8b 0a                	mov    (%edx),%ecx
    4fb0:	85 c9                	test   %ecx,%ecx
    4fb2:	0f 84 81 01 00 00    	je     5139 <parse_struct+0x389>
    4fb8:	8b 42 04             	mov    0x4(%edx),%eax
    4fbb:	85 c0                	test   %eax,%eax
    4fbd:	0f 84 88 01 00 00    	je     514b <parse_struct+0x39b>
    4fc3:	48                   	dec    %eax
    4fc4:	89 42 04             	mov    %eax,0x4(%edx)
    4fc7:	85 c0                	test   %eax,%eax
    4fc9:	75 0a                	jne    4fd5 <parse_struct+0x225>
    4fcb:	83 ec 0c             	sub    $0xc,%esp
    4fce:	52                   	push   %edx
    4fcf:	ff 51 0c             	call   *0xc(%ecx)
    4fd2:	83 c4 10             	add    $0x10,%esp
    4fd5:	4b                   	dec    %ebx
    4fd6:	83 ee 08             	sub    $0x8,%esi
    4fd9:	83 fb ff             	cmp    $0xffffffff,%ebx
    4fdc:	75 ba                	jne    4f98 <parse_struct+0x1e8>
    4fde:	83 ec 0c             	sub    $0xc,%esp
    4fe1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
    4fe4:	53                   	push   %ebx
    4fe5:	e8 06 d1 00 00       	call   120f0 <free@plt>
    4fea:	83 c4 10             	add    $0x10,%esp
    4fed:	8d 65 f4             	lea    -0xc(%ebp),%esp
    4ff0:	31 d2                	xor    %edx,%edx
    4ff2:	5b                   	pop    %ebx
    4ff3:	89 d0                	mov    %edx,%eax
    4ff5:	5e                   	pop    %esi
    4ff6:	5f                   	pop    %edi
    4ff7:	5d                   	pop    %ebp
    4ff8:	c3                   	ret    
    4ff9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    5000:	8b 7d d0             	mov    -0x30(%ebp),%edi
    5003:	8d 04 d7             	lea    (%edi,%edx,8),%eax
    5006:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    500c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    5013:	50                   	push   %eax
    5014:	50                   	push   %eax
    5015:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    5018:	57                   	push   %edi
    5019:	50                   	push   %eax
    501a:	e8 d1 36 00 00       	call   86f0 <bithenge_new_struct>
    501f:	83 c4 10             	add    $0x10,%esp
    5022:	85 c0                	test   %eax,%eax
    5024:	75 12                	jne    5038 <parse_struct+0x288>
    5026:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    5029:	8d 65 f4             	lea    -0xc(%ebp),%esp
    502c:	89 d0                	mov    %edx,%eax
    502e:	5b                   	pop    %ebx
    502f:	5e                   	pop    %esi
    5030:	5f                   	pop    %edi
    5031:	5d                   	pop    %ebp
    5032:	c3                   	ret    
    5033:	90                   	nop
    5034:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5038:	8b 0b                	mov    (%ebx),%ecx
    503a:	31 d2                	xor    %edx,%edx
    503c:	85 c9                	test   %ecx,%ecx
    503e:	75 e9                	jne    5029 <parse_struct+0x279>
    5040:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    5047:	0f 84 b8 00 00 00    	je     5105 <parse_struct+0x355>
    504d:	89 03                	mov    %eax,(%ebx)
    504f:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    5056:	ff ff ff 
    5059:	8d 65 f4             	lea    -0xc(%ebp),%esp
    505c:	31 d2                	xor    %edx,%edx
    505e:	89 d0                	mov    %edx,%eax
    5060:	5b                   	pop    %ebx
    5061:	5e                   	pop    %esi
    5062:	5f                   	pop    %edi
    5063:	5d                   	pop    %ebp
    5064:	c3                   	ret    
    5065:	8d 76 00             	lea    0x0(%esi),%esi
    5068:	8b 13                	mov    (%ebx),%edx
    506a:	85 d2                	test   %edx,%edx
    506c:	75 22                	jne    5090 <parse_struct+0x2e0>
    506e:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    5075:	0f 84 a7 00 00 00    	je     5122 <parse_struct+0x372>
    507b:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    5082:	ff ff ff 
    5085:	c7 03 fe ff ff ff    	movl   $0xfffffffe,(%ebx)
    508b:	90                   	nop
    508c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5090:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    5097:	31 d2                	xor    %edx,%edx
    5099:	e9 ea fe ff ff       	jmp    4f88 <parse_struct+0x1d8>
    509e:	66 90                	xchg   %ax,%ax
    50a0:	ba 2c 14 01 00       	mov    $0x1142c,%edx
    50a5:	89 d8                	mov    %ebx,%eax
    50a7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    50aa:	e8 61 cf ff ff       	call   2010 <syntax_error.part.2>
    50af:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    50b5:	89 f2                	mov    %esi,%edx
    50b7:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    50ba:	e9 70 fe ff ff       	jmp    4f2f <parse_struct+0x17f>
    50bf:	90                   	nop
    50c0:	8b 93 24 10 00 00    	mov    0x1024(%ebx),%edx
    50c6:	89 d8                	mov    %ebx,%eax
    50c8:	c7 83 24 10 00 00 00 	movl   $0x0,0x1024(%ebx)
    50cf:	00 00 00 
    50d2:	89 4d c8             	mov    %ecx,-0x38(%ebp)
    50d5:	89 55 cc             	mov    %edx,-0x34(%ebp)
    50d8:	e8 33 d0 ff ff       	call   2110 <next_token>
    50dd:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    50e3:	8b 4d c8             	mov    -0x38(%ebp),%ecx
    50e6:	8b 55 cc             	mov    -0x34(%ebp),%edx
    50e9:	e9 41 fe ff ff       	jmp    4f2f <parse_struct+0x17f>
    50ee:	83 ec 0c             	sub    $0xc,%esp
    50f1:	8b 83 24 10 00 00    	mov    0x1024(%ebx),%eax
    50f7:	50                   	push   %eax
    50f8:	e8 f3 cf 00 00       	call   120f0 <free@plt>
    50fd:	83 c4 10             	add    $0x10,%esp
    5100:	e9 70 fe ff ff       	jmp    4f75 <parse_struct+0x1c5>
    5105:	83 ec 0c             	sub    $0xc,%esp
    5108:	8b 93 24 10 00 00    	mov    0x1024(%ebx),%edx
    510e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    5111:	52                   	push   %edx
    5112:	e8 d9 cf 00 00       	call   120f0 <free@plt>
    5117:	83 c4 10             	add    $0x10,%esp
    511a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    511d:	e9 2b ff ff ff       	jmp    504d <parse_struct+0x29d>
    5122:	83 ec 0c             	sub    $0xc,%esp
    5125:	8b 83 24 10 00 00    	mov    0x1024(%ebx),%eax
    512b:	50                   	push   %eax
    512c:	e8 bf cf 00 00       	call   120f0 <free@plt>
    5131:	83 c4 10             	add    $0x10,%esp
    5134:	e9 42 ff ff ff       	jmp    507b <parse_struct+0x2cb>
    5139:	57                   	push   %edi
    513a:	6a 74                	push   $0x74
    513c:	68 18 13 01 00       	push   $0x11318
    5141:	68 61 11 01 00       	push   $0x11161
    5146:	e8 c5 cd 00 00       	call   11f10 <assert_abort@plt>
    514b:	56                   	push   %esi
    514c:	6a 75                	push   $0x75
    514e:	68 18 13 01 00       	push   $0x11318
    5153:	68 6b 11 01 00       	push   $0x1116b
    5158:	e8 b3 cd 00 00       	call   11f10 <assert_abort@plt>
    515d:	8d 76 00             	lea    0x0(%esi),%esi

00005160 <parse_switch>:
    5160:	55                   	push   %ebp
    5161:	89 e5                	mov    %esp,%ebp
    5163:	57                   	push   %edi
    5164:	56                   	push   %esi
    5165:	53                   	push   %ebx
    5166:	83 ec 3c             	sub    $0x3c,%esp
    5169:	89 c3                	mov    %eax,%ebx
    516b:	8b 80 20 10 00 00    	mov    0x1020(%eax),%eax
    5171:	88 55 cc             	mov    %dl,-0x34(%ebp)
    5174:	83 f8 95             	cmp    $0xffffff95,%eax
    5177:	0f 84 fb 05 00 00    	je     5778 <parse_switch+0x618>
    517d:	8b 33                	mov    (%ebx),%esi
    517f:	85 f6                	test   %esi,%esi
    5181:	0f 84 51 05 00 00    	je     56d8 <parse_switch+0x578>
    5187:	83 f8 28             	cmp    $0x28,%eax
    518a:	0f 84 d8 05 00 00    	je     5768 <parse_switch+0x608>
    5190:	31 d2                	xor    %edx,%edx
    5192:	89 d8                	mov    %ebx,%eax
    5194:	e8 27 d9 ff ff       	call   2ac0 <parse_expression_precedence>
    5199:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    519c:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    51a2:	83 f8 29             	cmp    $0x29,%eax
    51a5:	0f 84 dd 05 00 00    	je     5788 <parse_switch+0x628>
    51ab:	8b 13                	mov    (%ebx),%edx
    51ad:	85 d2                	test   %edx,%edx
    51af:	0f 84 83 01 00 00    	je     5338 <parse_switch+0x1d8>
    51b5:	83 f8 7b             	cmp    $0x7b,%eax
    51b8:	0f 84 e2 05 00 00    	je     57a0 <parse_switch+0x640>
    51be:	31 f6                	xor    %esi,%esi
    51c0:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    51c7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    51ce:	8b 7d c4             	mov    -0x3c(%ebp),%edi
    51d1:	85 ff                	test   %edi,%edi
    51d3:	74 27                	je     51fc <parse_switch+0x9c>
    51d5:	8b 0f                	mov    (%edi),%ecx
    51d7:	85 c9                	test   %ecx,%ecx
    51d9:	0f 84 48 06 00 00    	je     5827 <parse_switch+0x6c7>
    51df:	8b 47 04             	mov    0x4(%edi),%eax
    51e2:	85 c0                	test   %eax,%eax
    51e4:	0f 84 2b 06 00 00    	je     5815 <parse_switch+0x6b5>
    51ea:	48                   	dec    %eax
    51eb:	89 47 04             	mov    %eax,0x4(%edi)
    51ee:	85 c0                	test   %eax,%eax
    51f0:	75 0a                	jne    51fc <parse_switch+0x9c>
    51f2:	83 ec 0c             	sub    $0xc,%esp
    51f5:	57                   	push   %edi
    51f6:	ff 51 04             	call   *0x4(%ecx)
    51f9:	83 c4 10             	add    $0x10,%esp
    51fc:	a1 7c 3b 01 00       	mov    0x13b7c,%eax
    5201:	c7 45 e4 78 3b 01 00 	movl   $0x13b78,-0x1c(%ebp)
    5208:	40                   	inc    %eax
    5209:	8b 0b                	mov    (%ebx),%ecx
    520b:	a3 7c 3b 01 00       	mov    %eax,0x13b7c
    5210:	8d 7d e4             	lea    -0x1c(%ebp),%edi
    5213:	90                   	nop
    5214:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5218:	85 c9                	test   %ecx,%ecx
    521a:	75 32                	jne    524e <parse_switch+0xee>
    521c:	85 f6                	test   %esi,%esi
    521e:	0f 84 a0 00 00 00    	je     52c4 <parse_switch+0x164>
    5224:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    5227:	4e                   	dec    %esi
    5228:	50                   	push   %eax
    5229:	8b 45 d0             	mov    -0x30(%ebp),%eax
    522c:	8b 04 b0             	mov    (%eax,%esi,4),%eax
    522f:	50                   	push   %eax
    5230:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    5233:	8b 04 b0             	mov    (%eax,%esi,4),%eax
    5236:	50                   	push   %eax
    5237:	57                   	push   %edi
    5238:	e8 d3 7f 00 00       	call   d210 <bithenge_if_transform>
    523d:	83 c4 10             	add    $0x10,%esp
    5240:	85 c0                	test   %eax,%eax
    5242:	0f 85 b8 00 00 00    	jne    5300 <parse_switch+0x1a0>
    5248:	8b 0b                	mov    (%ebx),%ecx
    524a:	85 c9                	test   %ecx,%ecx
    524c:	74 ce                	je     521c <parse_switch+0xbc>
    524e:	85 f6                	test   %esi,%esi
    5250:	74 72                	je     52c4 <parse_switch+0x164>
    5252:	89 5d cc             	mov    %ebx,-0x34(%ebp)
    5255:	8b 7d d0             	mov    -0x30(%ebp),%edi
    5258:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
    525b:	90                   	nop
    525c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5260:	4e                   	dec    %esi
    5261:	8b 14 b3             	mov    (%ebx,%esi,4),%edx
    5264:	85 d2                	test   %edx,%edx
    5266:	74 27                	je     528f <parse_switch+0x12f>
    5268:	8b 0a                	mov    (%edx),%ecx
    526a:	85 c9                	test   %ecx,%ecx
    526c:	0f 84 b5 05 00 00    	je     5827 <parse_switch+0x6c7>
    5272:	8b 42 04             	mov    0x4(%edx),%eax
    5275:	85 c0                	test   %eax,%eax
    5277:	0f 84 98 05 00 00    	je     5815 <parse_switch+0x6b5>
    527d:	48                   	dec    %eax
    527e:	89 42 04             	mov    %eax,0x4(%edx)
    5281:	85 c0                	test   %eax,%eax
    5283:	75 0a                	jne    528f <parse_switch+0x12f>
    5285:	83 ec 0c             	sub    $0xc,%esp
    5288:	52                   	push   %edx
    5289:	ff 51 04             	call   *0x4(%ecx)
    528c:	83 c4 10             	add    $0x10,%esp
    528f:	8b 14 b7             	mov    (%edi,%esi,4),%edx
    5292:	85 d2                	test   %edx,%edx
    5294:	74 27                	je     52bd <parse_switch+0x15d>
    5296:	8b 0a                	mov    (%edx),%ecx
    5298:	85 c9                	test   %ecx,%ecx
    529a:	0f 84 99 05 00 00    	je     5839 <parse_switch+0x6d9>
    52a0:	8b 42 04             	mov    0x4(%edx),%eax
    52a3:	85 c0                	test   %eax,%eax
    52a5:	0f 84 a0 05 00 00    	je     584b <parse_switch+0x6eb>
    52ab:	48                   	dec    %eax
    52ac:	89 42 04             	mov    %eax,0x4(%edx)
    52af:	85 c0                	test   %eax,%eax
    52b1:	75 0a                	jne    52bd <parse_switch+0x15d>
    52b3:	83 ec 0c             	sub    $0xc,%esp
    52b6:	52                   	push   %edx
    52b7:	ff 51 0c             	call   *0xc(%ecx)
    52ba:	83 c4 10             	add    $0x10,%esp
    52bd:	85 f6                	test   %esi,%esi
    52bf:	75 9f                	jne    5260 <parse_switch+0x100>
    52c1:	8b 5d cc             	mov    -0x34(%ebp),%ebx
    52c4:	83 ec 0c             	sub    $0xc,%esp
    52c7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    52ca:	52                   	push   %edx
    52cb:	e8 20 ce 00 00       	call   120f0 <free@plt>
    52d0:	8b 75 d0             	mov    -0x30(%ebp),%esi
    52d3:	59                   	pop    %ecx
    52d4:	56                   	push   %esi
    52d5:	e8 16 ce 00 00       	call   120f0 <free@plt>
    52da:	83 c4 10             	add    $0x10,%esp
    52dd:	83 bb 20 10 00 00 7d 	cmpl   $0x7d,0x1020(%ebx)
    52e4:	0f 84 c6 04 00 00    	je     57b0 <parse_switch+0x650>
    52ea:	8b 03                	mov    (%ebx),%eax
    52ec:	85 c0                	test   %eax,%eax
    52ee:	0f 84 14 04 00 00    	je     5708 <parse_switch+0x5a8>
    52f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    52f7:	8d 65 f4             	lea    -0xc(%ebp),%esp
    52fa:	5b                   	pop    %ebx
    52fb:	5e                   	pop    %esi
    52fc:	5f                   	pop    %edi
    52fd:	5d                   	pop    %ebp
    52fe:	c3                   	ret    
    52ff:	90                   	nop
    5300:	8b 0b                	mov    (%ebx),%ecx
    5302:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    5309:	85 c9                	test   %ecx,%ecx
    530b:	0f 85 07 ff ff ff    	jne    5218 <parse_switch+0xb8>
    5311:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    5318:	0f 84 02 04 00 00    	je     5720 <parse_switch+0x5c0>
    531e:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    5325:	ff ff ff 
    5328:	89 03                	mov    %eax,(%ebx)
    532a:	89 c1                	mov    %eax,%ecx
    532c:	e9 e7 fe ff ff       	jmp    5218 <parse_switch+0xb8>
    5331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    5338:	89 d8                	mov    %ebx,%eax
    533a:	ba 85 13 01 00       	mov    $0x11385,%edx
    533f:	e8 cc cc ff ff       	call   2010 <syntax_error.part.2>
    5344:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    534a:	83 f8 7b             	cmp    $0x7b,%eax
    534d:	0f 84 4d 04 00 00    	je     57a0 <parse_switch+0x640>
    5353:	8b 03                	mov    (%ebx),%eax
    5355:	85 c0                	test   %eax,%eax
    5357:	0f 85 61 fe ff ff    	jne    51be <parse_switch+0x5e>
    535d:	ba 85 13 01 00       	mov    $0x11385,%edx
    5362:	89 d8                	mov    %ebx,%eax
    5364:	e8 a7 cc ff ff       	call   2010 <syntax_error.part.2>
    5369:	8b 03                	mov    (%ebx),%eax
    536b:	85 c0                	test   %eax,%eax
    536d:	0f 85 4b fe ff ff    	jne    51be <parse_switch+0x5e>
    5373:	8b 8b 20 10 00 00    	mov    0x1020(%ebx),%ecx
    5379:	83 f9 7d             	cmp    $0x7d,%ecx
    537c:	0f 84 3c fe ff ff    	je     51be <parse_switch+0x5e>
    5382:	bf 01 00 00 00       	mov    $0x1,%edi
    5387:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    538e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    5395:	89 ca                	mov    %ecx,%edx
    5397:	90                   	nop
    5398:	8d 47 ff             	lea    -0x1(%edi),%eax
    539b:	83 fa 8e             	cmp    $0xffffff8e,%edx
    539e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    53a1:	0f 84 09 02 00 00    	je     55b0 <parse_switch+0x450>
    53a7:	31 d2                	xor    %edx,%edx
    53a9:	89 d8                	mov    %ebx,%eax
    53ab:	e8 10 d7 ff ff       	call   2ac0 <parse_expression_precedence>
    53b0:	8b 13                	mov    (%ebx),%edx
    53b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
    53b5:	85 d2                	test   %edx,%edx
    53b7:	0f 85 d3 01 00 00    	jne    5590 <parse_switch+0x430>
    53bd:	8b 75 c4             	mov    -0x3c(%ebp),%esi
    53c0:	85 f6                	test   %esi,%esi
    53c2:	0f 84 95 04 00 00    	je     585d <parse_switch+0x6fd>
    53c8:	8b 75 c4             	mov    -0x3c(%ebp),%esi
    53cb:	8b 4e 04             	mov    0x4(%esi),%ecx
    53ce:	41                   	inc    %ecx
    53cf:	89 4e 04             	mov    %ecx,0x4(%esi)
    53d2:	50                   	push   %eax
    53d3:	8d 45 e0             	lea    -0x20(%ebp),%eax
    53d6:	56                   	push   %esi
    53d7:	6a 0a                	push   $0xa
    53d9:	50                   	push   %eax
    53da:	e8 81 92 00 00       	call   e660 <bithenge_binary_expression>
    53df:	83 c4 10             	add    $0x10,%esp
    53e2:	85 c0                	test   %eax,%eax
    53e4:	0f 85 fb 01 00 00    	jne    55e5 <parse_switch+0x485>
    53ea:	83 bb 20 10 00 00 3a 	cmpl   $0x3a,0x1020(%ebx)
    53f1:	0f 84 a6 01 00 00    	je     559d <parse_switch+0x43d>
    53f7:	8b 33                	mov    (%ebx),%esi
    53f9:	85 f6                	test   %esi,%esi
    53fb:	75 0c                	jne    5409 <parse_switch+0x2a9>
    53fd:	ba 85 13 01 00       	mov    $0x11385,%edx
    5402:	89 d8                	mov    %ebx,%eax
    5404:	e8 07 cc ff ff       	call   2010 <syntax_error.part.2>
    5409:	80 7d cc 00          	cmpb   $0x0,-0x34(%ebp)
    540d:	0f 84 45 01 00 00    	je     5558 <parse_switch+0x3f8>
    5413:	83 bb 20 10 00 00 7b 	cmpl   $0x7b,0x1020(%ebx)
    541a:	0f 84 a8 02 00 00    	je     56c8 <parse_switch+0x568>
    5420:	8b 0b                	mov    (%ebx),%ecx
    5422:	85 c9                	test   %ecx,%ecx
    5424:	0f 84 fe 01 00 00    	je     5628 <parse_switch+0x4c8>
    542a:	89 d8                	mov    %ebx,%eax
    542c:	e8 7f f9 ff ff       	call   4db0 <parse_struct>
    5431:	89 c6                	mov    %eax,%esi
    5433:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    5439:	83 f8 7d             	cmp    $0x7d,%eax
    543c:	0f 84 6e 02 00 00    	je     56b0 <parse_switch+0x550>
    5442:	8b 13                	mov    (%ebx),%edx
    5444:	85 d2                	test   %edx,%edx
    5446:	0f 84 c4 01 00 00    	je     5610 <parse_switch+0x4b0>
    544c:	83 f8 3b             	cmp    $0x3b,%eax
    544f:	74 67                	je     54b8 <parse_switch+0x358>
    5451:	89 f7                	mov    %esi,%edi
    5453:	8b 45 d0             	mov    -0x30(%ebp),%eax
    5456:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    5459:	85 c9                	test   %ecx,%ecx
    545b:	74 21                	je     547e <parse_switch+0x31e>
    545d:	8b 31                	mov    (%ecx),%esi
    545f:	85 f6                	test   %esi,%esi
    5461:	0f 84 c0 03 00 00    	je     5827 <parse_switch+0x6c7>
    5467:	8b 51 04             	mov    0x4(%ecx),%edx
    546a:	85 d2                	test   %edx,%edx
    546c:	0f 84 a3 03 00 00    	je     5815 <parse_switch+0x6b5>
    5472:	4a                   	dec    %edx
    5473:	89 51 04             	mov    %edx,0x4(%ecx)
    5476:	85 d2                	test   %edx,%edx
    5478:	0f 84 ce 02 00 00    	je     574c <parse_switch+0x5ec>
    547e:	85 ff                	test   %edi,%edi
    5480:	0f 84 6a 03 00 00    	je     57f0 <parse_switch+0x690>
    5486:	8b 0f                	mov    (%edi),%ecx
    5488:	85 c9                	test   %ecx,%ecx
    548a:	0f 84 a9 03 00 00    	je     5839 <parse_switch+0x6d9>
    5490:	8b 57 04             	mov    0x4(%edi),%edx
    5493:	85 d2                	test   %edx,%edx
    5495:	0f 84 b0 03 00 00    	je     584b <parse_switch+0x6eb>
    549b:	4a                   	dec    %edx
    549c:	89 45 d0             	mov    %eax,-0x30(%ebp)
    549f:	89 57 04             	mov    %edx,0x4(%edi)
    54a2:	85 d2                	test   %edx,%edx
    54a4:	0f 84 93 02 00 00    	je     573d <parse_switch+0x5dd>
    54aa:	8b 75 c8             	mov    -0x38(%ebp),%esi
    54ad:	e9 1c fd ff ff       	jmp    51ce <parse_switch+0x6e>
    54b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    54b8:	89 d8                	mov    %ebx,%eax
    54ba:	e8 51 cc ff ff       	call   2110 <next_token>
    54bf:	8b 0b                	mov    (%ebx),%ecx
    54c1:	89 7d bc             	mov    %edi,-0x44(%ebp)
    54c4:	8d 14 bd 00 00 00 00 	lea    0x0(,%edi,4),%edx
    54cb:	85 c9                	test   %ecx,%ecx
    54cd:	75 82                	jne    5451 <parse_switch+0x2f1>
    54cf:	89 55 c0             	mov    %edx,-0x40(%ebp)
    54d2:	50                   	push   %eax
    54d3:	50                   	push   %eax
    54d4:	52                   	push   %edx
    54d5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    54d8:	52                   	push   %edx
    54d9:	e8 c2 ca 00 00       	call   11fa0 <realloc@plt>
    54de:	83 c4 10             	add    $0x10,%esp
    54e1:	89 c1                	mov    %eax,%ecx
    54e3:	85 c0                	test   %eax,%eax
    54e5:	8b 55 c0             	mov    -0x40(%ebp),%edx
    54e8:	0f 84 8a 01 00 00    	je     5678 <parse_switch+0x518>
    54ee:	8b 03                	mov    (%ebx),%eax
    54f0:	85 c0                	test   %eax,%eax
    54f2:	0f 85 77 03 00 00    	jne    586f <parse_switch+0x70f>
    54f8:	50                   	push   %eax
    54f9:	50                   	push   %eax
    54fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
    54fd:	52                   	push   %edx
    54fe:	89 4d c0             	mov    %ecx,-0x40(%ebp)
    5501:	50                   	push   %eax
    5502:	e8 99 ca 00 00       	call   11fa0 <realloc@plt>
    5507:	83 c4 10             	add    $0x10,%esp
    550a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    550d:	85 c0                	test   %eax,%eax
    550f:	8b 4d c0             	mov    -0x40(%ebp),%ecx
    5512:	0f 84 28 01 00 00    	je     5640 <parse_switch+0x4e0>
    5518:	8b 13                	mov    (%ebx),%edx
    551a:	85 d2                	test   %edx,%edx
    551c:	0f 85 57 03 00 00    	jne    5879 <parse_switch+0x719>
    5522:	8d 14 bd fc ff ff ff 	lea    -0x4(,%edi,4),%edx
    5529:	8b 45 e0             	mov    -0x20(%ebp),%eax
    552c:	47                   	inc    %edi
    552d:	89 04 11             	mov    %eax,(%ecx,%edx,1)
    5530:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    5533:	89 45 d0             	mov    %eax,-0x30(%ebp)
    5536:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    5539:	89 34 10             	mov    %esi,(%eax,%edx,1)
    553c:	8b 93 20 10 00 00    	mov    0x1020(%ebx),%edx
    5542:	83 fa 7d             	cmp    $0x7d,%edx
    5545:	0f 85 4d fe ff ff    	jne    5398 <parse_switch+0x238>
    554b:	8b 75 bc             	mov    -0x44(%ebp),%esi
    554e:	e9 7b fc ff ff       	jmp    51ce <parse_switch+0x6e>
    5553:	90                   	nop
    5554:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5558:	89 d8                	mov    %ebx,%eax
    555a:	e8 31 e0 ff ff       	call   3590 <parse_transform>
    555f:	89 c6                	mov    %eax,%esi
    5561:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    5567:	83 f8 3b             	cmp    $0x3b,%eax
    556a:	0f 84 48 ff ff ff    	je     54b8 <parse_switch+0x358>
    5570:	8b 03                	mov    (%ebx),%eax
    5572:	85 c0                	test   %eax,%eax
    5574:	0f 85 d7 fe ff ff    	jne    5451 <parse_switch+0x2f1>
    557a:	ba 85 13 01 00       	mov    $0x11385,%edx
    557f:	89 d8                	mov    %ebx,%eax
    5581:	e8 8a ca ff ff       	call   2010 <syntax_error.part.2>
    5586:	e9 34 ff ff ff       	jmp    54bf <parse_switch+0x35f>
    558b:	90                   	nop
    558c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5590:	83 bb 20 10 00 00 3a 	cmpl   $0x3a,0x1020(%ebx)
    5597:	0f 85 6c fe ff ff    	jne    5409 <parse_switch+0x2a9>
    559d:	89 d8                	mov    %ebx,%eax
    559f:	e8 6c cb ff ff       	call   2110 <next_token>
    55a4:	e9 60 fe ff ff       	jmp    5409 <parse_switch+0x2a9>
    55a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    55b0:	89 d8                	mov    %ebx,%eax
    55b2:	e8 59 cb ff ff       	call   2110 <next_token>
    55b7:	50                   	push   %eax
    55b8:	50                   	push   %eax
    55b9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    55bc:	6a 01                	push   $0x1
    55be:	50                   	push   %eax
    55bf:	e8 2c 64 00 00       	call   b9f0 <bithenge_new_boolean_node>
    55c4:	83 c4 10             	add    $0x10,%esp
    55c7:	85 c0                	test   %eax,%eax
    55c9:	75 1a                	jne    55e5 <parse_switch+0x485>
    55cb:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    55ce:	8d 45 e0             	lea    -0x20(%ebp),%eax
    55d1:	51                   	push   %ecx
    55d2:	51                   	push   %ecx
    55d3:	56                   	push   %esi
    55d4:	50                   	push   %eax
    55d5:	e8 e6 91 00 00       	call   e7c0 <bithenge_const_expression>
    55da:	83 c4 10             	add    $0x10,%esp
    55dd:	85 c0                	test   %eax,%eax
    55df:	0f 84 05 fe ff ff    	je     53ea <parse_switch+0x28a>
    55e5:	8b 13                	mov    (%ebx),%edx
    55e7:	85 d2                	test   %edx,%edx
    55e9:	0f 85 bb fe ff ff    	jne    54aa <parse_switch+0x34a>
    55ef:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    55f6:	0f 84 fc 01 00 00    	je     57f8 <parse_switch+0x698>
    55fc:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    5603:	ff ff ff 
    5606:	89 03                	mov    %eax,(%ebx)
    5608:	e9 9d fe ff ff       	jmp    54aa <parse_switch+0x34a>
    560d:	8d 76 00             	lea    0x0(%esi),%esi
    5610:	89 d8                	mov    %ebx,%eax
    5612:	ba 85 13 01 00       	mov    $0x11385,%edx
    5617:	e8 f4 c9 ff ff       	call   2010 <syntax_error.part.2>
    561c:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    5622:	e9 40 ff ff ff       	jmp    5567 <parse_switch+0x407>
    5627:	90                   	nop
    5628:	ba 85 13 01 00       	mov    $0x11385,%edx
    562d:	89 d8                	mov    %ebx,%eax
    562f:	e8 dc c9 ff ff       	call   2010 <syntax_error.part.2>
    5634:	e9 f1 fd ff ff       	jmp    542a <parse_switch+0x2ca>
    5639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    5640:	89 f7                	mov    %esi,%edi
    5642:	8b 33                	mov    (%ebx),%esi
    5644:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    5647:	85 f6                	test   %esi,%esi
    5649:	0f 85 04 fe ff ff    	jne    5453 <parse_switch+0x2f3>
    564f:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    5656:	0f 84 66 01 00 00    	je     57c2 <parse_switch+0x662>
    565c:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    5663:	ff ff ff 
    5666:	c7 03 fe ff ff ff    	movl   $0xfffffffe,(%ebx)
    566c:	e9 e2 fd ff ff       	jmp    5453 <parse_switch+0x2f3>
    5671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    5678:	8b 03                	mov    (%ebx),%eax
    567a:	89 f7                	mov    %esi,%edi
    567c:	85 c0                	test   %eax,%eax
    567e:	0f 85 cf fd ff ff    	jne    5453 <parse_switch+0x2f3>
    5684:	83 bb 20 10 00 00 86 	cmpl   $0xffffff86,0x1020(%ebx)
    568b:	0f 84 48 01 00 00    	je     57d9 <parse_switch+0x679>
    5691:	c7 83 20 10 00 00 80 	movl   $0xffffff80,0x1020(%ebx)
    5698:	ff ff ff 
    569b:	c7 03 fe ff ff ff    	movl   $0xfffffffe,(%ebx)
    56a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
    56a4:	e9 ad fd ff ff       	jmp    5456 <parse_switch+0x2f6>
    56a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    56b0:	89 d8                	mov    %ebx,%eax
    56b2:	e8 59 ca ff ff       	call   2110 <next_token>
    56b7:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    56bd:	e9 a5 fe ff ff       	jmp    5567 <parse_switch+0x407>
    56c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    56c8:	89 d8                	mov    %ebx,%eax
    56ca:	e8 41 ca ff ff       	call   2110 <next_token>
    56cf:	e9 56 fd ff ff       	jmp    542a <parse_switch+0x2ca>
    56d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    56d8:	ba 85 13 01 00       	mov    $0x11385,%edx
    56dd:	89 d8                	mov    %ebx,%eax
    56df:	e8 2c c9 ff ff       	call   2010 <syntax_error.part.2>
    56e4:	83 bb 20 10 00 00 28 	cmpl   $0x28,0x1020(%ebx)
    56eb:	74 7b                	je     5768 <parse_switch+0x608>
    56ed:	8b 0b                	mov    (%ebx),%ecx
    56ef:	85 c9                	test   %ecx,%ecx
    56f1:	0f 85 99 fa ff ff    	jne    5190 <parse_switch+0x30>
    56f7:	ba 85 13 01 00       	mov    $0x11385,%edx
    56fc:	89 d8                	mov    %ebx,%eax
    56fe:	e8 0d c9 ff ff       	call   2010 <syntax_error.part.2>
    5703:	e9 88 fa ff ff       	jmp    5190 <parse_switch+0x30>
    5708:	89 d8                	mov    %ebx,%eax
    570a:	ba 85 13 01 00       	mov    $0x11385,%edx
    570f:	e8 fc c8 ff ff       	call   2010 <syntax_error.part.2>
    5714:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    5717:	8d 65 f4             	lea    -0xc(%ebp),%esp
    571a:	5b                   	pop    %ebx
    571b:	5e                   	pop    %esi
    571c:	5f                   	pop    %edi
    571d:	5d                   	pop    %ebp
    571e:	c3                   	ret    
    571f:	90                   	nop
    5720:	83 ec 0c             	sub    $0xc,%esp
    5723:	89 45 cc             	mov    %eax,-0x34(%ebp)
    5726:	8b 83 24 10 00 00    	mov    0x1024(%ebx),%eax
    572c:	50                   	push   %eax
    572d:	e8 be c9 00 00       	call   120f0 <free@plt>
    5732:	83 c4 10             	add    $0x10,%esp
    5735:	8b 45 cc             	mov    -0x34(%ebp),%eax
    5738:	e9 e1 fb ff ff       	jmp    531e <parse_switch+0x1be>
    573d:	83 ec 0c             	sub    $0xc,%esp
    5740:	57                   	push   %edi
    5741:	ff 51 0c             	call   *0xc(%ecx)
    5744:	83 c4 10             	add    $0x10,%esp
    5747:	e9 5e fd ff ff       	jmp    54aa <parse_switch+0x34a>
    574c:	83 ec 0c             	sub    $0xc,%esp
    574f:	89 45 d0             	mov    %eax,-0x30(%ebp)
    5752:	51                   	push   %ecx
    5753:	ff 56 04             	call   *0x4(%esi)
    5756:	83 c4 10             	add    $0x10,%esp
    5759:	8b 45 d0             	mov    -0x30(%ebp),%eax
    575c:	e9 1d fd ff ff       	jmp    547e <parse_switch+0x31e>
    5761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    5768:	89 d8                	mov    %ebx,%eax
    576a:	e8 a1 c9 ff ff       	call   2110 <next_token>
    576f:	e9 1c fa ff ff       	jmp    5190 <parse_switch+0x30>
    5774:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5778:	89 d8                	mov    %ebx,%eax
    577a:	e8 91 c9 ff ff       	call   2110 <next_token>
    577f:	e9 60 ff ff ff       	jmp    56e4 <parse_switch+0x584>
    5784:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5788:	89 d8                	mov    %ebx,%eax
    578a:	e8 81 c9 ff ff       	call   2110 <next_token>
    578f:	8b 83 20 10 00 00    	mov    0x1020(%ebx),%eax
    5795:	e9 b0 fb ff ff       	jmp    534a <parse_switch+0x1ea>
    579a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    57a0:	89 d8                	mov    %ebx,%eax
    57a2:	e8 69 c9 ff ff       	call   2110 <next_token>
    57a7:	e9 bd fb ff ff       	jmp    5369 <parse_switch+0x209>
    57ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    57b0:	89 d8                	mov    %ebx,%eax
    57b2:	e8 59 c9 ff ff       	call   2110 <next_token>
    57b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    57ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
    57bd:	5b                   	pop    %ebx
    57be:	5e                   	pop    %esi
    57bf:	5f                   	pop    %edi
    57c0:	5d                   	pop    %ebp
    57c1:	c3                   	ret    
    57c2:	83 ec 0c             	sub    $0xc,%esp
    57c5:	8b 8b 24 10 00 00    	mov    0x1024(%ebx),%ecx
    57cb:	51                   	push   %ecx
    57cc:	e8 1f c9 00 00       	call   120f0 <free@plt>
    57d1:	83 c4 10             	add    $0x10,%esp
    57d4:	e9 83 fe ff ff       	jmp    565c <parse_switch+0x4fc>
    57d9:	83 ec 0c             	sub    $0xc,%esp
    57dc:	8b 83 24 10 00 00    	mov    0x1024(%ebx),%eax
    57e2:	50                   	push   %eax
    57e3:	e8 08 c9 00 00       	call   120f0 <free@plt>
    57e8:	83 c4 10             	add    $0x10,%esp
    57eb:	e9 a1 fe ff ff       	jmp    5691 <parse_switch+0x531>
    57f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
    57f3:	e9 b2 fc ff ff       	jmp    54aa <parse_switch+0x34a>
    57f8:	83 ec 0c             	sub    $0xc,%esp
    57fb:	8b bb 24 10 00 00    	mov    0x1024(%ebx),%edi
    5801:	89 45 cc             	mov    %eax,-0x34(%ebp)
    5804:	57                   	push   %edi
    5805:	e8 e6 c8 00 00       	call   120f0 <free@plt>
    580a:	83 c4 10             	add    $0x10,%esp
    580d:	8b 45 cc             	mov    -0x34(%ebp),%eax
    5810:	e9 e7 fd ff ff       	jmp    55fc <parse_switch+0x49c>
    5815:	51                   	push   %ecx
    5816:	6a 4c                	push   $0x4c
    5818:	68 a3 13 01 00       	push   $0x113a3
    581d:	68 6b 11 01 00       	push   $0x1116b
    5822:	e8 e9 c6 00 00       	call   11f10 <assert_abort@plt>
    5827:	53                   	push   %ebx
    5828:	6a 4b                	push   $0x4b
    582a:	68 a3 13 01 00       	push   $0x113a3
    582f:	68 61 11 01 00       	push   $0x11161
    5834:	e8 d7 c6 00 00       	call   11f10 <assert_abort@plt>
    5839:	52                   	push   %edx
    583a:	6a 74                	push   $0x74
    583c:	68 18 13 01 00       	push   $0x11318
    5841:	68 61 11 01 00       	push   $0x11161
    5846:	e8 c5 c6 00 00       	call   11f10 <assert_abort@plt>
    584b:	50                   	push   %eax
    584c:	6a 75                	push   $0x75
    584e:	68 18 13 01 00       	push   $0x11318
    5853:	68 6b 11 01 00       	push   $0x1116b
    5858:	e8 b3 c6 00 00       	call   11f10 <assert_abort@plt>
    585d:	53                   	push   %ebx
    585e:	6a 41                	push   $0x41
    5860:	68 a3 13 01 00       	push   $0x113a3
    5865:	68 35 13 01 00       	push   $0x11335
    586a:	e8 a1 c6 00 00       	call   11f10 <assert_abort@plt>
    586f:	89 f7                	mov    %esi,%edi
    5871:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    5874:	e9 da fb ff ff       	jmp    5453 <parse_switch+0x2f3>
    5879:	89 f7                	mov    %esi,%edi
    587b:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    587e:	e9 d3 fb ff ff       	jmp    5456 <parse_switch+0x2f6>
    5883:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    5889:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00005890 <bithenge_parse_script>:
    5890:	55                   	push   %ebp
    5891:	89 e5                	mov    %esp,%ebp
    5893:	57                   	push   %edi
    5894:	56                   	push   %esi
    5895:	53                   	push   %ebx
    5896:	81 ec 64 10 00 00    	sub    $0x1064,%esp
    589c:	c7 85 b0 ef ff ff 00 	movl   $0x0,-0x1050(%ebp)
    58a3:	00 00 00 
    58a6:	8b 45 08             	mov    0x8(%ebp),%eax
    58a9:	c7 85 b4 ef ff ff 00 	movl   $0x0,-0x104c(%ebp)
    58b0:	00 00 00 
    58b3:	68 a1 13 01 00       	push   $0x113a1
    58b8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    58bf:	50                   	push   %eax
    58c0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    58c7:	c7 45 d0 80 ff ff ff 	movl   $0xffffff80,-0x30(%ebp)
    58ce:	c7 45 c0 ff 0f 00 00 	movl   $0xfff,-0x40(%ebp)
    58d5:	c7 45 c4 ff 0f 00 00 	movl   $0xfff,-0x3c(%ebp)
    58dc:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
    58e3:	c7 45 cc 02 f0 ff ff 	movl   $0xfffff002,-0x34(%ebp)
    58ea:	89 85 b8 ef ff ff    	mov    %eax,-0x1048(%ebp)
    58f0:	e8 fb c6 00 00       	call   11ff0 <fopen@plt>
    58f5:	83 c4 10             	add    $0x10,%esp
    58f8:	89 85 bc ef ff ff    	mov    %eax,-0x1044(%ebp)
    58fe:	85 c0                	test   %eax,%eax
    5900:	0f 84 d0 05 00 00    	je     5ed6 <bithenge_parse_script+0x646>
    5906:	8d 9d b0 ef ff ff    	lea    -0x1050(%ebp),%ebx
    590c:	89 d8                	mov    %ebx,%eax
    590e:	e8 fd c7 ff ff       	call   2110 <next_token>
    5913:	8b 85 b0 ef ff ff    	mov    -0x1050(%ebp),%eax
    5919:	85 c0                	test   %eax,%eax
    591b:	0f 85 42 01 00 00    	jne    5a63 <bithenge_parse_script+0x1d3>
    5921:	8b 45 d0             	mov    -0x30(%ebp),%eax
    5924:	8d 9d b0 ef ff ff    	lea    -0x1050(%ebp),%ebx
    592a:	83 f8 84             	cmp    $0xffffff84,%eax
    592d:	0f 84 30 01 00 00    	je     5a63 <bithenge_parse_script+0x1d3>
    5933:	90                   	nop
    5934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5938:	83 f8 96             	cmp    $0xffffff96,%eax
    593b:	0f 84 17 05 00 00    	je     5e58 <bithenge_parse_script+0x5c8>
    5941:	89 d8                	mov    %ebx,%eax
    5943:	ba 85 13 01 00       	mov    $0x11385,%edx
    5948:	e8 c3 c6 ff ff       	call   2010 <syntax_error.part.2>
    594d:	8b 45 d0             	mov    -0x30(%ebp),%eax
    5950:	83 f8 86             	cmp    $0xffffff86,%eax
    5953:	0f 84 12 05 00 00    	je     5e6b <bithenge_parse_script+0x5db>
    5959:	8b 95 b0 ef ff ff    	mov    -0x1050(%ebp),%edx
    595f:	31 f6                	xor    %esi,%esi
    5961:	85 d2                	test   %edx,%edx
    5963:	0f 84 df 02 00 00    	je     5c48 <bithenge_parse_script+0x3b8>
    5969:	83 f8 28             	cmp    $0x28,%eax
    596c:	0f 84 ee 02 00 00    	je     5c60 <bithenge_parse_script+0x3d0>
    5972:	8b 85 b0 ef ff ff    	mov    -0x1050(%ebp),%eax
    5978:	c7 85 ac ef ff ff 00 	movl   $0x0,-0x1054(%ebp)
    597f:	00 00 00 
    5982:	85 c0                	test   %eax,%eax
    5984:	0f 84 4e 02 00 00    	je     5bd8 <bithenge_parse_script+0x348>
    598a:	83 ec 0c             	sub    $0xc,%esp
    598d:	56                   	push   %esi
    598e:	e8 5d c7 00 00       	call   120f0 <free@plt>
    5993:	83 c4 10             	add    $0x10,%esp
    5996:	31 d2                	xor    %edx,%edx
    5998:	83 ec 0c             	sub    $0xc,%esp
    599b:	52                   	push   %edx
    599c:	e8 4f c7 00 00       	call   120f0 <free@plt>
    59a1:	83 c4 10             	add    $0x10,%esp
    59a4:	83 7d d0 3d          	cmpl   $0x3d,-0x30(%ebp)
    59a8:	0f 84 01 02 00 00    	je     5baf <bithenge_parse_script+0x31f>
    59ae:	8b 85 b0 ef ff ff    	mov    -0x1050(%ebp),%eax
    59b4:	85 c0                	test   %eax,%eax
    59b6:	0f 84 74 02 00 00    	je     5c30 <bithenge_parse_script+0x3a0>
    59bc:	89 d8                	mov    %ebx,%eax
    59be:	e8 cd db ff ff       	call   3590 <parse_transform>
    59c3:	83 7d d0 3b          	cmpl   $0x3b,-0x30(%ebp)
    59c7:	89 c6                	mov    %eax,%esi
    59c9:	0f 84 fa 01 00 00    	je     5bc9 <bithenge_parse_script+0x339>
    59cf:	8b 85 b0 ef ff ff    	mov    -0x1050(%ebp),%eax
    59d5:	85 c0                	test   %eax,%eax
    59d7:	0f 84 5b 03 00 00    	je     5d38 <bithenge_parse_script+0x4a8>
    59dd:	85 f6                	test   %esi,%esi
    59df:	74 27                	je     5a08 <bithenge_parse_script+0x178>
    59e1:	8b 16                	mov    (%esi),%edx
    59e3:	85 d2                	test   %edx,%edx
    59e5:	0f 84 e9 05 00 00    	je     5fd4 <bithenge_parse_script+0x744>
    59eb:	8b 46 04             	mov    0x4(%esi),%eax
    59ee:	85 c0                	test   %eax,%eax
    59f0:	0f 84 f0 05 00 00    	je     5fe6 <bithenge_parse_script+0x756>
    59f6:	48                   	dec    %eax
    59f7:	89 46 04             	mov    %eax,0x4(%esi)
    59fa:	85 c0                	test   %eax,%eax
    59fc:	75 0a                	jne    5a08 <bithenge_parse_script+0x178>
    59fe:	83 ec 0c             	sub    $0xc,%esp
    5a01:	56                   	push   %esi
    5a02:	ff 52 0c             	call   *0xc(%edx)
    5a05:	83 c4 10             	add    $0x10,%esp
    5a08:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    5a0b:	31 f6                	xor    %esi,%esi
    5a0d:	85 c9                	test   %ecx,%ecx
    5a0f:	7e 1f                	jle    5a30 <bithenge_parse_script+0x1a0>
    5a11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    5a18:	8b 45 dc             	mov    -0x24(%ebp),%eax
    5a1b:	83 ec 0c             	sub    $0xc,%esp
    5a1e:	8b 04 b0             	mov    (%eax,%esi,4),%eax
    5a21:	46                   	inc    %esi
    5a22:	50                   	push   %eax
    5a23:	e8 c8 c6 00 00       	call   120f0 <free@plt>
    5a28:	83 c4 10             	add    $0x10,%esp
    5a2b:	3b 75 e0             	cmp    -0x20(%ebp),%esi
    5a2e:	7c e8                	jl     5a18 <bithenge_parse_script+0x188>
    5a30:	83 ec 0c             	sub    $0xc,%esp
    5a33:	8b 45 dc             	mov    -0x24(%ebp),%eax
    5a36:	50                   	push   %eax
    5a37:	e8 b4 c6 00 00       	call   120f0 <free@plt>
    5a3c:	8b 95 b0 ef ff ff    	mov    -0x1050(%ebp),%edx
    5a42:	83 c4 10             	add    $0x10,%esp
    5a45:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    5a4c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    5a53:	85 d2                	test   %edx,%edx
    5a55:	75 0c                	jne    5a63 <bithenge_parse_script+0x1d3>
    5a57:	8b 45 d0             	mov    -0x30(%ebp),%eax
    5a5a:	83 f8 84             	cmp    $0xffffff84,%eax
    5a5d:	0f 85 d5 fe ff ff    	jne    5938 <bithenge_parse_script+0xa8>
    5a63:	ba 11 14 01 00       	mov    $0x11411,%edx
    5a68:	8b 85 b4 ef ff ff    	mov    -0x104c(%ebp),%eax
    5a6e:	e8 fd c4 ff ff       	call   1f70 <get_named_transform.isra.7>
    5a73:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    5a76:	8b bd b0 ef ff ff    	mov    -0x1050(%ebp),%edi
    5a7c:	89 01                	mov    %eax,(%ecx)
    5a7e:	83 7d d0 86          	cmpl   $0xffffff86,-0x30(%ebp)
    5a82:	0f 84 9b 04 00 00    	je     5f23 <bithenge_parse_script+0x693>
    5a88:	8b 85 bc ef ff ff    	mov    -0x1044(%ebp),%eax
    5a8e:	c7 45 d0 80 ff ff ff 	movl   $0xffffff80,-0x30(%ebp)
    5a95:	85 c0                	test   %eax,%eax
    5a97:	74 0c                	je     5aa5 <bithenge_parse_script+0x215>
    5a99:	83 ec 0c             	sub    $0xc,%esp
    5a9c:	50                   	push   %eax
    5a9d:	e8 5e c5 00 00       	call   12000 <fclose@plt>
    5aa2:	83 c4 10             	add    $0x10,%esp
    5aa5:	8b 9d b4 ef ff ff    	mov    -0x104c(%ebp),%ebx
    5aab:	85 db                	test   %ebx,%ebx
    5aad:	74 52                	je     5b01 <bithenge_parse_script+0x271>
    5aaf:	90                   	nop
    5ab0:	83 ec 0c             	sub    $0xc,%esp
    5ab3:	8b 03                	mov    (%ebx),%eax
    5ab5:	8b 73 08             	mov    0x8(%ebx),%esi
    5ab8:	50                   	push   %eax
    5ab9:	e8 32 c6 00 00       	call   120f0 <free@plt>
    5abe:	8b 53 04             	mov    0x4(%ebx),%edx
    5ac1:	83 c4 10             	add    $0x10,%esp
    5ac4:	85 d2                	test   %edx,%edx
    5ac6:	74 27                	je     5aef <bithenge_parse_script+0x25f>
    5ac8:	8b 0a                	mov    (%edx),%ecx
    5aca:	85 c9                	test   %ecx,%ecx
    5acc:	0f 84 02 05 00 00    	je     5fd4 <bithenge_parse_script+0x744>
    5ad2:	8b 42 04             	mov    0x4(%edx),%eax
    5ad5:	85 c0                	test   %eax,%eax
    5ad7:	0f 84 09 05 00 00    	je     5fe6 <bithenge_parse_script+0x756>
    5add:	48                   	dec    %eax
    5ade:	89 42 04             	mov    %eax,0x4(%edx)
    5ae1:	85 c0                	test   %eax,%eax
    5ae3:	75 0a                	jne    5aef <bithenge_parse_script+0x25f>
    5ae5:	83 ec 0c             	sub    $0xc,%esp
    5ae8:	52                   	push   %edx
    5ae9:	ff 51 0c             	call   *0xc(%ecx)
    5aec:	83 c4 10             	add    $0x10,%esp
    5aef:	83 ec 0c             	sub    $0xc,%esp
    5af2:	53                   	push   %ebx
    5af3:	89 f3                	mov    %esi,%ebx
    5af5:	e8 f6 c5 00 00       	call   120f0 <free@plt>
    5afa:	83 c4 10             	add    $0x10,%esp
    5afd:	85 f6                	test   %esi,%esi
    5aff:	75 af                	jne    5ab0 <bithenge_parse_script+0x220>
    5b01:	8b 45 e0             	mov    -0x20(%ebp),%eax
    5b04:	31 db                	xor    %ebx,%ebx
    5b06:	85 c0                	test   %eax,%eax
    5b08:	7e 1e                	jle    5b28 <bithenge_parse_script+0x298>
    5b0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    5b10:	8b 45 dc             	mov    -0x24(%ebp),%eax
    5b13:	83 ec 0c             	sub    $0xc,%esp
    5b16:	8b 34 98             	mov    (%eax,%ebx,4),%esi
    5b19:	43                   	inc    %ebx
    5b1a:	56                   	push   %esi
    5b1b:	e8 d0 c5 00 00       	call   120f0 <free@plt>
    5b20:	83 c4 10             	add    $0x10,%esp
    5b23:	3b 5d e0             	cmp    -0x20(%ebp),%ebx
    5b26:	7c e8                	jl     5b10 <bithenge_parse_script+0x280>
    5b28:	83 ec 0c             	sub    $0xc,%esp
    5b2b:	8b 45 dc             	mov    -0x24(%ebp),%eax
    5b2e:	50                   	push   %eax
    5b2f:	e8 bc c5 00 00       	call   120f0 <free@plt>
    5b34:	83 c4 10             	add    $0x10,%esp
    5b37:	85 ff                	test   %edi,%edi
    5b39:	75 0d                	jne    5b48 <bithenge_parse_script+0x2b8>
    5b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
    5b3e:	8b 08                	mov    (%eax),%ecx
    5b40:	85 c9                	test   %ecx,%ecx
    5b42:	0f 84 6c 04 00 00    	je     5fb4 <bithenge_parse_script+0x724>
    5b48:	8d 65 f4             	lea    -0xc(%ebp),%esp
    5b4b:	89 f8                	mov    %edi,%eax
    5b4d:	5b                   	pop    %ebx
    5b4e:	5e                   	pop    %esi
    5b4f:	5f                   	pop    %edi
    5b50:	5d                   	pop    %ebp
    5b51:	c3                   	ret    
    5b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    5b58:	8b 85 b0 ef ff ff    	mov    -0x1050(%ebp),%eax
    5b5e:	8b bd ac ef ff ff    	mov    -0x1054(%ebp),%edi
    5b64:	85 c0                	test   %eax,%eax
    5b66:	0f 85 51 02 00 00    	jne    5dbd <bithenge_parse_script+0x52d>
    5b6c:	83 ec 0c             	sub    $0xc,%esp
    5b6f:	6a 0c                	push   $0xc
    5b71:	e8 ea c2 00 00       	call   11e60 <malloc@plt>
    5b76:	83 c4 10             	add    $0x10,%esp
    5b79:	89 c2                	mov    %eax,%edx
    5b7b:	85 c0                	test   %eax,%eax
    5b7d:	0f 84 15 02 00 00    	je     5d98 <bithenge_parse_script+0x508>
    5b83:	8b 8d b0 ef ff ff    	mov    -0x1050(%ebp),%ecx
    5b89:	85 c9                	test   %ecx,%ecx
    5b8b:	0f 85 2e 02 00 00    	jne    5dbf <bithenge_parse_script+0x52f>
    5b91:	8b 95 b4 ef ff ff    	mov    -0x104c(%ebp),%edx
    5b97:	89 30                	mov    %esi,(%eax)
    5b99:	89 78 04             	mov    %edi,0x4(%eax)
    5b9c:	89 50 08             	mov    %edx,0x8(%eax)
    5b9f:	89 85 b4 ef ff ff    	mov    %eax,-0x104c(%ebp)
    5ba5:	83 7d d0 3d          	cmpl   $0x3d,-0x30(%ebp)
    5ba9:	0f 85 81 00 00 00    	jne    5c30 <bithenge_parse_script+0x3a0>
    5baf:	89 d8                	mov    %ebx,%eax
    5bb1:	e8 5a c5 ff ff       	call   2110 <next_token>
    5bb6:	89 d8                	mov    %ebx,%eax
    5bb8:	e8 d3 d9 ff ff       	call   3590 <parse_transform>
    5bbd:	83 7d d0 3b          	cmpl   $0x3b,-0x30(%ebp)
    5bc1:	89 c6                	mov    %eax,%esi
    5bc3:	0f 85 06 fe ff ff    	jne    59cf <bithenge_parse_script+0x13f>
    5bc9:	89 d8                	mov    %ebx,%eax
    5bcb:	e8 40 c5 ff ff       	call   2110 <next_token>
    5bd0:	e9 6f 01 00 00       	jmp    5d44 <bithenge_parse_script+0x4b4>
    5bd5:	8d 76 00             	lea    0x0(%esi),%esi
    5bd8:	8b 7d e0             	mov    -0x20(%ebp),%edi
    5bdb:	8d 85 ac ef ff ff    	lea    -0x1054(%ebp),%eax
    5be1:	51                   	push   %ecx
    5be2:	51                   	push   %ecx
    5be3:	57                   	push   %edi
    5be4:	50                   	push   %eax
    5be5:	e8 16 55 00 00       	call   b100 <bithenge_new_barrier_transform>
    5bea:	83 c4 10             	add    $0x10,%esp
    5bed:	85 c0                	test   %eax,%eax
    5bef:	0f 84 63 ff ff ff    	je     5b58 <bithenge_parse_script+0x2c8>
    5bf5:	8b 95 b0 ef ff ff    	mov    -0x1050(%ebp),%edx
    5bfb:	c7 85 ac ef ff ff 00 	movl   $0x0,-0x1054(%ebp)
    5c02:	00 00 00 
    5c05:	85 d2                	test   %edx,%edx
    5c07:	0f 85 7d fd ff ff    	jne    598a <bithenge_parse_script+0xfa>
    5c0d:	83 7d d0 86          	cmpl   $0xffffff86,-0x30(%ebp)
    5c11:	0f 84 34 03 00 00    	je     5f4b <bithenge_parse_script+0x6bb>
    5c17:	c7 45 d0 80 ff ff ff 	movl   $0xffffff80,-0x30(%ebp)
    5c1e:	89 85 b0 ef ff ff    	mov    %eax,-0x1050(%ebp)
    5c24:	e9 61 fd ff ff       	jmp    598a <bithenge_parse_script+0xfa>
    5c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    5c30:	ba 85 13 01 00       	mov    $0x11385,%edx
    5c35:	89 d8                	mov    %ebx,%eax
    5c37:	e8 d4 c3 ff ff       	call   2010 <syntax_error.part.2>
    5c3c:	e9 7b fd ff ff       	jmp    59bc <bithenge_parse_script+0x12c>
    5c41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    5c48:	89 d8                	mov    %ebx,%eax
    5c4a:	ba 2c 14 01 00       	mov    $0x1142c,%edx
    5c4f:	e8 bc c3 ff ff       	call   2010 <syntax_error.part.2>
    5c54:	8b 45 d0             	mov    -0x30(%ebp),%eax
    5c57:	83 f8 28             	cmp    $0x28,%eax
    5c5a:	0f 85 12 fd ff ff    	jne    5972 <bithenge_parse_script+0xe2>
    5c60:	89 d8                	mov    %ebx,%eax
    5c62:	e8 a9 c4 ff ff       	call   2110 <next_token>
    5c67:	8b bd b0 ef ff ff    	mov    -0x1050(%ebp),%edi
    5c6d:	85 ff                	test   %edi,%edi
    5c6f:	74 68                	je     5cd9 <bithenge_parse_script+0x449>
    5c71:	e9 d7 01 00 00       	jmp    5e4d <bithenge_parse_script+0x5bd>
    5c76:	66 90                	xchg   %ax,%ax
    5c78:	8b 7d dc             	mov    -0x24(%ebp),%edi
    5c7b:	8d 04 85 04 00 00 00 	lea    0x4(,%eax,4),%eax
    5c82:	51                   	push   %ecx
    5c83:	51                   	push   %ecx
    5c84:	50                   	push   %eax
    5c85:	57                   	push   %edi
    5c86:	e8 15 c3 00 00       	call   11fa0 <realloc@plt>
    5c8b:	83 c4 10             	add    $0x10,%esp
    5c8e:	85 c0                	test   %eax,%eax
    5c90:	0f 84 f2 01 00 00    	je     5e88 <bithenge_parse_script+0x5f8>
    5c96:	8b 95 b0 ef ff ff    	mov    -0x1050(%ebp),%edx
    5c9c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    5c9f:	89 45 dc             	mov    %eax,-0x24(%ebp)
    5ca2:	85 d2                	test   %edx,%edx
    5ca4:	75 75                	jne    5d1b <bithenge_parse_script+0x48b>
    5ca6:	8b 55 e0             	mov    -0x20(%ebp),%edx
    5ca9:	83 f9 86             	cmp    $0xffffff86,%ecx
    5cac:	8d 7a 01             	lea    0x1(%edx),%edi
    5caf:	89 7d e0             	mov    %edi,-0x20(%ebp)
    5cb2:	8d 3c 90             	lea    (%eax,%edx,4),%edi
    5cb5:	0f 84 65 01 00 00    	je     5e20 <bithenge_parse_script+0x590>
    5cbb:	ba 2c 14 01 00       	mov    $0x1142c,%edx
    5cc0:	89 d8                	mov    %ebx,%eax
    5cc2:	e8 49 c3 ff ff       	call   2010 <syntax_error.part.2>
    5cc7:	31 d2                	xor    %edx,%edx
    5cc9:	8b 85 b0 ef ff ff    	mov    -0x1050(%ebp),%eax
    5ccf:	89 17                	mov    %edx,(%edi)
    5cd1:	85 c0                	test   %eax,%eax
    5cd3:	0f 85 74 01 00 00    	jne    5e4d <bithenge_parse_script+0x5bd>
    5cd9:	8b 55 d0             	mov    -0x30(%ebp),%edx
    5cdc:	83 fa 29             	cmp    $0x29,%edx
    5cdf:	0f 84 e5 01 00 00    	je     5eca <bithenge_parse_script+0x63a>
    5ce5:	8b 45 e0             	mov    -0x20(%ebp),%eax
    5ce8:	85 c0                	test   %eax,%eax
    5cea:	74 8c                	je     5c78 <bithenge_parse_script+0x3e8>
    5cec:	83 fa 2c             	cmp    $0x2c,%edx
    5cef:	0f 84 c0 01 00 00    	je     5eb5 <bithenge_parse_script+0x625>
    5cf5:	ba 85 13 01 00       	mov    $0x11385,%edx
    5cfa:	89 d8                	mov    %ebx,%eax
    5cfc:	e8 0f c3 ff ff       	call   2010 <syntax_error.part.2>
    5d01:	8b 45 e0             	mov    -0x20(%ebp),%eax
    5d04:	8b 95 b0 ef ff ff    	mov    -0x1050(%ebp),%edx
    5d0a:	8b 7d dc             	mov    -0x24(%ebp),%edi
    5d0d:	85 d2                	test   %edx,%edx
    5d0f:	0f 84 66 ff ff ff    	je     5c7b <bithenge_parse_script+0x3eb>
    5d15:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    5d18:	89 7d dc             	mov    %edi,-0x24(%ebp)
    5d1b:	83 f9 29             	cmp    $0x29,%ecx
    5d1e:	0f 84 a6 01 00 00    	je     5eca <bithenge_parse_script+0x63a>
    5d24:	c7 85 ac ef ff ff 00 	movl   $0x0,-0x1054(%ebp)
    5d2b:	00 00 00 
    5d2e:	e9 57 fc ff ff       	jmp    598a <bithenge_parse_script+0xfa>
    5d33:	90                   	nop
    5d34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5d38:	ba 85 13 01 00       	mov    $0x11385,%edx
    5d3d:	89 d8                	mov    %ebx,%eax
    5d3f:	e8 cc c2 ff ff       	call   2010 <syntax_error.part.2>
    5d44:	8b 85 b0 ef ff ff    	mov    -0x1050(%ebp),%eax
    5d4a:	85 c0                	test   %eax,%eax
    5d4c:	0f 85 8b fc ff ff    	jne    59dd <bithenge_parse_script+0x14d>
    5d52:	50                   	push   %eax
    5d53:	50                   	push   %eax
    5d54:	8b 85 ac ef ff ff    	mov    -0x1054(%ebp),%eax
    5d5a:	56                   	push   %esi
    5d5b:	50                   	push   %eax
    5d5c:	e8 2f 53 00 00       	call   b090 <bithenge_barrier_transform_set_subtransform>
    5d61:	83 c4 10             	add    $0x10,%esp
    5d64:	85 c0                	test   %eax,%eax
    5d66:	0f 84 9c fc ff ff    	je     5a08 <bithenge_parse_script+0x178>
    5d6c:	8b bd b0 ef ff ff    	mov    -0x1050(%ebp),%edi
    5d72:	85 ff                	test   %edi,%edi
    5d74:	0f 85 8e fc ff ff    	jne    5a08 <bithenge_parse_script+0x178>
    5d7a:	83 7d d0 86          	cmpl   $0xffffff86,-0x30(%ebp)
    5d7e:	0f 84 fc 01 00 00    	je     5f80 <bithenge_parse_script+0x6f0>
    5d84:	c7 45 d0 80 ff ff ff 	movl   $0xffffff80,-0x30(%ebp)
    5d8b:	89 85 b0 ef ff ff    	mov    %eax,-0x1050(%ebp)
    5d91:	e9 72 fc ff ff       	jmp    5a08 <bithenge_parse_script+0x178>
    5d96:	66 90                	xchg   %ax,%ax
    5d98:	8b 85 b0 ef ff ff    	mov    -0x1050(%ebp),%eax
    5d9e:	85 c0                	test   %eax,%eax
    5da0:	75 1b                	jne    5dbd <bithenge_parse_script+0x52d>
    5da2:	83 7d d0 86          	cmpl   $0xffffff86,-0x30(%ebp)
    5da6:	0f 84 8b 01 00 00    	je     5f37 <bithenge_parse_script+0x6a7>
    5dac:	c7 45 d0 80 ff ff ff 	movl   $0xffffff80,-0x30(%ebp)
    5db3:	c7 85 b0 ef ff ff fe 	movl   $0xfffffffe,-0x1050(%ebp)
    5dba:	ff ff ff 
    5dbd:	31 d2                	xor    %edx,%edx
    5dbf:	83 ec 0c             	sub    $0xc,%esp
    5dc2:	89 95 a4 ef ff ff    	mov    %edx,-0x105c(%ebp)
    5dc8:	56                   	push   %esi
    5dc9:	e8 22 c3 00 00       	call   120f0 <free@plt>
    5dce:	83 c4 10             	add    $0x10,%esp
    5dd1:	8b 95 a4 ef ff ff    	mov    -0x105c(%ebp),%edx
    5dd7:	85 ff                	test   %edi,%edi
    5dd9:	0f 84 b9 fb ff ff    	je     5998 <bithenge_parse_script+0x108>
    5ddf:	8b 0f                	mov    (%edi),%ecx
    5de1:	85 c9                	test   %ecx,%ecx
    5de3:	0f 84 eb 01 00 00    	je     5fd4 <bithenge_parse_script+0x744>
    5de9:	8b 47 04             	mov    0x4(%edi),%eax
    5dec:	85 c0                	test   %eax,%eax
    5dee:	0f 84 f2 01 00 00    	je     5fe6 <bithenge_parse_script+0x756>
    5df4:	48                   	dec    %eax
    5df5:	89 47 04             	mov    %eax,0x4(%edi)
    5df8:	85 c0                	test   %eax,%eax
    5dfa:	0f 85 98 fb ff ff    	jne    5998 <bithenge_parse_script+0x108>
    5e00:	83 ec 0c             	sub    $0xc,%esp
    5e03:	89 95 a4 ef ff ff    	mov    %edx,-0x105c(%ebp)
    5e09:	57                   	push   %edi
    5e0a:	ff 51 0c             	call   *0xc(%ecx)
    5e0d:	83 c4 10             	add    $0x10,%esp
    5e10:	8b 95 a4 ef ff ff    	mov    -0x105c(%ebp),%edx
    5e16:	e9 7d fb ff ff       	jmp    5998 <bithenge_parse_script+0x108>
    5e1b:	90                   	nop
    5e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5e20:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    5e23:	89 d8                	mov    %ebx,%eax
    5e25:	89 95 a4 ef ff ff    	mov    %edx,-0x105c(%ebp)
    5e2b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    5e32:	e8 d9 c2 ff ff       	call   2110 <next_token>
    5e37:	8b 95 a4 ef ff ff    	mov    -0x105c(%ebp),%edx
    5e3d:	8b 85 b0 ef ff ff    	mov    -0x1050(%ebp),%eax
    5e43:	89 17                	mov    %edx,(%edi)
    5e45:	85 c0                	test   %eax,%eax
    5e47:	0f 84 8c fe ff ff    	je     5cd9 <bithenge_parse_script+0x449>
    5e4d:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    5e50:	e9 c6 fe ff ff       	jmp    5d1b <bithenge_parse_script+0x48b>
    5e55:	8d 76 00             	lea    0x0(%esi),%esi
    5e58:	89 d8                	mov    %ebx,%eax
    5e5a:	e8 b1 c2 ff ff       	call   2110 <next_token>
    5e5f:	8b 45 d0             	mov    -0x30(%ebp),%eax
    5e62:	83 f8 86             	cmp    $0xffffff86,%eax
    5e65:	0f 85 ee fa ff ff    	jne    5959 <bithenge_parse_script+0xc9>
    5e6b:	89 d8                	mov    %ebx,%eax
    5e6d:	8b 75 d4             	mov    -0x2c(%ebp),%esi
    5e70:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    5e77:	e8 94 c2 ff ff       	call   2110 <next_token>
    5e7c:	8b 45 d0             	mov    -0x30(%ebp),%eax
    5e7f:	e9 e5 fa ff ff       	jmp    5969 <bithenge_parse_script+0xd9>
    5e84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    5e88:	8b 85 b0 ef ff ff    	mov    -0x1050(%ebp),%eax
    5e8e:	85 c0                	test   %eax,%eax
    5e90:	0f 85 7f fe ff ff    	jne    5d15 <bithenge_parse_script+0x485>
    5e96:	83 7d d0 86          	cmpl   $0xffffff86,-0x30(%ebp)
    5e9a:	74 73                	je     5f0f <bithenge_parse_script+0x67f>
    5e9c:	c7 45 d0 80 ff ff ff 	movl   $0xffffff80,-0x30(%ebp)
    5ea3:	c7 85 b0 ef ff ff fe 	movl   $0xfffffffe,-0x1050(%ebp)
    5eaa:	ff ff ff 
    5ead:	89 7d dc             	mov    %edi,-0x24(%ebp)
    5eb0:	e9 6f fe ff ff       	jmp    5d24 <bithenge_parse_script+0x494>
    5eb5:	89 d8                	mov    %ebx,%eax
    5eb7:	e8 54 c2 ff ff       	call   2110 <next_token>
    5ebc:	8b 45 e0             	mov    -0x20(%ebp),%eax
    5ebf:	8b 95 b0 ef ff ff    	mov    -0x1050(%ebp),%edx
    5ec5:	e9 40 fe ff ff       	jmp    5d0a <bithenge_parse_script+0x47a>
    5eca:	89 d8                	mov    %ebx,%eax
    5ecc:	e8 3f c2 ff ff       	call   2110 <next_token>
    5ed1:	e9 9c fa ff ff       	jmp    5972 <bithenge_parse_script+0xe2>
    5ed6:	e8 15 bf 00 00       	call   11df0 <__errno@plt>
    5edb:	8b 18                	mov    (%eax),%ebx
    5edd:	8b 85 b0 ef ff ff    	mov    -0x1050(%ebp),%eax
    5ee3:	85 db                	test   %ebx,%ebx
    5ee5:	0f 84 2e fa ff ff    	je     5919 <bithenge_parse_script+0x89>
    5eeb:	85 c0                	test   %eax,%eax
    5eed:	0f 85 26 fa ff ff    	jne    5919 <bithenge_parse_script+0x89>
    5ef3:	83 7d d0 86          	cmpl   $0xffffff86,-0x30(%ebp)
    5ef7:	0f 84 a3 00 00 00    	je     5fa0 <bithenge_parse_script+0x710>
    5efd:	c7 45 d0 80 ff ff ff 	movl   $0xffffff80,-0x30(%ebp)
    5f04:	89 9d b0 ef ff ff    	mov    %ebx,-0x1050(%ebp)
    5f0a:	e9 54 fb ff ff       	jmp    5a63 <bithenge_parse_script+0x1d3>
    5f0f:	83 ec 0c             	sub    $0xc,%esp
    5f12:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    5f15:	50                   	push   %eax
    5f16:	e8 d5 c1 00 00       	call   120f0 <free@plt>
    5f1b:	83 c4 10             	add    $0x10,%esp
    5f1e:	e9 79 ff ff ff       	jmp    5e9c <bithenge_parse_script+0x60c>
    5f23:	83 ec 0c             	sub    $0xc,%esp
    5f26:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    5f29:	50                   	push   %eax
    5f2a:	e8 c1 c1 00 00       	call   120f0 <free@plt>
    5f2f:	83 c4 10             	add    $0x10,%esp
    5f32:	e9 51 fb ff ff       	jmp    5a88 <bithenge_parse_script+0x1f8>
    5f37:	83 ec 0c             	sub    $0xc,%esp
    5f3a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    5f3d:	50                   	push   %eax
    5f3e:	e8 ad c1 00 00       	call   120f0 <free@plt>
    5f43:	83 c4 10             	add    $0x10,%esp
    5f46:	e9 61 fe ff ff       	jmp    5dac <bithenge_parse_script+0x51c>
    5f4b:	83 ec 0c             	sub    $0xc,%esp
    5f4e:	89 85 a4 ef ff ff    	mov    %eax,-0x105c(%ebp)
    5f54:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    5f57:	50                   	push   %eax
    5f58:	e8 93 c1 00 00       	call   120f0 <free@plt>
    5f5d:	8b 85 a4 ef ff ff    	mov    -0x105c(%ebp),%eax
    5f63:	8b bd ac ef ff ff    	mov    -0x1054(%ebp),%edi
    5f69:	c7 45 d0 80 ff ff ff 	movl   $0xffffff80,-0x30(%ebp)
    5f70:	89 85 b0 ef ff ff    	mov    %eax,-0x1050(%ebp)
    5f76:	83 c4 10             	add    $0x10,%esp
    5f79:	31 d2                	xor    %edx,%edx
    5f7b:	e9 3f fe ff ff       	jmp    5dbf <bithenge_parse_script+0x52f>
    5f80:	83 ec 0c             	sub    $0xc,%esp
    5f83:	8b 75 d4             	mov    -0x2c(%ebp),%esi
    5f86:	89 85 a4 ef ff ff    	mov    %eax,-0x105c(%ebp)
    5f8c:	56                   	push   %esi
    5f8d:	e8 5e c1 00 00       	call   120f0 <free@plt>
    5f92:	83 c4 10             	add    $0x10,%esp
    5f95:	8b 85 a4 ef ff ff    	mov    -0x105c(%ebp),%eax
    5f9b:	e9 e4 fd ff ff       	jmp    5d84 <bithenge_parse_script+0x4f4>
    5fa0:	83 ec 0c             	sub    $0xc,%esp
    5fa3:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    5fa6:	51                   	push   %ecx
    5fa7:	e8 44 c1 00 00       	call   120f0 <free@plt>
    5fac:	83 c4 10             	add    $0x10,%esp
    5faf:	e9 49 ff ff ff       	jmp    5efd <bithenge_parse_script+0x66d>
    5fb4:	8b 15 28 3d 01 00    	mov    0x13d28,%edx
    5fba:	50                   	push   %eax
    5fbb:	50                   	push   %eax
    5fbc:	68 16 14 01 00       	push   $0x11416
    5fc1:	52                   	push   %edx
    5fc2:	bf f2 ff ff ff       	mov    $0xfffffff2,%edi
    5fc7:	e8 64 bf 00 00       	call   11f30 <fprintf@plt>
    5fcc:	83 c4 10             	add    $0x10,%esp
    5fcf:	e9 74 fb ff ff       	jmp    5b48 <bithenge_parse_script+0x2b8>
    5fd4:	52                   	push   %edx
    5fd5:	6a 74                	push   $0x74
    5fd7:	68 18 13 01 00       	push   $0x11318
    5fdc:	68 61 11 01 00       	push   $0x11161
    5fe1:	e8 2a bf 00 00       	call   11f10 <assert_abort@plt>
    5fe6:	50                   	push   %eax
    5fe7:	6a 75                	push   $0x75
    5fe9:	68 18 13 01 00       	push   $0x11318
    5fee:	68 6b 11 01 00       	push   $0x1116b
    5ff3:	e8 18 bf 00 00       	call   11f10 <assert_abort@plt>
    5ff8:	66 90                	xchg   %ax,%ax
    5ffa:	66 90                	xchg   %ax,%ax
    5ffc:	66 90                	xchg   %ax,%ax
    5ffe:	66 90                	xchg   %ax,%ax

00006000 <for_each_noop>:
    6000:	55                   	push   %ebp
    6001:	89 e5                	mov    %esp,%ebp
    6003:	83 ec 14             	sub    $0x14,%esp
    6006:	8b 45 08             	mov    0x8(%ebp),%eax
    6009:	50                   	push   %eax
    600a:	e8 11 56 00 00       	call   b620 <bithenge_node_dec_ref>
    600f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    6012:	5a                   	pop    %edx
    6013:	51                   	push   %ecx
    6014:	e8 07 56 00 00       	call   b620 <bithenge_node_dec_ref>
    6019:	31 c0                	xor    %eax,%eax
    601b:	c9                   	leave  
    601c:	c3                   	ret    
    601d:	8d 76 00             	lea    0x0(%esi),%esi

00006020 <bithenge_node_inc_ref.part.2>:
    6020:	55                   	push   %ebp
    6021:	89 e5                	mov    %esp,%ebp
    6023:	83 ec 0c             	sub    $0xc,%esp
    6026:	6a 70                	push   $0x70
    6028:	68 50 12 01 00       	push   $0x11250
    602d:	68 98 14 01 00       	push   $0x11498
    6032:	e8 d9 be 00 00       	call   11f10 <assert_abort@plt>
    6037:	89 f6                	mov    %esi,%esi
    6039:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00006040 <bithenge_node_as_blob.part.8>:
    6040:	55                   	push   %ebp
    6041:	89 e5                	mov    %esp,%ebp
    6043:	83 ec 0c             	sub    $0xc,%esp
    6046:	68 d9 00 00 00       	push   $0xd9
    604b:	68 05 12 01 00       	push   $0x11205
    6050:	68 84 12 01 00       	push   $0x11284
    6055:	e8 b6 be 00 00       	call   11f10 <assert_abort@plt>
    605a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

00006060 <struct_node_get_transform>:
    6060:	55                   	push   %ebp
    6061:	89 e5                	mov    %esp,%ebp
    6063:	83 ec 08             	sub    $0x8,%esp
    6066:	8b 45 08             	mov    0x8(%ebp),%eax
    6069:	8b 55 10             	mov    0x10(%ebp),%edx
    606c:	8b 40 30             	mov    0x30(%eax),%eax
    606f:	8b 40 0c             	mov    0xc(%eax),%eax
    6072:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
    6076:	8b 55 0c             	mov    0xc(%ebp),%edx
    6079:	85 c0                	test   %eax,%eax
    607b:	89 02                	mov    %eax,(%edx)
    607d:	74 0b                	je     608a <struct_node_get_transform+0x2a>
    607f:	8b 50 04             	mov    0x4(%eax),%edx
    6082:	42                   	inc    %edx
    6083:	89 50 04             	mov    %edx,0x4(%eax)
    6086:	31 c0                	xor    %eax,%eax
    6088:	c9                   	leave  
    6089:	c3                   	ret    
    608a:	e8 0a 2a 00 00       	call   8a99 <bithenge_transform_inc_ref.part.10>
    608f:	90                   	nop

00006090 <repeat_node_get_transform>:
    6090:	55                   	push   %ebp
    6091:	89 e5                	mov    %esp,%ebp
    6093:	83 ec 08             	sub    $0x8,%esp
    6096:	8b 45 08             	mov    0x8(%ebp),%eax
    6099:	8b 55 0c             	mov    0xc(%ebp),%edx
    609c:	8b 40 3c             	mov    0x3c(%eax),%eax
    609f:	89 02                	mov    %eax,(%edx)
    60a1:	85 c0                	test   %eax,%eax
    60a3:	74 0b                	je     60b0 <repeat_node_get_transform+0x20>
    60a5:	8b 50 04             	mov    0x4(%eax),%edx
    60a8:	42                   	inc    %edx
    60a9:	89 50 04             	mov    %edx,0x4(%eax)
    60ac:	31 c0                	xor    %eax,%eax
    60ae:	c9                   	leave  
    60af:	c3                   	ret    
    60b0:	e8 e4 29 00 00       	call   8a99 <bithenge_transform_inc_ref.part.10>
    60b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    60b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

000060c0 <do_while_node_get_transform>:
    60c0:	55                   	push   %ebp
    60c1:	89 e5                	mov    %esp,%ebp
    60c3:	83 ec 08             	sub    $0x8,%esp
    60c6:	8b 45 08             	mov    0x8(%ebp),%eax
    60c9:	8b 55 0c             	mov    0xc(%ebp),%edx
    60cc:	8b 40 34             	mov    0x34(%eax),%eax
    60cf:	89 02                	mov    %eax,(%edx)
    60d1:	85 c0                	test   %eax,%eax
    60d3:	74 0b                	je     60e0 <do_while_node_get_transform+0x20>
    60d5:	8b 50 04             	mov    0x4(%eax),%edx
    60d8:	42                   	inc    %edx
    60d9:	89 50 04             	mov    %edx,0x4(%eax)
    60dc:	31 c0                	xor    %eax,%eax
    60de:	c9                   	leave  
    60df:	c3                   	ret    
    60e0:	e8 b4 29 00 00       	call   8a99 <bithenge_transform_inc_ref.part.10>
    60e5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    60e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

000060f0 <struct_transform_apply>:
    60f0:	55                   	push   %ebp
    60f1:	89 e5                	mov    %esp,%ebp
    60f3:	57                   	push   %edi
    60f4:	56                   	push   %esi
    60f5:	53                   	push   %ebx
    60f6:	83 ec 2c             	sub    $0x2c,%esp
    60f9:	8b 75 10             	mov    0x10(%ebp),%esi
    60fc:	83 3e 05             	cmpl   $0x5,(%esi)
    60ff:	0f 85 0b 01 00 00    	jne    6210 <struct_transform_apply+0x120>
    6105:	83 ec 0c             	sub    $0xc,%esp
    6108:	6a 38                	push   $0x38
    610a:	e8 51 bd 00 00       	call   11e60 <malloc@plt>
    610f:	83 c4 10             	add    $0x10,%esp
    6112:	89 c3                	mov    %eax,%ebx
    6114:	85 c0                	test   %eax,%eax
    6116:	0f 84 1a 01 00 00    	je     6236 <struct_transform_apply+0x146>
    611c:	51                   	push   %ecx
    611d:	51                   	push   %ecx
    611e:	68 e4 14 01 00       	push   $0x114e4
    6123:	50                   	push   %eax
    6124:	e8 87 57 00 00       	call   b8b0 <bithenge_init_internal_node>
    6129:	83 c4 10             	add    $0x10,%esp
    612c:	89 c7                	mov    %eax,%edi
    612e:	85 c0                	test   %eax,%eax
    6130:	0f 85 c2 00 00 00    	jne    61f8 <struct_transform_apply+0x108>
    6136:	8b 55 0c             	mov    0xc(%ebp),%edx
    6139:	50                   	push   %eax
    613a:	50                   	push   %eax
    613b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    613e:	52                   	push   %edx
    613f:	50                   	push   %eax
    6140:	e8 2b 4a 00 00       	call   ab70 <bithenge_scope_new>
    6145:	83 c4 10             	add    $0x10,%esp
    6148:	89 c7                	mov    %eax,%edi
    614a:	85 c0                	test   %eax,%eax
    614c:	0f 85 a6 00 00 00    	jne    61f8 <struct_transform_apply+0x108>
    6152:	8b 45 08             	mov    0x8(%ebp),%eax
    6155:	83 ec 0c             	sub    $0xc,%esp
    6158:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    615b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    6162:	8b 40 10             	mov    0x10(%eax),%eax
    6165:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    6168:	89 45 d0             	mov    %eax,-0x30(%ebp)
    616b:	c7 43 10 e0 14 01 00 	movl   $0x114e0,0x10(%ebx)
    6172:	c1 e0 03             	shl    $0x3,%eax
    6175:	50                   	push   %eax
    6176:	e8 e5 bc 00 00       	call   11e60 <malloc@plt>
    617b:	83 c4 10             	add    $0x10,%esp
    617e:	89 43 1c             	mov    %eax,0x1c(%ebx)
    6181:	85 c0                	test   %eax,%eax
    6183:	0f 84 96 00 00 00    	je     621f <struct_transform_apply+0x12f>
    6189:	8b 46 04             	mov    0x4(%esi),%eax
    618c:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    618f:	40                   	inc    %eax
    6190:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    6193:	89 46 04             	mov    %eax,0x4(%esi)
    6196:	8b 45 d0             	mov    -0x30(%ebp),%eax
    6199:	89 73 14             	mov    %esi,0x14(%ebx)
    619c:	89 43 28             	mov    %eax,0x28(%ebx)
    619f:	89 53 2c             	mov    %edx,0x2c(%ebx)
    61a2:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
    61a9:	c6 43 24 00          	movb   $0x0,0x24(%ebx)
    61ad:	89 4b 18             	mov    %ecx,0x18(%ebx)
    61b0:	85 c9                	test   %ecx,%ecx
    61b2:	74 05                	je     61b9 <struct_transform_apply+0xc9>
    61b4:	8b 01                	mov    (%ecx),%eax
    61b6:	40                   	inc    %eax
    61b7:	89 01                	mov    %eax,(%ecx)
    61b9:	8b 45 08             	mov    0x8(%ebp),%eax
    61bc:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    61bf:	89 43 30             	mov    %eax,0x30(%ebx)
    61c2:	c6 43 34 00          	movb   $0x0,0x34(%ebx)
    61c6:	8b 50 04             	mov    0x4(%eax),%edx
    61c9:	42                   	inc    %edx
    61ca:	89 50 04             	mov    %edx,0x4(%eax)
    61cd:	51                   	push   %ecx
    61ce:	51                   	push   %ecx
    61cf:	53                   	push   %ebx
    61d0:	56                   	push   %esi
    61d1:	e8 fa 4c 00 00       	call   aed0 <bithenge_scope_set_current_node>
    61d6:	58                   	pop    %eax
    61d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    61da:	50                   	push   %eax
    61db:	e8 00 4a 00 00       	call   abe0 <bithenge_scope_dec_ref>
    61e0:	8b 45 14             	mov    0x14(%ebp),%eax
    61e3:	83 c4 10             	add    $0x10,%esp
    61e6:	89 18                	mov    %ebx,(%eax)
    61e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
    61eb:	89 f8                	mov    %edi,%eax
    61ed:	5b                   	pop    %ebx
    61ee:	5e                   	pop    %esi
    61ef:	5f                   	pop    %edi
    61f0:	5d                   	pop    %ebp
    61f1:	c3                   	ret    
    61f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    61f8:	83 ec 0c             	sub    $0xc,%esp
    61fb:	53                   	push   %ebx
    61fc:	e8 ef be 00 00       	call   120f0 <free@plt>
    6201:	83 c4 10             	add    $0x10,%esp
    6204:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6207:	89 f8                	mov    %edi,%eax
    6209:	5b                   	pop    %ebx
    620a:	5e                   	pop    %esi
    620b:	5f                   	pop    %edi
    620c:	5d                   	pop    %ebp
    620d:	c3                   	ret    
    620e:	66 90                	xchg   %ax,%ax
    6210:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6213:	bf f2 ff ff ff       	mov    $0xfffffff2,%edi
    6218:	89 f8                	mov    %edi,%eax
    621a:	5b                   	pop    %ebx
    621b:	5e                   	pop    %esi
    621c:	5f                   	pop    %edi
    621d:	5d                   	pop    %ebp
    621e:	c3                   	ret    
    621f:	83 ec 0c             	sub    $0xc,%esp
    6222:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    6225:	50                   	push   %eax
    6226:	e8 b5 49 00 00       	call   abe0 <bithenge_scope_dec_ref>
    622b:	89 1c 24             	mov    %ebx,(%esp)
    622e:	e8 bd be 00 00       	call   120f0 <free@plt>
    6233:	83 c4 10             	add    $0x10,%esp
    6236:	bf fe ff ff ff       	mov    $0xfffffffe,%edi
    623b:	eb ab                	jmp    61e8 <struct_transform_apply+0xf8>
    623d:	8d 76 00             	lea    0x0(%esi),%esi

00006240 <repeat_transform_apply>:
    6240:	55                   	push   %ebp
    6241:	89 e5                	mov    %esp,%ebp
    6243:	57                   	push   %edi
    6244:	56                   	push   %esi
    6245:	53                   	push   %ebx
    6246:	83 ec 2c             	sub    $0x2c,%esp
    6249:	8b 45 10             	mov    0x10(%ebp),%eax
    624c:	83 38 05             	cmpl   $0x5,(%eax)
    624f:	75 65                	jne    62b6 <repeat_transform_apply+0x76>
    6251:	8b 45 08             	mov    0x8(%ebp),%eax
    6254:	8b 40 0c             	mov    0xc(%eax),%eax
    6257:	85 c0                	test   %eax,%eax
    6259:	74 6d                	je     62c8 <repeat_transform_apply+0x88>
    625b:	8b 10                	mov    (%eax),%edx
    625d:	85 d2                	test   %edx,%edx
    625f:	0f 84 6a 01 00 00    	je     63cf <repeat_transform_apply+0x18f>
    6265:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    6268:	51                   	push   %ecx
    6269:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
    626c:	51                   	push   %ecx
    626d:	53                   	push   %ebx
    626e:	50                   	push   %eax
    626f:	ff 12                	call   *(%edx)
    6271:	83 c4 10             	add    $0x10,%esp
    6274:	89 c2                	mov    %eax,%edx
    6276:	85 c0                	test   %eax,%eax
    6278:	75 19                	jne    6293 <repeat_transform_apply+0x53>
    627a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    627d:	83 38 03             	cmpl   $0x3,(%eax)
    6280:	74 1e                	je     62a0 <repeat_transform_apply+0x60>
    6282:	83 ec 0c             	sub    $0xc,%esp
    6285:	50                   	push   %eax
    6286:	e8 95 53 00 00       	call   b620 <bithenge_node_dec_ref>
    628b:	83 c4 10             	add    $0x10,%esp
    628e:	ba f2 ff ff ff       	mov    $0xfffffff2,%edx
    6293:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6296:	89 d0                	mov    %edx,%eax
    6298:	5b                   	pop    %ebx
    6299:	5e                   	pop    %esi
    629a:	5f                   	pop    %edi
    629b:	5d                   	pop    %ebp
    629c:	c3                   	ret    
    629d:	8d 76 00             	lea    0x0(%esi),%esi
    62a0:	83 ec 0c             	sub    $0xc,%esp
    62a3:	8b 70 0c             	mov    0xc(%eax),%esi
    62a6:	8b 78 08             	mov    0x8(%eax),%edi
    62a9:	50                   	push   %eax
    62aa:	e8 71 53 00 00       	call   b620 <bithenge_node_dec_ref>
    62af:	83 c4 10             	add    $0x10,%esp
    62b2:	85 f6                	test   %esi,%esi
    62b4:	79 18                	jns    62ce <repeat_transform_apply+0x8e>
    62b6:	8d 65 f4             	lea    -0xc(%ebp),%esp
    62b9:	ba f2 ff ff ff       	mov    $0xfffffff2,%edx
    62be:	89 d0                	mov    %edx,%eax
    62c0:	5b                   	pop    %ebx
    62c1:	5e                   	pop    %esi
    62c2:	5f                   	pop    %edi
    62c3:	5d                   	pop    %ebp
    62c4:	c3                   	ret    
    62c5:	8d 76 00             	lea    0x0(%esi),%esi
    62c8:	83 cf ff             	or     $0xffffffff,%edi
    62cb:	83 ce ff             	or     $0xffffffff,%esi
    62ce:	83 ec 0c             	sub    $0xc,%esp
    62d1:	6a 40                	push   $0x40
    62d3:	e8 88 bb 00 00       	call   11e60 <malloc@plt>
    62d8:	83 c4 10             	add    $0x10,%esp
    62db:	89 c3                	mov    %eax,%ebx
    62dd:	85 c0                	test   %eax,%eax
    62df:	0f 84 e0 00 00 00    	je     63c5 <repeat_transform_apply+0x185>
    62e5:	50                   	push   %eax
    62e6:	50                   	push   %eax
    62e7:	68 d4 14 01 00       	push   $0x114d4
    62ec:	53                   	push   %ebx
    62ed:	e8 be 55 00 00       	call   b8b0 <bithenge_init_internal_node>
    62f2:	83 c4 10             	add    $0x10,%esp
    62f5:	89 c2                	mov    %eax,%edx
    62f7:	85 c0                	test   %eax,%eax
    62f9:	0f 85 99 00 00 00    	jne    6398 <repeat_transform_apply+0x158>
    62ff:	89 f8                	mov    %edi,%eax
    6301:	c7 43 10 d0 14 01 00 	movl   $0x114d0,0x10(%ebx)
    6308:	21 f0                	and    %esi,%eax
    630a:	40                   	inc    %eax
    630b:	89 f0                	mov    %esi,%eax
    630d:	0f 94 c1             	sete   %cl
    6310:	21 f8                	and    %edi,%eax
    6312:	40                   	inc    %eax
    6313:	0f 84 97 00 00 00    	je     63b0 <repeat_transform_apply+0x170>
    6319:	83 ec 0c             	sub    $0xc,%esp
    631c:	8d 04 fd 00 00 00 00 	lea    0x0(,%edi,8),%eax
    6323:	89 55 d0             	mov    %edx,-0x30(%ebp)
    6326:	88 4d d4             	mov    %cl,-0x2c(%ebp)
    6329:	50                   	push   %eax
    632a:	e8 31 bb 00 00       	call   11e60 <malloc@plt>
    632f:	83 c4 10             	add    $0x10,%esp
    6332:	89 43 1c             	mov    %eax,0x1c(%ebx)
    6335:	85 c0                	test   %eax,%eax
    6337:	8a 4d d4             	mov    -0x2c(%ebp),%cl
    633a:	8b 55 d0             	mov    -0x30(%ebp),%edx
    633d:	74 7a                	je     63b9 <repeat_transform_apply+0x179>
    633f:	8b 45 10             	mov    0x10(%ebp),%eax
    6342:	89 7b 28             	mov    %edi,0x28(%ebx)
    6345:	89 43 14             	mov    %eax,0x14(%ebx)
    6348:	89 73 2c             	mov    %esi,0x2c(%ebx)
    634b:	ff 40 04             	incl   0x4(%eax)
    634e:	8b 45 0c             	mov    0xc(%ebp),%eax
    6351:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
    6358:	88 4b 24             	mov    %cl,0x24(%ebx)
    635b:	89 43 18             	mov    %eax,0x18(%ebx)
    635e:	85 c0                	test   %eax,%eax
    6360:	74 05                	je     6367 <repeat_transform_apply+0x127>
    6362:	8b 08                	mov    (%eax),%ecx
    6364:	41                   	inc    %ecx
    6365:	89 08                	mov    %ecx,(%eax)
    6367:	8b 45 08             	mov    0x8(%ebp),%eax
    636a:	8b 40 10             	mov    0x10(%eax),%eax
    636d:	85 c0                	test   %eax,%eax
    636f:	74 70                	je     63e1 <repeat_transform_apply+0x1a1>
    6371:	8b 48 04             	mov    0x4(%eax),%ecx
    6374:	41                   	inc    %ecx
    6375:	89 48 04             	mov    %ecx,0x4(%eax)
    6378:	89 43 3c             	mov    %eax,0x3c(%ebx)
    637b:	8b 45 14             	mov    0x14(%ebp),%eax
    637e:	89 7b 34             	mov    %edi,0x34(%ebx)
    6381:	89 73 38             	mov    %esi,0x38(%ebx)
    6384:	c6 43 30 00          	movb   $0x0,0x30(%ebx)
    6388:	89 18                	mov    %ebx,(%eax)
    638a:	8d 65 f4             	lea    -0xc(%ebp),%esp
    638d:	89 d0                	mov    %edx,%eax
    638f:	5b                   	pop    %ebx
    6390:	5e                   	pop    %esi
    6391:	5f                   	pop    %edi
    6392:	5d                   	pop    %ebp
    6393:	c3                   	ret    
    6394:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    6398:	83 ec 0c             	sub    $0xc,%esp
    639b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    639e:	53                   	push   %ebx
    639f:	e8 4c bd 00 00       	call   120f0 <free@plt>
    63a4:	83 c4 10             	add    $0x10,%esp
    63a7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    63aa:	e9 e4 fe ff ff       	jmp    6293 <repeat_transform_apply+0x53>
    63af:	90                   	nop
    63b0:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
    63b7:	eb 86                	jmp    633f <repeat_transform_apply+0xff>
    63b9:	83 ec 0c             	sub    $0xc,%esp
    63bc:	53                   	push   %ebx
    63bd:	e8 2e bd 00 00       	call   120f0 <free@plt>
    63c2:	83 c4 10             	add    $0x10,%esp
    63c5:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
    63ca:	e9 c4 fe ff ff       	jmp    6293 <repeat_transform_apply+0x53>
    63cf:	56                   	push   %esi
    63d0:	6a 5b                	push   $0x5b
    63d2:	68 a3 13 01 00       	push   $0x113a3
    63d7:	68 61 11 01 00       	push   $0x11161
    63dc:	e8 2f bb 00 00       	call   11f10 <assert_abort@plt>
    63e1:	e8 b3 26 00 00       	call   8a99 <bithenge_transform_inc_ref.part.10>
    63e6:	8d 76 00             	lea    0x0(%esi),%esi
    63e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

000063f0 <struct_transform_destroy>:
    63f0:	55                   	push   %ebp
    63f1:	89 e5                	mov    %esp,%ebp
    63f3:	57                   	push   %edi
    63f4:	56                   	push   %esi
    63f5:	53                   	push   %ebx
    63f6:	83 ec 0c             	sub    $0xc,%esp
    63f9:	8b 75 08             	mov    0x8(%ebp),%esi
    63fc:	8b 5e 0c             	mov    0xc(%esi),%ebx
    63ff:	89 df                	mov    %ebx,%edi
    6401:	8b 43 04             	mov    0x4(%ebx),%eax
    6404:	85 c0                	test   %eax,%eax
    6406:	74 3e                	je     6446 <struct_transform_destroy+0x56>
    6408:	83 ec 0c             	sub    $0xc,%esp
    640b:	8b 07                	mov    (%edi),%eax
    640d:	50                   	push   %eax
    640e:	e8 dd bc 00 00       	call   120f0 <free@plt>
    6413:	8b 57 04             	mov    0x4(%edi),%edx
    6416:	83 c4 10             	add    $0x10,%esp
    6419:	85 d2                	test   %edx,%edx
    641b:	74 1f                	je     643c <struct_transform_destroy+0x4c>
    641d:	8b 0a                	mov    (%edx),%ecx
    641f:	85 c9                	test   %ecx,%ecx
    6421:	74 3e                	je     6461 <struct_transform_destroy+0x71>
    6423:	8b 42 04             	mov    0x4(%edx),%eax
    6426:	85 c0                	test   %eax,%eax
    6428:	74 49                	je     6473 <struct_transform_destroy+0x83>
    642a:	48                   	dec    %eax
    642b:	89 42 04             	mov    %eax,0x4(%edx)
    642e:	85 c0                	test   %eax,%eax
    6430:	75 0a                	jne    643c <struct_transform_destroy+0x4c>
    6432:	83 ec 0c             	sub    $0xc,%esp
    6435:	52                   	push   %edx
    6436:	ff 51 0c             	call   *0xc(%ecx)
    6439:	83 c4 10             	add    $0x10,%esp
    643c:	83 c7 08             	add    $0x8,%edi
    643f:	8b 47 04             	mov    0x4(%edi),%eax
    6442:	85 c0                	test   %eax,%eax
    6444:	75 c2                	jne    6408 <struct_transform_destroy+0x18>
    6446:	83 ec 0c             	sub    $0xc,%esp
    6449:	53                   	push   %ebx
    644a:	e8 a1 bc 00 00       	call   120f0 <free@plt>
    644f:	89 75 08             	mov    %esi,0x8(%ebp)
    6452:	83 c4 10             	add    $0x10,%esp
    6455:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6458:	5b                   	pop    %ebx
    6459:	5e                   	pop    %esi
    645a:	5f                   	pop    %edi
    645b:	5d                   	pop    %ebp
    645c:	e9 8f bc 00 00       	jmp    120f0 <free@plt>
    6461:	51                   	push   %ecx
    6462:	6a 74                	push   $0x74
    6464:	68 18 13 01 00       	push   $0x11318
    6469:	68 61 11 01 00       	push   $0x11161
    646e:	e8 9d ba 00 00       	call   11f10 <assert_abort@plt>
    6473:	52                   	push   %edx
    6474:	6a 75                	push   $0x75
    6476:	68 18 13 01 00       	push   $0x11318
    647b:	68 6b 11 01 00       	push   $0x1116b
    6480:	e8 8b ba 00 00       	call   11f10 <assert_abort@plt>
    6485:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    6489:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00006490 <repeat_node_destroy>:
    6490:	55                   	push   %ebp
    6491:	89 e5                	mov    %esp,%ebp
    6493:	53                   	push   %ebx
    6494:	83 ec 10             	sub    $0x10,%esp
    6497:	8b 5d 08             	mov    0x8(%ebp),%ebx
    649a:	8b 43 18             	mov    0x18(%ebx),%eax
    649d:	50                   	push   %eax
    649e:	e8 3d 47 00 00       	call   abe0 <bithenge_scope_dec_ref>
    64a3:	8b 43 14             	mov    0x14(%ebx),%eax
    64a6:	83 c4 10             	add    $0x10,%esp
    64a9:	85 c0                	test   %eax,%eax
    64ab:	74 0c                	je     64b9 <repeat_node_destroy+0x29>
    64ad:	83 ec 0c             	sub    $0xc,%esp
    64b0:	50                   	push   %eax
    64b1:	e8 6a 51 00 00       	call   b620 <bithenge_node_dec_ref>
    64b6:	83 c4 10             	add    $0x10,%esp
    64b9:	83 ec 0c             	sub    $0xc,%esp
    64bc:	8b 4b 1c             	mov    0x1c(%ebx),%ecx
    64bf:	51                   	push   %ecx
    64c0:	e8 2b bc 00 00       	call   120f0 <free@plt>
    64c5:	8b 53 3c             	mov    0x3c(%ebx),%edx
    64c8:	83 c4 10             	add    $0x10,%esp
    64cb:	85 d2                	test   %edx,%edx
    64cd:	74 1f                	je     64ee <repeat_node_destroy+0x5e>
    64cf:	8b 0a                	mov    (%edx),%ecx
    64d1:	85 c9                	test   %ecx,%ecx
    64d3:	74 37                	je     650c <repeat_node_destroy+0x7c>
    64d5:	8b 42 04             	mov    0x4(%edx),%eax
    64d8:	85 c0                	test   %eax,%eax
    64da:	74 1e                	je     64fa <repeat_node_destroy+0x6a>
    64dc:	48                   	dec    %eax
    64dd:	89 42 04             	mov    %eax,0x4(%edx)
    64e0:	85 c0                	test   %eax,%eax
    64e2:	75 0a                	jne    64ee <repeat_node_destroy+0x5e>
    64e4:	83 ec 0c             	sub    $0xc,%esp
    64e7:	52                   	push   %edx
    64e8:	ff 51 0c             	call   *0xc(%ecx)
    64eb:	83 c4 10             	add    $0x10,%esp
    64ee:	89 5d 08             	mov    %ebx,0x8(%ebp)
    64f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    64f4:	c9                   	leave  
    64f5:	e9 f6 bb 00 00       	jmp    120f0 <free@plt>
    64fa:	50                   	push   %eax
    64fb:	6a 75                	push   $0x75
    64fd:	68 18 13 01 00       	push   $0x11318
    6502:	68 6b 11 01 00       	push   $0x1116b
    6507:	e8 04 ba 00 00       	call   11f10 <assert_abort@plt>
    650c:	52                   	push   %edx
    650d:	6a 74                	push   $0x74
    650f:	68 18 13 01 00       	push   $0x11318
    6514:	68 61 11 01 00       	push   $0x11161
    6519:	e8 f2 b9 00 00       	call   11f10 <assert_abort@plt>
    651e:	66 90                	xchg   %ax,%ax

00006520 <repeat_transform_destroy>:
    6520:	55                   	push   %ebp
    6521:	89 e5                	mov    %esp,%ebp
    6523:	53                   	push   %ebx
    6524:	50                   	push   %eax
    6525:	8b 5d 08             	mov    0x8(%ebp),%ebx
    6528:	8b 53 10             	mov    0x10(%ebx),%edx
    652b:	85 d2                	test   %edx,%edx
    652d:	74 23                	je     6552 <repeat_transform_destroy+0x32>
    652f:	8b 0a                	mov    (%edx),%ecx
    6531:	85 c9                	test   %ecx,%ecx
    6533:	0f 84 81 00 00 00    	je     65ba <repeat_transform_destroy+0x9a>
    6539:	8b 42 04             	mov    0x4(%edx),%eax
    653c:	85 c0                	test   %eax,%eax
    653e:	74 68                	je     65a8 <repeat_transform_destroy+0x88>
    6540:	48                   	dec    %eax
    6541:	89 42 04             	mov    %eax,0x4(%edx)
    6544:	85 c0                	test   %eax,%eax
    6546:	75 0a                	jne    6552 <repeat_transform_destroy+0x32>
    6548:	83 ec 0c             	sub    $0xc,%esp
    654b:	52                   	push   %edx
    654c:	ff 51 0c             	call   *0xc(%ecx)
    654f:	83 c4 10             	add    $0x10,%esp
    6552:	8b 53 0c             	mov    0xc(%ebx),%edx
    6555:	85 d2                	test   %edx,%edx
    6557:	74 1f                	je     6578 <repeat_transform_destroy+0x58>
    6559:	8b 0a                	mov    (%edx),%ecx
    655b:	85 c9                	test   %ecx,%ecx
    655d:	74 37                	je     6596 <repeat_transform_destroy+0x76>
    655f:	8b 42 04             	mov    0x4(%edx),%eax
    6562:	85 c0                	test   %eax,%eax
    6564:	74 1e                	je     6584 <repeat_transform_destroy+0x64>
    6566:	48                   	dec    %eax
    6567:	89 42 04             	mov    %eax,0x4(%edx)
    656a:	85 c0                	test   %eax,%eax
    656c:	75 0a                	jne    6578 <repeat_transform_destroy+0x58>
    656e:	83 ec 0c             	sub    $0xc,%esp
    6571:	52                   	push   %edx
    6572:	ff 51 04             	call   *0x4(%ecx)
    6575:	83 c4 10             	add    $0x10,%esp
    6578:	89 5d 08             	mov    %ebx,0x8(%ebp)
    657b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    657e:	c9                   	leave  
    657f:	e9 6c bb 00 00       	jmp    120f0 <free@plt>
    6584:	50                   	push   %eax
    6585:	6a 4c                	push   $0x4c
    6587:	68 a3 13 01 00       	push   $0x113a3
    658c:	68 6b 11 01 00       	push   $0x1116b
    6591:	e8 7a b9 00 00       	call   11f10 <assert_abort@plt>
    6596:	52                   	push   %edx
    6597:	6a 4b                	push   $0x4b
    6599:	68 a3 13 01 00       	push   $0x113a3
    659e:	68 61 11 01 00       	push   $0x11161
    65a3:	e8 68 b9 00 00       	call   11f10 <assert_abort@plt>
    65a8:	51                   	push   %ecx
    65a9:	6a 75                	push   $0x75
    65ab:	68 18 13 01 00       	push   $0x11318
    65b0:	68 6b 11 01 00       	push   $0x1116b
    65b5:	e8 56 b9 00 00       	call   11f10 <assert_abort@plt>
    65ba:	53                   	push   %ebx
    65bb:	6a 74                	push   $0x74
    65bd:	68 18 13 01 00       	push   $0x11318
    65c2:	68 61 11 01 00       	push   $0x11161
    65c7:	e8 44 b9 00 00       	call   11f10 <assert_abort@plt>
    65cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

000065d0 <do_while_transform_destroy>:
    65d0:	55                   	push   %ebp
    65d1:	89 e5                	mov    %esp,%ebp
    65d3:	53                   	push   %ebx
    65d4:	50                   	push   %eax
    65d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
    65d8:	8b 53 10             	mov    0x10(%ebx),%edx
    65db:	85 d2                	test   %edx,%edx
    65dd:	74 23                	je     6602 <do_while_transform_destroy+0x32>
    65df:	8b 0a                	mov    (%edx),%ecx
    65e1:	85 c9                	test   %ecx,%ecx
    65e3:	0f 84 81 00 00 00    	je     666a <do_while_transform_destroy+0x9a>
    65e9:	8b 42 04             	mov    0x4(%edx),%eax
    65ec:	85 c0                	test   %eax,%eax
    65ee:	74 68                	je     6658 <do_while_transform_destroy+0x88>
    65f0:	48                   	dec    %eax
    65f1:	89 42 04             	mov    %eax,0x4(%edx)
    65f4:	85 c0                	test   %eax,%eax
    65f6:	75 0a                	jne    6602 <do_while_transform_destroy+0x32>
    65f8:	83 ec 0c             	sub    $0xc,%esp
    65fb:	52                   	push   %edx
    65fc:	ff 51 0c             	call   *0xc(%ecx)
    65ff:	83 c4 10             	add    $0x10,%esp
    6602:	8b 53 0c             	mov    0xc(%ebx),%edx
    6605:	85 d2                	test   %edx,%edx
    6607:	74 1f                	je     6628 <do_while_transform_destroy+0x58>
    6609:	8b 0a                	mov    (%edx),%ecx
    660b:	85 c9                	test   %ecx,%ecx
    660d:	74 37                	je     6646 <do_while_transform_destroy+0x76>
    660f:	8b 42 04             	mov    0x4(%edx),%eax
    6612:	85 c0                	test   %eax,%eax
    6614:	74 1e                	je     6634 <do_while_transform_destroy+0x64>
    6616:	48                   	dec    %eax
    6617:	89 42 04             	mov    %eax,0x4(%edx)
    661a:	85 c0                	test   %eax,%eax
    661c:	75 0a                	jne    6628 <do_while_transform_destroy+0x58>
    661e:	83 ec 0c             	sub    $0xc,%esp
    6621:	52                   	push   %edx
    6622:	ff 51 04             	call   *0x4(%ecx)
    6625:	83 c4 10             	add    $0x10,%esp
    6628:	89 5d 08             	mov    %ebx,0x8(%ebp)
    662b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    662e:	c9                   	leave  
    662f:	e9 bc ba 00 00       	jmp    120f0 <free@plt>
    6634:	50                   	push   %eax
    6635:	6a 4c                	push   $0x4c
    6637:	68 a3 13 01 00       	push   $0x113a3
    663c:	68 6b 11 01 00       	push   $0x1116b
    6641:	e8 ca b8 00 00       	call   11f10 <assert_abort@plt>
    6646:	52                   	push   %edx
    6647:	6a 4b                	push   $0x4b
    6649:	68 a3 13 01 00       	push   $0x113a3
    664e:	68 61 11 01 00       	push   $0x11161
    6653:	e8 b8 b8 00 00       	call   11f10 <assert_abort@plt>
    6658:	51                   	push   %ecx
    6659:	6a 75                	push   $0x75
    665b:	68 18 13 01 00       	push   $0x11318
    6660:	68 6b 11 01 00       	push   $0x1116b
    6665:	e8 a6 b8 00 00       	call   11f10 <assert_abort@plt>
    666a:	53                   	push   %ebx
    666b:	6a 74                	push   $0x74
    666d:	68 18 13 01 00       	push   $0x11318
    6672:	68 61 11 01 00       	push   $0x11161
    6677:	e8 94 b8 00 00       	call   11f10 <assert_abort@plt>
    667c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00006680 <do_while_node_destroy>:
    6680:	55                   	push   %ebp
    6681:	89 e5                	mov    %esp,%ebp
    6683:	53                   	push   %ebx
    6684:	83 ec 10             	sub    $0x10,%esp
    6687:	8b 5d 08             	mov    0x8(%ebp),%ebx
    668a:	8b 43 18             	mov    0x18(%ebx),%eax
    668d:	50                   	push   %eax
    668e:	e8 4d 45 00 00       	call   abe0 <bithenge_scope_dec_ref>
    6693:	8b 43 14             	mov    0x14(%ebx),%eax
    6696:	83 c4 10             	add    $0x10,%esp
    6699:	85 c0                	test   %eax,%eax
    669b:	74 0c                	je     66a9 <do_while_node_destroy+0x29>
    669d:	83 ec 0c             	sub    $0xc,%esp
    66a0:	50                   	push   %eax
    66a1:	e8 7a 4f 00 00       	call   b620 <bithenge_node_dec_ref>
    66a6:	83 c4 10             	add    $0x10,%esp
    66a9:	83 ec 0c             	sub    $0xc,%esp
    66ac:	8b 43 1c             	mov    0x1c(%ebx),%eax
    66af:	50                   	push   %eax
    66b0:	e8 3b ba 00 00       	call   120f0 <free@plt>
    66b5:	8b 53 30             	mov    0x30(%ebx),%edx
    66b8:	83 c4 10             	add    $0x10,%esp
    66bb:	85 d2                	test   %edx,%edx
    66bd:	74 23                	je     66e2 <do_while_node_destroy+0x62>
    66bf:	8b 0a                	mov    (%edx),%ecx
    66c1:	85 c9                	test   %ecx,%ecx
    66c3:	0f 84 81 00 00 00    	je     674a <do_while_node_destroy+0xca>
    66c9:	8b 42 04             	mov    0x4(%edx),%eax
    66cc:	85 c0                	test   %eax,%eax
    66ce:	74 68                	je     6738 <do_while_node_destroy+0xb8>
    66d0:	48                   	dec    %eax
    66d1:	89 42 04             	mov    %eax,0x4(%edx)
    66d4:	85 c0                	test   %eax,%eax
    66d6:	75 0a                	jne    66e2 <do_while_node_destroy+0x62>
    66d8:	83 ec 0c             	sub    $0xc,%esp
    66db:	52                   	push   %edx
    66dc:	ff 51 04             	call   *0x4(%ecx)
    66df:	83 c4 10             	add    $0x10,%esp
    66e2:	8b 53 34             	mov    0x34(%ebx),%edx
    66e5:	85 d2                	test   %edx,%edx
    66e7:	74 1f                	je     6708 <do_while_node_destroy+0x88>
    66e9:	8b 0a                	mov    (%edx),%ecx
    66eb:	85 c9                	test   %ecx,%ecx
    66ed:	74 37                	je     6726 <do_while_node_destroy+0xa6>
    66ef:	8b 42 04             	mov    0x4(%edx),%eax
    66f2:	85 c0                	test   %eax,%eax
    66f4:	74 1e                	je     6714 <do_while_node_destroy+0x94>
    66f6:	48                   	dec    %eax
    66f7:	89 42 04             	mov    %eax,0x4(%edx)
    66fa:	85 c0                	test   %eax,%eax
    66fc:	75 0a                	jne    6708 <do_while_node_destroy+0x88>
    66fe:	83 ec 0c             	sub    $0xc,%esp
    6701:	52                   	push   %edx
    6702:	ff 51 0c             	call   *0xc(%ecx)
    6705:	83 c4 10             	add    $0x10,%esp
    6708:	89 5d 08             	mov    %ebx,0x8(%ebp)
    670b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    670e:	c9                   	leave  
    670f:	e9 dc b9 00 00       	jmp    120f0 <free@plt>
    6714:	50                   	push   %eax
    6715:	6a 75                	push   $0x75
    6717:	68 18 13 01 00       	push   $0x11318
    671c:	68 6b 11 01 00       	push   $0x1116b
    6721:	e8 ea b7 00 00       	call   11f10 <assert_abort@plt>
    6726:	52                   	push   %edx
    6727:	6a 74                	push   $0x74
    6729:	68 18 13 01 00       	push   $0x11318
    672e:	68 61 11 01 00       	push   $0x11161
    6733:	e8 d8 b7 00 00       	call   11f10 <assert_abort@plt>
    6738:	51                   	push   %ecx
    6739:	6a 4c                	push   $0x4c
    673b:	68 a3 13 01 00       	push   $0x113a3
    6740:	68 6b 11 01 00       	push   $0x1116b
    6745:	e8 c6 b7 00 00       	call   11f10 <assert_abort@plt>
    674a:	53                   	push   %ebx
    674b:	6a 4b                	push   $0x4b
    674d:	68 a3 13 01 00       	push   $0x113a3
    6752:	68 61 11 01 00       	push   $0x11161
    6757:	e8 b4 b7 00 00       	call   11f10 <assert_abort@plt>
    675c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00006760 <struct_node_destroy>:
    6760:	55                   	push   %ebp
    6761:	89 e5                	mov    %esp,%ebp
    6763:	53                   	push   %ebx
    6764:	51                   	push   %ecx
    6765:	8b 5d 08             	mov    0x8(%ebp),%ebx
    6768:	8b 43 18             	mov    0x18(%ebx),%eax
    676b:	83 38 01             	cmpl   $0x1,(%eax)
    676e:	74 18                	je     6788 <struct_node_destroy+0x28>
    6770:	76 7e                	jbe    67f0 <struct_node_destroy+0x90>
    6772:	8b 53 04             	mov    0x4(%ebx),%edx
    6775:	42                   	inc    %edx
    6776:	89 53 04             	mov    %edx,0x4(%ebx)
    6779:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    677c:	89 45 08             	mov    %eax,0x8(%ebp)
    677f:	c9                   	leave  
    6780:	e9 5b 44 00 00       	jmp    abe0 <bithenge_scope_dec_ref>
    6785:	8d 76 00             	lea    0x0(%esi),%esi
    6788:	83 ec 0c             	sub    $0xc,%esp
    678b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    6792:	50                   	push   %eax
    6793:	e8 48 44 00 00       	call   abe0 <bithenge_scope_dec_ref>
    6798:	8b 43 14             	mov    0x14(%ebx),%eax
    679b:	83 c4 10             	add    $0x10,%esp
    679e:	85 c0                	test   %eax,%eax
    67a0:	74 0c                	je     67ae <struct_node_destroy+0x4e>
    67a2:	83 ec 0c             	sub    $0xc,%esp
    67a5:	50                   	push   %eax
    67a6:	e8 75 4e 00 00       	call   b620 <bithenge_node_dec_ref>
    67ab:	83 c4 10             	add    $0x10,%esp
    67ae:	83 ec 0c             	sub    $0xc,%esp
    67b1:	8b 4b 1c             	mov    0x1c(%ebx),%ecx
    67b4:	51                   	push   %ecx
    67b5:	e8 36 b9 00 00       	call   120f0 <free@plt>
    67ba:	8b 53 30             	mov    0x30(%ebx),%edx
    67bd:	83 c4 10             	add    $0x10,%esp
    67c0:	85 d2                	test   %edx,%edx
    67c2:	74 1f                	je     67e3 <struct_node_destroy+0x83>
    67c4:	8b 0a                	mov    (%edx),%ecx
    67c6:	85 c9                	test   %ecx,%ecx
    67c8:	74 34                	je     67fe <struct_node_destroy+0x9e>
    67ca:	8b 42 04             	mov    0x4(%edx),%eax
    67cd:	85 c0                	test   %eax,%eax
    67cf:	74 3f                	je     6810 <struct_node_destroy+0xb0>
    67d1:	48                   	dec    %eax
    67d2:	89 42 04             	mov    %eax,0x4(%edx)
    67d5:	85 c0                	test   %eax,%eax
    67d7:	75 0a                	jne    67e3 <struct_node_destroy+0x83>
    67d9:	83 ec 0c             	sub    $0xc,%esp
    67dc:	52                   	push   %edx
    67dd:	ff 51 0c             	call   *0xc(%ecx)
    67e0:	83 c4 10             	add    $0x10,%esp
    67e3:	89 5d 08             	mov    %ebx,0x8(%ebp)
    67e6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    67e9:	c9                   	leave  
    67ea:	e9 01 b9 00 00       	jmp    120f0 <free@plt>
    67ef:	90                   	nop
    67f0:	83 ec 0c             	sub    $0xc,%esp
    67f3:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%ebx)
    67fa:	6a 00                	push   $0x0
    67fc:	eb 95                	jmp    6793 <struct_node_destroy+0x33>
    67fe:	52                   	push   %edx
    67ff:	6a 74                	push   $0x74
    6801:	68 18 13 01 00       	push   $0x11318
    6806:	68 61 11 01 00       	push   $0x11161
    680b:	e8 00 b7 00 00       	call   11f10 <assert_abort@plt>
    6810:	50                   	push   %eax
    6811:	6a 75                	push   $0x75
    6813:	68 18 13 01 00       	push   $0x11318
    6818:	68 6b 11 01 00       	push   $0x1116b
    681d:	e8 ee b6 00 00       	call   11f10 <assert_abort@plt>
    6822:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    6829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00006830 <seq_node_field_offset.part.16>:
    6830:	55                   	push   %ebp
    6831:	89 e5                	mov    %esp,%ebp
    6833:	57                   	push   %edi
    6834:	56                   	push   %esi
    6835:	53                   	push   %ebx
    6836:	89 c3                	mov    %eax,%ebx
    6838:	83 ec 2c             	sub    $0x2c,%esp
    683b:	8d 41 ff             	lea    -0x1(%ecx),%eax
    683e:	89 55 c8             	mov    %edx,-0x38(%ebp)
    6841:	89 45 d0             	mov    %eax,-0x30(%ebp)
    6844:	89 c2                	mov    %eax,%edx
    6846:	8b 43 20             	mov    0x20(%ebx),%eax
    6849:	85 c0                	test   %eax,%eax
    684b:	0f 84 df 01 00 00    	je     6a30 <seq_node_field_offset.part.16+0x200>
    6851:	8b 4b 1c             	mov    0x1c(%ebx),%ecx
    6854:	39 c2                	cmp    %eax,%edx
    6856:	8b 74 c1 f8          	mov    -0x8(%ecx,%eax,8),%esi
    685a:	8b 7c c1 fc          	mov    -0x4(%ecx,%eax,8),%edi
    685e:	0f 82 15 02 00 00    	jb     6a79 <seq_node_field_offset.part.16+0x249>
    6864:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    6868:	8b 4b 10             	mov    0x10(%ebx),%ecx
    686b:	31 d2                	xor    %edx,%edx
    686d:	52                   	push   %edx
    686e:	50                   	push   %eax
    686f:	8d 45 d8             	lea    -0x28(%ebp),%eax
    6872:	50                   	push   %eax
    6873:	53                   	push   %ebx
    6874:	ff 11                	call   *(%ecx)
    6876:	83 c4 10             	add    $0x10,%esp
    6879:	85 c0                	test   %eax,%eax
    687b:	0f 85 c4 00 00 00    	jne    6945 <seq_node_field_offset.part.16+0x115>
    6881:	8b 43 14             	mov    0x14(%ebx),%eax
    6884:	85 c0                	test   %eax,%eax
    6886:	0f 84 13 02 00 00    	je     6a9f <seq_node_field_offset.part.16+0x26f>
    688c:	8b 50 04             	mov    0x4(%eax),%edx
    688f:	42                   	inc    %edx
    6890:	89 50 04             	mov    %edx,0x4(%eax)
    6893:	57                   	push   %edi
    6894:	56                   	push   %esi
    6895:	50                   	push   %eax
    6896:	8d 45 dc             	lea    -0x24(%ebp),%eax
    6899:	50                   	push   %eax
    689a:	e8 b1 5e 00 00       	call   c750 <bithenge_new_offset_blob>
    689f:	83 c4 10             	add    $0x10,%esp
    68a2:	85 c0                	test   %eax,%eax
    68a4:	0f 85 96 01 00 00    	jne    6a40 <seq_node_field_offset.part.16+0x210>
    68aa:	80 7b 24 00          	cmpb   $0x0,0x24(%ebx)
    68ae:	0f 84 9c 00 00 00    	je     6950 <seq_node_field_offset.part.16+0x120>
    68b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
    68b7:	83 38 05             	cmpl   $0x5,(%eax)
    68ba:	0f 85 ca 01 00 00    	jne    6a8a <seq_node_field_offset.part.16+0x25a>
    68c0:	8b 50 08             	mov    0x8(%eax),%edx
    68c3:	85 d2                	test   %edx,%edx
    68c5:	0f 84 0a 02 00 00    	je     6ad5 <seq_node_field_offset.part.16+0x2a5>
    68cb:	51                   	push   %ecx
    68cc:	51                   	push   %ecx
    68cd:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    68d0:	51                   	push   %ecx
    68d1:	50                   	push   %eax
    68d2:	ff 12                	call   *(%edx)
    68d4:	83 c4 10             	add    $0x10,%esp
    68d7:	8b 55 e0             	mov    -0x20(%ebp),%edx
    68da:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    68dd:	85 c0                	test   %eax,%eax
    68df:	75 14                	jne    68f5 <seq_node_field_offset.part.16+0xc5>
    68e1:	09 d1                	or     %edx,%ecx
    68e3:	75 6b                	jne    6950 <seq_node_field_offset.part.16+0x120>
    68e5:	8b 43 20             	mov    0x20(%ebx),%eax
    68e8:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%ebx)
    68ef:	89 43 28             	mov    %eax,0x28(%ebx)
    68f2:	83 c8 ff             	or     $0xffffffff,%eax
    68f5:	8b 55 d8             	mov    -0x28(%ebp),%edx
    68f8:	85 d2                	test   %edx,%edx
    68fa:	74 34                	je     6930 <seq_node_field_offset.part.16+0x100>
    68fc:	8b 1a                	mov    (%edx),%ebx
    68fe:	85 db                	test   %ebx,%ebx
    6900:	0f 84 ab 01 00 00    	je     6ab1 <seq_node_field_offset.part.16+0x281>
    6906:	8b 4a 04             	mov    0x4(%edx),%ecx
    6909:	85 c9                	test   %ecx,%ecx
    690b:	0f 84 b2 01 00 00    	je     6ac3 <seq_node_field_offset.part.16+0x293>
    6911:	49                   	dec    %ecx
    6912:	89 4a 04             	mov    %ecx,0x4(%edx)
    6915:	85 c9                	test   %ecx,%ecx
    6917:	75 17                	jne    6930 <seq_node_field_offset.part.16+0x100>
    6919:	83 ec 0c             	sub    $0xc,%esp
    691c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    691f:	52                   	push   %edx
    6920:	ff 53 0c             	call   *0xc(%ebx)
    6923:	83 c4 10             	add    $0x10,%esp
    6926:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    6929:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    6930:	83 ec 0c             	sub    $0xc,%esp
    6933:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    6936:	8b 45 dc             	mov    -0x24(%ebp),%eax
    6939:	50                   	push   %eax
    693a:	e8 e1 4c 00 00       	call   b620 <bithenge_node_dec_ref>
    693f:	83 c4 10             	add    $0x10,%esp
    6942:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    6945:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6948:	5b                   	pop    %ebx
    6949:	5e                   	pop    %esi
    694a:	5f                   	pop    %edi
    694b:	5d                   	pop    %ebp
    694c:	c3                   	ret    
    694d:	8d 76 00             	lea    0x0(%esi),%esi
    6950:	8b 45 dc             	mov    -0x24(%ebp),%eax
    6953:	83 38 05             	cmpl   $0x5,(%eax)
    6956:	0f 85 2e 01 00 00    	jne    6a8a <seq_node_field_offset.part.16+0x25a>
    695c:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    695f:	51                   	push   %ecx
    6960:	50                   	push   %eax
    6961:	8b 43 18             	mov    0x18(%ebx),%eax
    6964:	50                   	push   %eax
    6965:	8b 45 d8             	mov    -0x28(%ebp),%eax
    6968:	50                   	push   %eax
    6969:	e8 62 41 00 00       	call   aad0 <bithenge_transform_prefix_length>
    696e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    6971:	58                   	pop    %eax
    6972:	8b 45 dc             	mov    -0x24(%ebp),%eax
    6975:	50                   	push   %eax
    6976:	e8 a5 4c 00 00       	call   b620 <bithenge_node_dec_ref>
    697b:	8b 4d d8             	mov    -0x28(%ebp),%ecx
    697e:	83 c4 10             	add    $0x10,%esp
    6981:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    6984:	85 c9                	test   %ecx,%ecx
    6986:	74 33                	je     69bb <seq_node_field_offset.part.16+0x18b>
    6988:	8b 11                	mov    (%ecx),%edx
    698a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    698d:	85 d2                	test   %edx,%edx
    698f:	0f 84 1c 01 00 00    	je     6ab1 <seq_node_field_offset.part.16+0x281>
    6995:	8b 51 04             	mov    0x4(%ecx),%edx
    6998:	85 d2                	test   %edx,%edx
    699a:	0f 84 23 01 00 00    	je     6ac3 <seq_node_field_offset.part.16+0x293>
    69a0:	4a                   	dec    %edx
    69a1:	89 51 04             	mov    %edx,0x4(%ecx)
    69a4:	85 d2                	test   %edx,%edx
    69a6:	75 13                	jne    69bb <seq_node_field_offset.part.16+0x18b>
    69a8:	83 ec 0c             	sub    $0xc,%esp
    69ab:	89 45 cc             	mov    %eax,-0x34(%ebp)
    69ae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    69b1:	51                   	push   %ecx
    69b2:	ff 50 0c             	call   *0xc(%eax)
    69b5:	83 c4 10             	add    $0x10,%esp
    69b8:	8b 45 cc             	mov    -0x34(%ebp),%eax
    69bb:	85 c0                	test   %eax,%eax
    69bd:	75 86                	jne    6945 <seq_node_field_offset.part.16+0x115>
    69bf:	8b 43 2c             	mov    0x2c(%ebx),%eax
    69c2:	8b 4b 28             	mov    0x28(%ebx),%ecx
    69c5:	21 c8                	and    %ecx,%eax
    69c7:	40                   	inc    %eax
    69c8:	74 3e                	je     6a08 <seq_node_field_offset.part.16+0x1d8>
    69ca:	8b 4b 1c             	mov    0x1c(%ebx),%ecx
    69cd:	03 75 e0             	add    -0x20(%ebp),%esi
    69d0:	8b 53 20             	mov    0x20(%ebx),%edx
    69d3:	13 7d e4             	adc    -0x1c(%ebp),%edi
    69d6:	8d 42 01             	lea    0x1(%edx),%eax
    69d9:	89 34 d1             	mov    %esi,(%ecx,%edx,8)
    69dc:	89 7c d1 04          	mov    %edi,0x4(%ecx,%edx,8)
    69e0:	39 45 d0             	cmp    %eax,-0x30(%ebp)
    69e3:	89 43 20             	mov    %eax,0x20(%ebx)
    69e6:	0f 83 7c fe ff ff    	jae    6868 <seq_node_field_offset.part.16+0x38>
    69ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
    69ef:	8b 7d c8             	mov    -0x38(%ebp),%edi
    69f2:	8b 54 c1 04          	mov    0x4(%ecx,%eax,8),%edx
    69f6:	8b 04 c1             	mov    (%ecx,%eax,8),%eax
    69f9:	89 07                	mov    %eax,(%edi)
    69fb:	89 57 04             	mov    %edx,0x4(%edi)
    69fe:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6a01:	31 c0                	xor    %eax,%eax
    6a03:	5b                   	pop    %ebx
    6a04:	5e                   	pop    %esi
    6a05:	5f                   	pop    %edi
    6a06:	5d                   	pop    %ebp
    6a07:	c3                   	ret    
    6a08:	50                   	push   %eax
    6a09:	50                   	push   %eax
    6a0a:	8b 43 20             	mov    0x20(%ebx),%eax
    6a0d:	8b 53 1c             	mov    0x1c(%ebx),%edx
    6a10:	8d 04 c5 08 00 00 00 	lea    0x8(,%eax,8),%eax
    6a17:	50                   	push   %eax
    6a18:	52                   	push   %edx
    6a19:	e8 82 b5 00 00       	call   11fa0 <realloc@plt>
    6a1e:	83 c4 10             	add    $0x10,%esp
    6a21:	89 c1                	mov    %eax,%ecx
    6a23:	85 c0                	test   %eax,%eax
    6a25:	74 59                	je     6a80 <seq_node_field_offset.part.16+0x250>
    6a27:	89 43 1c             	mov    %eax,0x1c(%ebx)
    6a2a:	eb a1                	jmp    69cd <seq_node_field_offset.part.16+0x19d>
    6a2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    6a30:	31 f6                	xor    %esi,%esi
    6a32:	31 ff                	xor    %edi,%edi
    6a34:	e9 2f fe ff ff       	jmp    6868 <seq_node_field_offset.part.16+0x38>
    6a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    6a40:	8b 4d d8             	mov    -0x28(%ebp),%ecx
    6a43:	85 c9                	test   %ecx,%ecx
    6a45:	0f 84 fa fe ff ff    	je     6945 <seq_node_field_offset.part.16+0x115>
    6a4b:	8b 19                	mov    (%ecx),%ebx
    6a4d:	85 db                	test   %ebx,%ebx
    6a4f:	74 60                	je     6ab1 <seq_node_field_offset.part.16+0x281>
    6a51:	8b 51 04             	mov    0x4(%ecx),%edx
    6a54:	85 d2                	test   %edx,%edx
    6a56:	74 6b                	je     6ac3 <seq_node_field_offset.part.16+0x293>
    6a58:	4a                   	dec    %edx
    6a59:	89 51 04             	mov    %edx,0x4(%ecx)
    6a5c:	85 d2                	test   %edx,%edx
    6a5e:	0f 85 e1 fe ff ff    	jne    6945 <seq_node_field_offset.part.16+0x115>
    6a64:	83 ec 0c             	sub    $0xc,%esp
    6a67:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    6a6a:	51                   	push   %ecx
    6a6b:	ff 53 0c             	call   *0xc(%ebx)
    6a6e:	83 c4 10             	add    $0x10,%esp
    6a71:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    6a74:	e9 cc fe ff ff       	jmp    6945 <seq_node_field_offset.part.16+0x115>
    6a79:	89 d0                	mov    %edx,%eax
    6a7b:	e9 6f ff ff ff       	jmp    69ef <seq_node_field_offset.part.16+0x1bf>
    6a80:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    6a85:	e9 bb fe ff ff       	jmp    6945 <seq_node_field_offset.part.16+0x115>
    6a8a:	56                   	push   %esi
    6a8b:	68 d9 00 00 00       	push   $0xd9
    6a90:	68 05 12 01 00       	push   $0x11205
    6a95:	68 84 12 01 00       	push   $0x11284
    6a9a:	e8 71 b4 00 00       	call   11f10 <assert_abort@plt>
    6a9f:	51                   	push   %ecx
    6aa0:	6a 70                	push   $0x70
    6aa2:	68 50 12 01 00       	push   $0x11250
    6aa7:	68 98 14 01 00       	push   $0x11498
    6aac:	e8 5f b4 00 00       	call   11f10 <assert_abort@plt>
    6ab1:	50                   	push   %eax
    6ab2:	6a 74                	push   $0x74
    6ab4:	68 18 13 01 00       	push   $0x11318
    6ab9:	68 61 11 01 00       	push   $0x11161
    6abe:	e8 4d b4 00 00       	call   11f10 <assert_abort@plt>
    6ac3:	57                   	push   %edi
    6ac4:	6a 75                	push   $0x75
    6ac6:	68 18 13 01 00       	push   $0x11318
    6acb:	68 6b 11 01 00       	push   $0x1116b
    6ad0:	e8 3b b4 00 00       	call   11f10 <assert_abort@plt>
    6ad5:	53                   	push   %ebx
    6ad6:	68 c3 00 00 00       	push   $0xc3
    6adb:	68 05 12 01 00       	push   $0x11205
    6ae0:	68 1d 12 01 00       	push   $0x1121d
    6ae5:	e8 26 b4 00 00       	call   11f10 <assert_abort@plt>
    6aea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

00006af0 <struct_transform_prefix_apply>:
    6af0:	55                   	push   %ebp
    6af1:	89 e5                	mov    %esp,%ebp
    6af3:	57                   	push   %edi
    6af4:	56                   	push   %esi
    6af5:	53                   	push   %ebx
    6af6:	83 ec 38             	sub    $0x38,%esp
    6af9:	8b 75 08             	mov    0x8(%ebp),%esi
    6afc:	6a 38                	push   $0x38
    6afe:	e8 5d b3 00 00       	call   11e60 <malloc@plt>
    6b03:	83 c4 10             	add    $0x10,%esp
    6b06:	85 c0                	test   %eax,%eax
    6b08:	0f 84 6a 01 00 00    	je     6c78 <struct_transform_prefix_apply+0x188>
    6b0e:	89 c3                	mov    %eax,%ebx
    6b10:	50                   	push   %eax
    6b11:	50                   	push   %eax
    6b12:	68 e4 14 01 00       	push   $0x114e4
    6b17:	53                   	push   %ebx
    6b18:	e8 93 4d 00 00       	call   b8b0 <bithenge_init_internal_node>
    6b1d:	83 c4 10             	add    $0x10,%esp
    6b20:	89 c7                	mov    %eax,%edi
    6b22:	85 c0                	test   %eax,%eax
    6b24:	0f 85 e6 00 00 00    	jne    6c10 <struct_transform_prefix_apply+0x120>
    6b2a:	8b 45 0c             	mov    0xc(%ebp),%eax
    6b2d:	57                   	push   %edi
    6b2e:	57                   	push   %edi
    6b2f:	50                   	push   %eax
    6b30:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    6b33:	50                   	push   %eax
    6b34:	e8 37 40 00 00       	call   ab70 <bithenge_scope_new>
    6b39:	83 c4 10             	add    $0x10,%esp
    6b3c:	89 c7                	mov    %eax,%edi
    6b3e:	85 c0                	test   %eax,%eax
    6b40:	0f 85 ca 00 00 00    	jne    6c10 <struct_transform_prefix_apply+0x120>
    6b46:	8b 46 10             	mov    0x10(%esi),%eax
    6b49:	83 ec 0c             	sub    $0xc,%esp
    6b4c:	89 45 d0             	mov    %eax,-0x30(%ebp)
    6b4f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    6b52:	c1 e0 03             	shl    $0x3,%eax
    6b55:	c7 43 10 e0 14 01 00 	movl   $0x114e0,0x10(%ebx)
    6b5c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    6b63:	50                   	push   %eax
    6b64:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    6b67:	e8 f4 b2 00 00       	call   11e60 <malloc@plt>
    6b6c:	83 c4 10             	add    $0x10,%esp
    6b6f:	89 43 1c             	mov    %eax,0x1c(%ebx)
    6b72:	85 c0                	test   %eax,%eax
    6b74:	0f 84 d9 00 00 00    	je     6c53 <struct_transform_prefix_apply+0x163>
    6b7a:	8b 4d 10             	mov    0x10(%ebp),%ecx
    6b7d:	85 c9                	test   %ecx,%ecx
    6b7f:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    6b82:	0f 84 f7 00 00 00    	je     6c7f <struct_transform_prefix_apply+0x18f>
    6b88:	8b 45 10             	mov    0x10(%ebp),%eax
    6b8b:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
    6b92:	89 43 14             	mov    %eax,0x14(%ebx)
    6b95:	c6 43 24 00          	movb   $0x0,0x24(%ebx)
    6b99:	8b 50 04             	mov    0x4(%eax),%edx
    6b9c:	89 4b 18             	mov    %ecx,0x18(%ebx)
    6b9f:	42                   	inc    %edx
    6ba0:	85 c9                	test   %ecx,%ecx
    6ba2:	89 50 04             	mov    %edx,0x4(%eax)
    6ba5:	8b 45 d0             	mov    -0x30(%ebp),%eax
    6ba8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    6bab:	89 43 28             	mov    %eax,0x28(%ebx)
    6bae:	89 53 2c             	mov    %edx,0x2c(%ebx)
    6bb1:	74 05                	je     6bb8 <struct_transform_prefix_apply+0xc8>
    6bb3:	8b 01                	mov    (%ecx),%eax
    6bb5:	40                   	inc    %eax
    6bb6:	89 01                	mov    %eax,(%ecx)
    6bb8:	8b 56 04             	mov    0x4(%esi),%edx
    6bbb:	89 73 30             	mov    %esi,0x30(%ebx)
    6bbe:	42                   	inc    %edx
    6bbf:	c6 43 34 01          	movb   $0x1,0x34(%ebx)
    6bc3:	89 56 04             	mov    %edx,0x4(%esi)
    6bc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    6bc9:	51                   	push   %ecx
    6bca:	51                   	push   %ecx
    6bcb:	53                   	push   %ebx
    6bcc:	50                   	push   %eax
    6bcd:	e8 fe 42 00 00       	call   aed0 <bithenge_scope_set_current_node>
    6bd2:	58                   	pop    %eax
    6bd3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    6bd6:	50                   	push   %eax
    6bd7:	e8 04 40 00 00       	call   abe0 <bithenge_scope_dec_ref>
    6bdc:	8b 45 14             	mov    0x14(%ebp),%eax
    6bdf:	83 c4 10             	add    $0x10,%esp
    6be2:	89 18                	mov    %ebx,(%eax)
    6be4:	8b 45 18             	mov    0x18(%ebp),%eax
    6be7:	85 c0                	test   %eax,%eax
    6be9:	74 31                	je     6c1c <struct_transform_prefix_apply+0x12c>
    6beb:	8b 4e 10             	mov    0x10(%esi),%ecx
    6bee:	85 c9                	test   %ecx,%ecx
    6bf0:	75 36                	jne    6c28 <struct_transform_prefix_apply+0x138>
    6bf2:	8b 45 18             	mov    0x18(%ebp),%eax
    6bf5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    6bfb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    6c02:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6c05:	89 f8                	mov    %edi,%eax
    6c07:	5b                   	pop    %ebx
    6c08:	5e                   	pop    %esi
    6c09:	5f                   	pop    %edi
    6c0a:	5d                   	pop    %ebp
    6c0b:	c3                   	ret    
    6c0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    6c10:	83 ec 0c             	sub    $0xc,%esp
    6c13:	53                   	push   %ebx
    6c14:	e8 d7 b4 00 00       	call   120f0 <free@plt>
    6c19:	83 c4 10             	add    $0x10,%esp
    6c1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6c1f:	89 f8                	mov    %edi,%eax
    6c21:	5b                   	pop    %ebx
    6c22:	5e                   	pop    %esi
    6c23:	5f                   	pop    %edi
    6c24:	5d                   	pop    %ebp
    6c25:	c3                   	ret    
    6c26:	66 90                	xchg   %ax,%ax
    6c28:	8b 55 18             	mov    0x18(%ebp),%edx
    6c2b:	89 d8                	mov    %ebx,%eax
    6c2d:	e8 fe fb ff ff       	call   6830 <seq_node_field_offset.part.16>
    6c32:	89 c7                	mov    %eax,%edi
    6c34:	85 c0                	test   %eax,%eax
    6c36:	74 e4                	je     6c1c <struct_transform_prefix_apply+0x12c>
    6c38:	8b 45 14             	mov    0x14(%ebp),%eax
    6c3b:	83 ec 0c             	sub    $0xc,%esp
    6c3e:	8b 00                	mov    (%eax),%eax
    6c40:	50                   	push   %eax
    6c41:	e8 da 49 00 00       	call   b620 <bithenge_node_dec_ref>
    6c46:	83 c4 10             	add    $0x10,%esp
    6c49:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6c4c:	89 f8                	mov    %edi,%eax
    6c4e:	5b                   	pop    %ebx
    6c4f:	5e                   	pop    %esi
    6c50:	5f                   	pop    %edi
    6c51:	5d                   	pop    %ebp
    6c52:	c3                   	ret    
    6c53:	83 ec 0c             	sub    $0xc,%esp
    6c56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    6c59:	bf fe ff ff ff       	mov    $0xfffffffe,%edi
    6c5e:	50                   	push   %eax
    6c5f:	e8 7c 3f 00 00       	call   abe0 <bithenge_scope_dec_ref>
    6c64:	89 1c 24             	mov    %ebx,(%esp)
    6c67:	e8 84 b4 00 00       	call   120f0 <free@plt>
    6c6c:	83 c4 10             	add    $0x10,%esp
    6c6f:	eb ab                	jmp    6c1c <struct_transform_prefix_apply+0x12c>
    6c71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    6c78:	bf fe ff ff ff       	mov    $0xfffffffe,%edi
    6c7d:	eb 9d                	jmp    6c1c <struct_transform_prefix_apply+0x12c>
    6c7f:	e8 9c f3 ff ff       	call   6020 <bithenge_node_inc_ref.part.2>
    6c84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    6c8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

00006c90 <struct_transform_prefix_length>:
    6c90:	55                   	push   %ebp
    6c91:	89 e5                	mov    %esp,%ebp
    6c93:	57                   	push   %edi
    6c94:	56                   	push   %esi
    6c95:	53                   	push   %ebx
    6c96:	83 ec 38             	sub    $0x38,%esp
    6c99:	8b 7d 08             	mov    0x8(%ebp),%edi
    6c9c:	6a 38                	push   $0x38
    6c9e:	e8 bd b1 00 00       	call   11e60 <malloc@plt>
    6ca3:	83 c4 10             	add    $0x10,%esp
    6ca6:	85 c0                	test   %eax,%eax
    6ca8:	0f 84 4a 01 00 00    	je     6df8 <struct_transform_prefix_length+0x168>
    6cae:	89 c3                	mov    %eax,%ebx
    6cb0:	50                   	push   %eax
    6cb1:	50                   	push   %eax
    6cb2:	68 e4 14 01 00       	push   $0x114e4
    6cb7:	53                   	push   %ebx
    6cb8:	e8 f3 4b 00 00       	call   b8b0 <bithenge_init_internal_node>
    6cbd:	83 c4 10             	add    $0x10,%esp
    6cc0:	89 c6                	mov    %eax,%esi
    6cc2:	85 c0                	test   %eax,%eax
    6cc4:	0f 85 e6 00 00 00    	jne    6db0 <struct_transform_prefix_length+0x120>
    6cca:	8b 45 0c             	mov    0xc(%ebp),%eax
    6ccd:	56                   	push   %esi
    6cce:	56                   	push   %esi
    6ccf:	50                   	push   %eax
    6cd0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    6cd3:	50                   	push   %eax
    6cd4:	e8 97 3e 00 00       	call   ab70 <bithenge_scope_new>
    6cd9:	83 c4 10             	add    $0x10,%esp
    6cdc:	89 c6                	mov    %eax,%esi
    6cde:	85 c0                	test   %eax,%eax
    6ce0:	0f 85 ca 00 00 00    	jne    6db0 <struct_transform_prefix_length+0x120>
    6ce6:	8b 47 10             	mov    0x10(%edi),%eax
    6ce9:	83 ec 0c             	sub    $0xc,%esp
    6cec:	89 45 d0             	mov    %eax,-0x30(%ebp)
    6cef:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    6cf2:	c1 e0 03             	shl    $0x3,%eax
    6cf5:	c7 43 10 e0 14 01 00 	movl   $0x114e0,0x10(%ebx)
    6cfc:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    6d03:	50                   	push   %eax
    6d04:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    6d07:	e8 54 b1 00 00       	call   11e60 <malloc@plt>
    6d0c:	83 c4 10             	add    $0x10,%esp
    6d0f:	89 43 1c             	mov    %eax,0x1c(%ebx)
    6d12:	85 c0                	test   %eax,%eax
    6d14:	0f 84 bc 00 00 00    	je     6dd6 <struct_transform_prefix_length+0x146>
    6d1a:	8b 4d 10             	mov    0x10(%ebp),%ecx
    6d1d:	85 c9                	test   %ecx,%ecx
    6d1f:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    6d22:	0f 84 d7 00 00 00    	je     6dff <struct_transform_prefix_length+0x16f>
    6d28:	8b 45 10             	mov    0x10(%ebp),%eax
    6d2b:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
    6d32:	89 43 14             	mov    %eax,0x14(%ebx)
    6d35:	c6 43 24 00          	movb   $0x0,0x24(%ebx)
    6d39:	8b 50 04             	mov    0x4(%eax),%edx
    6d3c:	89 4b 18             	mov    %ecx,0x18(%ebx)
    6d3f:	42                   	inc    %edx
    6d40:	85 c9                	test   %ecx,%ecx
    6d42:	89 50 04             	mov    %edx,0x4(%eax)
    6d45:	8b 45 d0             	mov    -0x30(%ebp),%eax
    6d48:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    6d4b:	89 43 28             	mov    %eax,0x28(%ebx)
    6d4e:	89 53 2c             	mov    %edx,0x2c(%ebx)
    6d51:	74 05                	je     6d58 <struct_transform_prefix_length+0xc8>
    6d53:	8b 01                	mov    (%ecx),%eax
    6d55:	40                   	inc    %eax
    6d56:	89 01                	mov    %eax,(%ecx)
    6d58:	8b 57 04             	mov    0x4(%edi),%edx
    6d5b:	89 7b 30             	mov    %edi,0x30(%ebx)
    6d5e:	42                   	inc    %edx
    6d5f:	c6 43 34 01          	movb   $0x1,0x34(%ebx)
    6d63:	89 57 04             	mov    %edx,0x4(%edi)
    6d66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    6d69:	51                   	push   %ecx
    6d6a:	51                   	push   %ecx
    6d6b:	53                   	push   %ebx
    6d6c:	50                   	push   %eax
    6d6d:	e8 5e 41 00 00       	call   aed0 <bithenge_scope_set_current_node>
    6d72:	58                   	pop    %eax
    6d73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    6d76:	50                   	push   %eax
    6d77:	e8 64 3e 00 00       	call   abe0 <bithenge_scope_dec_ref>
    6d7c:	8b 4f 10             	mov    0x10(%edi),%ecx
    6d7f:	83 c4 10             	add    $0x10,%esp
    6d82:	85 c9                	test   %ecx,%ecx
    6d84:	75 42                	jne    6dc8 <struct_transform_prefix_length+0x138>
    6d86:	8b 45 14             	mov    0x14(%ebp),%eax
    6d89:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    6d8f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    6d96:	83 ec 0c             	sub    $0xc,%esp
    6d99:	53                   	push   %ebx
    6d9a:	e8 81 48 00 00       	call   b620 <bithenge_node_dec_ref>
    6d9f:	83 c4 10             	add    $0x10,%esp
    6da2:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6da5:	89 f0                	mov    %esi,%eax
    6da7:	5b                   	pop    %ebx
    6da8:	5e                   	pop    %esi
    6da9:	5f                   	pop    %edi
    6daa:	5d                   	pop    %ebp
    6dab:	c3                   	ret    
    6dac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    6db0:	83 ec 0c             	sub    $0xc,%esp
    6db3:	53                   	push   %ebx
    6db4:	e8 37 b3 00 00       	call   120f0 <free@plt>
    6db9:	83 c4 10             	add    $0x10,%esp
    6dbc:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6dbf:	89 f0                	mov    %esi,%eax
    6dc1:	5b                   	pop    %ebx
    6dc2:	5e                   	pop    %esi
    6dc3:	5f                   	pop    %edi
    6dc4:	5d                   	pop    %ebp
    6dc5:	c3                   	ret    
    6dc6:	66 90                	xchg   %ax,%ax
    6dc8:	8b 55 14             	mov    0x14(%ebp),%edx
    6dcb:	89 d8                	mov    %ebx,%eax
    6dcd:	e8 5e fa ff ff       	call   6830 <seq_node_field_offset.part.16>
    6dd2:	89 c6                	mov    %eax,%esi
    6dd4:	eb c0                	jmp    6d96 <struct_transform_prefix_length+0x106>
    6dd6:	83 ec 0c             	sub    $0xc,%esp
    6dd9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    6ddc:	be fe ff ff ff       	mov    $0xfffffffe,%esi
    6de1:	50                   	push   %eax
    6de2:	e8 f9 3d 00 00       	call   abe0 <bithenge_scope_dec_ref>
    6de7:	89 1c 24             	mov    %ebx,(%esp)
    6dea:	e8 01 b3 00 00       	call   120f0 <free@plt>
    6def:	83 c4 10             	add    $0x10,%esp
    6df2:	eb c8                	jmp    6dbc <struct_transform_prefix_length+0x12c>
    6df4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    6df8:	be fe ff ff ff       	mov    $0xfffffffe,%esi
    6dfd:	eb bd                	jmp    6dbc <struct_transform_prefix_length+0x12c>
    6dff:	e8 1c f2 ff ff       	call   6020 <bithenge_node_inc_ref.part.2>
    6e04:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    6e0a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

00006e10 <repeat_transform_prefix_apply>:
    6e10:	55                   	push   %ebp
    6e11:	89 e5                	mov    %esp,%ebp
    6e13:	57                   	push   %edi
    6e14:	56                   	push   %esi
    6e15:	53                   	push   %ebx
    6e16:	83 ec 3c             	sub    $0x3c,%esp
    6e19:	8b 45 08             	mov    0x8(%ebp),%eax
    6e1c:	8b 40 0c             	mov    0xc(%eax),%eax
    6e1f:	85 c0                	test   %eax,%eax
    6e21:	0f 84 01 02 00 00    	je     7028 <repeat_transform_prefix_apply+0x218>
    6e27:	8b 10                	mov    (%eax),%edx
    6e29:	85 d2                	test   %edx,%edx
    6e2b:	0f 84 82 02 00 00    	je     70b3 <repeat_transform_prefix_apply+0x2a3>
    6e31:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    6e34:	8d 7d e0             	lea    -0x20(%ebp),%edi
    6e37:	51                   	push   %ecx
    6e38:	57                   	push   %edi
    6e39:	53                   	push   %ebx
    6e3a:	50                   	push   %eax
    6e3b:	ff 12                	call   *(%edx)
    6e3d:	83 c4 10             	add    $0x10,%esp
    6e40:	89 c6                	mov    %eax,%esi
    6e42:	85 c0                	test   %eax,%eax
    6e44:	75 19                	jne    6e5f <repeat_transform_prefix_apply+0x4f>
    6e46:	8b 45 e0             	mov    -0x20(%ebp),%eax
    6e49:	83 38 03             	cmpl   $0x3,(%eax)
    6e4c:	74 22                	je     6e70 <repeat_transform_prefix_apply+0x60>
    6e4e:	83 ec 0c             	sub    $0xc,%esp
    6e51:	be f2 ff ff ff       	mov    $0xfffffff2,%esi
    6e56:	50                   	push   %eax
    6e57:	e8 c4 47 00 00       	call   b620 <bithenge_node_dec_ref>
    6e5c:	83 c4 10             	add    $0x10,%esp
    6e5f:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6e62:	89 f0                	mov    %esi,%eax
    6e64:	5b                   	pop    %ebx
    6e65:	5e                   	pop    %esi
    6e66:	5f                   	pop    %edi
    6e67:	5d                   	pop    %ebp
    6e68:	c3                   	ret    
    6e69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    6e70:	83 ec 0c             	sub    $0xc,%esp
    6e73:	8b 48 08             	mov    0x8(%eax),%ecx
    6e76:	8b 78 0c             	mov    0xc(%eax),%edi
    6e79:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    6e7c:	50                   	push   %eax
    6e7d:	be f2 ff ff ff       	mov    $0xfffffff2,%esi
    6e82:	e8 99 47 00 00       	call   b620 <bithenge_node_dec_ref>
    6e87:	83 c4 10             	add    $0x10,%esp
    6e8a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    6e8d:	85 ff                	test   %edi,%edi
    6e8f:	78 ce                	js     6e5f <repeat_transform_prefix_apply+0x4f>
    6e91:	83 ec 0c             	sub    $0xc,%esp
    6e94:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    6e97:	6a 40                	push   $0x40
    6e99:	e8 c2 af 00 00       	call   11e60 <malloc@plt>
    6e9e:	83 c4 10             	add    $0x10,%esp
    6ea1:	89 c3                	mov    %eax,%ebx
    6ea3:	85 c0                	test   %eax,%eax
    6ea5:	0f 84 f5 01 00 00    	je     70a0 <repeat_transform_prefix_apply+0x290>
    6eab:	89 45 d0             	mov    %eax,-0x30(%ebp)
    6eae:	52                   	push   %edx
    6eaf:	52                   	push   %edx
    6eb0:	68 d4 14 01 00       	push   $0x114d4
    6eb5:	50                   	push   %eax
    6eb6:	e8 f5 49 00 00       	call   b8b0 <bithenge_init_internal_node>
    6ebb:	83 c4 10             	add    $0x10,%esp
    6ebe:	89 c6                	mov    %eax,%esi
    6ec0:	85 c0                	test   %eax,%eax
    6ec2:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    6ec5:	0f 85 9d 01 00 00    	jne    7068 <repeat_transform_prefix_apply+0x258>
    6ecb:	89 c8                	mov    %ecx,%eax
    6ecd:	89 fa                	mov    %edi,%edx
    6ecf:	21 f8                	and    %edi,%eax
    6ed1:	c7 43 10 d0 14 01 00 	movl   $0x114d0,0x10(%ebx)
    6ed8:	40                   	inc    %eax
    6ed9:	89 c8                	mov    %ecx,%eax
    6edb:	0f 94 45 cf          	sete   -0x31(%ebp)
    6edf:	83 f0 ff             	xor    $0xffffffff,%eax
    6ee2:	83 f2 ff             	xor    $0xffffffff,%edx
    6ee5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    6ee8:	09 d0                	or     %edx,%eax
    6eea:	0f 84 98 01 00 00    	je     7088 <repeat_transform_prefix_apply+0x278>
    6ef0:	83 ec 0c             	sub    $0xc,%esp
    6ef3:	8d 04 cd 00 00 00 00 	lea    0x0(,%ecx,8),%eax
    6efa:	89 55 c4             	mov    %edx,-0x3c(%ebp)
    6efd:	89 4d c8             	mov    %ecx,-0x38(%ebp)
    6f00:	50                   	push   %eax
    6f01:	e8 5a af 00 00       	call   11e60 <malloc@plt>
    6f06:	83 c4 10             	add    $0x10,%esp
    6f09:	89 43 1c             	mov    %eax,0x1c(%ebx)
    6f0c:	85 c0                	test   %eax,%eax
    6f0e:	8b 4d c8             	mov    -0x38(%ebp),%ecx
    6f11:	8b 55 c4             	mov    -0x3c(%ebp),%edx
    6f14:	0f 84 7a 01 00 00    	je     7094 <repeat_transform_prefix_apply+0x284>
    6f1a:	8b 45 10             	mov    0x10(%ebp),%eax
    6f1d:	85 c0                	test   %eax,%eax
    6f1f:	0f 84 a5 01 00 00    	je     70ca <repeat_transform_prefix_apply+0x2ba>
    6f25:	8b 45 10             	mov    0x10(%ebp),%eax
    6f28:	89 4b 28             	mov    %ecx,0x28(%ebx)
    6f2b:	89 43 14             	mov    %eax,0x14(%ebx)
    6f2e:	89 7b 2c             	mov    %edi,0x2c(%ebx)
    6f31:	ff 40 04             	incl   0x4(%eax)
    6f34:	8a 45 cf             	mov    -0x31(%ebp),%al
    6f37:	88 43 24             	mov    %al,0x24(%ebx)
    6f3a:	8b 45 0c             	mov    0xc(%ebp),%eax
    6f3d:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
    6f44:	89 43 18             	mov    %eax,0x18(%ebx)
    6f47:	85 c0                	test   %eax,%eax
    6f49:	74 02                	je     6f4d <repeat_transform_prefix_apply+0x13d>
    6f4b:	ff 00                	incl   (%eax)
    6f4d:	8b 45 08             	mov    0x8(%ebp),%eax
    6f50:	8b 40 10             	mov    0x10(%eax),%eax
    6f53:	85 c0                	test   %eax,%eax
    6f55:	0f 84 6a 01 00 00    	je     70c5 <repeat_transform_prefix_apply+0x2b5>
    6f5b:	ff 40 04             	incl   0x4(%eax)
    6f5e:	89 43 3c             	mov    %eax,0x3c(%ebx)
    6f61:	8b 45 14             	mov    0x14(%ebp),%eax
    6f64:	89 4b 34             	mov    %ecx,0x34(%ebx)
    6f67:	89 7b 38             	mov    %edi,0x38(%ebx)
    6f6a:	c6 43 30 01          	movb   $0x1,0x30(%ebx)
    6f6e:	89 18                	mov    %ebx,(%eax)
    6f70:	8b 45 18             	mov    0x18(%ebp),%eax
    6f73:	85 c0                	test   %eax,%eax
    6f75:	0f 84 e4 fe ff ff    	je     6e5f <repeat_transform_prefix_apply+0x4f>
    6f7b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    6f7e:	09 d0                	or     %edx,%eax
    6f80:	74 26                	je     6fa8 <repeat_transform_prefix_apply+0x198>
    6f82:	85 c9                	test   %ecx,%ecx
    6f84:	0f 85 ae 00 00 00    	jne    7038 <repeat_transform_prefix_apply+0x228>
    6f8a:	8b 45 18             	mov    0x18(%ebp),%eax
    6f8d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    6f93:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    6f9a:	8d 65 f4             	lea    -0xc(%ebp),%esp
    6f9d:	89 f0                	mov    %esi,%eax
    6f9f:	5b                   	pop    %ebx
    6fa0:	5e                   	pop    %esi
    6fa1:	5f                   	pop    %edi
    6fa2:	5d                   	pop    %ebp
    6fa3:	c3                   	ret    
    6fa4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    6fa8:	8b 45 18             	mov    0x18(%ebp),%eax
    6fab:	8d 7d e0             	lea    -0x20(%ebp),%edi
    6fae:	89 7d d4             	mov    %edi,-0x2c(%ebp)
    6fb1:	bb 01 00 00 00       	mov    $0x1,%ebx
    6fb6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    6fbc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    6fc3:	8b 7d 14             	mov    0x14(%ebp),%edi
    6fc6:	8b 45 d0             	mov    -0x30(%ebp),%eax
    6fc9:	89 75 d0             	mov    %esi,-0x30(%ebp)
    6fcc:	8b 75 18             	mov    0x18(%ebp),%esi
    6fcf:	eb 15                	jmp    6fe6 <repeat_transform_prefix_apply+0x1d6>
    6fd1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    6fd8:	8b 55 e0             	mov    -0x20(%ebp),%edx
    6fdb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    6fde:	8b 07                	mov    (%edi),%eax
    6fe0:	89 16                	mov    %edx,(%esi)
    6fe2:	89 4e 04             	mov    %ecx,0x4(%esi)
    6fe5:	43                   	inc    %ebx
    6fe6:	85 db                	test   %ebx,%ebx
    6fe8:	0f 84 bc 00 00 00    	je     70aa <repeat_transform_prefix_apply+0x29a>
    6fee:	89 d9                	mov    %ebx,%ecx
    6ff0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    6ff3:	e8 38 f8 ff ff       	call   6830 <seq_node_field_offset.part.16>
    6ff8:	83 f8 f2             	cmp    $0xfffffff2,%eax
    6ffb:	0f 84 7f 00 00 00    	je     7080 <repeat_transform_prefix_apply+0x270>
    7001:	83 f8 ff             	cmp    $0xffffffff,%eax
    7004:	74 7a                	je     7080 <repeat_transform_prefix_apply+0x270>
    7006:	85 c0                	test   %eax,%eax
    7008:	74 ce                	je     6fd8 <repeat_transform_prefix_apply+0x1c8>
    700a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    700d:	8b 45 14             	mov    0x14(%ebp),%eax
    7010:	83 ec 0c             	sub    $0xc,%esp
    7013:	8b 00                	mov    (%eax),%eax
    7015:	50                   	push   %eax
    7016:	e8 05 46 00 00       	call   b620 <bithenge_node_dec_ref>
    701b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    701e:	83 c4 10             	add    $0x10,%esp
    7021:	89 c6                	mov    %eax,%esi
    7023:	e9 37 fe ff ff       	jmp    6e5f <repeat_transform_prefix_apply+0x4f>
    7028:	83 c9 ff             	or     $0xffffffff,%ecx
    702b:	83 cf ff             	or     $0xffffffff,%edi
    702e:	e9 5e fe ff ff       	jmp    6e91 <repeat_transform_prefix_apply+0x81>
    7033:	90                   	nop
    7034:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    7038:	8b 55 18             	mov    0x18(%ebp),%edx
    703b:	89 d8                	mov    %ebx,%eax
    703d:	e8 ee f7 ff ff       	call   6830 <seq_node_field_offset.part.16>
    7042:	89 c6                	mov    %eax,%esi
    7044:	85 c0                	test   %eax,%eax
    7046:	0f 84 13 fe ff ff    	je     6e5f <repeat_transform_prefix_apply+0x4f>
    704c:	8b 45 14             	mov    0x14(%ebp),%eax
    704f:	83 ec 0c             	sub    $0xc,%esp
    7052:	8b 10                	mov    (%eax),%edx
    7054:	52                   	push   %edx
    7055:	e8 c6 45 00 00       	call   b620 <bithenge_node_dec_ref>
    705a:	83 c4 10             	add    $0x10,%esp
    705d:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7060:	89 f0                	mov    %esi,%eax
    7062:	5b                   	pop    %ebx
    7063:	5e                   	pop    %esi
    7064:	5f                   	pop    %edi
    7065:	5d                   	pop    %ebp
    7066:	c3                   	ret    
    7067:	90                   	nop
    7068:	83 ec 0c             	sub    $0xc,%esp
    706b:	53                   	push   %ebx
    706c:	e8 7f b0 00 00       	call   120f0 <free@plt>
    7071:	83 c4 10             	add    $0x10,%esp
    7074:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7077:	89 f0                	mov    %esi,%eax
    7079:	5b                   	pop    %ebx
    707a:	5e                   	pop    %esi
    707b:	5f                   	pop    %edi
    707c:	5d                   	pop    %ebp
    707d:	c3                   	ret    
    707e:	66 90                	xchg   %ax,%ax
    7080:	8b 75 d0             	mov    -0x30(%ebp),%esi
    7083:	e9 d7 fd ff ff       	jmp    6e5f <repeat_transform_prefix_apply+0x4f>
    7088:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
    708f:	e9 86 fe ff ff       	jmp    6f1a <repeat_transform_prefix_apply+0x10a>
    7094:	83 ec 0c             	sub    $0xc,%esp
    7097:	53                   	push   %ebx
    7098:	e8 53 b0 00 00       	call   120f0 <free@plt>
    709d:	83 c4 10             	add    $0x10,%esp
    70a0:	be fe ff ff ff       	mov    $0xfffffffe,%esi
    70a5:	e9 b5 fd ff ff       	jmp    6e5f <repeat_transform_prefix_apply+0x4f>
    70aa:	31 d2                	xor    %edx,%edx
    70ac:	31 c9                	xor    %ecx,%ecx
    70ae:	e9 2d ff ff ff       	jmp    6fe0 <repeat_transform_prefix_apply+0x1d0>
    70b3:	56                   	push   %esi
    70b4:	6a 5b                	push   $0x5b
    70b6:	68 a3 13 01 00       	push   $0x113a3
    70bb:	68 61 11 01 00       	push   $0x11161
    70c0:	e8 4b ae 00 00       	call   11f10 <assert_abort@plt>
    70c5:	e8 cf 19 00 00       	call   8a99 <bithenge_transform_inc_ref.part.10>
    70ca:	e8 51 ef ff ff       	call   6020 <bithenge_node_inc_ref.part.2>
    70cf:	90                   	nop

000070d0 <do_while_transform_prefix_apply>:
    70d0:	55                   	push   %ebp
    70d1:	89 e5                	mov    %esp,%ebp
    70d3:	57                   	push   %edi
    70d4:	56                   	push   %esi
    70d5:	53                   	push   %ebx
    70d6:	83 ec 28             	sub    $0x28,%esp
    70d9:	8b 75 0c             	mov    0xc(%ebp),%esi
    70dc:	8b 5d 10             	mov    0x10(%ebp),%ebx
    70df:	6a 40                	push   $0x40
    70e1:	e8 7a ad 00 00       	call   11e60 <malloc@plt>
    70e6:	83 c4 10             	add    $0x10,%esp
    70e9:	85 c0                	test   %eax,%eax
    70eb:	0f 84 3f 01 00 00    	je     7230 <do_while_transform_prefix_apply+0x160>
    70f1:	89 c7                	mov    %eax,%edi
    70f3:	50                   	push   %eax
    70f4:	50                   	push   %eax
    70f5:	68 b4 14 01 00       	push   $0x114b4
    70fa:	57                   	push   %edi
    70fb:	e8 b0 47 00 00       	call   b8b0 <bithenge_init_internal_node>
    7100:	83 c4 10             	add    $0x10,%esp
    7103:	85 c0                	test   %eax,%eax
    7105:	0f 85 05 01 00 00    	jne    7210 <do_while_transform_prefix_apply+0x140>
    710b:	c7 47 10 b0 14 01 00 	movl   $0x114b0,0x10(%edi)
    7112:	c7 47 1c 00 00 00 00 	movl   $0x0,0x1c(%edi)
    7119:	85 db                	test   %ebx,%ebx
    711b:	0f 84 1b 01 00 00    	je     723c <do_while_transform_prefix_apply+0x16c>
    7121:	8b 4b 04             	mov    0x4(%ebx),%ecx
    7124:	89 5f 14             	mov    %ebx,0x14(%edi)
    7127:	41                   	inc    %ecx
    7128:	c7 47 28 ff ff ff ff 	movl   $0xffffffff,0x28(%edi)
    712f:	89 4b 04             	mov    %ecx,0x4(%ebx)
    7132:	c7 47 2c ff ff ff ff 	movl   $0xffffffff,0x2c(%edi)
    7139:	c7 47 20 00 00 00 00 	movl   $0x0,0x20(%edi)
    7140:	c6 47 24 00          	movb   $0x0,0x24(%edi)
    7144:	89 77 18             	mov    %esi,0x18(%edi)
    7147:	85 f6                	test   %esi,%esi
    7149:	74 05                	je     7150 <do_while_transform_prefix_apply+0x80>
    714b:	8b 16                	mov    (%esi),%edx
    714d:	42                   	inc    %edx
    714e:	89 16                	mov    %edx,(%esi)
    7150:	8b 55 08             	mov    0x8(%ebp),%edx
    7153:	8b 4a 10             	mov    0x10(%edx),%ecx
    7156:	85 c9                	test   %ecx,%ecx
    7158:	0f 84 d9 00 00 00    	je     7237 <do_while_transform_prefix_apply+0x167>
    715e:	8b 59 04             	mov    0x4(%ecx),%ebx
    7161:	43                   	inc    %ebx
    7162:	89 59 04             	mov    %ebx,0x4(%ecx)
    7165:	89 4f 34             	mov    %ecx,0x34(%edi)
    7168:	8b 4a 0c             	mov    0xc(%edx),%ecx
    716b:	85 c9                	test   %ecx,%ecx
    716d:	0f 84 ce 00 00 00    	je     7241 <do_while_transform_prefix_apply+0x171>
    7173:	8b 59 04             	mov    0x4(%ecx),%ebx
    7176:	8b 75 14             	mov    0x14(%ebp),%esi
    7179:	43                   	inc    %ebx
    717a:	89 59 04             	mov    %ebx,0x4(%ecx)
    717d:	89 3e                	mov    %edi,(%esi)
    717f:	8b 75 18             	mov    0x18(%ebp),%esi
    7182:	89 4f 30             	mov    %ecx,0x30(%edi)
    7185:	c7 47 38 ff ff ff ff 	movl   $0xffffffff,0x38(%edi)
    718c:	c7 47 3c ff ff ff ff 	movl   $0xffffffff,0x3c(%edi)
    7193:	85 f6                	test   %esi,%esi
    7195:	74 3a                	je     71d1 <do_while_transform_prefix_apply+0x101>
    7197:	83 3f 01             	cmpl   $0x1,(%edi)
    719a:	0f 85 b3 00 00 00    	jne    7253 <do_while_transform_prefix_apply+0x183>
    71a0:	52                   	push   %edx
    71a1:	8b 47 08             	mov    0x8(%edi),%eax
    71a4:	6a 00                	push   $0x0
    71a6:	68 00 60 00 00       	push   $0x6000
    71ab:	57                   	push   %edi
    71ac:	ff 10                	call   *(%eax)
    71ae:	83 c4 10             	add    $0x10,%esp
    71b1:	85 c0                	test   %eax,%eax
    71b3:	75 36                	jne    71eb <do_while_transform_prefix_apply+0x11b>
    71b5:	8b 55 14             	mov    0x14(%ebp),%edx
    71b8:	8b 1a                	mov    (%edx),%ebx
    71ba:	8b 55 18             	mov    0x18(%ebp),%edx
    71bd:	8b 4b 38             	mov    0x38(%ebx),%ecx
    71c0:	85 c9                	test   %ecx,%ecx
    71c2:	75 1c                	jne    71e0 <do_while_transform_prefix_apply+0x110>
    71c4:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
    71ca:	c7 42 04 00 00 00 00 	movl   $0x0,0x4(%edx)
    71d1:	8d 65 f4             	lea    -0xc(%ebp),%esp
    71d4:	5b                   	pop    %ebx
    71d5:	5e                   	pop    %esi
    71d6:	5f                   	pop    %edi
    71d7:	5d                   	pop    %ebp
    71d8:	c3                   	ret    
    71d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    71e0:	89 d8                	mov    %ebx,%eax
    71e2:	e8 49 f6 ff ff       	call   6830 <seq_node_field_offset.part.16>
    71e7:	85 c0                	test   %eax,%eax
    71e9:	74 e6                	je     71d1 <do_while_transform_prefix_apply+0x101>
    71eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    71ee:	8b 45 14             	mov    0x14(%ebp),%eax
    71f1:	83 ec 0c             	sub    $0xc,%esp
    71f4:	8b 00                	mov    (%eax),%eax
    71f6:	50                   	push   %eax
    71f7:	e8 24 44 00 00       	call   b620 <bithenge_node_dec_ref>
    71fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    71ff:	83 c4 10             	add    $0x10,%esp
    7202:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7205:	5b                   	pop    %ebx
    7206:	5e                   	pop    %esi
    7207:	5f                   	pop    %edi
    7208:	5d                   	pop    %ebp
    7209:	c3                   	ret    
    720a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    7210:	83 ec 0c             	sub    $0xc,%esp
    7213:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    7216:	57                   	push   %edi
    7217:	e8 d4 ae 00 00       	call   120f0 <free@plt>
    721c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    721f:	83 c4 10             	add    $0x10,%esp
    7222:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7225:	5b                   	pop    %ebx
    7226:	5e                   	pop    %esi
    7227:	5f                   	pop    %edi
    7228:	5d                   	pop    %ebp
    7229:	c3                   	ret    
    722a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    7230:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    7235:	eb 9a                	jmp    71d1 <do_while_transform_prefix_apply+0x101>
    7237:	e8 5d 18 00 00       	call   8a99 <bithenge_transform_inc_ref.part.10>
    723c:	e8 df ed ff ff       	call   6020 <bithenge_node_inc_ref.part.2>
    7241:	57                   	push   %edi
    7242:	6a 41                	push   $0x41
    7244:	68 a3 13 01 00       	push   $0x113a3
    7249:	68 35 13 01 00       	push   $0x11335
    724e:	e8 bd ac 00 00       	call   11f10 <assert_abort@plt>
    7253:	51                   	push   %ecx
    7254:	68 80 00 00 00       	push   $0x80
    7259:	68 50 12 01 00       	push   $0x11250
    725e:	68 a8 12 01 00       	push   $0x112a8
    7263:	e8 a8 ac 00 00       	call   11f10 <assert_abort@plt>
    7268:	90                   	nop
    7269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

00007270 <repeat_node_for_each>:
    7270:	55                   	push   %ebp
    7271:	89 e5                	mov    %esp,%ebp
    7273:	57                   	push   %edi
    7274:	56                   	push   %esi
    7275:	53                   	push   %ebx
    7276:	83 ec 4c             	sub    $0x4c,%esp
    7279:	8b 45 08             	mov    0x8(%ebp),%eax
    727c:	8b 50 38             	mov    0x38(%eax),%edx
    727f:	8b 40 34             	mov    0x34(%eax),%eax
    7282:	89 d3                	mov    %edx,%ebx
    7284:	c1 fb 1f             	sar    $0x1f,%ebx
    7287:	89 d9                	mov    %ebx,%ecx
    7289:	29 c1                	sub    %eax,%ecx
    728b:	19 d3                	sbb    %edx,%ebx
    728d:	89 df                	mov    %ebx,%edi
    728f:	c1 ef 1f             	shr    $0x1f,%edi
    7292:	75 09                	jne    729d <repeat_node_for_each+0x2d>
    7294:	21 d0                	and    %edx,%eax
    7296:	40                   	inc    %eax
    7297:	0f 85 9a 02 00 00    	jne    7537 <repeat_node_for_each+0x2c7>
    729d:	31 db                	xor    %ebx,%ebx
    729f:	31 f6                	xor    %esi,%esi
    72a1:	31 ff                	xor    %edi,%edi
    72a3:	89 5d b4             	mov    %ebx,-0x4c(%ebp)
    72a6:	66 90                	xchg   %ax,%ax
    72a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    72ab:	85 c0                	test   %eax,%eax
    72ad:	0f 85 9d 02 00 00    	jne    7550 <repeat_node_for_each+0x2e0>
    72b3:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    72ba:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    72c1:	8b 45 08             	mov    0x8(%ebp),%eax
    72c4:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
    72cb:	8b 55 ac             	mov    -0x54(%ebp),%edx
    72ce:	89 75 a8             	mov    %esi,-0x58(%ebp)
    72d1:	8b 40 10             	mov    0x10(%eax),%eax
    72d4:	8b 4d a8             	mov    -0x58(%ebp),%ecx
    72d7:	52                   	push   %edx
    72d8:	8b 5d 08             	mov    0x8(%ebp),%ebx
    72db:	8d 55 c4             	lea    -0x3c(%ebp),%edx
    72de:	51                   	push   %ecx
    72df:	52                   	push   %edx
    72e0:	53                   	push   %ebx
    72e1:	ff 10                	call   *(%eax)
    72e3:	83 c4 10             	add    $0x10,%esp
    72e6:	85 c0                	test   %eax,%eax
    72e8:	0f 85 78 02 00 00    	jne    7566 <repeat_node_for_each+0x2f6>
    72ee:	8b 45 08             	mov    0x8(%ebp),%eax
    72f1:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
    72f4:	39 58 20             	cmp    %ebx,0x20(%eax)
    72f7:	0f 84 eb 00 00 00    	je     73e8 <repeat_node_for_each+0x178>
    72fd:	89 d9                	mov    %ebx,%ecx
    72ff:	41                   	inc    %ecx
    7300:	0f 85 02 03 00 00    	jne    7608 <repeat_node_for_each+0x398>
    7306:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    730d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    7314:	8b 45 08             	mov    0x8(%ebp),%eax
    7317:	8b 48 14             	mov    0x14(%eax),%ecx
    731a:	85 c9                	test   %ecx,%ecx
    731c:	0f 84 f3 04 00 00    	je     7815 <repeat_node_for_each+0x5a5>
    7322:	8b 41 04             	mov    0x4(%ecx),%eax
    7325:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    7328:	40                   	inc    %eax
    7329:	8b 5d d0             	mov    -0x30(%ebp),%ebx
    732c:	89 41 04             	mov    %eax,0x4(%ecx)
    732f:	50                   	push   %eax
    7330:	50                   	push   %eax
    7331:	8b 45 e0             	mov    -0x20(%ebp),%eax
    7334:	2b 45 d0             	sub    -0x30(%ebp),%eax
    7337:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
    733a:	52                   	push   %edx
    733b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    733e:	50                   	push   %eax
    733f:	8d 45 cc             	lea    -0x34(%ebp),%eax
    7342:	52                   	push   %edx
    7343:	53                   	push   %ebx
    7344:	51                   	push   %ecx
    7345:	50                   	push   %eax
    7346:	e8 c5 55 00 00       	call   c910 <bithenge_new_subblob>
    734b:	83 c4 20             	add    $0x20,%esp
    734e:	85 c0                	test   %eax,%eax
    7350:	0f 85 c2 02 00 00    	jne    7618 <repeat_node_for_each+0x3a8>
    7356:	8d 45 c0             	lea    -0x40(%ebp),%eax
    7359:	8b 5d cc             	mov    -0x34(%ebp),%ebx
    735c:	50                   	push   %eax
    735d:	8b 45 08             	mov    0x8(%ebp),%eax
    7360:	53                   	push   %ebx
    7361:	8b 40 18             	mov    0x18(%eax),%eax
    7364:	50                   	push   %eax
    7365:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    7368:	50                   	push   %eax
    7369:	e8 82 31 00 00       	call   a4f0 <bithenge_transform_apply>
    736e:	89 45 b0             	mov    %eax,-0x50(%ebp)
    7371:	58                   	pop    %eax
    7372:	8b 45 cc             	mov    -0x34(%ebp),%eax
    7375:	50                   	push   %eax
    7376:	e8 a5 42 00 00       	call   b620 <bithenge_node_dec_ref>
    737b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    737e:	83 c4 10             	add    $0x10,%esp
    7381:	8b 45 b0             	mov    -0x50(%ebp),%eax
    7384:	85 c9                	test   %ecx,%ecx
    7386:	74 23                	je     73ab <repeat_node_for_each+0x13b>
    7388:	8b 11                	mov    (%ecx),%edx
    738a:	89 d3                	mov    %edx,%ebx
    738c:	85 d2                	test   %edx,%edx
    738e:	0f 84 9d 04 00 00    	je     7831 <repeat_node_for_each+0x5c1>
    7394:	8b 51 04             	mov    0x4(%ecx),%edx
    7397:	85 d2                	test   %edx,%edx
    7399:	0f 84 80 04 00 00    	je     781f <repeat_node_for_each+0x5af>
    739f:	4a                   	dec    %edx
    73a0:	89 51 04             	mov    %edx,0x4(%ecx)
    73a3:	85 d2                	test   %edx,%edx
    73a5:	0f 84 45 03 00 00    	je     76f0 <repeat_node_for_each+0x480>
    73ab:	85 c0                	test   %eax,%eax
    73ad:	0f 84 23 01 00 00    	je     74d6 <repeat_node_for_each+0x266>
    73b3:	90                   	nop
    73b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    73b8:	83 f8 f2             	cmp    $0xfffffff2,%eax
    73bb:	0f 94 c2             	sete   %dl
    73be:	83 f8 ff             	cmp    $0xffffffff,%eax
    73c1:	0f 94 c1             	sete   %cl
    73c4:	09 ca                	or     %ecx,%edx
    73c6:	84 d2                	test   %dl,%dl
    73c8:	74 12                	je     73dc <repeat_node_for_each+0x16c>
    73ca:	8b 5d 08             	mov    0x8(%ebp),%ebx
    73cd:	8b 53 38             	mov    0x38(%ebx),%edx
    73d0:	8b 4b 34             	mov    0x34(%ebx),%ecx
    73d3:	21 ca                	and    %ecx,%edx
    73d5:	42                   	inc    %edx
    73d6:	0f 84 aa 01 00 00    	je     7586 <repeat_node_for_each+0x316>
    73dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
    73df:	5b                   	pop    %ebx
    73e0:	5e                   	pop    %esi
    73e1:	5f                   	pop    %edi
    73e2:	5d                   	pop    %ebp
    73e3:	c3                   	ret    
    73e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    73e8:	8b 40 14             	mov    0x14(%eax),%eax
    73eb:	85 c0                	test   %eax,%eax
    73ed:	0f 84 22 04 00 00    	je     7815 <repeat_node_for_each+0x5a5>
    73f3:	8b 50 04             	mov    0x4(%eax),%edx
    73f6:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    73f9:	42                   	inc    %edx
    73fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
    73fd:	89 50 04             	mov    %edx,0x4(%eax)
    7400:	51                   	push   %ecx
    7401:	53                   	push   %ebx
    7402:	50                   	push   %eax
    7403:	8d 45 c8             	lea    -0x38(%ebp),%eax
    7406:	50                   	push   %eax
    7407:	e8 44 53 00 00       	call   c750 <bithenge_new_offset_blob>
    740c:	83 c4 10             	add    $0x10,%esp
    740f:	85 c0                	test   %eax,%eax
    7411:	0f 85 19 03 00 00    	jne    7730 <repeat_node_for_each+0x4c0>
    7417:	8b 45 08             	mov    0x8(%ebp),%eax
    741a:	80 78 24 00          	cmpb   $0x0,0x24(%eax)
    741e:	0f 85 3c 02 00 00    	jne    7660 <repeat_node_for_each+0x3f0>
    7424:	8b 45 c8             	mov    -0x38(%ebp),%eax
    7427:	83 38 05             	cmpl   $0x5,(%eax)
    742a:	0f 85 ea 03 00 00    	jne    781a <repeat_node_for_each+0x5aa>
    7430:	83 ec 0c             	sub    $0xc,%esp
    7433:	8d 55 d8             	lea    -0x28(%ebp),%edx
    7436:	52                   	push   %edx
    7437:	8d 55 c0             	lea    -0x40(%ebp),%edx
    743a:	52                   	push   %edx
    743b:	50                   	push   %eax
    743c:	8b 45 08             	mov    0x8(%ebp),%eax
    743f:	8b 40 18             	mov    0x18(%eax),%eax
    7442:	50                   	push   %eax
    7443:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    7446:	50                   	push   %eax
    7447:	e8 84 2d 00 00       	call   a1d0 <bithenge_transform_prefix_apply>
    744c:	83 c4 14             	add    $0x14,%esp
    744f:	89 45 b0             	mov    %eax,-0x50(%ebp)
    7452:	8b 45 c8             	mov    -0x38(%ebp),%eax
    7455:	50                   	push   %eax
    7456:	e8 c5 41 00 00       	call   b620 <bithenge_node_dec_ref>
    745b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    745e:	83 c4 10             	add    $0x10,%esp
    7461:	8b 45 b0             	mov    -0x50(%ebp),%eax
    7464:	85 c9                	test   %ecx,%ecx
    7466:	74 2c                	je     7494 <repeat_node_for_each+0x224>
    7468:	8b 11                	mov    (%ecx),%edx
    746a:	89 d3                	mov    %edx,%ebx
    746c:	85 d2                	test   %edx,%edx
    746e:	0f 84 bd 03 00 00    	je     7831 <repeat_node_for_each+0x5c1>
    7474:	8b 51 04             	mov    0x4(%ecx),%edx
    7477:	85 d2                	test   %edx,%edx
    7479:	0f 84 a0 03 00 00    	je     781f <repeat_node_for_each+0x5af>
    747f:	4a                   	dec    %edx
    7480:	89 51 04             	mov    %edx,0x4(%ecx)
    7483:	85 d2                	test   %edx,%edx
    7485:	75 0d                	jne    7494 <repeat_node_for_each+0x224>
    7487:	83 ec 0c             	sub    $0xc,%esp
    748a:	51                   	push   %ecx
    748b:	ff 53 0c             	call   *0xc(%ebx)
    748e:	83 c4 10             	add    $0x10,%esp
    7491:	8b 45 b0             	mov    -0x50(%ebp),%eax
    7494:	85 c0                	test   %eax,%eax
    7496:	0f 85 1c ff ff ff    	jne    73b8 <repeat_node_for_each+0x148>
    749c:	8b 45 08             	mov    0x8(%ebp),%eax
    749f:	8b 4d 08             	mov    0x8(%ebp),%ecx
    74a2:	8b 40 2c             	mov    0x2c(%eax),%eax
    74a5:	8b 59 28             	mov    0x28(%ecx),%ebx
    74a8:	21 d8                	and    %ebx,%eax
    74aa:	40                   	inc    %eax
    74ab:	0f 84 cc 02 00 00    	je     777d <repeat_node_for_each+0x50d>
    74b1:	8b 41 1c             	mov    0x1c(%ecx),%eax
    74b4:	89 ca                	mov    %ecx,%edx
    74b6:	89 c3                	mov    %eax,%ebx
    74b8:	89 c8                	mov    %ecx,%eax
    74ba:	8b 48 20             	mov    0x20(%eax),%ecx
    74bd:	8d 41 01             	lea    0x1(%ecx),%eax
    74c0:	89 42 20             	mov    %eax,0x20(%edx)
    74c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
    74c6:	03 45 d0             	add    -0x30(%ebp),%eax
    74c9:	8b 55 dc             	mov    -0x24(%ebp),%edx
    74cc:	13 55 d4             	adc    -0x2c(%ebp),%edx
    74cf:	89 04 cb             	mov    %eax,(%ebx,%ecx,8)
    74d2:	89 54 cb 04          	mov    %edx,0x4(%ebx,%ecx,8)
    74d6:	50                   	push   %eax
    74d7:	8d 45 e0             	lea    -0x20(%ebp),%eax
    74da:	57                   	push   %edi
    74db:	56                   	push   %esi
    74dc:	50                   	push   %eax
    74dd:	e8 4e 45 00 00       	call   ba30 <bithenge_new_integer_node>
    74e2:	83 c4 10             	add    $0x10,%esp
    74e5:	85 c0                	test   %eax,%eax
    74e7:	0f 85 23 02 00 00    	jne    7710 <repeat_node_for_each+0x4a0>
    74ed:	8b 45 10             	mov    0x10(%ebp),%eax
    74f0:	53                   	push   %ebx
    74f1:	50                   	push   %eax
    74f2:	8b 45 c0             	mov    -0x40(%ebp),%eax
    74f5:	50                   	push   %eax
    74f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
    74f9:	50                   	push   %eax
    74fa:	ff 55 0c             	call   *0xc(%ebp)
    74fd:	83 c4 10             	add    $0x10,%esp
    7500:	85 c0                	test   %eax,%eax
    7502:	0f 85 d4 fe ff ff    	jne    73dc <repeat_node_for_each+0x16c>
    7508:	8b 45 08             	mov    0x8(%ebp),%eax
    750b:	83 c6 01             	add    $0x1,%esi
    750e:	83 d7 00             	adc    $0x0,%edi
    7511:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
    7514:	41                   	inc    %ecx
    7515:	8b 50 34             	mov    0x34(%eax),%edx
    7518:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
    751b:	8b 40 38             	mov    0x38(%eax),%eax
    751e:	89 d1                	mov    %edx,%ecx
    7520:	21 c1                	and    %eax,%ecx
    7522:	41                   	inc    %ecx
    7523:	0f 84 7f fd ff ff    	je     72a8 <repeat_node_for_each+0x38>
    7529:	39 f8                	cmp    %edi,%eax
    752b:	0f 8f 77 fd ff ff    	jg     72a8 <repeat_node_for_each+0x38>
    7531:	0f 8d c1 00 00 00    	jge    75f8 <repeat_node_for_each+0x388>
    7537:	8b 45 08             	mov    0x8(%ebp),%eax
    753a:	80 78 30 00          	cmpb   $0x0,0x30(%eax)
    753e:	74 5e                	je     759e <repeat_node_for_each+0x32e>
    7540:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7543:	31 c0                	xor    %eax,%eax
    7545:	5b                   	pop    %ebx
    7546:	5e                   	pop    %esi
    7547:	5f                   	pop    %edi
    7548:	5d                   	pop    %ebp
    7549:	c3                   	ret    
    754a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    7550:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
    7553:	8d 55 d0             	lea    -0x30(%ebp),%edx
    7556:	8b 45 08             	mov    0x8(%ebp),%eax
    7559:	e8 d2 f2 ff ff       	call   6830 <seq_node_field_offset.part.16>
    755e:	85 c0                	test   %eax,%eax
    7560:	0f 84 5b fd ff ff    	je     72c1 <repeat_node_for_each+0x51>
    7566:	83 f8 f2             	cmp    $0xfffffff2,%eax
    7569:	74 09                	je     7574 <repeat_node_for_each+0x304>
    756b:	83 f8 ff             	cmp    $0xffffffff,%eax
    756e:	0f 85 68 fe ff ff    	jne    73dc <repeat_node_for_each+0x16c>
    7574:	8b 5d 08             	mov    0x8(%ebp),%ebx
    7577:	8b 53 38             	mov    0x38(%ebx),%edx
    757a:	8b 4b 34             	mov    0x34(%ebx),%ecx
    757d:	21 ca                	and    %ecx,%edx
    757f:	42                   	inc    %edx
    7580:	0f 85 56 fe ff ff    	jne    73dc <repeat_node_for_each+0x16c>
    7586:	8b 45 08             	mov    0x8(%ebp),%eax
    7589:	89 70 34             	mov    %esi,0x34(%eax)
    758c:	89 78 38             	mov    %edi,0x38(%eax)
    758f:	89 70 28             	mov    %esi,0x28(%eax)
    7592:	89 78 2c             	mov    %edi,0x2c(%eax)
    7595:	8b 45 08             	mov    0x8(%ebp),%eax
    7598:	80 78 30 00          	cmpb   $0x0,0x30(%eax)
    759c:	75 a2                	jne    7540 <repeat_node_for_each+0x2d0>
    759e:	8b 40 14             	mov    0x14(%eax),%eax
    75a1:	85 c0                	test   %eax,%eax
    75a3:	0f 84 67 02 00 00    	je     7810 <repeat_node_for_each+0x5a0>
    75a9:	8b 50 08             	mov    0x8(%eax),%edx
    75ac:	85 d2                	test   %edx,%edx
    75ae:	0f 84 47 02 00 00    	je     77fb <repeat_node_for_each+0x58b>
    75b4:	8d 4d d8             	lea    -0x28(%ebp),%ecx
    75b7:	56                   	push   %esi
    75b8:	56                   	push   %esi
    75b9:	51                   	push   %ecx
    75ba:	50                   	push   %eax
    75bb:	ff 12                	call   *(%edx)
    75bd:	83 c4 10             	add    $0x10,%esp
    75c0:	85 c0                	test   %eax,%eax
    75c2:	0f 85 14 fe ff ff    	jne    73dc <repeat_node_for_each+0x16c>
    75c8:	8b 45 08             	mov    0x8(%ebp),%eax
    75cb:	8b 48 28             	mov    0x28(%eax),%ecx
    75ce:	85 c9                	test   %ecx,%ecx
    75d0:	0f 85 f5 01 00 00    	jne    77cb <repeat_node_for_each+0x55b>
    75d6:	31 c0                	xor    %eax,%eax
    75d8:	31 d2                	xor    %edx,%edx
    75da:	8b 4d d8             	mov    -0x28(%ebp),%ecx
    75dd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
    75e0:	31 c8                	xor    %ecx,%eax
    75e2:	31 da                	xor    %ebx,%edx
    75e4:	09 c2                	or     %eax,%edx
    75e6:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    75eb:	0f 85 eb fd ff ff    	jne    73dc <repeat_node_for_each+0x16c>
    75f1:	e9 4a ff ff ff       	jmp    7540 <repeat_node_for_each+0x2d0>
    75f6:	66 90                	xchg   %ax,%ax
    75f8:	39 f2                	cmp    %esi,%edx
    75fa:	0f 87 a8 fc ff ff    	ja     72a8 <repeat_node_for_each+0x38>
    7600:	e9 32 ff ff ff       	jmp    7537 <repeat_node_for_each+0x2c7>
    7605:	8d 76 00             	lea    0x0(%esi),%esi
    7608:	8d 55 e0             	lea    -0x20(%ebp),%edx
    760b:	e8 20 f2 ff ff       	call   6830 <seq_node_field_offset.part.16>
    7610:	85 c0                	test   %eax,%eax
    7612:	0f 84 fc fc ff ff    	je     7314 <repeat_node_for_each+0xa4>
    7618:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    761b:	85 c9                	test   %ecx,%ecx
    761d:	0f 84 95 fd ff ff    	je     73b8 <repeat_node_for_each+0x148>
    7623:	8b 19                	mov    (%ecx),%ebx
    7625:	85 db                	test   %ebx,%ebx
    7627:	0f 84 04 02 00 00    	je     7831 <repeat_node_for_each+0x5c1>
    762d:	8b 51 04             	mov    0x4(%ecx),%edx
    7630:	85 d2                	test   %edx,%edx
    7632:	0f 84 e7 01 00 00    	je     781f <repeat_node_for_each+0x5af>
    7638:	4a                   	dec    %edx
    7639:	89 51 04             	mov    %edx,0x4(%ecx)
    763c:	85 d2                	test   %edx,%edx
    763e:	0f 85 74 fd ff ff    	jne    73b8 <repeat_node_for_each+0x148>
    7644:	83 ec 0c             	sub    $0xc,%esp
    7647:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    764a:	51                   	push   %ecx
    764b:	ff 53 0c             	call   *0xc(%ebx)
    764e:	83 c4 10             	add    $0x10,%esp
    7651:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    7654:	e9 5f fd ff ff       	jmp    73b8 <repeat_node_for_each+0x148>
    7659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    7660:	8b 45 c8             	mov    -0x38(%ebp),%eax
    7663:	83 38 05             	cmpl   $0x5,(%eax)
    7666:	0f 85 ae 01 00 00    	jne    781a <repeat_node_for_each+0x5aa>
    766c:	8b 50 08             	mov    0x8(%eax),%edx
    766f:	85 d2                	test   %edx,%edx
    7671:	0f 84 6f 01 00 00    	je     77e6 <repeat_node_for_each+0x576>
    7677:	51                   	push   %ecx
    7678:	51                   	push   %ecx
    7679:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    767c:	51                   	push   %ecx
    767d:	50                   	push   %eax
    767e:	ff 12                	call   *(%edx)
    7680:	83 c4 10             	add    $0x10,%esp
    7683:	8b 55 e0             	mov    -0x20(%ebp),%edx
    7686:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    7689:	85 c0                	test   %eax,%eax
    768b:	75 1b                	jne    76a8 <repeat_node_for_each+0x438>
    768d:	09 d1                	or     %edx,%ecx
    768f:	0f 85 8f fd ff ff    	jne    7424 <repeat_node_for_each+0x1b4>
    7695:	8b 45 08             	mov    0x8(%ebp),%eax
    7698:	8b 58 20             	mov    0x20(%eax),%ebx
    769b:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    76a2:	89 58 28             	mov    %ebx,0x28(%eax)
    76a5:	83 c8 ff             	or     $0xffffffff,%eax
    76a8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
    76ab:	85 d2                	test   %edx,%edx
    76ad:	74 21                	je     76d0 <repeat_node_for_each+0x460>
    76af:	8b 1a                	mov    (%edx),%ebx
    76b1:	85 db                	test   %ebx,%ebx
    76b3:	0f 84 78 01 00 00    	je     7831 <repeat_node_for_each+0x5c1>
    76b9:	8b 4a 04             	mov    0x4(%edx),%ecx
    76bc:	85 c9                	test   %ecx,%ecx
    76be:	0f 84 5b 01 00 00    	je     781f <repeat_node_for_each+0x5af>
    76c4:	49                   	dec    %ecx
    76c5:	89 4a 04             	mov    %ecx,0x4(%edx)
    76c8:	85 c9                	test   %ecx,%ecx
    76ca:	0f 84 e6 00 00 00    	je     77b6 <repeat_node_for_each+0x546>
    76d0:	83 ec 0c             	sub    $0xc,%esp
    76d3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    76d6:	8b 45 c8             	mov    -0x38(%ebp),%eax
    76d9:	50                   	push   %eax
    76da:	e8 41 3f 00 00       	call   b620 <bithenge_node_dec_ref>
    76df:	83 c4 10             	add    $0x10,%esp
    76e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    76e5:	e9 ce fc ff ff       	jmp    73b8 <repeat_node_for_each+0x148>
    76ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    76f0:	83 ec 0c             	sub    $0xc,%esp
    76f3:	51                   	push   %ecx
    76f4:	ff 53 0c             	call   *0xc(%ebx)
    76f7:	8b 45 b0             	mov    -0x50(%ebp),%eax
    76fa:	83 c4 10             	add    $0x10,%esp
    76fd:	85 c0                	test   %eax,%eax
    76ff:	0f 85 b3 fc ff ff    	jne    73b8 <repeat_node_for_each+0x148>
    7705:	e9 cc fd ff ff       	jmp    74d6 <repeat_node_for_each+0x266>
    770a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    7710:	83 ec 0c             	sub    $0xc,%esp
    7713:	8b 5d c0             	mov    -0x40(%ebp),%ebx
    7716:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    7719:	53                   	push   %ebx
    771a:	e8 01 3f 00 00       	call   b620 <bithenge_node_dec_ref>
    771f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    7722:	83 c4 10             	add    $0x10,%esp
    7725:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7728:	5b                   	pop    %ebx
    7729:	5e                   	pop    %esi
    772a:	5f                   	pop    %edi
    772b:	5d                   	pop    %ebp
    772c:	c3                   	ret    
    772d:	8d 76 00             	lea    0x0(%esi),%esi
    7730:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    7733:	85 c9                	test   %ecx,%ecx
    7735:	0f 84 7d fc ff ff    	je     73b8 <repeat_node_for_each+0x148>
    773b:	8b 19                	mov    (%ecx),%ebx
    773d:	85 db                	test   %ebx,%ebx
    773f:	0f 84 ec 00 00 00    	je     7831 <repeat_node_for_each+0x5c1>
    7745:	8b 51 04             	mov    0x4(%ecx),%edx
    7748:	85 d2                	test   %edx,%edx
    774a:	0f 84 cf 00 00 00    	je     781f <repeat_node_for_each+0x5af>
    7750:	4a                   	dec    %edx
    7751:	89 51 04             	mov    %edx,0x4(%ecx)
    7754:	85 d2                	test   %edx,%edx
    7756:	74 13                	je     776b <repeat_node_for_each+0x4fb>
    7758:	83 f8 ff             	cmp    $0xffffffff,%eax
    775b:	0f 94 c2             	sete   %dl
    775e:	83 f8 f2             	cmp    $0xfffffff2,%eax
    7761:	0f 94 c1             	sete   %cl
    7764:	09 ca                	or     %ecx,%edx
    7766:	e9 5b fc ff ff       	jmp    73c6 <repeat_node_for_each+0x156>
    776b:	83 ec 0c             	sub    $0xc,%esp
    776e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    7771:	51                   	push   %ecx
    7772:	ff 53 0c             	call   *0xc(%ebx)
    7775:	83 c4 10             	add    $0x10,%esp
    7778:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    777b:	eb db                	jmp    7758 <repeat_node_for_each+0x4e8>
    777d:	52                   	push   %edx
    777e:	52                   	push   %edx
    777f:	8b 41 20             	mov    0x20(%ecx),%eax
    7782:	8d 04 c5 08 00 00 00 	lea    0x8(,%eax,8),%eax
    7789:	50                   	push   %eax
    778a:	8b 45 08             	mov    0x8(%ebp),%eax
    778d:	8b 48 1c             	mov    0x1c(%eax),%ecx
    7790:	51                   	push   %ecx
    7791:	e8 0a a8 00 00       	call   11fa0 <realloc@plt>
    7796:	83 c4 10             	add    $0x10,%esp
    7799:	89 c3                	mov    %eax,%ebx
    779b:	85 c0                	test   %eax,%eax
    779d:	74 0d                	je     77ac <repeat_node_for_each+0x53c>
    779f:	8b 45 08             	mov    0x8(%ebp),%eax
    77a2:	89 c2                	mov    %eax,%edx
    77a4:	89 58 1c             	mov    %ebx,0x1c(%eax)
    77a7:	e9 0e fd ff ff       	jmp    74ba <repeat_node_for_each+0x24a>
    77ac:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    77b1:	e9 26 fc ff ff       	jmp    73dc <repeat_node_for_each+0x16c>
    77b6:	83 ec 0c             	sub    $0xc,%esp
    77b9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    77bc:	52                   	push   %edx
    77bd:	ff 53 0c             	call   *0xc(%ebx)
    77c0:	83 c4 10             	add    $0x10,%esp
    77c3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    77c6:	e9 05 ff ff ff       	jmp    76d0 <repeat_node_for_each+0x460>
    77cb:	8d 55 e0             	lea    -0x20(%ebp),%edx
    77ce:	e8 5d f0 ff ff       	call   6830 <seq_node_field_offset.part.16>
    77d3:	85 c0                	test   %eax,%eax
    77d5:	0f 85 01 fc ff ff    	jne    73dc <repeat_node_for_each+0x16c>
    77db:	8b 45 e0             	mov    -0x20(%ebp),%eax
    77de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    77e1:	e9 f4 fd ff ff       	jmp    75da <repeat_node_for_each+0x36a>
    77e6:	53                   	push   %ebx
    77e7:	68 c3 00 00 00       	push   $0xc3
    77ec:	68 05 12 01 00       	push   $0x11205
    77f1:	68 1d 12 01 00       	push   $0x1121d
    77f6:	e8 15 a7 00 00       	call   11f10 <assert_abort@plt>
    77fb:	57                   	push   %edi
    77fc:	68 80 00 00 00       	push   $0x80
    7801:	68 05 12 01 00       	push   $0x11205
    7806:	68 1d 12 01 00       	push   $0x1121d
    780b:	e8 00 a7 00 00       	call   11f10 <assert_abort@plt>
    7810:	e8 6d 12 00 00       	call   8a82 <bithenge_blob_size.part.6>
    7815:	e8 06 e8 ff ff       	call   6020 <bithenge_node_inc_ref.part.2>
    781a:	e8 21 e8 ff ff       	call   6040 <bithenge_node_as_blob.part.8>
    781f:	56                   	push   %esi
    7820:	6a 75                	push   $0x75
    7822:	68 18 13 01 00       	push   $0x11318
    7827:	68 6b 11 01 00       	push   $0x1116b
    782c:	e8 df a6 00 00       	call   11f10 <assert_abort@plt>
    7831:	57                   	push   %edi
    7832:	6a 74                	push   $0x74
    7834:	68 18 13 01 00       	push   $0x11318
    7839:	68 61 11 01 00       	push   $0x11161
    783e:	e8 cd a6 00 00       	call   11f10 <assert_abort@plt>
    7843:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    7849:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00007850 <struct_node_for_each>:
    7850:	55                   	push   %ebp
    7851:	89 e5                	mov    %esp,%ebp
    7853:	57                   	push   %edi
    7854:	56                   	push   %esi
    7855:	53                   	push   %ebx
    7856:	83 ec 4c             	sub    $0x4c,%esp
    7859:	8b 5d 08             	mov    0x8(%ebp),%ebx
    785c:	8b 43 30             	mov    0x30(%ebx),%eax
    785f:	8b 78 0c             	mov    0xc(%eax),%edi
    7862:	8b 77 04             	mov    0x4(%edi),%esi
    7865:	85 f6                	test   %esi,%esi
    7867:	0f 84 40 02 00 00    	je     7aad <struct_node_for_each+0x25d>
    786d:	31 f6                	xor    %esi,%esi
    786f:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
    7876:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
    787d:	89 7d b4             	mov    %edi,-0x4c(%ebp)
    7880:	85 f6                	test   %esi,%esi
    7882:	0f 85 68 02 00 00    	jne    7af0 <struct_node_for_each+0x2a0>
    7888:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    788f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    7896:	8b 43 10             	mov    0x10(%ebx),%eax
    7899:	8b 4d a8             	mov    -0x58(%ebp),%ecx
    789c:	8b 55 ac             	mov    -0x54(%ebp),%edx
    789f:	52                   	push   %edx
    78a0:	51                   	push   %ecx
    78a1:	8d 4d c4             	lea    -0x3c(%ebp),%ecx
    78a4:	51                   	push   %ecx
    78a5:	53                   	push   %ebx
    78a6:	ff 10                	call   *(%eax)
    78a8:	83 c4 10             	add    $0x10,%esp
    78ab:	85 c0                	test   %eax,%eax
    78ad:	0f 85 b7 00 00 00    	jne    796a <struct_node_for_each+0x11a>
    78b3:	39 73 20             	cmp    %esi,0x20(%ebx)
    78b6:	0f 84 bc 00 00 00    	je     7978 <struct_node_for_each+0x128>
    78bc:	8d 4e 01             	lea    0x1(%esi),%ecx
    78bf:	8d 55 e0             	lea    -0x20(%ebp),%edx
    78c2:	89 d8                	mov    %ebx,%eax
    78c4:	e8 67 ef ff ff       	call   6830 <seq_node_field_offset.part.16>
    78c9:	85 c0                	test   %eax,%eax
    78cb:	0f 85 67 02 00 00    	jne    7b38 <struct_node_for_each+0x2e8>
    78d1:	8b 4b 14             	mov    0x14(%ebx),%ecx
    78d4:	85 c9                	test   %ecx,%ecx
    78d6:	0f 84 49 04 00 00    	je     7d25 <struct_node_for_each+0x4d5>
    78dc:	8b 41 04             	mov    0x4(%ecx),%eax
    78df:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    78e2:	40                   	inc    %eax
    78e3:	89 41 04             	mov    %eax,0x4(%ecx)
    78e6:	50                   	push   %eax
    78e7:	50                   	push   %eax
    78e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
    78eb:	2b 45 d0             	sub    -0x30(%ebp),%eax
    78ee:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
    78f1:	52                   	push   %edx
    78f2:	50                   	push   %eax
    78f3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    78f6:	8b 55 d0             	mov    -0x30(%ebp),%edx
    78f9:	50                   	push   %eax
    78fa:	8d 45 cc             	lea    -0x34(%ebp),%eax
    78fd:	52                   	push   %edx
    78fe:	51                   	push   %ecx
    78ff:	50                   	push   %eax
    7900:	e8 0b 50 00 00       	call   c910 <bithenge_new_subblob>
    7905:	83 c4 20             	add    $0x20,%esp
    7908:	85 c0                	test   %eax,%eax
    790a:	0f 85 28 02 00 00    	jne    7b38 <struct_node_for_each+0x2e8>
    7910:	8d 45 c0             	lea    -0x40(%ebp),%eax
    7913:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    7916:	50                   	push   %eax
    7917:	8b 7b 18             	mov    0x18(%ebx),%edi
    791a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    791d:	51                   	push   %ecx
    791e:	57                   	push   %edi
    791f:	50                   	push   %eax
    7920:	e8 cb 2b 00 00       	call   a4f0 <bithenge_transform_apply>
    7925:	89 45 b0             	mov    %eax,-0x50(%ebp)
    7928:	58                   	pop    %eax
    7929:	8b 45 cc             	mov    -0x34(%ebp),%eax
    792c:	50                   	push   %eax
    792d:	e8 ee 3c 00 00       	call   b620 <bithenge_node_dec_ref>
    7932:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    7935:	83 c4 10             	add    $0x10,%esp
    7938:	8b 45 b0             	mov    -0x50(%ebp),%eax
    793b:	85 c9                	test   %ecx,%ecx
    793d:	74 23                	je     7962 <struct_node_for_each+0x112>
    793f:	8b 11                	mov    (%ecx),%edx
    7941:	89 d7                	mov    %edx,%edi
    7943:	85 d2                	test   %edx,%edx
    7945:	0f 84 10 04 00 00    	je     7d5b <struct_node_for_each+0x50b>
    794b:	8b 51 04             	mov    0x4(%ecx),%edx
    794e:	85 d2                	test   %edx,%edx
    7950:	0f 84 f3 03 00 00    	je     7d49 <struct_node_for_each+0x4f9>
    7956:	4a                   	dec    %edx
    7957:	89 51 04             	mov    %edx,0x4(%ecx)
    795a:	85 d2                	test   %edx,%edx
    795c:	0f 84 96 02 00 00    	je     7bf8 <struct_node_for_each+0x3a8>
    7962:	85 c0                	test   %eax,%eax
    7964:	0f 84 ec 00 00 00    	je     7a56 <struct_node_for_each+0x206>
    796a:	8d 65 f4             	lea    -0xc(%ebp),%esp
    796d:	5b                   	pop    %ebx
    796e:	5e                   	pop    %esi
    796f:	5f                   	pop    %edi
    7970:	5d                   	pop    %ebp
    7971:	c3                   	ret    
    7972:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    7978:	8b 43 14             	mov    0x14(%ebx),%eax
    797b:	85 c0                	test   %eax,%eax
    797d:	0f 84 a2 03 00 00    	je     7d25 <struct_node_for_each+0x4d5>
    7983:	8b 50 04             	mov    0x4(%eax),%edx
    7986:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    7989:	42                   	inc    %edx
    798a:	8b 7d d0             	mov    -0x30(%ebp),%edi
    798d:	89 50 04             	mov    %edx,0x4(%eax)
    7990:	51                   	push   %ecx
    7991:	57                   	push   %edi
    7992:	50                   	push   %eax
    7993:	8d 45 c8             	lea    -0x38(%ebp),%eax
    7996:	50                   	push   %eax
    7997:	e8 b4 4d 00 00       	call   c750 <bithenge_new_offset_blob>
    799c:	83 c4 10             	add    $0x10,%esp
    799f:	85 c0                	test   %eax,%eax
    79a1:	0f 85 91 01 00 00    	jne    7b38 <struct_node_for_each+0x2e8>
    79a7:	80 7b 24 00          	cmpb   $0x0,0x24(%ebx)
    79ab:	0f 85 cf 01 00 00    	jne    7b80 <struct_node_for_each+0x330>
    79b1:	8b 45 c8             	mov    -0x38(%ebp),%eax
    79b4:	83 38 05             	cmpl   $0x5,(%eax)
    79b7:	0f 85 6d 03 00 00    	jne    7d2a <struct_node_for_each+0x4da>
    79bd:	83 ec 0c             	sub    $0xc,%esp
    79c0:	8d 55 d8             	lea    -0x28(%ebp),%edx
    79c3:	8b 4b 18             	mov    0x18(%ebx),%ecx
    79c6:	8b 7d c4             	mov    -0x3c(%ebp),%edi
    79c9:	52                   	push   %edx
    79ca:	8d 55 c0             	lea    -0x40(%ebp),%edx
    79cd:	52                   	push   %edx
    79ce:	50                   	push   %eax
    79cf:	51                   	push   %ecx
    79d0:	57                   	push   %edi
    79d1:	e8 fa 27 00 00       	call   a1d0 <bithenge_transform_prefix_apply>
    79d6:	83 c4 14             	add    $0x14,%esp
    79d9:	89 45 b0             	mov    %eax,-0x50(%ebp)
    79dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
    79df:	50                   	push   %eax
    79e0:	e8 3b 3c 00 00       	call   b620 <bithenge_node_dec_ref>
    79e5:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    79e8:	83 c4 10             	add    $0x10,%esp
    79eb:	8b 45 b0             	mov    -0x50(%ebp),%eax
    79ee:	85 c9                	test   %ecx,%ecx
    79f0:	74 2c                	je     7a1e <struct_node_for_each+0x1ce>
    79f2:	8b 11                	mov    (%ecx),%edx
    79f4:	89 d7                	mov    %edx,%edi
    79f6:	85 d2                	test   %edx,%edx
    79f8:	0f 84 5d 03 00 00    	je     7d5b <struct_node_for_each+0x50b>
    79fe:	8b 51 04             	mov    0x4(%ecx),%edx
    7a01:	85 d2                	test   %edx,%edx
    7a03:	0f 84 40 03 00 00    	je     7d49 <struct_node_for_each+0x4f9>
    7a09:	4a                   	dec    %edx
    7a0a:	89 51 04             	mov    %edx,0x4(%ecx)
    7a0d:	85 d2                	test   %edx,%edx
    7a0f:	75 0d                	jne    7a1e <struct_node_for_each+0x1ce>
    7a11:	83 ec 0c             	sub    $0xc,%esp
    7a14:	51                   	push   %ecx
    7a15:	ff 57 0c             	call   *0xc(%edi)
    7a18:	83 c4 10             	add    $0x10,%esp
    7a1b:	8b 45 b0             	mov    -0x50(%ebp),%eax
    7a1e:	85 c0                	test   %eax,%eax
    7a20:	0f 85 44 ff ff ff    	jne    796a <struct_node_for_each+0x11a>
    7a26:	8b 43 2c             	mov    0x2c(%ebx),%eax
    7a29:	8b 53 28             	mov    0x28(%ebx),%edx
    7a2c:	21 d0                	and    %edx,%eax
    7a2e:	40                   	inc    %eax
    7a2f:	0f 84 78 02 00 00    	je     7cad <struct_node_for_each+0x45d>
    7a35:	8b 43 1c             	mov    0x1c(%ebx),%eax
    7a38:	89 c7                	mov    %eax,%edi
    7a3a:	8b 4b 20             	mov    0x20(%ebx),%ecx
    7a3d:	8b 55 dc             	mov    -0x24(%ebp),%edx
    7a40:	8d 41 01             	lea    0x1(%ecx),%eax
    7a43:	89 43 20             	mov    %eax,0x20(%ebx)
    7a46:	8b 45 d8             	mov    -0x28(%ebp),%eax
    7a49:	03 45 d0             	add    -0x30(%ebp),%eax
    7a4c:	13 55 d4             	adc    -0x2c(%ebp),%edx
    7a4f:	89 04 cf             	mov    %eax,(%edi,%ecx,8)
    7a52:	89 54 cf 04          	mov    %edx,0x4(%edi,%ecx,8)
    7a56:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    7a59:	8b 04 f0             	mov    (%eax,%esi,8),%eax
    7a5c:	85 c0                	test   %eax,%eax
    7a5e:	74 68                	je     7ac8 <struct_node_for_each+0x278>
    7a60:	52                   	push   %edx
    7a61:	6a 00                	push   $0x0
    7a63:	50                   	push   %eax
    7a64:	8d 45 e0             	lea    -0x20(%ebp),%eax
    7a67:	50                   	push   %eax
    7a68:	e8 33 40 00 00       	call   baa0 <bithenge_new_string_node>
    7a6d:	83 c4 10             	add    $0x10,%esp
    7a70:	85 c0                	test   %eax,%eax
    7a72:	0f 84 98 00 00 00    	je     7b10 <struct_node_for_each+0x2c0>
    7a78:	8b 55 c0             	mov    -0x40(%ebp),%edx
    7a7b:	83 ec 0c             	sub    $0xc,%esp
    7a7e:	89 45 b0             	mov    %eax,-0x50(%ebp)
    7a81:	52                   	push   %edx
    7a82:	e8 99 3b 00 00       	call   b620 <bithenge_node_dec_ref>
    7a87:	8b 45 b0             	mov    -0x50(%ebp),%eax
    7a8a:	83 c4 10             	add    $0x10,%esp
    7a8d:	85 c0                	test   %eax,%eax
    7a8f:	0f 85 d5 fe ff ff    	jne    796a <struct_node_for_each+0x11a>
    7a95:	83 45 a8 01          	addl   $0x1,-0x58(%ebp)
    7a99:	83 55 ac 00          	adcl   $0x0,-0x54(%ebp)
    7a9d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    7aa0:	46                   	inc    %esi
    7aa1:	8b 44 f0 04          	mov    0x4(%eax,%esi,8),%eax
    7aa5:	85 c0                	test   %eax,%eax
    7aa7:	0f 85 d3 fd ff ff    	jne    7880 <struct_node_for_each+0x30>
    7aad:	80 7b 34 00          	cmpb   $0x0,0x34(%ebx)
    7ab1:	0f 84 81 01 00 00    	je     7c38 <struct_node_for_each+0x3e8>
    7ab7:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7aba:	31 c0                	xor    %eax,%eax
    7abc:	5b                   	pop    %ebx
    7abd:	5e                   	pop    %esi
    7abe:	5f                   	pop    %edi
    7abf:	5d                   	pop    %ebp
    7ac0:	c3                   	ret    
    7ac1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    7ac8:	8b 45 c0             	mov    -0x40(%ebp),%eax
    7acb:	83 38 01             	cmpl   $0x1,(%eax)
    7ace:	0f 84 44 01 00 00    	je     7c18 <struct_node_for_each+0x3c8>
    7ad4:	83 ec 0c             	sub    $0xc,%esp
    7ad7:	50                   	push   %eax
    7ad8:	e8 43 3b 00 00       	call   b620 <bithenge_node_dec_ref>
    7add:	83 c4 10             	add    $0x10,%esp
    7ae0:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7ae3:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    7ae8:	5b                   	pop    %ebx
    7ae9:	5e                   	pop    %esi
    7aea:	5f                   	pop    %edi
    7aeb:	5d                   	pop    %ebp
    7aec:	c3                   	ret    
    7aed:	8d 76 00             	lea    0x0(%esi),%esi
    7af0:	89 f1                	mov    %esi,%ecx
    7af2:	8d 55 d0             	lea    -0x30(%ebp),%edx
    7af5:	89 d8                	mov    %ebx,%eax
    7af7:	e8 34 ed ff ff       	call   6830 <seq_node_field_offset.part.16>
    7afc:	85 c0                	test   %eax,%eax
    7afe:	0f 85 66 fe ff ff    	jne    796a <struct_node_for_each+0x11a>
    7b04:	e9 8d fd ff ff       	jmp    7896 <struct_node_for_each+0x46>
    7b09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    7b10:	50                   	push   %eax
    7b11:	8b 45 10             	mov    0x10(%ebp),%eax
    7b14:	50                   	push   %eax
    7b15:	8b 45 c0             	mov    -0x40(%ebp),%eax
    7b18:	50                   	push   %eax
    7b19:	8b 45 e0             	mov    -0x20(%ebp),%eax
    7b1c:	50                   	push   %eax
    7b1d:	ff 55 0c             	call   *0xc(%ebp)
    7b20:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
    7b27:	83 c4 10             	add    $0x10,%esp
    7b2a:	31 d2                	xor    %edx,%edx
    7b2c:	e9 4a ff ff ff       	jmp    7a7b <struct_node_for_each+0x22b>
    7b31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    7b38:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    7b3b:	85 c9                	test   %ecx,%ecx
    7b3d:	0f 84 27 fe ff ff    	je     796a <struct_node_for_each+0x11a>
    7b43:	8b 19                	mov    (%ecx),%ebx
    7b45:	85 db                	test   %ebx,%ebx
    7b47:	0f 84 0e 02 00 00    	je     7d5b <struct_node_for_each+0x50b>
    7b4d:	8b 51 04             	mov    0x4(%ecx),%edx
    7b50:	85 d2                	test   %edx,%edx
    7b52:	0f 84 f1 01 00 00    	je     7d49 <struct_node_for_each+0x4f9>
    7b58:	4a                   	dec    %edx
    7b59:	89 51 04             	mov    %edx,0x4(%ecx)
    7b5c:	85 d2                	test   %edx,%edx
    7b5e:	0f 85 06 fe ff ff    	jne    796a <struct_node_for_each+0x11a>
    7b64:	83 ec 0c             	sub    $0xc,%esp
    7b67:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    7b6a:	51                   	push   %ecx
    7b6b:	ff 53 0c             	call   *0xc(%ebx)
    7b6e:	83 c4 10             	add    $0x10,%esp
    7b71:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    7b74:	e9 f1 fd ff ff       	jmp    796a <struct_node_for_each+0x11a>
    7b79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    7b80:	8b 45 c8             	mov    -0x38(%ebp),%eax
    7b83:	83 38 05             	cmpl   $0x5,(%eax)
    7b86:	0f 85 9e 01 00 00    	jne    7d2a <struct_node_for_each+0x4da>
    7b8c:	8b 50 08             	mov    0x8(%eax),%edx
    7b8f:	85 d2                	test   %edx,%edx
    7b91:	0f 84 79 01 00 00    	je     7d10 <struct_node_for_each+0x4c0>
    7b97:	51                   	push   %ecx
    7b98:	51                   	push   %ecx
    7b99:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    7b9c:	51                   	push   %ecx
    7b9d:	50                   	push   %eax
    7b9e:	ff 12                	call   *(%edx)
    7ba0:	83 c4 10             	add    $0x10,%esp
    7ba3:	8b 55 e0             	mov    -0x20(%ebp),%edx
    7ba6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    7ba9:	85 c0                	test   %eax,%eax
    7bab:	0f 84 df 00 00 00    	je     7c90 <struct_node_for_each+0x440>
    7bb1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
    7bb4:	85 d2                	test   %edx,%edx
    7bb6:	74 21                	je     7bd9 <struct_node_for_each+0x389>
    7bb8:	8b 1a                	mov    (%edx),%ebx
    7bba:	85 db                	test   %ebx,%ebx
    7bbc:	0f 84 99 01 00 00    	je     7d5b <struct_node_for_each+0x50b>
    7bc2:	8b 4a 04             	mov    0x4(%edx),%ecx
    7bc5:	85 c9                	test   %ecx,%ecx
    7bc7:	0f 84 7c 01 00 00    	je     7d49 <struct_node_for_each+0x4f9>
    7bcd:	49                   	dec    %ecx
    7bce:	89 4a 04             	mov    %ecx,0x4(%edx)
    7bd1:	85 c9                	test   %ecx,%ecx
    7bd3:	0f 84 fb 00 00 00    	je     7cd4 <struct_node_for_each+0x484>
    7bd9:	83 ec 0c             	sub    $0xc,%esp
    7bdc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    7bdf:	8b 45 c8             	mov    -0x38(%ebp),%eax
    7be2:	50                   	push   %eax
    7be3:	e8 38 3a 00 00       	call   b620 <bithenge_node_dec_ref>
    7be8:	83 c4 10             	add    $0x10,%esp
    7beb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    7bee:	e9 77 fd ff ff       	jmp    796a <struct_node_for_each+0x11a>
    7bf3:	90                   	nop
    7bf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    7bf8:	83 ec 0c             	sub    $0xc,%esp
    7bfb:	51                   	push   %ecx
    7bfc:	ff 57 0c             	call   *0xc(%edi)
    7bff:	8b 45 b0             	mov    -0x50(%ebp),%eax
    7c02:	83 c4 10             	add    $0x10,%esp
    7c05:	85 c0                	test   %eax,%eax
    7c07:	0f 85 5d fd ff ff    	jne    796a <struct_node_for_each+0x11a>
    7c0d:	e9 44 fe ff ff       	jmp    7a56 <struct_node_for_each+0x206>
    7c12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    7c18:	52                   	push   %edx
    7c19:	8b 4d 10             	mov    0x10(%ebp),%ecx
    7c1c:	8b 50 08             	mov    0x8(%eax),%edx
    7c1f:	8b 7d 0c             	mov    0xc(%ebp),%edi
    7c22:	51                   	push   %ecx
    7c23:	57                   	push   %edi
    7c24:	50                   	push   %eax
    7c25:	ff 12                	call   *(%edx)
    7c27:	8b 55 c0             	mov    -0x40(%ebp),%edx
    7c2a:	83 c4 10             	add    $0x10,%esp
    7c2d:	e9 49 fe ff ff       	jmp    7a7b <struct_node_for_each+0x22b>
    7c32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    7c38:	8b 43 14             	mov    0x14(%ebx),%eax
    7c3b:	85 c0                	test   %eax,%eax
    7c3d:	0f 84 01 01 00 00    	je     7d44 <struct_node_for_each+0x4f4>
    7c43:	8b 50 08             	mov    0x8(%eax),%edx
    7c46:	85 d2                	test   %edx,%edx
    7c48:	0f 84 e1 00 00 00    	je     7d2f <struct_node_for_each+0x4df>
    7c4e:	8d 4d d8             	lea    -0x28(%ebp),%ecx
    7c51:	56                   	push   %esi
    7c52:	56                   	push   %esi
    7c53:	51                   	push   %ecx
    7c54:	50                   	push   %eax
    7c55:	ff 12                	call   *(%edx)
    7c57:	83 c4 10             	add    $0x10,%esp
    7c5a:	85 c0                	test   %eax,%eax
    7c5c:	0f 85 08 fd ff ff    	jne    796a <struct_node_for_each+0x11a>
    7c62:	8b 4b 28             	mov    0x28(%ebx),%ecx
    7c65:	85 c9                	test   %ecx,%ecx
    7c67:	0f 85 86 00 00 00    	jne    7cf3 <struct_node_for_each+0x4a3>
    7c6d:	31 c0                	xor    %eax,%eax
    7c6f:	31 d2                	xor    %edx,%edx
    7c71:	8b 4d d8             	mov    -0x28(%ebp),%ecx
    7c74:	8b 5d dc             	mov    -0x24(%ebp),%ebx
    7c77:	31 c8                	xor    %ecx,%eax
    7c79:	31 da                	xor    %ebx,%edx
    7c7b:	09 c2                	or     %eax,%edx
    7c7d:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    7c82:	0f 85 e2 fc ff ff    	jne    796a <struct_node_for_each+0x11a>
    7c88:	e9 2a fe ff ff       	jmp    7ab7 <struct_node_for_each+0x267>
    7c8d:	8d 76 00             	lea    0x0(%esi),%esi
    7c90:	09 d1                	or     %edx,%ecx
    7c92:	0f 85 19 fd ff ff    	jne    79b1 <struct_node_for_each+0x161>
    7c98:	8b 43 20             	mov    0x20(%ebx),%eax
    7c9b:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%ebx)
    7ca2:	89 43 28             	mov    %eax,0x28(%ebx)
    7ca5:	83 c8 ff             	or     $0xffffffff,%eax
    7ca8:	e9 04 ff ff ff       	jmp    7bb1 <struct_node_for_each+0x361>
    7cad:	51                   	push   %ecx
    7cae:	51                   	push   %ecx
    7caf:	8b 43 20             	mov    0x20(%ebx),%eax
    7cb2:	8b 7b 1c             	mov    0x1c(%ebx),%edi
    7cb5:	8d 04 c5 08 00 00 00 	lea    0x8(,%eax,8),%eax
    7cbc:	50                   	push   %eax
    7cbd:	57                   	push   %edi
    7cbe:	e8 dd a2 00 00       	call   11fa0 <realloc@plt>
    7cc3:	83 c4 10             	add    $0x10,%esp
    7cc6:	89 c7                	mov    %eax,%edi
    7cc8:	85 c0                	test   %eax,%eax
    7cca:	74 1d                	je     7ce9 <struct_node_for_each+0x499>
    7ccc:	89 43 1c             	mov    %eax,0x1c(%ebx)
    7ccf:	e9 66 fd ff ff       	jmp    7a3a <struct_node_for_each+0x1ea>
    7cd4:	83 ec 0c             	sub    $0xc,%esp
    7cd7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    7cda:	52                   	push   %edx
    7cdb:	ff 53 0c             	call   *0xc(%ebx)
    7cde:	83 c4 10             	add    $0x10,%esp
    7ce1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
    7ce4:	e9 f0 fe ff ff       	jmp    7bd9 <struct_node_for_each+0x389>
    7ce9:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    7cee:	e9 77 fc ff ff       	jmp    796a <struct_node_for_each+0x11a>
    7cf3:	8d 55 e0             	lea    -0x20(%ebp),%edx
    7cf6:	89 d8                	mov    %ebx,%eax
    7cf8:	e8 33 eb ff ff       	call   6830 <seq_node_field_offset.part.16>
    7cfd:	85 c0                	test   %eax,%eax
    7cff:	0f 85 65 fc ff ff    	jne    796a <struct_node_for_each+0x11a>
    7d05:	8b 45 e0             	mov    -0x20(%ebp),%eax
    7d08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    7d0b:	e9 61 ff ff ff       	jmp    7c71 <struct_node_for_each+0x421>
    7d10:	53                   	push   %ebx
    7d11:	68 c3 00 00 00       	push   $0xc3
    7d16:	68 05 12 01 00       	push   $0x11205
    7d1b:	68 1d 12 01 00       	push   $0x1121d
    7d20:	e8 eb a1 00 00       	call   11f10 <assert_abort@plt>
    7d25:	e8 f6 e2 ff ff       	call   6020 <bithenge_node_inc_ref.part.2>
    7d2a:	e8 11 e3 ff ff       	call   6040 <bithenge_node_as_blob.part.8>
    7d2f:	57                   	push   %edi
    7d30:	68 80 00 00 00       	push   $0x80
    7d35:	68 05 12 01 00       	push   $0x11205
    7d3a:	68 1d 12 01 00       	push   $0x1121d
    7d3f:	e8 cc a1 00 00       	call   11f10 <assert_abort@plt>
    7d44:	e8 39 0d 00 00       	call   8a82 <bithenge_blob_size.part.6>
    7d49:	56                   	push   %esi
    7d4a:	6a 75                	push   $0x75
    7d4c:	68 18 13 01 00       	push   $0x11318
    7d51:	68 6b 11 01 00       	push   $0x1116b
    7d56:	e8 b5 a1 00 00       	call   11f10 <assert_abort@plt>
    7d5b:	57                   	push   %edi
    7d5c:	6a 74                	push   $0x74
    7d5e:	68 18 13 01 00       	push   $0x11318
    7d63:	68 61 11 01 00       	push   $0x11161
    7d68:	e8 a3 a1 00 00       	call   11f10 <assert_abort@plt>
    7d6d:	8d 76 00             	lea    0x0(%esi),%esi

00007d70 <seq_node_subtransform>:
    7d70:	55                   	push   %ebp
    7d71:	89 e5                	mov    %esp,%ebp
    7d73:	57                   	push   %edi
    7d74:	56                   	push   %esi
    7d75:	53                   	push   %ebx
    7d76:	83 ec 4c             	sub    $0x4c,%esp
    7d79:	89 c3                	mov    %eax,%ebx
    7d7b:	89 d6                	mov    %edx,%esi
    7d7d:	89 cf                	mov    %ecx,%edi
    7d7f:	85 c9                	test   %ecx,%ecx
    7d81:	0f 85 e1 00 00 00    	jne    7e68 <seq_node_subtransform+0xf8>
    7d87:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    7d8e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    7d95:	8b 4b 10             	mov    0x10(%ebx),%ecx
    7d98:	31 d2                	xor    %edx,%edx
    7d9a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
    7d9d:	52                   	push   %edx
    7d9e:	57                   	push   %edi
    7d9f:	50                   	push   %eax
    7da0:	53                   	push   %ebx
    7da1:	ff 11                	call   *(%ecx)
    7da3:	83 c4 10             	add    $0x10,%esp
    7da6:	89 c2                	mov    %eax,%edx
    7da8:	85 c0                	test   %eax,%eax
    7daa:	0f 85 ae 00 00 00    	jne    7e5e <seq_node_subtransform+0xee>
    7db0:	3b 7b 20             	cmp    0x20(%ebx),%edi
    7db3:	0f 84 cf 00 00 00    	je     7e88 <seq_node_subtransform+0x118>
    7db9:	47                   	inc    %edi
    7dba:	89 f9                	mov    %edi,%ecx
    7dbc:	0f 85 96 01 00 00    	jne    7f58 <seq_node_subtransform+0x1e8>
    7dc2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    7dc9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    7dd0:	8b 4b 14             	mov    0x14(%ebx),%ecx
    7dd3:	85 c9                	test   %ecx,%ecx
    7dd5:	0f 84 c6 02 00 00    	je     80a1 <seq_node_subtransform+0x331>
    7ddb:	8b 79 04             	mov    0x4(%ecx),%edi
    7dde:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    7de1:	47                   	inc    %edi
    7de2:	89 79 04             	mov    %edi,0x4(%ecx)
    7de5:	50                   	push   %eax
    7de6:	50                   	push   %eax
    7de7:	8b 45 e0             	mov    -0x20(%ebp),%eax
    7dea:	2b 45 d0             	sub    -0x30(%ebp),%eax
    7ded:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
    7df0:	52                   	push   %edx
    7df1:	50                   	push   %eax
    7df2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    7df5:	50                   	push   %eax
    7df6:	8b 45 d0             	mov    -0x30(%ebp),%eax
    7df9:	50                   	push   %eax
    7dfa:	8d 45 cc             	lea    -0x34(%ebp),%eax
    7dfd:	51                   	push   %ecx
    7dfe:	50                   	push   %eax
    7dff:	e8 0c 4b 00 00       	call   c910 <bithenge_new_subblob>
    7e04:	83 c4 20             	add    $0x20,%esp
    7e07:	89 c2                	mov    %eax,%edx
    7e09:	85 c0                	test   %eax,%eax
    7e0b:	0f 85 5b 01 00 00    	jne    7f6c <seq_node_subtransform+0x1fc>
    7e11:	8b 53 18             	mov    0x18(%ebx),%edx
    7e14:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    7e17:	8b 45 cc             	mov    -0x34(%ebp),%eax
    7e1a:	56                   	push   %esi
    7e1b:	50                   	push   %eax
    7e1c:	52                   	push   %edx
    7e1d:	51                   	push   %ecx
    7e1e:	e8 cd 26 00 00       	call   a4f0 <bithenge_transform_apply>
    7e23:	8b 75 cc             	mov    -0x34(%ebp),%esi
    7e26:	5b                   	pop    %ebx
    7e27:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    7e2a:	56                   	push   %esi
    7e2b:	e8 f0 37 00 00       	call   b620 <bithenge_node_dec_ref>
    7e30:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    7e33:	83 c4 10             	add    $0x10,%esp
    7e36:	8b 55 b4             	mov    -0x4c(%ebp),%edx
    7e39:	85 c9                	test   %ecx,%ecx
    7e3b:	74 21                	je     7e5e <seq_node_subtransform+0xee>
    7e3d:	8b 19                	mov    (%ecx),%ebx
    7e3f:	85 db                	test   %ebx,%ebx
    7e41:	0f 84 48 02 00 00    	je     808f <seq_node_subtransform+0x31f>
    7e47:	8b 41 04             	mov    0x4(%ecx),%eax
    7e4a:	85 c0                	test   %eax,%eax
    7e4c:	0f 84 2b 02 00 00    	je     807d <seq_node_subtransform+0x30d>
    7e52:	48                   	dec    %eax
    7e53:	89 41 04             	mov    %eax,0x4(%ecx)
    7e56:	85 c0                	test   %eax,%eax
    7e58:	0f 84 3d 01 00 00    	je     7f9b <seq_node_subtransform+0x22b>
    7e5e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7e61:	89 d0                	mov    %edx,%eax
    7e63:	5b                   	pop    %ebx
    7e64:	5e                   	pop    %esi
    7e65:	5f                   	pop    %edi
    7e66:	5d                   	pop    %ebp
    7e67:	c3                   	ret    
    7e68:	8d 55 d0             	lea    -0x30(%ebp),%edx
    7e6b:	e8 c0 e9 ff ff       	call   6830 <seq_node_field_offset.part.16>
    7e70:	89 c2                	mov    %eax,%edx
    7e72:	85 c0                	test   %eax,%eax
    7e74:	0f 84 1b ff ff ff    	je     7d95 <seq_node_subtransform+0x25>
    7e7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7e7d:	89 d0                	mov    %edx,%eax
    7e7f:	5b                   	pop    %ebx
    7e80:	5e                   	pop    %esi
    7e81:	5f                   	pop    %edi
    7e82:	5d                   	pop    %ebp
    7e83:	c3                   	ret    
    7e84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    7e88:	8b 43 14             	mov    0x14(%ebx),%eax
    7e8b:	85 c0                	test   %eax,%eax
    7e8d:	0f 84 0e 02 00 00    	je     80a1 <seq_node_subtransform+0x331>
    7e93:	8b 50 04             	mov    0x4(%eax),%edx
    7e96:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    7e99:	42                   	inc    %edx
    7e9a:	8b 7d d0             	mov    -0x30(%ebp),%edi
    7e9d:	89 50 04             	mov    %edx,0x4(%eax)
    7ea0:	51                   	push   %ecx
    7ea1:	57                   	push   %edi
    7ea2:	50                   	push   %eax
    7ea3:	8d 45 c8             	lea    -0x38(%ebp),%eax
    7ea6:	50                   	push   %eax
    7ea7:	e8 a4 48 00 00       	call   c750 <bithenge_new_offset_blob>
    7eac:	83 c4 10             	add    $0x10,%esp
    7eaf:	89 c2                	mov    %eax,%edx
    7eb1:	85 c0                	test   %eax,%eax
    7eb3:	0f 85 b3 00 00 00    	jne    7f6c <seq_node_subtransform+0x1fc>
    7eb9:	80 7b 24 00          	cmpb   $0x0,0x24(%ebx)
    7ebd:	0f 84 ed 00 00 00    	je     7fb0 <seq_node_subtransform+0x240>
    7ec3:	8b 45 c8             	mov    -0x38(%ebp),%eax
    7ec6:	83 38 05             	cmpl   $0x5,(%eax)
    7ec9:	0f 85 ec 01 00 00    	jne    80bb <seq_node_subtransform+0x34b>
    7ecf:	8b 50 08             	mov    0x8(%eax),%edx
    7ed2:	85 d2                	test   %edx,%edx
    7ed4:	0f 84 cc 01 00 00    	je     80a6 <seq_node_subtransform+0x336>
    7eda:	51                   	push   %ecx
    7edb:	51                   	push   %ecx
    7edc:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    7edf:	51                   	push   %ecx
    7ee0:	50                   	push   %eax
    7ee1:	ff 12                	call   *(%edx)
    7ee3:	83 c4 10             	add    $0x10,%esp
    7ee6:	89 c2                	mov    %eax,%edx
    7ee8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    7eeb:	8b 45 e0             	mov    -0x20(%ebp),%eax
    7eee:	85 d2                	test   %edx,%edx
    7ef0:	75 18                	jne    7f0a <seq_node_subtransform+0x19a>
    7ef2:	09 c1                	or     %eax,%ecx
    7ef4:	0f 85 b6 00 00 00    	jne    7fb0 <seq_node_subtransform+0x240>
    7efa:	8b 43 20             	mov    0x20(%ebx),%eax
    7efd:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%ebx)
    7f04:	89 43 28             	mov    %eax,0x28(%ebx)
    7f07:	83 ca ff             	or     $0xffffffff,%edx
    7f0a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    7f0d:	85 c0                	test   %eax,%eax
    7f0f:	74 2d                	je     7f3e <seq_node_subtransform+0x1ce>
    7f11:	8b 18                	mov    (%eax),%ebx
    7f13:	85 db                	test   %ebx,%ebx
    7f15:	0f 84 74 01 00 00    	je     808f <seq_node_subtransform+0x31f>
    7f1b:	8b 48 04             	mov    0x4(%eax),%ecx
    7f1e:	85 c9                	test   %ecx,%ecx
    7f20:	0f 84 57 01 00 00    	je     807d <seq_node_subtransform+0x30d>
    7f26:	49                   	dec    %ecx
    7f27:	89 48 04             	mov    %ecx,0x4(%eax)
    7f2a:	85 c9                	test   %ecx,%ecx
    7f2c:	75 10                	jne    7f3e <seq_node_subtransform+0x1ce>
    7f2e:	83 ec 0c             	sub    $0xc,%esp
    7f31:	89 55 b4             	mov    %edx,-0x4c(%ebp)
    7f34:	50                   	push   %eax
    7f35:	ff 53 0c             	call   *0xc(%ebx)
    7f38:	83 c4 10             	add    $0x10,%esp
    7f3b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
    7f3e:	83 ec 0c             	sub    $0xc,%esp
    7f41:	8b 45 c8             	mov    -0x38(%ebp),%eax
    7f44:	89 55 b4             	mov    %edx,-0x4c(%ebp)
    7f47:	50                   	push   %eax
    7f48:	e8 d3 36 00 00       	call   b620 <bithenge_node_dec_ref>
    7f4d:	83 c4 10             	add    $0x10,%esp
    7f50:	8b 55 b4             	mov    -0x4c(%ebp),%edx
    7f53:	e9 06 ff ff ff       	jmp    7e5e <seq_node_subtransform+0xee>
    7f58:	8d 55 e0             	lea    -0x20(%ebp),%edx
    7f5b:	89 d8                	mov    %ebx,%eax
    7f5d:	e8 ce e8 ff ff       	call   6830 <seq_node_field_offset.part.16>
    7f62:	89 c2                	mov    %eax,%edx
    7f64:	85 c0                	test   %eax,%eax
    7f66:	0f 84 64 fe ff ff    	je     7dd0 <seq_node_subtransform+0x60>
    7f6c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    7f6f:	85 c9                	test   %ecx,%ecx
    7f71:	0f 84 e7 fe ff ff    	je     7e5e <seq_node_subtransform+0xee>
    7f77:	8b 19                	mov    (%ecx),%ebx
    7f79:	85 db                	test   %ebx,%ebx
    7f7b:	0f 84 0e 01 00 00    	je     808f <seq_node_subtransform+0x31f>
    7f81:	8b 41 04             	mov    0x4(%ecx),%eax
    7f84:	85 c0                	test   %eax,%eax
    7f86:	0f 84 f1 00 00 00    	je     807d <seq_node_subtransform+0x30d>
    7f8c:	48                   	dec    %eax
    7f8d:	89 41 04             	mov    %eax,0x4(%ecx)
    7f90:	85 c0                	test   %eax,%eax
    7f92:	0f 85 c6 fe ff ff    	jne    7e5e <seq_node_subtransform+0xee>
    7f98:	89 55 b4             	mov    %edx,-0x4c(%ebp)
    7f9b:	83 ec 0c             	sub    $0xc,%esp
    7f9e:	51                   	push   %ecx
    7f9f:	ff 53 0c             	call   *0xc(%ebx)
    7fa2:	83 c4 10             	add    $0x10,%esp
    7fa5:	8b 55 b4             	mov    -0x4c(%ebp),%edx
    7fa8:	e9 b1 fe ff ff       	jmp    7e5e <seq_node_subtransform+0xee>
    7fad:	8d 76 00             	lea    0x0(%esi),%esi
    7fb0:	8b 45 c8             	mov    -0x38(%ebp),%eax
    7fb3:	83 38 05             	cmpl   $0x5,(%eax)
    7fb6:	0f 85 ff 00 00 00    	jne    80bb <seq_node_subtransform+0x34b>
    7fbc:	83 ec 0c             	sub    $0xc,%esp
    7fbf:	8d 55 d8             	lea    -0x28(%ebp),%edx
    7fc2:	8b 7d c4             	mov    -0x3c(%ebp),%edi
    7fc5:	52                   	push   %edx
    7fc6:	56                   	push   %esi
    7fc7:	8b 73 18             	mov    0x18(%ebx),%esi
    7fca:	50                   	push   %eax
    7fcb:	56                   	push   %esi
    7fcc:	57                   	push   %edi
    7fcd:	e8 fe 21 00 00       	call   a1d0 <bithenge_transform_prefix_apply>
    7fd2:	83 c4 14             	add    $0x14,%esp
    7fd5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    7fd8:	8b 45 c8             	mov    -0x38(%ebp),%eax
    7fdb:	50                   	push   %eax
    7fdc:	e8 3f 36 00 00       	call   b620 <bithenge_node_dec_ref>
    7fe1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    7fe4:	83 c4 10             	add    $0x10,%esp
    7fe7:	8b 55 b4             	mov    -0x4c(%ebp),%edx
    7fea:	85 c9                	test   %ecx,%ecx
    7fec:	74 26                	je     8014 <seq_node_subtransform+0x2a4>
    7fee:	8b 31                	mov    (%ecx),%esi
    7ff0:	85 f6                	test   %esi,%esi
    7ff2:	0f 84 97 00 00 00    	je     808f <seq_node_subtransform+0x31f>
    7ff8:	8b 41 04             	mov    0x4(%ecx),%eax
    7ffb:	85 c0                	test   %eax,%eax
    7ffd:	74 7e                	je     807d <seq_node_subtransform+0x30d>
    7fff:	48                   	dec    %eax
    8000:	89 41 04             	mov    %eax,0x4(%ecx)
    8003:	85 c0                	test   %eax,%eax
    8005:	75 0d                	jne    8014 <seq_node_subtransform+0x2a4>
    8007:	83 ec 0c             	sub    $0xc,%esp
    800a:	51                   	push   %ecx
    800b:	ff 56 0c             	call   *0xc(%esi)
    800e:	83 c4 10             	add    $0x10,%esp
    8011:	8b 55 b4             	mov    -0x4c(%ebp),%edx
    8014:	85 d2                	test   %edx,%edx
    8016:	0f 85 42 fe ff ff    	jne    7e5e <seq_node_subtransform+0xee>
    801c:	8b 43 2c             	mov    0x2c(%ebx),%eax
    801f:	8b 4b 28             	mov    0x28(%ebx),%ecx
    8022:	21 c8                	and    %ecx,%eax
    8024:	40                   	inc    %eax
    8025:	74 24                	je     804b <seq_node_subtransform+0x2db>
    8027:	8b 43 1c             	mov    0x1c(%ebx),%eax
    802a:	8b 4b 20             	mov    0x20(%ebx),%ecx
    802d:	8b 7d dc             	mov    -0x24(%ebp),%edi
    8030:	8d 71 01             	lea    0x1(%ecx),%esi
    8033:	89 73 20             	mov    %esi,0x20(%ebx)
    8036:	8b 75 d8             	mov    -0x28(%ebp),%esi
    8039:	03 75 d0             	add    -0x30(%ebp),%esi
    803c:	13 7d d4             	adc    -0x2c(%ebp),%edi
    803f:	89 34 c8             	mov    %esi,(%eax,%ecx,8)
    8042:	89 7c c8 04          	mov    %edi,0x4(%eax,%ecx,8)
    8046:	e9 13 fe ff ff       	jmp    7e5e <seq_node_subtransform+0xee>
    804b:	50                   	push   %eax
    804c:	50                   	push   %eax
    804d:	8b 43 20             	mov    0x20(%ebx),%eax
    8050:	89 55 b4             	mov    %edx,-0x4c(%ebp)
    8053:	8d 04 c5 08 00 00 00 	lea    0x8(,%eax,8),%eax
    805a:	50                   	push   %eax
    805b:	8b 43 1c             	mov    0x1c(%ebx),%eax
    805e:	50                   	push   %eax
    805f:	e8 3c 9f 00 00       	call   11fa0 <realloc@plt>
    8064:	83 c4 10             	add    $0x10,%esp
    8067:	85 c0                	test   %eax,%eax
    8069:	74 08                	je     8073 <seq_node_subtransform+0x303>
    806b:	89 43 1c             	mov    %eax,0x1c(%ebx)
    806e:	8b 55 b4             	mov    -0x4c(%ebp),%edx
    8071:	eb b7                	jmp    802a <seq_node_subtransform+0x2ba>
    8073:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
    8078:	e9 e1 fd ff ff       	jmp    7e5e <seq_node_subtransform+0xee>
    807d:	56                   	push   %esi
    807e:	6a 75                	push   $0x75
    8080:	68 18 13 01 00       	push   $0x11318
    8085:	68 6b 11 01 00       	push   $0x1116b
    808a:	e8 81 9e 00 00       	call   11f10 <assert_abort@plt>
    808f:	57                   	push   %edi
    8090:	6a 74                	push   $0x74
    8092:	68 18 13 01 00       	push   $0x11318
    8097:	68 61 11 01 00       	push   $0x11161
    809c:	e8 6f 9e 00 00       	call   11f10 <assert_abort@plt>
    80a1:	e8 7a df ff ff       	call   6020 <bithenge_node_inc_ref.part.2>
    80a6:	53                   	push   %ebx
    80a7:	68 c3 00 00 00       	push   $0xc3
    80ac:	68 05 12 01 00       	push   $0x11205
    80b1:	68 1d 12 01 00       	push   $0x1121d
    80b6:	e8 55 9e 00 00       	call   11f10 <assert_abort@plt>
    80bb:	e8 80 df ff ff       	call   6040 <bithenge_node_as_blob.part.8>

000080c0 <struct_node_get>:
    80c0:	55                   	push   %ebp
    80c1:	89 e5                	mov    %esp,%ebp
    80c3:	57                   	push   %edi
    80c4:	56                   	push   %esi
    80c5:	53                   	push   %ebx
    80c6:	83 ec 2c             	sub    $0x2c,%esp
    80c9:	8b 45 0c             	mov    0xc(%ebp),%eax
    80cc:	83 38 04             	cmpl   $0x4,(%eax)
    80cf:	0f 85 c3 00 00 00    	jne    8198 <struct_node_get+0xd8>
    80d5:	8b 58 08             	mov    0x8(%eax),%ebx
    80d8:	8b 45 08             	mov    0x8(%ebp),%eax
    80db:	8b 40 30             	mov    0x30(%eax),%eax
    80de:	8b 70 0c             	mov    0xc(%eax),%esi
    80e1:	8b 4e 04             	mov    0x4(%esi),%ecx
    80e4:	85 c9                	test   %ecx,%ecx
    80e6:	0f 84 ac 00 00 00    	je     8198 <struct_node_get+0xd8>
    80ec:	31 ff                	xor    %edi,%edi
    80ee:	66 90                	xchg   %ax,%ax
    80f0:	8b 04 fe             	mov    (%esi,%edi,8),%eax
    80f3:	85 c0                	test   %eax,%eax
    80f5:	74 14                	je     810b <struct_node_get+0x4b>
    80f7:	52                   	push   %edx
    80f8:	52                   	push   %edx
    80f9:	50                   	push   %eax
    80fa:	53                   	push   %ebx
    80fb:	e8 c0 9e 00 00       	call   11fc0 <str_cmp@plt>
    8100:	83 c4 10             	add    $0x10,%esp
    8103:	85 c0                	test   %eax,%eax
    8105:	0f 84 95 00 00 00    	je     81a0 <struct_node_get+0xe0>
    810b:	47                   	inc    %edi
    810c:	8b 44 fe 04          	mov    0x4(%esi,%edi,8),%eax
    8110:	85 c0                	test   %eax,%eax
    8112:	75 dc                	jne    80f0 <struct_node_get+0x30>
    8114:	8b 46 04             	mov    0x4(%esi),%eax
    8117:	85 c0                	test   %eax,%eax
    8119:	74 7d                	je     8198 <struct_node_get+0xd8>
    811b:	31 db                	xor    %ebx,%ebx
    811d:	8b 7d 0c             	mov    0xc(%ebp),%edi
    8120:	eb 0f                	jmp    8131 <struct_node_get+0x71>
    8122:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    8128:	43                   	inc    %ebx
    8129:	8b 44 de 04          	mov    0x4(%esi,%ebx,8),%eax
    812d:	85 c0                	test   %eax,%eax
    812f:	74 67                	je     8198 <struct_node_get+0xd8>
    8131:	8b 04 de             	mov    (%esi,%ebx,8),%eax
    8134:	85 c0                	test   %eax,%eax
    8136:	75 f0                	jne    8128 <struct_node_get+0x68>
    8138:	89 d9                	mov    %ebx,%ecx
    813a:	8d 55 e4             	lea    -0x1c(%ebp),%edx
    813d:	8b 45 08             	mov    0x8(%ebp),%eax
    8140:	e8 2b fc ff ff       	call   7d70 <seq_node_subtransform>
    8145:	85 c0                	test   %eax,%eax
    8147:	75 33                	jne    817c <struct_node_get+0xbc>
    8149:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    814c:	83 38 01             	cmpl   $0x1,(%eax)
    814f:	75 5e                	jne    81af <struct_node_get+0xef>
    8151:	8b 57 04             	mov    0x4(%edi),%edx
    8154:	42                   	inc    %edx
    8155:	89 57 04             	mov    %edx,0x4(%edi)
    8158:	8b 55 10             	mov    0x10(%ebp),%edx
    815b:	51                   	push   %ecx
    815c:	52                   	push   %edx
    815d:	57                   	push   %edi
    815e:	50                   	push   %eax
    815f:	e8 6c 35 00 00       	call   b6d0 <bithenge_node_get>
    8164:	59                   	pop    %ecx
    8165:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    8168:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    816b:	50                   	push   %eax
    816c:	e8 af 34 00 00       	call   b620 <bithenge_node_dec_ref>
    8171:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    8174:	83 c4 10             	add    $0x10,%esp
    8177:	83 f8 ff             	cmp    $0xffffffff,%eax
    817a:	74 ac                	je     8128 <struct_node_get+0x68>
    817c:	83 ec 0c             	sub    $0xc,%esp
    817f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    8182:	8b 45 0c             	mov    0xc(%ebp),%eax
    8185:	50                   	push   %eax
    8186:	e8 95 34 00 00       	call   b620 <bithenge_node_dec_ref>
    818b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    818e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8191:	5b                   	pop    %ebx
    8192:	5e                   	pop    %esi
    8193:	5f                   	pop    %edi
    8194:	5d                   	pop    %ebp
    8195:	c3                   	ret    
    8196:	66 90                	xchg   %ax,%ax
    8198:	83 c8 ff             	or     $0xffffffff,%eax
    819b:	eb df                	jmp    817c <struct_node_get+0xbc>
    819d:	8d 76 00             	lea    0x0(%esi),%esi
    81a0:	89 f9                	mov    %edi,%ecx
    81a2:	8b 55 10             	mov    0x10(%ebp),%edx
    81a5:	8b 45 08             	mov    0x8(%ebp),%eax
    81a8:	e8 c3 fb ff ff       	call   7d70 <seq_node_subtransform>
    81ad:	eb cd                	jmp    817c <struct_node_get+0xbc>
    81af:	83 ec 0c             	sub    $0xc,%esp
    81b2:	50                   	push   %eax
    81b3:	e8 68 34 00 00       	call   b620 <bithenge_node_dec_ref>
    81b8:	83 c4 10             	add    $0x10,%esp
    81bb:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    81c0:	eb ba                	jmp    817c <struct_node_get+0xbc>
    81c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    81c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

000081d0 <do_while_node_for_each>:
    81d0:	55                   	push   %ebp
    81d1:	89 e5                	mov    %esp,%ebp
    81d3:	57                   	push   %edi
    81d4:	56                   	push   %esi
    81d5:	53                   	push   %ebx
    81d6:	83 ec 2c             	sub    $0x2c,%esp
    81d9:	31 f6                	xor    %esi,%esi
    81db:	8b 5d 08             	mov    0x8(%ebp),%ebx
    81de:	31 ff                	xor    %edi,%edi
    81e0:	e9 db 00 00 00       	jmp    82c0 <do_while_node_for_each+0xf0>
    81e5:	8d 76 00             	lea    0x0(%esi),%esi
    81e8:	50                   	push   %eax
    81e9:	8d 45 dc             	lea    -0x24(%ebp),%eax
    81ec:	57                   	push   %edi
    81ed:	56                   	push   %esi
    81ee:	50                   	push   %eax
    81ef:	e8 3c 38 00 00       	call   ba30 <bithenge_new_integer_node>
    81f4:	83 c4 10             	add    $0x10,%esp
    81f7:	85 c0                	test   %eax,%eax
    81f9:	0f 85 e1 00 00 00    	jne    82e0 <do_while_node_for_each+0x110>
    81ff:	8b 45 d8             	mov    -0x28(%ebp),%eax
    8202:	85 c0                	test   %eax,%eax
    8204:	0f 84 4e 01 00 00    	je     8358 <do_while_node_for_each+0x188>
    820a:	8b 50 04             	mov    0x4(%eax),%edx
    820d:	42                   	inc    %edx
    820e:	89 50 04             	mov    %edx,0x4(%eax)
    8211:	51                   	push   %ecx
    8212:	8b 55 10             	mov    0x10(%ebp),%edx
    8215:	8b 4d dc             	mov    -0x24(%ebp),%ecx
    8218:	52                   	push   %edx
    8219:	50                   	push   %eax
    821a:	51                   	push   %ecx
    821b:	ff 55 0c             	call   *0xc(%ebp)
    821e:	83 c4 10             	add    $0x10,%esp
    8221:	85 c0                	test   %eax,%eax
    8223:	0f 85 b7 00 00 00    	jne    82e0 <do_while_node_for_each+0x110>
    8229:	50                   	push   %eax
    822a:	50                   	push   %eax
    822b:	8b 43 18             	mov    0x18(%ebx),%eax
    822e:	50                   	push   %eax
    822f:	8d 45 e0             	lea    -0x20(%ebp),%eax
    8232:	50                   	push   %eax
    8233:	e8 38 29 00 00       	call   ab70 <bithenge_scope_new>
    8238:	83 c4 10             	add    $0x10,%esp
    823b:	85 c0                	test   %eax,%eax
    823d:	0f 85 9d 00 00 00    	jne    82e0 <do_while_node_for_each+0x110>
    8243:	8b 55 e0             	mov    -0x20(%ebp),%edx
    8246:	50                   	push   %eax
    8247:	50                   	push   %eax
    8248:	8b 45 d8             	mov    -0x28(%ebp),%eax
    824b:	50                   	push   %eax
    824c:	52                   	push   %edx
    824d:	e8 7e 2c 00 00       	call   aed0 <bithenge_scope_set_current_node>
    8252:	8b 45 e0             	mov    -0x20(%ebp),%eax
    8255:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    8258:	8b 43 30             	mov    0x30(%ebx),%eax
    825b:	83 c4 10             	add    $0x10,%esp
    825e:	85 c0                	test   %eax,%eax
    8260:	0f 84 e0 00 00 00    	je     8346 <do_while_node_for_each+0x176>
    8266:	8b 10                	mov    (%eax),%edx
    8268:	85 d2                	test   %edx,%edx
    826a:	0f 84 c4 00 00 00    	je     8334 <do_while_node_for_each+0x164>
    8270:	51                   	push   %ecx
    8271:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
    8274:	51                   	push   %ecx
    8275:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    8278:	51                   	push   %ecx
    8279:	50                   	push   %eax
    827a:	ff 12                	call   *(%edx)
    827c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    827f:	58                   	pop    %eax
    8280:	8b 45 e0             	mov    -0x20(%ebp),%eax
    8283:	50                   	push   %eax
    8284:	e8 57 29 00 00       	call   abe0 <bithenge_scope_dec_ref>
    8289:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    828c:	83 c4 10             	add    $0x10,%esp
    828f:	85 c0                	test   %eax,%eax
    8291:	75 41                	jne    82d4 <do_while_node_for_each+0x104>
    8293:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    8296:	83 3a 02             	cmpl   $0x2,(%edx)
    8299:	75 65                	jne    8300 <do_while_node_for_each+0x130>
    829b:	83 ec 0c             	sub    $0xc,%esp
    829e:	8a 4a 08             	mov    0x8(%edx),%cl
    82a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
    82a4:	88 4d d4             	mov    %cl,-0x2c(%ebp)
    82a7:	52                   	push   %edx
    82a8:	e8 73 33 00 00       	call   b620 <bithenge_node_dec_ref>
    82ad:	83 c4 10             	add    $0x10,%esp
    82b0:	8a 4d d4             	mov    -0x2c(%ebp),%cl
    82b3:	83 c6 01             	add    $0x1,%esi
    82b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
    82b9:	83 d7 00             	adc    $0x0,%edi
    82bc:	84 c9                	test   %cl,%cl
    82be:	74 60                	je     8320 <do_while_node_for_each+0x150>
    82c0:	89 f1                	mov    %esi,%ecx
    82c2:	8d 55 d8             	lea    -0x28(%ebp),%edx
    82c5:	89 d8                	mov    %ebx,%eax
    82c7:	e8 a4 fa ff ff       	call   7d70 <seq_node_subtransform>
    82cc:	85 c0                	test   %eax,%eax
    82ce:	0f 84 14 ff ff ff    	je     81e8 <do_while_node_for_each+0x18>
    82d4:	8d 65 f4             	lea    -0xc(%ebp),%esp
    82d7:	5b                   	pop    %ebx
    82d8:	5e                   	pop    %esi
    82d9:	5f                   	pop    %edi
    82da:	5d                   	pop    %ebp
    82db:	c3                   	ret    
    82dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    82e0:	83 ec 0c             	sub    $0xc,%esp
    82e3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
    82e6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    82e9:	51                   	push   %ecx
    82ea:	e8 31 33 00 00       	call   b620 <bithenge_node_dec_ref>
    82ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    82f2:	83 c4 10             	add    $0x10,%esp
    82f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
    82f8:	5b                   	pop    %ebx
    82f9:	5e                   	pop    %esi
    82fa:	5f                   	pop    %edi
    82fb:	5d                   	pop    %ebp
    82fc:	c3                   	ret    
    82fd:	8d 76 00             	lea    0x0(%esi),%esi
    8300:	83 ec 0c             	sub    $0xc,%esp
    8303:	52                   	push   %edx
    8304:	e8 17 33 00 00       	call   b620 <bithenge_node_dec_ref>
    8309:	83 c4 10             	add    $0x10,%esp
    830c:	8d 65 f4             	lea    -0xc(%ebp),%esp
    830f:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    8314:	5b                   	pop    %ebx
    8315:	5e                   	pop    %esi
    8316:	5f                   	pop    %edi
    8317:	5d                   	pop    %ebp
    8318:	c3                   	ret    
    8319:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    8320:	89 73 38             	mov    %esi,0x38(%ebx)
    8323:	89 7b 3c             	mov    %edi,0x3c(%ebx)
    8326:	89 73 28             	mov    %esi,0x28(%ebx)
    8329:	89 7b 2c             	mov    %edi,0x2c(%ebx)
    832c:	8d 65 f4             	lea    -0xc(%ebp),%esp
    832f:	5b                   	pop    %ebx
    8330:	5e                   	pop    %esi
    8331:	5f                   	pop    %edi
    8332:	5d                   	pop    %ebp
    8333:	c3                   	ret    
    8334:	50                   	push   %eax
    8335:	6a 5b                	push   $0x5b
    8337:	68 a3 13 01 00       	push   $0x113a3
    833c:	68 61 11 01 00       	push   $0x11161
    8341:	e8 ca 9b 00 00       	call   11f10 <assert_abort@plt>
    8346:	50                   	push   %eax
    8347:	6a 5a                	push   $0x5a
    8349:	68 a3 13 01 00       	push   $0x113a3
    834e:	68 35 13 01 00       	push   $0x11335
    8353:	e8 b8 9b 00 00       	call   11f10 <assert_abort@plt>
    8358:	53                   	push   %ebx
    8359:	6a 70                	push   $0x70
    835b:	68 50 12 01 00       	push   $0x11250
    8360:	68 98 14 01 00       	push   $0x11498
    8365:	e8 a6 9b 00 00       	call   11f10 <assert_abort@plt>
    836a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

00008370 <repeat_node_get>:
    8370:	55                   	push   %ebp
    8371:	89 e5                	mov    %esp,%ebp
    8373:	57                   	push   %edi
    8374:	56                   	push   %esi
    8375:	53                   	push   %ebx
    8376:	83 ec 3c             	sub    $0x3c,%esp
    8379:	8b 45 0c             	mov    0xc(%ebp),%eax
    837c:	8b 5d 08             	mov    0x8(%ebp),%ebx
    837f:	83 38 03             	cmpl   $0x3,(%eax)
    8382:	0f 85 40 02 00 00    	jne    85c8 <repeat_node_get+0x258>
    8388:	83 ec 0c             	sub    $0xc,%esp
    838b:	8b 70 0c             	mov    0xc(%eax),%esi
    838e:	8b 78 08             	mov    0x8(%eax),%edi
    8391:	50                   	push   %eax
    8392:	e8 89 32 00 00       	call   b620 <bithenge_node_dec_ref>
    8397:	83 c4 10             	add    $0x10,%esp
    839a:	85 f6                	test   %esi,%esi
    839c:	78 11                	js     83af <repeat_node_get+0x3f>
    839e:	8b 53 34             	mov    0x34(%ebx),%edx
    83a1:	8b 43 38             	mov    0x38(%ebx),%eax
    83a4:	89 d1                	mov    %edx,%ecx
    83a6:	21 c1                	and    %eax,%ecx
    83a8:	41                   	inc    %ecx
    83a9:	74 1d                	je     83c8 <repeat_node_get+0x58>
    83ab:	39 c6                	cmp    %eax,%esi
    83ad:	7e 11                	jle    83c0 <repeat_node_get+0x50>
    83af:	83 ce ff             	or     $0xffffffff,%esi
    83b2:	8d 65 f4             	lea    -0xc(%ebp),%esp
    83b5:	89 f0                	mov    %esi,%eax
    83b7:	5b                   	pop    %ebx
    83b8:	5e                   	pop    %esi
    83b9:	5f                   	pop    %edi
    83ba:	5d                   	pop    %ebp
    83bb:	c3                   	ret    
    83bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    83c0:	7c 06                	jl     83c8 <repeat_node_get+0x58>
    83c2:	39 d7                	cmp    %edx,%edi
    83c4:	73 e9                	jae    83af <repeat_node_get+0x3f>
    83c6:	66 90                	xchg   %ax,%ax
    83c8:	85 ff                	test   %edi,%edi
    83ca:	0f 85 e8 00 00 00    	jne    84b8 <repeat_node_get+0x148>
    83d0:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    83d7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    83de:	8b 4b 10             	mov    0x10(%ebx),%ecx
    83e1:	31 d2                	xor    %edx,%edx
    83e3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
    83e6:	52                   	push   %edx
    83e7:	57                   	push   %edi
    83e8:	50                   	push   %eax
    83e9:	53                   	push   %ebx
    83ea:	ff 11                	call   *(%ecx)
    83ec:	83 c4 10             	add    $0x10,%esp
    83ef:	89 c6                	mov    %eax,%esi
    83f1:	85 c0                	test   %eax,%eax
    83f3:	75 bd                	jne    83b2 <repeat_node_get+0x42>
    83f5:	3b 7b 20             	cmp    0x20(%ebx),%edi
    83f8:	0f 84 da 00 00 00    	je     84d8 <repeat_node_get+0x168>
    83fe:	47                   	inc    %edi
    83ff:	89 f9                	mov    %edi,%ecx
    8401:	0f 85 99 01 00 00    	jne    85a0 <repeat_node_get+0x230>
    8407:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    840e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    8415:	8b 4b 14             	mov    0x14(%ebx),%ecx
    8418:	85 c9                	test   %ecx,%ecx
    841a:	0f 84 a1 02 00 00    	je     86c1 <repeat_node_get+0x351>
    8420:	8b 41 04             	mov    0x4(%ecx),%eax
    8423:	8b 75 d0             	mov    -0x30(%ebp),%esi
    8426:	40                   	inc    %eax
    8427:	8b 7d d4             	mov    -0x2c(%ebp),%edi
    842a:	89 41 04             	mov    %eax,0x4(%ecx)
    842d:	50                   	push   %eax
    842e:	50                   	push   %eax
    842f:	8b 45 e0             	mov    -0x20(%ebp),%eax
    8432:	29 f0                	sub    %esi,%eax
    8434:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    8437:	19 fa                	sbb    %edi,%edx
    8439:	52                   	push   %edx
    843a:	50                   	push   %eax
    843b:	8d 45 cc             	lea    -0x34(%ebp),%eax
    843e:	57                   	push   %edi
    843f:	56                   	push   %esi
    8440:	51                   	push   %ecx
    8441:	50                   	push   %eax
    8442:	e8 c9 44 00 00       	call   c910 <bithenge_new_subblob>
    8447:	83 c4 20             	add    $0x20,%esp
    844a:	89 c6                	mov    %eax,%esi
    844c:	85 c0                	test   %eax,%eax
    844e:	0f 85 60 01 00 00    	jne    85b4 <repeat_node_get+0x244>
    8454:	8b 4b 18             	mov    0x18(%ebx),%ecx
    8457:	8b 55 cc             	mov    -0x34(%ebp),%edx
    845a:	8b 45 10             	mov    0x10(%ebp),%eax
    845d:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
    8460:	50                   	push   %eax
    8461:	52                   	push   %edx
    8462:	51                   	push   %ecx
    8463:	53                   	push   %ebx
    8464:	e8 87 20 00 00       	call   a4f0 <bithenge_transform_apply>
    8469:	5f                   	pop    %edi
    846a:	89 c6                	mov    %eax,%esi
    846c:	8b 45 cc             	mov    -0x34(%ebp),%eax
    846f:	50                   	push   %eax
    8470:	e8 ab 31 00 00       	call   b620 <bithenge_node_dec_ref>
    8475:	8b 55 c4             	mov    -0x3c(%ebp),%edx
    8478:	83 c4 10             	add    $0x10,%esp
    847b:	85 d2                	test   %edx,%edx
    847d:	0f 84 2f ff ff ff    	je     83b2 <repeat_node_get+0x42>
    8483:	8b 0a                	mov    (%edx),%ecx
    8485:	85 c9                	test   %ecx,%ecx
    8487:	0f 84 4b 02 00 00    	je     86d8 <repeat_node_get+0x368>
    848d:	8b 42 04             	mov    0x4(%edx),%eax
    8490:	85 c0                	test   %eax,%eax
    8492:	0f 84 2e 02 00 00    	je     86c6 <repeat_node_get+0x356>
    8498:	48                   	dec    %eax
    8499:	89 42 04             	mov    %eax,0x4(%edx)
    849c:	85 c0                	test   %eax,%eax
    849e:	0f 85 0e ff ff ff    	jne    83b2 <repeat_node_get+0x42>
    84a4:	83 ec 0c             	sub    $0xc,%esp
    84a7:	52                   	push   %edx
    84a8:	ff 51 0c             	call   *0xc(%ecx)
    84ab:	83 c4 10             	add    $0x10,%esp
    84ae:	e9 ff fe ff ff       	jmp    83b2 <repeat_node_get+0x42>
    84b3:	90                   	nop
    84b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    84b8:	89 f9                	mov    %edi,%ecx
    84ba:	8d 55 d0             	lea    -0x30(%ebp),%edx
    84bd:	89 d8                	mov    %ebx,%eax
    84bf:	e8 6c e3 ff ff       	call   6830 <seq_node_field_offset.part.16>
    84c4:	89 c6                	mov    %eax,%esi
    84c6:	85 c0                	test   %eax,%eax
    84c8:	0f 84 10 ff ff ff    	je     83de <repeat_node_get+0x6e>
    84ce:	8d 65 f4             	lea    -0xc(%ebp),%esp
    84d1:	89 f0                	mov    %esi,%eax
    84d3:	5b                   	pop    %ebx
    84d4:	5e                   	pop    %esi
    84d5:	5f                   	pop    %edi
    84d6:	5d                   	pop    %ebp
    84d7:	c3                   	ret    
    84d8:	8b 43 14             	mov    0x14(%ebx),%eax
    84db:	85 c0                	test   %eax,%eax
    84dd:	0f 84 de 01 00 00    	je     86c1 <repeat_node_get+0x351>
    84e3:	8b 50 04             	mov    0x4(%eax),%edx
    84e6:	8b 75 d0             	mov    -0x30(%ebp),%esi
    84e9:	42                   	inc    %edx
    84ea:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    84ed:	89 50 04             	mov    %edx,0x4(%eax)
    84f0:	51                   	push   %ecx
    84f1:	56                   	push   %esi
    84f2:	50                   	push   %eax
    84f3:	8d 45 c8             	lea    -0x38(%ebp),%eax
    84f6:	50                   	push   %eax
    84f7:	e8 54 42 00 00       	call   c750 <bithenge_new_offset_blob>
    84fc:	83 c4 10             	add    $0x10,%esp
    84ff:	89 c6                	mov    %eax,%esi
    8501:	85 c0                	test   %eax,%eax
    8503:	0f 85 ab 00 00 00    	jne    85b4 <repeat_node_get+0x244>
    8509:	80 7b 24 00          	cmpb   $0x0,0x24(%ebx)
    850d:	0f 84 cd 00 00 00    	je     85e0 <repeat_node_get+0x270>
    8513:	8b 45 c8             	mov    -0x38(%ebp),%eax
    8516:	83 38 05             	cmpl   $0x5,(%eax)
    8519:	0f 85 88 01 00 00    	jne    86a7 <repeat_node_get+0x337>
    851f:	8b 50 08             	mov    0x8(%eax),%edx
    8522:	85 d2                	test   %edx,%edx
    8524:	0f 84 82 01 00 00    	je     86ac <repeat_node_get+0x33c>
    852a:	51                   	push   %ecx
    852b:	51                   	push   %ecx
    852c:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    852f:	51                   	push   %ecx
    8530:	50                   	push   %eax
    8531:	ff 12                	call   *(%edx)
    8533:	83 c4 10             	add    $0x10,%esp
    8536:	89 c6                	mov    %eax,%esi
    8538:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    853b:	8b 45 e0             	mov    -0x20(%ebp),%eax
    853e:	85 f6                	test   %esi,%esi
    8540:	75 18                	jne    855a <repeat_node_get+0x1ea>
    8542:	09 c2                	or     %eax,%edx
    8544:	0f 85 96 00 00 00    	jne    85e0 <repeat_node_get+0x270>
    854a:	8b 43 20             	mov    0x20(%ebx),%eax
    854d:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%ebx)
    8554:	89 43 28             	mov    %eax,0x28(%ebx)
    8557:	83 ce ff             	or     $0xffffffff,%esi
    855a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    855d:	85 c0                	test   %eax,%eax
    855f:	74 27                	je     8588 <repeat_node_get+0x218>
    8561:	8b 08                	mov    (%eax),%ecx
    8563:	85 c9                	test   %ecx,%ecx
    8565:	0f 84 6d 01 00 00    	je     86d8 <repeat_node_get+0x368>
    856b:	8b 50 04             	mov    0x4(%eax),%edx
    856e:	85 d2                	test   %edx,%edx
    8570:	0f 84 50 01 00 00    	je     86c6 <repeat_node_get+0x356>
    8576:	4a                   	dec    %edx
    8577:	89 50 04             	mov    %edx,0x4(%eax)
    857a:	85 d2                	test   %edx,%edx
    857c:	75 0a                	jne    8588 <repeat_node_get+0x218>
    857e:	83 ec 0c             	sub    $0xc,%esp
    8581:	50                   	push   %eax
    8582:	ff 51 0c             	call   *0xc(%ecx)
    8585:	83 c4 10             	add    $0x10,%esp
    8588:	83 ec 0c             	sub    $0xc,%esp
    858b:	8b 45 c8             	mov    -0x38(%ebp),%eax
    858e:	50                   	push   %eax
    858f:	e8 8c 30 00 00       	call   b620 <bithenge_node_dec_ref>
    8594:	83 c4 10             	add    $0x10,%esp
    8597:	e9 16 fe ff ff       	jmp    83b2 <repeat_node_get+0x42>
    859c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    85a0:	8d 55 e0             	lea    -0x20(%ebp),%edx
    85a3:	89 d8                	mov    %ebx,%eax
    85a5:	e8 86 e2 ff ff       	call   6830 <seq_node_field_offset.part.16>
    85aa:	89 c6                	mov    %eax,%esi
    85ac:	85 c0                	test   %eax,%eax
    85ae:	0f 84 61 fe ff ff    	je     8415 <repeat_node_get+0xa5>
    85b4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
    85b7:	85 d2                	test   %edx,%edx
    85b9:	0f 85 c4 fe ff ff    	jne    8483 <repeat_node_get+0x113>
    85bf:	e9 ee fd ff ff       	jmp    83b2 <repeat_node_get+0x42>
    85c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    85c8:	83 ec 0c             	sub    $0xc,%esp
    85cb:	83 ce ff             	or     $0xffffffff,%esi
    85ce:	50                   	push   %eax
    85cf:	e8 4c 30 00 00       	call   b620 <bithenge_node_dec_ref>
    85d4:	83 c4 10             	add    $0x10,%esp
    85d7:	e9 d6 fd ff ff       	jmp    83b2 <repeat_node_get+0x42>
    85dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    85e0:	8b 45 c8             	mov    -0x38(%ebp),%eax
    85e3:	83 38 05             	cmpl   $0x5,(%eax)
    85e6:	0f 85 bb 00 00 00    	jne    86a7 <repeat_node_get+0x337>
    85ec:	83 ec 0c             	sub    $0xc,%esp
    85ef:	8d 55 d8             	lea    -0x28(%ebp),%edx
    85f2:	8b 73 18             	mov    0x18(%ebx),%esi
    85f5:	8b 4d 10             	mov    0x10(%ebp),%ecx
    85f8:	8b 7d c4             	mov    -0x3c(%ebp),%edi
    85fb:	52                   	push   %edx
    85fc:	51                   	push   %ecx
    85fd:	50                   	push   %eax
    85fe:	56                   	push   %esi
    85ff:	57                   	push   %edi
    8600:	e8 cb 1b 00 00       	call   a1d0 <bithenge_transform_prefix_apply>
    8605:	83 c4 14             	add    $0x14,%esp
    8608:	89 c6                	mov    %eax,%esi
    860a:	8b 45 c8             	mov    -0x38(%ebp),%eax
    860d:	50                   	push   %eax
    860e:	e8 0d 30 00 00       	call   b620 <bithenge_node_dec_ref>
    8613:	8b 55 c4             	mov    -0x3c(%ebp),%edx
    8616:	83 c4 10             	add    $0x10,%esp
    8619:	85 d2                	test   %edx,%edx
    861b:	74 27                	je     8644 <repeat_node_get+0x2d4>
    861d:	8b 0a                	mov    (%edx),%ecx
    861f:	85 c9                	test   %ecx,%ecx
    8621:	0f 84 b1 00 00 00    	je     86d8 <repeat_node_get+0x368>
    8627:	8b 42 04             	mov    0x4(%edx),%eax
    862a:	85 c0                	test   %eax,%eax
    862c:	0f 84 94 00 00 00    	je     86c6 <repeat_node_get+0x356>
    8632:	48                   	dec    %eax
    8633:	89 42 04             	mov    %eax,0x4(%edx)
    8636:	85 c0                	test   %eax,%eax
    8638:	75 0a                	jne    8644 <repeat_node_get+0x2d4>
    863a:	83 ec 0c             	sub    $0xc,%esp
    863d:	52                   	push   %edx
    863e:	ff 51 0c             	call   *0xc(%ecx)
    8641:	83 c4 10             	add    $0x10,%esp
    8644:	85 f6                	test   %esi,%esi
    8646:	0f 85 66 fd ff ff    	jne    83b2 <repeat_node_get+0x42>
    864c:	8b 43 2c             	mov    0x2c(%ebx),%eax
    864f:	8b 53 28             	mov    0x28(%ebx),%edx
    8652:	21 d0                	and    %edx,%eax
    8654:	40                   	inc    %eax
    8655:	74 24                	je     867b <repeat_node_get+0x30b>
    8657:	8b 43 1c             	mov    0x1c(%ebx),%eax
    865a:	8b 53 20             	mov    0x20(%ebx),%edx
    865d:	8d 4a 01             	lea    0x1(%edx),%ecx
    8660:	89 4b 20             	mov    %ecx,0x20(%ebx)
    8663:	8b 4d d8             	mov    -0x28(%ebp),%ecx
    8666:	03 4d d0             	add    -0x30(%ebp),%ecx
    8669:	8b 5d dc             	mov    -0x24(%ebp),%ebx
    866c:	13 5d d4             	adc    -0x2c(%ebp),%ebx
    866f:	89 0c d0             	mov    %ecx,(%eax,%edx,8)
    8672:	89 5c d0 04          	mov    %ebx,0x4(%eax,%edx,8)
    8676:	e9 37 fd ff ff       	jmp    83b2 <repeat_node_get+0x42>
    867b:	50                   	push   %eax
    867c:	50                   	push   %eax
    867d:	8b 43 20             	mov    0x20(%ebx),%eax
    8680:	8d 04 c5 08 00 00 00 	lea    0x8(,%eax,8),%eax
    8687:	50                   	push   %eax
    8688:	8b 43 1c             	mov    0x1c(%ebx),%eax
    868b:	50                   	push   %eax
    868c:	e8 0f 99 00 00       	call   11fa0 <realloc@plt>
    8691:	83 c4 10             	add    $0x10,%esp
    8694:	85 c0                	test   %eax,%eax
    8696:	74 05                	je     869d <repeat_node_get+0x32d>
    8698:	89 43 1c             	mov    %eax,0x1c(%ebx)
    869b:	eb bd                	jmp    865a <repeat_node_get+0x2ea>
    869d:	be fe ff ff ff       	mov    $0xfffffffe,%esi
    86a2:	e9 0b fd ff ff       	jmp    83b2 <repeat_node_get+0x42>
    86a7:	e8 94 d9 ff ff       	call   6040 <bithenge_node_as_blob.part.8>
    86ac:	53                   	push   %ebx
    86ad:	68 c3 00 00 00       	push   $0xc3
    86b2:	68 05 12 01 00       	push   $0x11205
    86b7:	68 1d 12 01 00       	push   $0x1121d
    86bc:	e8 4f 98 00 00       	call   11f10 <assert_abort@plt>
    86c1:	e8 5a d9 ff ff       	call   6020 <bithenge_node_inc_ref.part.2>
    86c6:	56                   	push   %esi
    86c7:	6a 75                	push   $0x75
    86c9:	68 18 13 01 00       	push   $0x11318
    86ce:	68 6b 11 01 00       	push   $0x1116b
    86d3:	e8 38 98 00 00       	call   11f10 <assert_abort@plt>
    86d8:	57                   	push   %edi
    86d9:	6a 74                	push   $0x74
    86db:	68 18 13 01 00       	push   $0x11318
    86e0:	68 61 11 01 00       	push   $0x11161
    86e5:	e8 26 98 00 00       	call   11f10 <assert_abort@plt>
    86ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

000086f0 <bithenge_new_struct>:
    86f0:	55                   	push   %ebp
    86f1:	89 e5                	mov    %esp,%ebp
    86f3:	57                   	push   %edi
    86f4:	56                   	push   %esi
    86f5:	53                   	push   %ebx
    86f6:	83 ec 28             	sub    $0x28,%esp
    86f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    86fc:	6a 14                	push   $0x14
    86fe:	e8 5d 97 00 00       	call   11e60 <malloc@plt>
    8703:	83 c4 10             	add    $0x10,%esp
    8706:	89 c6                	mov    %eax,%esi
    8708:	85 c0                	test   %eax,%eax
    870a:	0f 84 c8 00 00 00    	je     87d8 <bithenge_new_struct+0xe8>
    8710:	50                   	push   %eax
    8711:	6a 00                	push   $0x0
    8713:	68 20 3a 01 00       	push   $0x13a20
    8718:	56                   	push   %esi
    8719:	e8 42 1a 00 00       	call   a160 <bithenge_init_transform>
    871e:	83 c4 10             	add    $0x10,%esp
    8721:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    8724:	85 c0                	test   %eax,%eax
    8726:	74 78                	je     87a0 <bithenge_new_struct+0xb0>
    8728:	8b 43 04             	mov    0x4(%ebx),%eax
    872b:	89 df                	mov    %ebx,%edi
    872d:	85 c0                	test   %eax,%eax
    872f:	74 4d                	je     877e <bithenge_new_struct+0x8e>
    8731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    8738:	83 ec 0c             	sub    $0xc,%esp
    873b:	8b 07                	mov    (%edi),%eax
    873d:	50                   	push   %eax
    873e:	e8 ad 99 00 00       	call   120f0 <free@plt>
    8743:	8b 57 04             	mov    0x4(%edi),%edx
    8746:	83 c4 10             	add    $0x10,%esp
    8749:	85 d2                	test   %edx,%edx
    874b:	74 27                	je     8774 <bithenge_new_struct+0x84>
    874d:	8b 0a                	mov    (%edx),%ecx
    874f:	85 c9                	test   %ecx,%ecx
    8751:	0f 84 8d 00 00 00    	je     87e4 <bithenge_new_struct+0xf4>
    8757:	8b 42 04             	mov    0x4(%edx),%eax
    875a:	85 c0                	test   %eax,%eax
    875c:	0f 84 94 00 00 00    	je     87f6 <bithenge_new_struct+0x106>
    8762:	48                   	dec    %eax
    8763:	89 42 04             	mov    %eax,0x4(%edx)
    8766:	85 c0                	test   %eax,%eax
    8768:	75 0a                	jne    8774 <bithenge_new_struct+0x84>
    876a:	83 ec 0c             	sub    $0xc,%esp
    876d:	52                   	push   %edx
    876e:	ff 51 0c             	call   *0xc(%ecx)
    8771:	83 c4 10             	add    $0x10,%esp
    8774:	83 c7 08             	add    $0x8,%edi
    8777:	8b 47 04             	mov    0x4(%edi),%eax
    877a:	85 c0                	test   %eax,%eax
    877c:	75 ba                	jne    8738 <bithenge_new_struct+0x48>
    877e:	83 ec 0c             	sub    $0xc,%esp
    8781:	53                   	push   %ebx
    8782:	e8 69 99 00 00       	call   120f0 <free@plt>
    8787:	89 34 24             	mov    %esi,(%esp)
    878a:	e8 61 99 00 00       	call   120f0 <free@plt>
    878f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    8792:	83 c4 10             	add    $0x10,%esp
    8795:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8798:	5b                   	pop    %ebx
    8799:	5e                   	pop    %esi
    879a:	5f                   	pop    %edi
    879b:	5d                   	pop    %ebp
    879c:	c3                   	ret    
    879d:	8d 76 00             	lea    0x0(%esi),%esi
    87a0:	8b 7b 04             	mov    0x4(%ebx),%edi
    87a3:	89 5e 0c             	mov    %ebx,0xc(%esi)
    87a6:	c7 46 10 00 00 00 00 	movl   $0x0,0x10(%esi)
    87ad:	ba 01 00 00 00       	mov    $0x1,%edx
    87b2:	85 ff                	test   %edi,%edi
    87b4:	75 04                	jne    87ba <bithenge_new_struct+0xca>
    87b6:	eb 10                	jmp    87c8 <bithenge_new_struct+0xd8>
    87b8:	89 c2                	mov    %eax,%edx
    87ba:	8d 42 01             	lea    0x1(%edx),%eax
    87bd:	8b 4c c3 fc          	mov    -0x4(%ebx,%eax,8),%ecx
    87c1:	85 c9                	test   %ecx,%ecx
    87c3:	75 f3                	jne    87b8 <bithenge_new_struct+0xc8>
    87c5:	89 56 10             	mov    %edx,0x10(%esi)
    87c8:	8b 45 08             	mov    0x8(%ebp),%eax
    87cb:	89 30                	mov    %esi,(%eax)
    87cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    87d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
    87d3:	5b                   	pop    %ebx
    87d4:	5e                   	pop    %esi
    87d5:	5f                   	pop    %edi
    87d6:	5d                   	pop    %ebp
    87d7:	c3                   	ret    
    87d8:	c7 45 e4 fe ff ff ff 	movl   $0xfffffffe,-0x1c(%ebp)
    87df:	e9 44 ff ff ff       	jmp    8728 <bithenge_new_struct+0x38>
    87e4:	51                   	push   %ecx
    87e5:	6a 74                	push   $0x74
    87e7:	68 18 13 01 00       	push   $0x11318
    87ec:	68 61 11 01 00       	push   $0x11161
    87f1:	e8 1a 97 00 00       	call   11f10 <assert_abort@plt>
    87f6:	52                   	push   %edx
    87f7:	6a 75                	push   $0x75
    87f9:	68 18 13 01 00       	push   $0x11318
    87fe:	68 6b 11 01 00       	push   $0x1116b
    8803:	e8 08 97 00 00       	call   11f10 <assert_abort@plt>
    8808:	90                   	nop
    8809:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

00008810 <bithenge_repeat_transform>:
    8810:	55                   	push   %ebp
    8811:	89 e5                	mov    %esp,%ebp
    8813:	57                   	push   %edi
    8814:	56                   	push   %esi
    8815:	53                   	push   %ebx
    8816:	83 ec 28             	sub    $0x28,%esp
    8819:	8b 7d 0c             	mov    0xc(%ebp),%edi
    881c:	8b 75 10             	mov    0x10(%ebp),%esi
    881f:	6a 14                	push   $0x14
    8821:	e8 3a 96 00 00       	call   11e60 <malloc@plt>
    8826:	83 c4 10             	add    $0x10,%esp
    8829:	89 c3                	mov    %eax,%ebx
    882b:	85 c0                	test   %eax,%eax
    882d:	0f 84 bd 00 00 00    	je     88f0 <bithenge_repeat_transform+0xe0>
    8833:	50                   	push   %eax
    8834:	6a 00                	push   $0x0
    8836:	68 c0 14 01 00       	push   $0x114c0
    883b:	53                   	push   %ebx
    883c:	e8 1f 19 00 00       	call   a160 <bithenge_init_transform>
    8841:	83 c4 10             	add    $0x10,%esp
    8844:	85 c0                	test   %eax,%eax
    8846:	0f 84 8c 00 00 00    	je     88d8 <bithenge_repeat_transform+0xc8>
    884c:	83 ec 0c             	sub    $0xc,%esp
    884f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    8852:	53                   	push   %ebx
    8853:	e8 98 98 00 00       	call   120f0 <free@plt>
    8858:	83 c4 10             	add    $0x10,%esp
    885b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    885e:	85 f6                	test   %esi,%esi
    8860:	74 1d                	je     887f <bithenge_repeat_transform+0x6f>
    8862:	8b 0e                	mov    (%esi),%ecx
    8864:	85 c9                	test   %ecx,%ecx
    8866:	0f 84 a0 00 00 00    	je     890c <bithenge_repeat_transform+0xfc>
    886c:	8b 56 04             	mov    0x4(%esi),%edx
    886f:	85 d2                	test   %edx,%edx
    8871:	0f 84 a7 00 00 00    	je     891e <bithenge_repeat_transform+0x10e>
    8877:	4a                   	dec    %edx
    8878:	89 56 04             	mov    %edx,0x4(%esi)
    887b:	85 d2                	test   %edx,%edx
    887d:	74 29                	je     88a8 <bithenge_repeat_transform+0x98>
    887f:	85 ff                	test   %edi,%edi
    8881:	74 19                	je     889c <bithenge_repeat_transform+0x8c>
    8883:	8b 0f                	mov    (%edi),%ecx
    8885:	85 c9                	test   %ecx,%ecx
    8887:	74 71                	je     88fa <bithenge_repeat_transform+0xea>
    8889:	8b 57 04             	mov    0x4(%edi),%edx
    888c:	85 d2                	test   %edx,%edx
    888e:	0f 84 9c 00 00 00    	je     8930 <bithenge_repeat_transform+0x120>
    8894:	4a                   	dec    %edx
    8895:	89 57 04             	mov    %edx,0x4(%edi)
    8898:	85 d2                	test   %edx,%edx
    889a:	74 24                	je     88c0 <bithenge_repeat_transform+0xb0>
    889c:	8d 65 f4             	lea    -0xc(%ebp),%esp
    889f:	5b                   	pop    %ebx
    88a0:	5e                   	pop    %esi
    88a1:	5f                   	pop    %edi
    88a2:	5d                   	pop    %ebp
    88a3:	c3                   	ret    
    88a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    88a8:	83 ec 0c             	sub    $0xc,%esp
    88ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    88ae:	56                   	push   %esi
    88af:	ff 51 04             	call   *0x4(%ecx)
    88b2:	83 c4 10             	add    $0x10,%esp
    88b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    88b8:	eb c5                	jmp    887f <bithenge_repeat_transform+0x6f>
    88ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    88c0:	83 ec 0c             	sub    $0xc,%esp
    88c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    88c6:	57                   	push   %edi
    88c7:	ff 51 0c             	call   *0xc(%ecx)
    88ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    88cd:	83 c4 10             	add    $0x10,%esp
    88d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
    88d3:	5b                   	pop    %ebx
    88d4:	5e                   	pop    %esi
    88d5:	5f                   	pop    %edi
    88d6:	5d                   	pop    %ebp
    88d7:	c3                   	ret    
    88d8:	8b 55 08             	mov    0x8(%ebp),%edx
    88db:	89 73 0c             	mov    %esi,0xc(%ebx)
    88de:	89 7b 10             	mov    %edi,0x10(%ebx)
    88e1:	89 1a                	mov    %ebx,(%edx)
    88e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
    88e6:	5b                   	pop    %ebx
    88e7:	5e                   	pop    %esi
    88e8:	5f                   	pop    %edi
    88e9:	5d                   	pop    %ebp
    88ea:	c3                   	ret    
    88eb:	90                   	nop
    88ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    88f0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    88f5:	e9 52 ff ff ff       	jmp    884c <bithenge_repeat_transform+0x3c>
    88fa:	52                   	push   %edx
    88fb:	6a 74                	push   $0x74
    88fd:	68 18 13 01 00       	push   $0x11318
    8902:	68 61 11 01 00       	push   $0x11161
    8907:	e8 04 96 00 00       	call   11f10 <assert_abort@plt>
    890c:	53                   	push   %ebx
    890d:	6a 4b                	push   $0x4b
    890f:	68 a3 13 01 00       	push   $0x113a3
    8914:	68 61 11 01 00       	push   $0x11161
    8919:	e8 f2 95 00 00       	call   11f10 <assert_abort@plt>
    891e:	51                   	push   %ecx
    891f:	6a 4c                	push   $0x4c
    8921:	68 a3 13 01 00       	push   $0x113a3
    8926:	68 6b 11 01 00       	push   $0x1116b
    892b:	e8 e0 95 00 00       	call   11f10 <assert_abort@plt>
    8930:	50                   	push   %eax
    8931:	6a 75                	push   $0x75
    8933:	68 18 13 01 00       	push   $0x11318
    8938:	68 6b 11 01 00       	push   $0x1116b
    893d:	e8 ce 95 00 00       	call   11f10 <assert_abort@plt>
    8942:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    8949:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00008950 <bithenge_do_while_transform>:
    8950:	55                   	push   %ebp
    8951:	89 e5                	mov    %esp,%ebp
    8953:	57                   	push   %edi
    8954:	56                   	push   %esi
    8955:	53                   	push   %ebx
    8956:	83 ec 28             	sub    $0x28,%esp
    8959:	8b 7d 0c             	mov    0xc(%ebp),%edi
    895c:	8b 75 10             	mov    0x10(%ebp),%esi
    895f:	6a 14                	push   $0x14
    8961:	e8 fa 94 00 00       	call   11e60 <malloc@plt>
    8966:	83 c4 10             	add    $0x10,%esp
    8969:	89 c3                	mov    %eax,%ebx
    896b:	85 c0                	test   %eax,%eax
    896d:	0f 84 bd 00 00 00    	je     8a30 <bithenge_do_while_transform+0xe0>
    8973:	50                   	push   %eax
    8974:	6a 00                	push   $0x0
    8976:	68 a0 14 01 00       	push   $0x114a0
    897b:	53                   	push   %ebx
    897c:	e8 df 17 00 00       	call   a160 <bithenge_init_transform>
    8981:	83 c4 10             	add    $0x10,%esp
    8984:	85 c0                	test   %eax,%eax
    8986:	0f 84 8c 00 00 00    	je     8a18 <bithenge_do_while_transform+0xc8>
    898c:	83 ec 0c             	sub    $0xc,%esp
    898f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    8992:	53                   	push   %ebx
    8993:	e8 58 97 00 00       	call   120f0 <free@plt>
    8998:	83 c4 10             	add    $0x10,%esp
    899b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    899e:	85 f6                	test   %esi,%esi
    89a0:	74 1d                	je     89bf <bithenge_do_while_transform+0x6f>
    89a2:	8b 0e                	mov    (%esi),%ecx
    89a4:	85 c9                	test   %ecx,%ecx
    89a6:	0f 84 a0 00 00 00    	je     8a4c <bithenge_do_while_transform+0xfc>
    89ac:	8b 56 04             	mov    0x4(%esi),%edx
    89af:	85 d2                	test   %edx,%edx
    89b1:	0f 84 a7 00 00 00    	je     8a5e <bithenge_do_while_transform+0x10e>
    89b7:	4a                   	dec    %edx
    89b8:	89 56 04             	mov    %edx,0x4(%esi)
    89bb:	85 d2                	test   %edx,%edx
    89bd:	74 29                	je     89e8 <bithenge_do_while_transform+0x98>
    89bf:	85 ff                	test   %edi,%edi
    89c1:	74 19                	je     89dc <bithenge_do_while_transform+0x8c>
    89c3:	8b 0f                	mov    (%edi),%ecx
    89c5:	85 c9                	test   %ecx,%ecx
    89c7:	74 71                	je     8a3a <bithenge_do_while_transform+0xea>
    89c9:	8b 57 04             	mov    0x4(%edi),%edx
    89cc:	85 d2                	test   %edx,%edx
    89ce:	0f 84 9c 00 00 00    	je     8a70 <bithenge_do_while_transform+0x120>
    89d4:	4a                   	dec    %edx
    89d5:	89 57 04             	mov    %edx,0x4(%edi)
    89d8:	85 d2                	test   %edx,%edx
    89da:	74 24                	je     8a00 <bithenge_do_while_transform+0xb0>
    89dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
    89df:	5b                   	pop    %ebx
    89e0:	5e                   	pop    %esi
    89e1:	5f                   	pop    %edi
    89e2:	5d                   	pop    %ebp
    89e3:	c3                   	ret    
    89e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    89e8:	83 ec 0c             	sub    $0xc,%esp
    89eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    89ee:	56                   	push   %esi
    89ef:	ff 51 04             	call   *0x4(%ecx)
    89f2:	83 c4 10             	add    $0x10,%esp
    89f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    89f8:	eb c5                	jmp    89bf <bithenge_do_while_transform+0x6f>
    89fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    8a00:	83 ec 0c             	sub    $0xc,%esp
    8a03:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    8a06:	57                   	push   %edi
    8a07:	ff 51 0c             	call   *0xc(%ecx)
    8a0a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    8a0d:	83 c4 10             	add    $0x10,%esp
    8a10:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8a13:	5b                   	pop    %ebx
    8a14:	5e                   	pop    %esi
    8a15:	5f                   	pop    %edi
    8a16:	5d                   	pop    %ebp
    8a17:	c3                   	ret    
    8a18:	8b 55 08             	mov    0x8(%ebp),%edx
    8a1b:	89 73 0c             	mov    %esi,0xc(%ebx)
    8a1e:	89 7b 10             	mov    %edi,0x10(%ebx)
    8a21:	89 1a                	mov    %ebx,(%edx)
    8a23:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8a26:	5b                   	pop    %ebx
    8a27:	5e                   	pop    %esi
    8a28:	5f                   	pop    %edi
    8a29:	5d                   	pop    %ebp
    8a2a:	c3                   	ret    
    8a2b:	90                   	nop
    8a2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    8a30:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    8a35:	e9 52 ff ff ff       	jmp    898c <bithenge_do_while_transform+0x3c>
    8a3a:	52                   	push   %edx
    8a3b:	6a 74                	push   $0x74
    8a3d:	68 18 13 01 00       	push   $0x11318
    8a42:	68 61 11 01 00       	push   $0x11161
    8a47:	e8 c4 94 00 00       	call   11f10 <assert_abort@plt>
    8a4c:	53                   	push   %ebx
    8a4d:	6a 4b                	push   $0x4b
    8a4f:	68 a3 13 01 00       	push   $0x113a3
    8a54:	68 61 11 01 00       	push   $0x11161
    8a59:	e8 b2 94 00 00       	call   11f10 <assert_abort@plt>
    8a5e:	51                   	push   %ecx
    8a5f:	6a 4c                	push   $0x4c
    8a61:	68 a3 13 01 00       	push   $0x113a3
    8a66:	68 6b 11 01 00       	push   $0x1116b
    8a6b:	e8 a0 94 00 00       	call   11f10 <assert_abort@plt>
    8a70:	50                   	push   %eax
    8a71:	6a 75                	push   $0x75
    8a73:	68 18 13 01 00       	push   $0x11318
    8a78:	68 6b 11 01 00       	push   $0x1116b
    8a7d:	e8 8e 94 00 00       	call   11f10 <assert_abort@plt>

00008a82 <bithenge_blob_size.part.6>:
    8a82:	55                   	push   %ebp
    8a83:	89 e5                	mov    %esp,%ebp
    8a85:	83 ec 0c             	sub    $0xc,%esp
    8a88:	6a 7f                	push   $0x7f
    8a8a:	68 05 12 01 00       	push   $0x11205
    8a8f:	68 35 13 01 00       	push   $0x11335
    8a94:	e8 77 94 00 00       	call   11f10 <assert_abort@plt>

00008a99 <bithenge_transform_inc_ref.part.10>:
    8a99:	55                   	push   %ebp
    8a9a:	89 e5                	mov    %esp,%ebp
    8a9c:	83 ec 0c             	sub    $0xc,%esp
    8a9f:	6a 6a                	push   $0x6a
    8aa1:	68 18 13 01 00       	push   $0x11318
    8aa6:	68 35 13 01 00       	push   $0x11335
    8aab:	e8 60 94 00 00       	call   11f10 <assert_abort@plt>

00008ab0 <bithenge_node_from_source>:
    8ab0:	55                   	push   %ebp
    8ab1:	89 e5                	mov    %esp,%ebp
    8ab3:	57                   	push   %edi
    8ab4:	56                   	push   %esi
    8ab5:	53                   	push   %ebx
    8ab6:	83 ec 34             	sub    $0x34,%esp
    8ab9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    8abc:	6a 3a                	push   $0x3a
    8abe:	53                   	push   %ebx
    8abf:	e8 2c 94 00 00       	call   11ef0 <str_chr@plt>
    8ac4:	83 c4 10             	add    $0x10,%esp
    8ac7:	85 c0                	test   %eax,%eax
    8ac9:	0f 84 c1 01 00 00    	je     8c90 <bithenge_node_from_source+0x1e0>
    8acf:	56                   	push   %esi
    8ad0:	6a 05                	push   $0x5
    8ad2:	68 f0 14 01 00       	push   $0x114f0
    8ad7:	53                   	push   %ebx
    8ad8:	e8 63 95 00 00       	call   12040 <str_lcmp@plt>
    8add:	83 c4 10             	add    $0x10,%esp
    8ae0:	85 c0                	test   %eax,%eax
    8ae2:	0f 84 58 01 00 00    	je     8c40 <bithenge_node_from_source+0x190>
    8ae8:	50                   	push   %eax
    8ae9:	6a 06                	push   $0x6
    8aeb:	68 f6 14 01 00       	push   $0x114f6
    8af0:	53                   	push   %ebx
    8af1:	e8 4a 95 00 00       	call   12040 <str_lcmp@plt>
    8af6:	83 c4 10             	add    $0x10,%esp
    8af9:	85 c0                	test   %eax,%eax
    8afb:	0f 84 bf 00 00 00    	je     8bc0 <bithenge_node_from_source+0x110>
    8b01:	50                   	push   %eax
    8b02:	6a 04                	push   $0x4
    8b04:	68 fd 14 01 00       	push   $0x114fd
    8b09:	53                   	push   %ebx
    8b0a:	e8 31 95 00 00       	call   12040 <str_lcmp@plt>
    8b0f:	83 c4 10             	add    $0x10,%esp
    8b12:	85 c0                	test   %eax,%eax
    8b14:	0f 85 15 01 00 00    	jne    8c2f <bithenge_node_from_source+0x17f>
    8b1a:	83 ec 0c             	sub    $0xc,%esp
    8b1d:	8d 43 04             	lea    0x4(%ebx),%eax
    8b20:	50                   	push   %eax
    8b21:	e8 0a 95 00 00       	call   12030 <str_length@plt>
    8b26:	83 c4 10             	add    $0x10,%esp
    8b29:	a8 01                	test   $0x1,%al
    8b2b:	0f 85 fe 00 00 00    	jne    8c2f <bithenge_node_from_source+0x17f>
    8b31:	d1 e8                	shr    %eax
    8b33:	83 ec 0c             	sub    $0xc,%esp
    8b36:	89 c6                	mov    %eax,%esi
    8b38:	89 45 cc             	mov    %eax,-0x34(%ebp)
    8b3b:	50                   	push   %eax
    8b3c:	e8 1f 93 00 00       	call   11e60 <malloc@plt>
    8b41:	83 c4 10             	add    $0x10,%esp
    8b44:	89 45 d0             	mov    %eax,-0x30(%ebp)
    8b47:	85 c0                	test   %eax,%eax
    8b49:	0f 84 77 01 00 00    	je     8cc6 <bithenge_node_from_source+0x216>
    8b4f:	89 f0                	mov    %esi,%eax
    8b51:	31 c9                	xor    %ecx,%ecx
    8b53:	89 de                	mov    %ebx,%esi
    8b55:	85 c0                	test   %eax,%eax
    8b57:	75 4b                	jne    8ba4 <bithenge_node_from_source+0xf4>
    8b59:	e9 4a 01 00 00       	jmp    8ca8 <bithenge_node_from_source+0x1f8>
    8b5e:	66 90                	xchg   %ax,%ax
    8b60:	8d 42 d0             	lea    -0x30(%edx),%eax
    8b63:	0f be 54 4e 05       	movsbl 0x5(%esi,%ecx,2),%edx
    8b68:	89 d3                	mov    %edx,%ebx
    8b6a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    8b6d:	8d 7a d0             	lea    -0x30(%edx),%edi
    8b70:	89 fa                	mov    %edi,%edx
    8b72:	80 fa 09             	cmp    $0x9,%dl
    8b75:	77 71                	ja     8be8 <bithenge_node_from_source+0x138>
    8b77:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    8b7a:	83 ea 30             	sub    $0x30,%edx
    8b7d:	83 f8 ff             	cmp    $0xffffffff,%eax
    8b80:	0f 84 9a 00 00 00    	je     8c20 <bithenge_node_from_source+0x170>
    8b86:	83 fa ff             	cmp    $0xffffffff,%edx
    8b89:	0f 84 91 00 00 00    	je     8c20 <bithenge_node_from_source+0x170>
    8b8f:	c1 e0 04             	shl    $0x4,%eax
    8b92:	8b 7d d0             	mov    -0x30(%ebp),%edi
    8b95:	09 d0                	or     %edx,%eax
    8b97:	88 04 0f             	mov    %al,(%edi,%ecx,1)
    8b9a:	41                   	inc    %ecx
    8b9b:	39 4d cc             	cmp    %ecx,-0x34(%ebp)
    8b9e:	0f 84 04 01 00 00    	je     8ca8 <bithenge_node_from_source+0x1f8>
    8ba4:	0f be 54 4e 04       	movsbl 0x4(%esi,%ecx,2),%edx
    8ba9:	8d 5a d0             	lea    -0x30(%edx),%ebx
    8bac:	80 fb 09             	cmp    $0x9,%bl
    8baf:	76 af                	jbe    8b60 <bithenge_node_from_source+0xb0>
    8bb1:	8d 5a 9f             	lea    -0x61(%edx),%ebx
    8bb4:	80 fb 05             	cmp    $0x5,%bl
    8bb7:	77 47                	ja     8c00 <bithenge_node_from_source+0x150>
    8bb9:	8d 42 a9             	lea    -0x57(%edx),%eax
    8bbc:	eb a5                	jmp    8b63 <bithenge_node_from_source+0xb3>
    8bbe:	66 90                	xchg   %ax,%ax
    8bc0:	83 c3 06             	add    $0x6,%ebx
    8bc3:	50                   	push   %eax
    8bc4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    8bc7:	6a 00                	push   $0x0
    8bc9:	50                   	push   %eax
    8bca:	53                   	push   %ebx
    8bcb:	e8 c0 92 00 00       	call   11e90 <loc_service_get_id@plt>
    8bd0:	83 c4 10             	add    $0x10,%esp
    8bd3:	85 c0                	test   %eax,%eax
    8bd5:	0f 84 95 00 00 00    	je     8c70 <bithenge_node_from_source+0x1c0>
    8bdb:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8bde:	5b                   	pop    %ebx
    8bdf:	5e                   	pop    %esi
    8be0:	5f                   	pop    %edi
    8be1:	5d                   	pop    %ebp
    8be2:	c3                   	ret    
    8be3:	90                   	nop
    8be4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    8be8:	8d 7b 9f             	lea    -0x61(%ebx),%edi
    8beb:	89 fa                	mov    %edi,%edx
    8bed:	80 fa 05             	cmp    $0x5,%dl
    8bf0:	77 26                	ja     8c18 <bithenge_node_from_source+0x168>
    8bf2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    8bf5:	83 ea 57             	sub    $0x57,%edx
    8bf8:	eb 83                	jmp    8b7d <bithenge_node_from_source+0xcd>
    8bfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    8c00:	8d 5a bf             	lea    -0x41(%edx),%ebx
    8c03:	83 c8 ff             	or     $0xffffffff,%eax
    8c06:	80 fb 05             	cmp    $0x5,%bl
    8c09:	0f 87 54 ff ff ff    	ja     8b63 <bithenge_node_from_source+0xb3>
    8c0f:	8d 42 c9             	lea    -0x37(%edx),%eax
    8c12:	e9 4c ff ff ff       	jmp    8b63 <bithenge_node_from_source+0xb3>
    8c17:	90                   	nop
    8c18:	83 eb 41             	sub    $0x41,%ebx
    8c1b:	80 fb 05             	cmp    $0x5,%bl
    8c1e:	76 40                	jbe    8c60 <bithenge_node_from_source+0x1b0>
    8c20:	83 ec 0c             	sub    $0xc,%esp
    8c23:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    8c26:	51                   	push   %ecx
    8c27:	e8 c4 94 00 00       	call   120f0 <free@plt>
    8c2c:	83 c4 10             	add    $0x10,%esp
    8c2f:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8c32:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    8c37:	5b                   	pop    %ebx
    8c38:	5e                   	pop    %esi
    8c39:	5f                   	pop    %edi
    8c3a:	5d                   	pop    %ebp
    8c3b:	c3                   	ret    
    8c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    8c40:	8b 4d 08             	mov    0x8(%ebp),%ecx
    8c43:	83 c3 05             	add    $0x5,%ebx
    8c46:	52                   	push   %edx
    8c47:	52                   	push   %edx
    8c48:	53                   	push   %ebx
    8c49:	51                   	push   %ecx
    8c4a:	e8 51 69 00 00       	call   f5a0 <bithenge_new_file_blob>
    8c4f:	83 c4 10             	add    $0x10,%esp
    8c52:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8c55:	5b                   	pop    %ebx
    8c56:	5e                   	pop    %esi
    8c57:	5f                   	pop    %edi
    8c58:	5d                   	pop    %ebp
    8c59:	c3                   	ret    
    8c5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    8c60:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    8c63:	83 ea 37             	sub    $0x37,%edx
    8c66:	e9 12 ff ff ff       	jmp    8b7d <bithenge_node_from_source+0xcd>
    8c6b:	90                   	nop
    8c6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    8c70:	50                   	push   %eax
    8c71:	50                   	push   %eax
    8c72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    8c75:	50                   	push   %eax
    8c76:	8b 45 08             	mov    0x8(%ebp),%eax
    8c79:	50                   	push   %eax
    8c7a:	e8 61 30 00 00       	call   bce0 <bithenge_new_block_blob>
    8c7f:	83 c4 10             	add    $0x10,%esp
    8c82:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8c85:	5b                   	pop    %ebx
    8c86:	5e                   	pop    %esi
    8c87:	5f                   	pop    %edi
    8c88:	5d                   	pop    %ebp
    8c89:	c3                   	ret    
    8c8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    8c90:	8b 55 08             	mov    0x8(%ebp),%edx
    8c93:	50                   	push   %eax
    8c94:	50                   	push   %eax
    8c95:	53                   	push   %ebx
    8c96:	52                   	push   %edx
    8c97:	e8 04 69 00 00       	call   f5a0 <bithenge_new_file_blob>
    8c9c:	83 c4 10             	add    $0x10,%esp
    8c9f:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8ca2:	5b                   	pop    %ebx
    8ca3:	5e                   	pop    %esi
    8ca4:	5f                   	pop    %edi
    8ca5:	5d                   	pop    %ebp
    8ca6:	c3                   	ret    
    8ca7:	90                   	nop
    8ca8:	8b 5d cc             	mov    -0x34(%ebp),%ebx
    8cab:	8b 75 d0             	mov    -0x30(%ebp),%esi
    8cae:	8b 7d 08             	mov    0x8(%ebp),%edi
    8cb1:	6a 01                	push   $0x1
    8cb3:	53                   	push   %ebx
    8cb4:	56                   	push   %esi
    8cb5:	57                   	push   %edi
    8cb6:	e8 55 39 00 00       	call   c610 <bithenge_new_blob_from_buffer>
    8cbb:	83 c4 10             	add    $0x10,%esp
    8cbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8cc1:	5b                   	pop    %ebx
    8cc2:	5e                   	pop    %esi
    8cc3:	5f                   	pop    %edi
    8cc4:	5d                   	pop    %ebp
    8cc5:	c3                   	ret    
    8cc6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    8ccb:	e9 0b ff ff ff       	jmp    8bdb <bithenge_node_from_source+0x12b>

00008cd0 <invalid_apply>:
    8cd0:	55                   	push   %ebp
    8cd1:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    8cd6:	89 e5                	mov    %esp,%ebp
    8cd8:	5d                   	pop    %ebp
    8cd9:	c3                   	ret    
    8cda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

00008ce0 <prefix_length_1>:
    8ce0:	55                   	push   %ebp
    8ce1:	89 e5                	mov    %esp,%ebp
    8ce3:	8b 45 14             	mov    0x14(%ebp),%eax
    8ce6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    8cec:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    8cf3:	5d                   	pop    %ebp
    8cf4:	31 c0                	xor    %eax,%eax
    8cf6:	c3                   	ret    
    8cf7:	89 f6                	mov    %esi,%esi
    8cf9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00008d00 <prefix_length_2>:
    8d00:	55                   	push   %ebp
    8d01:	89 e5                	mov    %esp,%ebp
    8d03:	8b 45 14             	mov    0x14(%ebp),%eax
    8d06:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    8d0c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    8d13:	5d                   	pop    %ebp
    8d14:	31 c0                	xor    %eax,%eax
    8d16:	c3                   	ret    
    8d17:	89 f6                	mov    %esi,%esi
    8d19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00008d20 <prefix_length_4>:
    8d20:	55                   	push   %ebp
    8d21:	89 e5                	mov    %esp,%ebp
    8d23:	8b 45 14             	mov    0x14(%ebp),%eax
    8d26:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
    8d2c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    8d33:	5d                   	pop    %ebp
    8d34:	31 c0                	xor    %eax,%eax
    8d36:	c3                   	ret    
    8d37:	89 f6                	mov    %esi,%esi
    8d39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00008d40 <prefix_length_8>:
    8d40:	55                   	push   %ebp
    8d41:	89 e5                	mov    %esp,%ebp
    8d43:	8b 45 14             	mov    0x14(%ebp),%eax
    8d46:	c7 00 08 00 00 00    	movl   $0x8,(%eax)
    8d4c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    8d53:	5d                   	pop    %ebp
    8d54:	31 c0                	xor    %eax,%eax
    8d56:	c3                   	ret    
    8d57:	89 f6                	mov    %esi,%esi
    8d59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00008d60 <transform_indestructible>:
    8d60:	55                   	push   %ebp
    8d61:	89 e5                	mov    %esp,%ebp
    8d63:	83 ec 0c             	sub    $0xc,%esp
    8d66:	6a 4b                	push   $0x4b
    8d68:	68 02 15 01 00       	push   $0x11502
    8d6d:	68 48 12 01 00       	push   $0x11248
    8d72:	e8 99 91 00 00       	call   11f10 <assert_abort@plt>
    8d77:	89 f6                	mov    %esi,%esi
    8d79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00008d80 <bits_xe_destroy>:
    8d80:	55                   	push   %ebp
    8d81:	89 e5                	mov    %esp,%ebp
    8d83:	53                   	push   %ebx
    8d84:	50                   	push   %eax
    8d85:	8b 5d 08             	mov    0x8(%ebp),%ebx
    8d88:	8b 43 10             	mov    0x10(%ebx),%eax
    8d8b:	85 c0                	test   %eax,%eax
    8d8d:	74 0c                	je     8d9b <bits_xe_destroy+0x1b>
    8d8f:	83 ec 0c             	sub    $0xc,%esp
    8d92:	50                   	push   %eax
    8d93:	e8 88 28 00 00       	call   b620 <bithenge_node_dec_ref>
    8d98:	83 c4 10             	add    $0x10,%esp
    8d9b:	89 5d 08             	mov    %ebx,0x8(%ebp)
    8d9e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    8da1:	c9                   	leave  
    8da2:	e9 49 93 00 00       	jmp    120f0 <free@plt>
    8da7:	89 f6                	mov    %esi,%esi
    8da9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00008db0 <nonzero_boolean_apply>:
    8db0:	55                   	push   %ebp
    8db1:	89 e5                	mov    %esp,%ebp
    8db3:	8b 45 10             	mov    0x10(%ebp),%eax
    8db6:	8b 55 14             	mov    0x14(%ebp),%edx
    8db9:	83 38 03             	cmpl   $0x3,(%eax)
    8dbc:	75 1a                	jne    8dd8 <nonzero_boolean_apply+0x28>
    8dbe:	8b 48 08             	mov    0x8(%eax),%ecx
    8dc1:	0b 48 0c             	or     0xc(%eax),%ecx
    8dc4:	89 55 08             	mov    %edx,0x8(%ebp)
    8dc7:	0f 95 c0             	setne  %al
    8dca:	25 ff 00 00 00       	and    $0xff,%eax
    8dcf:	89 45 0c             	mov    %eax,0xc(%ebp)
    8dd2:	5d                   	pop    %ebp
    8dd3:	e9 18 2c 00 00       	jmp    b9f0 <bithenge_new_boolean_node>
    8dd8:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    8ddd:	5d                   	pop    %ebp
    8dde:	c3                   	ret    
    8ddf:	90                   	nop

00008de0 <barrier_transform_destroy>:
    8de0:	55                   	push   %ebp
    8de1:	89 e5                	mov    %esp,%ebp
    8de3:	53                   	push   %ebx
    8de4:	51                   	push   %ecx
    8de5:	8b 5d 08             	mov    0x8(%ebp),%ebx
    8de8:	8b 53 0c             	mov    0xc(%ebx),%edx
    8deb:	85 d2                	test   %edx,%edx
    8ded:	74 1f                	je     8e0e <barrier_transform_destroy+0x2e>
    8def:	8b 0a                	mov    (%edx),%ecx
    8df1:	85 c9                	test   %ecx,%ecx
    8df3:	74 37                	je     8e2c <barrier_transform_destroy+0x4c>
    8df5:	8b 42 04             	mov    0x4(%edx),%eax
    8df8:	85 c0                	test   %eax,%eax
    8dfa:	74 1e                	je     8e1a <barrier_transform_destroy+0x3a>
    8dfc:	48                   	dec    %eax
    8dfd:	89 42 04             	mov    %eax,0x4(%edx)
    8e00:	85 c0                	test   %eax,%eax
    8e02:	75 0a                	jne    8e0e <barrier_transform_destroy+0x2e>
    8e04:	83 ec 0c             	sub    $0xc,%esp
    8e07:	52                   	push   %edx
    8e08:	ff 51 0c             	call   *0xc(%ecx)
    8e0b:	83 c4 10             	add    $0x10,%esp
    8e0e:	89 5d 08             	mov    %ebx,0x8(%ebp)
    8e11:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    8e14:	c9                   	leave  
    8e15:	e9 d6 92 00 00       	jmp    120f0 <free@plt>
    8e1a:	50                   	push   %eax
    8e1b:	6a 75                	push   $0x75
    8e1d:	68 18 13 01 00       	push   $0x11318
    8e22:	68 6b 11 01 00       	push   $0x1116b
    8e27:	e8 e4 90 00 00       	call   11f10 <assert_abort@plt>
    8e2c:	52                   	push   %edx
    8e2d:	6a 74                	push   $0x74
    8e2f:	68 18 13 01 00       	push   $0x11318
    8e34:	68 61 11 01 00       	push   $0x11161
    8e39:	e8 d2 90 00 00       	call   11f10 <assert_abort@plt>
    8e3e:	66 90                	xchg   %ax,%ax

00008e40 <bit_prefix_apply>:
    8e40:	55                   	push   %ebp
    8e41:	89 e5                	mov    %esp,%ebp
    8e43:	53                   	push   %ebx
    8e44:	83 ec 14             	sub    $0x14,%esp
    8e47:	8b 45 10             	mov    0x10(%ebp),%eax
    8e4a:	8b 5d 18             	mov    0x18(%ebp),%ebx
    8e4d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    8e54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    8e5b:	85 c0                	test   %eax,%eax
    8e5d:	74 68                	je     8ec7 <bit_prefix_apply+0x87>
    8e5f:	8b 50 08             	mov    0x8(%eax),%edx
    8e62:	85 d2                	test   %edx,%edx
    8e64:	74 76                	je     8edc <bit_prefix_apply+0x9c>
    8e66:	8b 52 08             	mov    0x8(%edx),%edx
    8e69:	85 d2                	test   %edx,%edx
    8e6b:	74 53                	je     8ec0 <bit_prefix_apply+0x80>
    8e6d:	51                   	push   %ecx
    8e6e:	51                   	push   %ecx
    8e6f:	8d 4d f0             	lea    -0x10(%ebp),%ecx
    8e72:	6a 01                	push   $0x1
    8e74:	51                   	push   %ecx
    8e75:	8d 4d ef             	lea    -0x11(%ebp),%ecx
    8e78:	51                   	push   %ecx
    8e79:	6a 00                	push   $0x0
    8e7b:	6a 00                	push   $0x0
    8e7d:	50                   	push   %eax
    8e7e:	ff d2                	call   *%edx
    8e80:	83 c4 20             	add    $0x20,%esp
    8e83:	85 c0                	test   %eax,%eax
    8e85:	75 31                	jne    8eb8 <bit_prefix_apply+0x78>
    8e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
    8e8a:	83 f0 01             	xor    $0x1,%eax
    8e8d:	0b 45 f4             	or     -0xc(%ebp),%eax
    8e90:	75 2e                	jne    8ec0 <bit_prefix_apply+0x80>
    8e92:	85 db                	test   %ebx,%ebx
    8e94:	74 0d                	je     8ea3 <bit_prefix_apply+0x63>
    8e96:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
    8e9c:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
    8ea3:	50                   	push   %eax
    8ea4:	50                   	push   %eax
    8ea5:	8a 45 ef             	mov    -0x11(%ebp),%al
    8ea8:	8b 55 14             	mov    0x14(%ebp),%edx
    8eab:	83 e0 01             	and    $0x1,%eax
    8eae:	50                   	push   %eax
    8eaf:	52                   	push   %edx
    8eb0:	e8 3b 2b 00 00       	call   b9f0 <bithenge_new_boolean_node>
    8eb5:	83 c4 10             	add    $0x10,%esp
    8eb8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    8ebb:	c9                   	leave  
    8ebc:	c3                   	ret    
    8ebd:	8d 76 00             	lea    0x0(%esi),%esi
    8ec0:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    8ec5:	eb f1                	jmp    8eb8 <bit_prefix_apply+0x78>
    8ec7:	50                   	push   %eax
    8ec8:	68 b2 00 00 00       	push   $0xb2
    8ecd:	68 05 12 01 00       	push   $0x11205
    8ed2:	68 35 13 01 00       	push   $0x11335
    8ed7:	e8 34 90 00 00       	call   11f10 <assert_abort@plt>
    8edc:	53                   	push   %ebx
    8edd:	68 b3 00 00 00       	push   $0xb3
    8ee2:	68 05 12 01 00       	push   $0x11205
    8ee7:	68 1d 12 01 00       	push   $0x1121d
    8eec:	e8 1f 90 00 00       	call   11f10 <assert_abort@plt>
    8ef1:	eb 0d                	jmp    8f00 <bits_xe_apply>
    8ef3:	90                   	nop
    8ef4:	90                   	nop
    8ef5:	90                   	nop
    8ef6:	90                   	nop
    8ef7:	90                   	nop
    8ef8:	90                   	nop
    8ef9:	90                   	nop
    8efa:	90                   	nop
    8efb:	90                   	nop
    8efc:	90                   	nop
    8efd:	90                   	nop
    8efe:	90                   	nop
    8eff:	90                   	nop

00008f00 <bits_xe_apply>:
    8f00:	55                   	push   %ebp
    8f01:	89 e5                	mov    %esp,%ebp
    8f03:	56                   	push   %esi
    8f04:	53                   	push   %ebx
    8f05:	83 ec 10             	sub    $0x10,%esp
    8f08:	8b 5d 10             	mov    0x10(%ebp),%ebx
    8f0b:	83 3b 05             	cmpl   $0x5,(%ebx)
    8f0e:	75 50                	jne    8f60 <bits_xe_apply+0x60>
    8f10:	83 ec 0c             	sub    $0xc,%esp
    8f13:	6a 18                	push   $0x18
    8f15:	e8 46 8f 00 00       	call   11e60 <malloc@plt>
    8f1a:	83 c4 10             	add    $0x10,%esp
    8f1d:	89 c6                	mov    %eax,%esi
    8f1f:	85 c0                	test   %eax,%eax
    8f21:	74 6d                	je     8f90 <bits_xe_apply+0x90>
    8f23:	51                   	push   %ecx
    8f24:	51                   	push   %ecx
    8f25:	68 0c 17 01 00       	push   $0x1170c
    8f2a:	50                   	push   %eax
    8f2b:	e8 70 35 00 00       	call   c4a0 <bithenge_init_random_access_blob>
    8f30:	83 c4 10             	add    $0x10,%esp
    8f33:	85 c0                	test   %eax,%eax
    8f35:	75 39                	jne    8f70 <bits_xe_apply+0x70>
    8f37:	8b 53 04             	mov    0x4(%ebx),%edx
    8f3a:	42                   	inc    %edx
    8f3b:	83 3b 05             	cmpl   $0x5,(%ebx)
    8f3e:	89 53 04             	mov    %edx,0x4(%ebx)
    8f41:	75 54                	jne    8f97 <bits_xe_apply+0x97>
    8f43:	8b 55 14             	mov    0x14(%ebp),%edx
    8f46:	89 5e 10             	mov    %ebx,0x10(%esi)
    8f49:	81 7d 08 84 3b 01 00 	cmpl   $0x13b84,0x8(%ebp)
    8f50:	0f 94 46 14          	sete   0x14(%esi)
    8f54:	89 32                	mov    %esi,(%edx)
    8f56:	8d 65 f8             	lea    -0x8(%ebp),%esp
    8f59:	5b                   	pop    %ebx
    8f5a:	5e                   	pop    %esi
    8f5b:	5d                   	pop    %ebp
    8f5c:	c3                   	ret    
    8f5d:	8d 76 00             	lea    0x0(%esi),%esi
    8f60:	8d 65 f8             	lea    -0x8(%ebp),%esp
    8f63:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    8f68:	5b                   	pop    %ebx
    8f69:	5e                   	pop    %esi
    8f6a:	5d                   	pop    %ebp
    8f6b:	c3                   	ret    
    8f6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    8f70:	83 ec 0c             	sub    $0xc,%esp
    8f73:	89 45 f4             	mov    %eax,-0xc(%ebp)
    8f76:	56                   	push   %esi
    8f77:	e8 74 91 00 00       	call   120f0 <free@plt>
    8f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    8f7f:	83 c4 10             	add    $0x10,%esp
    8f82:	8d 65 f8             	lea    -0x8(%ebp),%esp
    8f85:	5b                   	pop    %ebx
    8f86:	5e                   	pop    %esi
    8f87:	5d                   	pop    %ebp
    8f88:	c3                   	ret    
    8f89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    8f90:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    8f95:	eb bf                	jmp    8f56 <bits_xe_apply+0x56>
    8f97:	50                   	push   %eax
    8f98:	68 d9 00 00 00       	push   $0xd9
    8f9d:	68 05 12 01 00       	push   $0x11205
    8fa2:	68 84 12 01 00       	push   $0x11284
    8fa7:	e8 64 8f 00 00       	call   11f10 <assert_abort@plt>
    8fac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00008fb0 <bits_xe_size>:
    8fb0:	55                   	push   %ebp
    8fb1:	89 e5                	mov    %esp,%ebp
    8fb3:	57                   	push   %edi
    8fb4:	56                   	push   %esi
    8fb5:	53                   	push   %ebx
    8fb6:	83 ec 0c             	sub    $0xc,%esp
    8fb9:	8b 45 08             	mov    0x8(%ebp),%eax
    8fbc:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    8fbf:	8b 40 10             	mov    0x10(%eax),%eax
    8fc2:	85 c0                	test   %eax,%eax
    8fc4:	74 26                	je     8fec <bits_xe_size+0x3c>
    8fc6:	8b 50 08             	mov    0x8(%eax),%edx
    8fc9:	85 d2                	test   %edx,%edx
    8fcb:	74 31                	je     8ffe <bits_xe_size+0x4e>
    8fcd:	51                   	push   %ecx
    8fce:	51                   	push   %ecx
    8fcf:	53                   	push   %ebx
    8fd0:	50                   	push   %eax
    8fd1:	ff 12                	call   *(%edx)
    8fd3:	8b 33                	mov    (%ebx),%esi
    8fd5:	8b 7b 04             	mov    0x4(%ebx),%edi
    8fd8:	0f a4 f7 03          	shld   $0x3,%esi,%edi
    8fdc:	c1 e6 03             	shl    $0x3,%esi
    8fdf:	89 7b 04             	mov    %edi,0x4(%ebx)
    8fe2:	89 33                	mov    %esi,(%ebx)
    8fe4:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8fe7:	5b                   	pop    %ebx
    8fe8:	5e                   	pop    %esi
    8fe9:	5f                   	pop    %edi
    8fea:	5d                   	pop    %ebp
    8feb:	c3                   	ret    
    8fec:	56                   	push   %esi
    8fed:	6a 7f                	push   $0x7f
    8fef:	68 05 12 01 00       	push   $0x11205
    8ff4:	68 35 13 01 00       	push   $0x11335
    8ff9:	e8 12 8f 00 00       	call   11f10 <assert_abort@plt>
    8ffe:	53                   	push   %ebx
    8fff:	68 80 00 00 00       	push   $0x80
    9004:	68 05 12 01 00       	push   $0x11205
    9009:	68 1d 12 01 00       	push   $0x1121d
    900e:	e8 fd 8e 00 00       	call   11f10 <assert_abort@plt>
    9013:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    9019:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00009020 <zero_terminated_prefix_length>:
    9020:	55                   	push   %ebp
    9021:	89 e5                	mov    %esp,%ebp
    9023:	57                   	push   %edi
    9024:	56                   	push   %esi
    9025:	53                   	push   %ebx
    9026:	81 ec 2c 10 00 00    	sub    $0x102c,%esp
    902c:	c7 85 e0 ef ff ff 00 	movl   $0x1000,-0x1020(%ebp)
    9033:	10 00 00 
    9036:	8b 75 10             	mov    0x10(%ebp),%esi
    9039:	c7 85 e4 ef ff ff 00 	movl   $0x0,-0x101c(%ebp)
    9040:	00 00 00 
    9043:	85 f6                	test   %esi,%esi
    9045:	0f 84 13 01 00 00    	je     915e <zero_terminated_prefix_length+0x13e>
    904b:	8b 45 10             	mov    0x10(%ebp),%eax
    904e:	8b 40 08             	mov    0x8(%eax),%eax
    9051:	85 c0                	test   %eax,%eax
    9053:	0f 84 f0 00 00 00    	je     9149 <zero_terminated_prefix_length+0x129>
    9059:	8b 40 04             	mov    0x4(%eax),%eax
    905c:	85 c0                	test   %eax,%eax
    905e:	0f 84 a3 00 00 00    	je     9107 <zero_terminated_prefix_length+0xe7>
    9064:	31 f6                	xor    %esi,%esi
    9066:	31 ff                	xor    %edi,%edi
    9068:	83 ec 0c             	sub    $0xc,%esp
    906b:	8d 9d e0 ef ff ff    	lea    -0x1020(%ebp),%ebx
    9071:	8b 55 10             	mov    0x10(%ebp),%edx
    9074:	53                   	push   %ebx
    9075:	8d 9d e8 ef ff ff    	lea    -0x1018(%ebp),%ebx
    907b:	53                   	push   %ebx
    907c:	57                   	push   %edi
    907d:	56                   	push   %esi
    907e:	52                   	push   %edx
    907f:	ff d0                	call   *%eax
    9081:	83 c4 20             	add    $0x20,%esp
    9084:	89 c3                	mov    %eax,%ebx
    9086:	85 c0                	test   %eax,%eax
    9088:	0f 85 7e 00 00 00    	jne    910c <zero_terminated_prefix_length+0xec>
    908e:	8b 85 e0 ef ff ff    	mov    -0x1020(%ebp),%eax
    9094:	8b 95 e4 ef ff ff    	mov    -0x101c(%ebp),%edx
    909a:	89 85 d0 ef ff ff    	mov    %eax,-0x1030(%ebp)
    90a0:	89 95 d4 ef ff ff    	mov    %edx,-0x102c(%ebp)
    90a6:	85 c0                	test   %eax,%eax
    90a8:	74 2d                	je     90d7 <zero_terminated_prefix_length+0xb7>
    90aa:	80 bd e8 ef ff ff 00 	cmpb   $0x0,-0x1018(%ebp)
    90b1:	0f 84 8a 00 00 00    	je     9141 <zero_terminated_prefix_length+0x121>
    90b7:	8d 8d e8 ef ff ff    	lea    -0x1018(%ebp),%ecx
    90bd:	8d 95 e9 ef ff ff    	lea    -0x1017(%ebp),%edx
    90c3:	01 c8                	add    %ecx,%eax
    90c5:	eb 0c                	jmp    90d3 <zero_terminated_prefix_length+0xb3>
    90c7:	90                   	nop
    90c8:	8d 4a 01             	lea    0x1(%edx),%ecx
    90cb:	80 79 ff 00          	cmpb   $0x0,-0x1(%ecx)
    90cf:	74 47                	je     9118 <zero_terminated_prefix_length+0xf8>
    90d1:	89 ca                	mov    %ecx,%edx
    90d3:	39 c2                	cmp    %eax,%edx
    90d5:	75 f1                	jne    90c8 <zero_terminated_prefix_length+0xa8>
    90d7:	8b 8d d0 ef ff ff    	mov    -0x1030(%ebp),%ecx
    90dd:	8b 9d d4 ef ff ff    	mov    -0x102c(%ebp),%ebx
    90e3:	01 ce                	add    %ecx,%esi
    90e5:	89 c8                	mov    %ecx,%eax
    90e7:	11 df                	adc    %ebx,%edi
    90e9:	89 da                	mov    %ebx,%edx
    90eb:	80 f4 10             	xor    $0x10,%ah
    90ee:	09 c2                	or     %eax,%edx
    90f0:	75 15                	jne    9107 <zero_terminated_prefix_length+0xe7>
    90f2:	8b 45 10             	mov    0x10(%ebp),%eax
    90f5:	8b 40 08             	mov    0x8(%eax),%eax
    90f8:	85 c0                	test   %eax,%eax
    90fa:	74 4d                	je     9149 <zero_terminated_prefix_length+0x129>
    90fc:	8b 40 04             	mov    0x4(%eax),%eax
    90ff:	85 c0                	test   %eax,%eax
    9101:	0f 85 61 ff ff ff    	jne    9068 <zero_terminated_prefix_length+0x48>
    9107:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    910c:	8d 65 f4             	lea    -0xc(%ebp),%esp
    910f:	5b                   	pop    %ebx
    9110:	5e                   	pop    %esi
    9111:	5f                   	pop    %edi
    9112:	5d                   	pop    %ebp
    9113:	c3                   	ret    
    9114:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    9118:	89 d8                	mov    %ebx,%eax
    911a:	8d 9d e8 ef ff ff    	lea    -0x1018(%ebp),%ebx
    9120:	29 da                	sub    %ebx,%edx
    9122:	89 d1                	mov    %edx,%ecx
    9124:	c1 f9 1f             	sar    $0x1f,%ecx
    9127:	01 f2                	add    %esi,%edx
    9129:	8b 5d 14             	mov    0x14(%ebp),%ebx
    912c:	11 f9                	adc    %edi,%ecx
    912e:	83 c2 01             	add    $0x1,%edx
    9131:	83 d1 00             	adc    $0x0,%ecx
    9134:	89 13                	mov    %edx,(%ebx)
    9136:	89 4b 04             	mov    %ecx,0x4(%ebx)
    9139:	8d 65 f4             	lea    -0xc(%ebp),%esp
    913c:	5b                   	pop    %ebx
    913d:	5e                   	pop    %esi
    913e:	5f                   	pop    %edi
    913f:	5d                   	pop    %ebp
    9140:	c3                   	ret    
    9141:	89 d8                	mov    %ebx,%eax
    9143:	31 d2                	xor    %edx,%edx
    9145:	31 c9                	xor    %ecx,%ecx
    9147:	eb de                	jmp    9127 <zero_terminated_prefix_length+0x107>
    9149:	51                   	push   %ecx
    914a:	68 97 00 00 00       	push   $0x97
    914f:	68 05 12 01 00       	push   $0x11205
    9154:	68 1d 12 01 00       	push   $0x1121d
    9159:	e8 b2 8d 00 00       	call   11f10 <assert_abort@plt>
    915e:	53                   	push   %ebx
    915f:	68 96 00 00 00       	push   $0x96
    9164:	68 05 12 01 00       	push   $0x11205
    9169:	68 35 13 01 00       	push   $0x11335
    916e:	e8 9d 8d 00 00       	call   11f10 <assert_abort@plt>
    9173:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    9179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00009180 <ascii_apply>:
    9180:	55                   	push   %ebp
    9181:	89 e5                	mov    %esp,%ebp
    9183:	56                   	push   %esi
    9184:	53                   	push   %ebx
    9185:	83 ec 20             	sub    $0x20,%esp
    9188:	8b 5d 10             	mov    0x10(%ebp),%ebx
    918b:	83 3b 05             	cmpl   $0x5,(%ebx)
    918e:	0f 85 a4 00 00 00    	jne    9238 <ascii_apply+0xb8>
    9194:	8b 43 08             	mov    0x8(%ebx),%eax
    9197:	85 c0                	test   %eax,%eax
    9199:	0f 84 e9 00 00 00    	je     9288 <ascii_apply+0x108>
    919f:	52                   	push   %edx
    91a0:	52                   	push   %edx
    91a1:	8d 55 e8             	lea    -0x18(%ebp),%edx
    91a4:	52                   	push   %edx
    91a5:	53                   	push   %ebx
    91a6:	ff 10                	call   *(%eax)
    91a8:	83 c4 10             	add    $0x10,%esp
    91ab:	85 c0                	test   %eax,%eax
    91ad:	74 09                	je     91b8 <ascii_apply+0x38>
    91af:	8d 65 f8             	lea    -0x8(%ebp),%esp
    91b2:	5b                   	pop    %ebx
    91b3:	5e                   	pop    %esi
    91b4:	5d                   	pop    %ebp
    91b5:	c3                   	ret    
    91b6:	66 90                	xchg   %ax,%ax
    91b8:	83 ec 0c             	sub    $0xc,%esp
    91bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
    91be:	40                   	inc    %eax
    91bf:	50                   	push   %eax
    91c0:	e8 9b 8c 00 00       	call   11e60 <malloc@plt>
    91c5:	83 c4 10             	add    $0x10,%esp
    91c8:	89 c6                	mov    %eax,%esi
    91ca:	85 c0                	test   %eax,%eax
    91cc:	0f 84 ac 00 00 00    	je     927e <ascii_apply+0xfe>
    91d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
    91d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
    91d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    91db:	8b 43 08             	mov    0x8(%ebx),%eax
    91de:	89 55 f4             	mov    %edx,-0xc(%ebp)
    91e1:	85 c0                	test   %eax,%eax
    91e3:	0f 84 b4 00 00 00    	je     929d <ascii_apply+0x11d>
    91e9:	8b 40 04             	mov    0x4(%eax),%eax
    91ec:	85 c0                	test   %eax,%eax
    91ee:	74 54                	je     9244 <ascii_apply+0xc4>
    91f0:	83 ec 0c             	sub    $0xc,%esp
    91f3:	8d 55 f0             	lea    -0x10(%ebp),%edx
    91f6:	52                   	push   %edx
    91f7:	56                   	push   %esi
    91f8:	6a 00                	push   $0x0
    91fa:	6a 00                	push   $0x0
    91fc:	53                   	push   %ebx
    91fd:	ff d0                	call   *%eax
    91ff:	83 c4 20             	add    $0x20,%esp
    9202:	85 c0                	test   %eax,%eax
    9204:	75 4a                	jne    9250 <ascii_apply+0xd0>
    9206:	8b 55 f0             	mov    -0x10(%ebp),%edx
    9209:	8b 4d e8             	mov    -0x18(%ebp),%ecx
    920c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    920f:	8b 5d ec             	mov    -0x14(%ebp),%ebx
    9212:	31 d1                	xor    %edx,%ecx
    9214:	31 d8                	xor    %ebx,%eax
    9216:	09 c8                	or     %ecx,%eax
    9218:	75 4e                	jne    9268 <ascii_apply+0xe8>
    921a:	c6 04 16 00          	movb   $0x0,(%esi,%edx,1)
    921e:	8b 55 14             	mov    0x14(%ebp),%edx
    9221:	50                   	push   %eax
    9222:	6a 01                	push   $0x1
    9224:	56                   	push   %esi
    9225:	52                   	push   %edx
    9226:	e8 75 28 00 00       	call   baa0 <bithenge_new_string_node>
    922b:	83 c4 10             	add    $0x10,%esp
    922e:	8d 65 f8             	lea    -0x8(%ebp),%esp
    9231:	5b                   	pop    %ebx
    9232:	5e                   	pop    %esi
    9233:	5d                   	pop    %ebp
    9234:	c3                   	ret    
    9235:	8d 76 00             	lea    0x0(%esi),%esi
    9238:	8d 65 f8             	lea    -0x8(%ebp),%esp
    923b:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    9240:	5b                   	pop    %ebx
    9241:	5e                   	pop    %esi
    9242:	5d                   	pop    %ebp
    9243:	c3                   	ret    
    9244:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    9249:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    9250:	83 ec 0c             	sub    $0xc,%esp
    9253:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    9256:	56                   	push   %esi
    9257:	e8 94 8e 00 00       	call   120f0 <free@plt>
    925c:	83 c4 10             	add    $0x10,%esp
    925f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    9262:	e9 48 ff ff ff       	jmp    91af <ascii_apply+0x2f>
    9267:	90                   	nop
    9268:	83 ec 0c             	sub    $0xc,%esp
    926b:	56                   	push   %esi
    926c:	e8 7f 8e 00 00       	call   120f0 <free@plt>
    9271:	83 c4 10             	add    $0x10,%esp
    9274:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    9279:	e9 31 ff ff ff       	jmp    91af <ascii_apply+0x2f>
    927e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    9283:	e9 27 ff ff ff       	jmp    91af <ascii_apply+0x2f>
    9288:	51                   	push   %ecx
    9289:	68 80 00 00 00       	push   $0x80
    928e:	68 05 12 01 00       	push   $0x11205
    9293:	68 1d 12 01 00       	push   $0x1121d
    9298:	e8 73 8c 00 00       	call   11f10 <assert_abort@plt>
    929d:	56                   	push   %esi
    929e:	68 97 00 00 00       	push   $0x97
    92a3:	68 05 12 01 00       	push   $0x11205
    92a8:	68 1d 12 01 00       	push   $0x1121d
    92ad:	e8 5e 8c 00 00       	call   11f10 <assert_abort@plt>
    92b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    92b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

000092c0 <uint8_apply>:
    92c0:	55                   	push   %ebp
    92c1:	89 e5                	mov    %esp,%ebp
    92c3:	83 ec 18             	sub    $0x18,%esp
    92c6:	8b 45 10             	mov    0x10(%ebp),%eax
    92c9:	83 38 05             	cmpl   $0x5,(%eax)
    92cc:	75 5a                	jne    9328 <uint8_apply+0x68>
    92ce:	8b 50 08             	mov    0x8(%eax),%edx
    92d1:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
    92d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    92df:	85 d2                	test   %edx,%edx
    92e1:	74 4c                	je     932f <uint8_apply+0x6f>
    92e3:	8b 52 04             	mov    0x4(%edx),%edx
    92e6:	85 d2                	test   %edx,%edx
    92e8:	74 3e                	je     9328 <uint8_apply+0x68>
    92ea:	83 ec 0c             	sub    $0xc,%esp
    92ed:	8d 4d f0             	lea    -0x10(%ebp),%ecx
    92f0:	51                   	push   %ecx
    92f1:	8d 4d ee             	lea    -0x12(%ebp),%ecx
    92f4:	51                   	push   %ecx
    92f5:	6a 00                	push   $0x0
    92f7:	6a 00                	push   $0x0
    92f9:	50                   	push   %eax
    92fa:	ff d2                	call   *%edx
    92fc:	83 c4 20             	add    $0x20,%esp
    92ff:	85 c0                	test   %eax,%eax
    9301:	75 21                	jne    9324 <uint8_apply+0x64>
    9303:	8b 45 f0             	mov    -0x10(%ebp),%eax
    9306:	83 f0 01             	xor    $0x1,%eax
    9309:	0b 45 f4             	or     -0xc(%ebp),%eax
    930c:	75 1a                	jne    9328 <uint8_apply+0x68>
    930e:	31 d2                	xor    %edx,%edx
    9310:	50                   	push   %eax
    9311:	31 c0                	xor    %eax,%eax
    9313:	52                   	push   %edx
    9314:	8a 45 ee             	mov    -0x12(%ebp),%al
    9317:	8b 55 14             	mov    0x14(%ebp),%edx
    931a:	50                   	push   %eax
    931b:	52                   	push   %edx
    931c:	e8 0f 27 00 00       	call   ba30 <bithenge_new_integer_node>
    9321:	83 c4 10             	add    $0x10,%esp
    9324:	c9                   	leave  
    9325:	c3                   	ret    
    9326:	66 90                	xchg   %ax,%ax
    9328:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    932d:	c9                   	leave  
    932e:	c3                   	ret    
    932f:	51                   	push   %ecx
    9330:	68 97 00 00 00       	push   $0x97
    9335:	68 05 12 01 00       	push   $0x11205
    933a:	68 1d 12 01 00       	push   $0x1121d
    933f:	e8 cc 8b 00 00       	call   11f10 <assert_abort@plt>
    9344:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    934a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

00009350 <uint16le_apply>:
    9350:	55                   	push   %ebp
    9351:	89 e5                	mov    %esp,%ebp
    9353:	83 ec 18             	sub    $0x18,%esp
    9356:	8b 45 10             	mov    0x10(%ebp),%eax
    9359:	83 38 05             	cmpl   $0x5,(%eax)
    935c:	75 5a                	jne    93b8 <uint16le_apply+0x68>
    935e:	8b 50 08             	mov    0x8(%eax),%edx
    9361:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
    9368:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    936f:	85 d2                	test   %edx,%edx
    9371:	74 4c                	je     93bf <uint16le_apply+0x6f>
    9373:	8b 52 04             	mov    0x4(%edx),%edx
    9376:	85 d2                	test   %edx,%edx
    9378:	74 3e                	je     93b8 <uint16le_apply+0x68>
    937a:	83 ec 0c             	sub    $0xc,%esp
    937d:	8d 4d f0             	lea    -0x10(%ebp),%ecx
    9380:	51                   	push   %ecx
    9381:	8d 4d ec             	lea    -0x14(%ebp),%ecx
    9384:	51                   	push   %ecx
    9385:	6a 00                	push   $0x0
    9387:	6a 00                	push   $0x0
    9389:	50                   	push   %eax
    938a:	ff d2                	call   *%edx
    938c:	83 c4 20             	add    $0x20,%esp
    938f:	85 c0                	test   %eax,%eax
    9391:	75 22                	jne    93b5 <uint16le_apply+0x65>
    9393:	8b 45 f0             	mov    -0x10(%ebp),%eax
    9396:	83 f0 02             	xor    $0x2,%eax
    9399:	0b 45 f4             	or     -0xc(%ebp),%eax
    939c:	75 1a                	jne    93b8 <uint16le_apply+0x68>
    939e:	31 d2                	xor    %edx,%edx
    93a0:	50                   	push   %eax
    93a1:	31 c0                	xor    %eax,%eax
    93a3:	52                   	push   %edx
    93a4:	66 8b 45 ec          	mov    -0x14(%ebp),%ax
    93a8:	8b 55 14             	mov    0x14(%ebp),%edx
    93ab:	50                   	push   %eax
    93ac:	52                   	push   %edx
    93ad:	e8 7e 26 00 00       	call   ba30 <bithenge_new_integer_node>
    93b2:	83 c4 10             	add    $0x10,%esp
    93b5:	c9                   	leave  
    93b6:	c3                   	ret    
    93b7:	90                   	nop
    93b8:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    93bd:	c9                   	leave  
    93be:	c3                   	ret    
    93bf:	51                   	push   %ecx
    93c0:	68 97 00 00 00       	push   $0x97
    93c5:	68 05 12 01 00       	push   $0x11205
    93ca:	68 1d 12 01 00       	push   $0x1121d
    93cf:	e8 3c 8b 00 00       	call   11f10 <assert_abort@plt>
    93d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    93da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

000093e0 <uint32le_apply>:
    93e0:	55                   	push   %ebp
    93e1:	89 e5                	mov    %esp,%ebp
    93e3:	83 ec 18             	sub    $0x18,%esp
    93e6:	8b 45 10             	mov    0x10(%ebp),%eax
    93e9:	83 38 05             	cmpl   $0x5,(%eax)
    93ec:	75 5a                	jne    9448 <uint32le_apply+0x68>
    93ee:	8b 50 08             	mov    0x8(%eax),%edx
    93f1:	c7 45 e8 05 00 00 00 	movl   $0x5,-0x18(%ebp)
    93f8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    93ff:	85 d2                	test   %edx,%edx
    9401:	74 4c                	je     944f <uint32le_apply+0x6f>
    9403:	8b 52 04             	mov    0x4(%edx),%edx
    9406:	85 d2                	test   %edx,%edx
    9408:	74 3e                	je     9448 <uint32le_apply+0x68>
    940a:	83 ec 0c             	sub    $0xc,%esp
    940d:	8d 4d e8             	lea    -0x18(%ebp),%ecx
    9410:	51                   	push   %ecx
    9411:	8d 4d f0             	lea    -0x10(%ebp),%ecx
    9414:	51                   	push   %ecx
    9415:	6a 00                	push   $0x0
    9417:	6a 00                	push   $0x0
    9419:	50                   	push   %eax
    941a:	ff d2                	call   *%edx
    941c:	83 c4 20             	add    $0x20,%esp
    941f:	85 c0                	test   %eax,%eax
    9421:	75 1f                	jne    9442 <uint32le_apply+0x62>
    9423:	8b 45 e8             	mov    -0x18(%ebp),%eax
    9426:	83 f0 04             	xor    $0x4,%eax
    9429:	0b 45 ec             	or     -0x14(%ebp),%eax
    942c:	75 1a                	jne    9448 <uint32le_apply+0x68>
    942e:	31 d2                	xor    %edx,%edx
    9430:	50                   	push   %eax
    9431:	8b 45 f0             	mov    -0x10(%ebp),%eax
    9434:	52                   	push   %edx
    9435:	8b 55 14             	mov    0x14(%ebp),%edx
    9438:	50                   	push   %eax
    9439:	52                   	push   %edx
    943a:	e8 f1 25 00 00       	call   ba30 <bithenge_new_integer_node>
    943f:	83 c4 10             	add    $0x10,%esp
    9442:	c9                   	leave  
    9443:	c3                   	ret    
    9444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    9448:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    944d:	c9                   	leave  
    944e:	c3                   	ret    
    944f:	51                   	push   %ecx
    9450:	68 97 00 00 00       	push   $0x97
    9455:	68 05 12 01 00       	push   $0x11205
    945a:	68 1d 12 01 00       	push   $0x1121d
    945f:	e8 ac 8a 00 00       	call   11f10 <assert_abort@plt>
    9464:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    946a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

00009470 <uint64le_apply>:
    9470:	55                   	push   %ebp
    9471:	89 e5                	mov    %esp,%ebp
    9473:	83 ec 28             	sub    $0x28,%esp
    9476:	8b 45 10             	mov    0x10(%ebp),%eax
    9479:	83 38 05             	cmpl   $0x5,(%eax)
    947c:	75 5a                	jne    94d8 <uint64le_apply+0x68>
    947e:	8b 50 08             	mov    0x8(%eax),%edx
    9481:	c7 45 e0 09 00 00 00 	movl   $0x9,-0x20(%ebp)
    9488:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    948f:	85 d2                	test   %edx,%edx
    9491:	74 4c                	je     94df <uint64le_apply+0x6f>
    9493:	8b 52 04             	mov    0x4(%edx),%edx
    9496:	85 d2                	test   %edx,%edx
    9498:	74 3e                	je     94d8 <uint64le_apply+0x68>
    949a:	83 ec 0c             	sub    $0xc,%esp
    949d:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    94a0:	51                   	push   %ecx
    94a1:	8d 4d e8             	lea    -0x18(%ebp),%ecx
    94a4:	51                   	push   %ecx
    94a5:	6a 00                	push   $0x0
    94a7:	6a 00                	push   $0x0
    94a9:	50                   	push   %eax
    94aa:	ff d2                	call   *%edx
    94ac:	83 c4 20             	add    $0x20,%esp
    94af:	85 c0                	test   %eax,%eax
    94b1:	75 20                	jne    94d3 <uint64le_apply+0x63>
    94b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
    94b6:	83 f0 08             	xor    $0x8,%eax
    94b9:	0b 45 e4             	or     -0x1c(%ebp),%eax
    94bc:	75 1a                	jne    94d8 <uint64le_apply+0x68>
    94be:	8b 55 ec             	mov    -0x14(%ebp),%edx
    94c1:	50                   	push   %eax
    94c2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
    94c5:	8b 45 14             	mov    0x14(%ebp),%eax
    94c8:	52                   	push   %edx
    94c9:	51                   	push   %ecx
    94ca:	50                   	push   %eax
    94cb:	e8 60 25 00 00       	call   ba30 <bithenge_new_integer_node>
    94d0:	83 c4 10             	add    $0x10,%esp
    94d3:	c9                   	leave  
    94d4:	c3                   	ret    
    94d5:	8d 76 00             	lea    0x0(%esi),%esi
    94d8:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    94dd:	c9                   	leave  
    94de:	c3                   	ret    
    94df:	50                   	push   %eax
    94e0:	68 97 00 00 00       	push   $0x97
    94e5:	68 05 12 01 00       	push   $0x11205
    94ea:	68 1d 12 01 00       	push   $0x1121d
    94ef:	e8 1c 8a 00 00       	call   11f10 <assert_abort@plt>
    94f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    94fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

00009500 <uint16be_apply>:
    9500:	55                   	push   %ebp
    9501:	89 e5                	mov    %esp,%ebp
    9503:	83 ec 18             	sub    $0x18,%esp
    9506:	8b 45 10             	mov    0x10(%ebp),%eax
    9509:	83 38 05             	cmpl   $0x5,(%eax)
    950c:	75 62                	jne    9570 <uint16be_apply+0x70>
    950e:	8b 50 08             	mov    0x8(%eax),%edx
    9511:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
    9518:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    951f:	85 d2                	test   %edx,%edx
    9521:	74 54                	je     9577 <uint16be_apply+0x77>
    9523:	8b 52 04             	mov    0x4(%edx),%edx
    9526:	85 d2                	test   %edx,%edx
    9528:	74 46                	je     9570 <uint16be_apply+0x70>
    952a:	83 ec 0c             	sub    $0xc,%esp
    952d:	8d 4d f0             	lea    -0x10(%ebp),%ecx
    9530:	51                   	push   %ecx
    9531:	8d 4d ec             	lea    -0x14(%ebp),%ecx
    9534:	51                   	push   %ecx
    9535:	6a 00                	push   $0x0
    9537:	6a 00                	push   $0x0
    9539:	50                   	push   %eax
    953a:	ff d2                	call   *%edx
    953c:	83 c4 20             	add    $0x20,%esp
    953f:	85 c0                	test   %eax,%eax
    9541:	75 28                	jne    956b <uint16be_apply+0x6b>
    9543:	8b 45 f0             	mov    -0x10(%ebp),%eax
    9546:	83 f0 02             	xor    $0x2,%eax
    9549:	0b 45 f4             	or     -0xc(%ebp),%eax
    954c:	75 22                	jne    9570 <uint16be_apply+0x70>
    954e:	50                   	push   %eax
    954f:	8b 45 ec             	mov    -0x14(%ebp),%eax
    9552:	31 d2                	xor    %edx,%edx
    9554:	66 c1 c0 08          	rol    $0x8,%ax
    9558:	52                   	push   %edx
    9559:	25 ff ff 00 00       	and    $0xffff,%eax
    955e:	8b 55 14             	mov    0x14(%ebp),%edx
    9561:	50                   	push   %eax
    9562:	52                   	push   %edx
    9563:	e8 c8 24 00 00       	call   ba30 <bithenge_new_integer_node>
    9568:	83 c4 10             	add    $0x10,%esp
    956b:	c9                   	leave  
    956c:	c3                   	ret    
    956d:	8d 76 00             	lea    0x0(%esi),%esi
    9570:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    9575:	c9                   	leave  
    9576:	c3                   	ret    
    9577:	51                   	push   %ecx
    9578:	68 97 00 00 00       	push   $0x97
    957d:	68 05 12 01 00       	push   $0x11205
    9582:	68 1d 12 01 00       	push   $0x1121d
    9587:	e8 84 89 00 00       	call   11f10 <assert_abort@plt>
    958c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00009590 <uint64be_apply>:
    9590:	55                   	push   %ebp
    9591:	89 e5                	mov    %esp,%ebp
    9593:	83 ec 28             	sub    $0x28,%esp
    9596:	8b 45 10             	mov    0x10(%ebp),%eax
    9599:	83 38 05             	cmpl   $0x5,(%eax)
    959c:	75 62                	jne    9600 <uint64be_apply+0x70>
    959e:	8b 50 08             	mov    0x8(%eax),%edx
    95a1:	c7 45 e0 09 00 00 00 	movl   $0x9,-0x20(%ebp)
    95a8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    95af:	85 d2                	test   %edx,%edx
    95b1:	74 54                	je     9607 <uint64be_apply+0x77>
    95b3:	8b 52 04             	mov    0x4(%edx),%edx
    95b6:	85 d2                	test   %edx,%edx
    95b8:	74 46                	je     9600 <uint64be_apply+0x70>
    95ba:	83 ec 0c             	sub    $0xc,%esp
    95bd:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    95c0:	51                   	push   %ecx
    95c1:	8d 4d e8             	lea    -0x18(%ebp),%ecx
    95c4:	51                   	push   %ecx
    95c5:	6a 00                	push   $0x0
    95c7:	6a 00                	push   $0x0
    95c9:	50                   	push   %eax
    95ca:	ff d2                	call   *%edx
    95cc:	83 c4 20             	add    $0x20,%esp
    95cf:	85 c0                	test   %eax,%eax
    95d1:	75 28                	jne    95fb <uint64be_apply+0x6b>
    95d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
    95d6:	83 f0 08             	xor    $0x8,%eax
    95d9:	0b 45 e4             	or     -0x1c(%ebp),%eax
    95dc:	75 22                	jne    9600 <uint64be_apply+0x70>
    95de:	8b 4d ec             	mov    -0x14(%ebp),%ecx
    95e1:	0f c9                	bswap  %ecx
    95e3:	89 c8                	mov    %ecx,%eax
    95e5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
    95e8:	0f c9                	bswap  %ecx
    95ea:	89 ca                	mov    %ecx,%edx
    95ec:	51                   	push   %ecx
    95ed:	52                   	push   %edx
    95ee:	50                   	push   %eax
    95ef:	8b 45 14             	mov    0x14(%ebp),%eax
    95f2:	50                   	push   %eax
    95f3:	e8 38 24 00 00       	call   ba30 <bithenge_new_integer_node>
    95f8:	83 c4 10             	add    $0x10,%esp
    95fb:	c9                   	leave  
    95fc:	c3                   	ret    
    95fd:	8d 76 00             	lea    0x0(%esi),%esi
    9600:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    9605:	c9                   	leave  
    9606:	c3                   	ret    
    9607:	50                   	push   %eax
    9608:	68 97 00 00 00       	push   $0x97
    960d:	68 05 12 01 00       	push   $0x11205
    9612:	68 1d 12 01 00       	push   $0x1121d
    9617:	e8 f4 88 00 00       	call   11f10 <assert_abort@plt>
    961c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00009620 <uint32be_apply>:
    9620:	55                   	push   %ebp
    9621:	89 e5                	mov    %esp,%ebp
    9623:	83 ec 18             	sub    $0x18,%esp
    9626:	8b 45 10             	mov    0x10(%ebp),%eax
    9629:	83 38 05             	cmpl   $0x5,(%eax)
    962c:	75 5a                	jne    9688 <uint32be_apply+0x68>
    962e:	8b 50 08             	mov    0x8(%eax),%edx
    9631:	c7 45 e8 05 00 00 00 	movl   $0x5,-0x18(%ebp)
    9638:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    963f:	85 d2                	test   %edx,%edx
    9641:	74 4c                	je     968f <uint32be_apply+0x6f>
    9643:	8b 52 04             	mov    0x4(%edx),%edx
    9646:	85 d2                	test   %edx,%edx
    9648:	74 3e                	je     9688 <uint32be_apply+0x68>
    964a:	83 ec 0c             	sub    $0xc,%esp
    964d:	8d 4d e8             	lea    -0x18(%ebp),%ecx
    9650:	51                   	push   %ecx
    9651:	8d 4d f0             	lea    -0x10(%ebp),%ecx
    9654:	51                   	push   %ecx
    9655:	6a 00                	push   $0x0
    9657:	6a 00                	push   $0x0
    9659:	50                   	push   %eax
    965a:	ff d2                	call   *%edx
    965c:	83 c4 20             	add    $0x20,%esp
    965f:	85 c0                	test   %eax,%eax
    9661:	75 21                	jne    9684 <uint32be_apply+0x64>
    9663:	8b 45 e8             	mov    -0x18(%ebp),%eax
    9666:	83 f0 04             	xor    $0x4,%eax
    9669:	0b 45 ec             	or     -0x14(%ebp),%eax
    966c:	75 1a                	jne    9688 <uint32be_apply+0x68>
    966e:	8b 45 f0             	mov    -0x10(%ebp),%eax
    9671:	52                   	push   %edx
    9672:	0f c8                	bswap  %eax
    9674:	31 d2                	xor    %edx,%edx
    9676:	8b 4d 14             	mov    0x14(%ebp),%ecx
    9679:	52                   	push   %edx
    967a:	50                   	push   %eax
    967b:	51                   	push   %ecx
    967c:	e8 af 23 00 00       	call   ba30 <bithenge_new_integer_node>
    9681:	83 c4 10             	add    $0x10,%esp
    9684:	c9                   	leave  
    9685:	c3                   	ret    
    9686:	66 90                	xchg   %ax,%ax
    9688:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    968d:	c9                   	leave  
    968e:	c3                   	ret    
    968f:	50                   	push   %eax
    9690:	68 97 00 00 00       	push   $0x97
    9695:	68 05 12 01 00       	push   $0x11205
    969a:	68 1d 12 01 00       	push   $0x1121d
    969f:	e8 6c 88 00 00       	call   11f10 <assert_abort@plt>
    96a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    96aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

000096b0 <bits_xe_read_bits>:
    96b0:	55                   	push   %ebp
    96b1:	89 e5                	mov    %esp,%ebp
    96b3:	57                   	push   %edi
    96b4:	56                   	push   %esi
    96b5:	53                   	push   %ebx
    96b6:	83 ec 4c             	sub    $0x4c,%esp
    96b9:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    96c0:	8b 45 0c             	mov    0xc(%ebp),%eax
    96c3:	8b 55 10             	mov    0x10(%ebp),%edx
    96c6:	8b 5d 18             	mov    0x18(%ebp),%ebx
    96c9:	8b 7d 1c             	mov    0x1c(%ebp),%edi
    96cc:	89 c6                	mov    %eax,%esi
    96ce:	89 7d bc             	mov    %edi,-0x44(%ebp)
    96d1:	83 e0 07             	and    $0x7,%eax
    96d4:	89 d7                	mov    %edx,%edi
    96d6:	0f ac fe 03          	shrd   $0x3,%edi,%esi
    96da:	89 45 d0             	mov    %eax,-0x30(%ebp)
    96dd:	8b 03                	mov    (%ebx),%eax
    96df:	c1 ef 03             	shr    $0x3,%edi
    96e2:	89 75 c0             	mov    %esi,-0x40(%ebp)
    96e5:	83 c0 07             	add    $0x7,%eax
    96e8:	8b 53 04             	mov    0x4(%ebx),%edx
    96eb:	8b 75 d0             	mov    -0x30(%ebp),%esi
    96ee:	89 7d c4             	mov    %edi,-0x3c(%ebp)
    96f1:	83 d2 00             	adc    $0x0,%edx
    96f4:	8b 7d d4             	mov    -0x2c(%ebp),%edi
    96f7:	01 c6                	add    %eax,%esi
    96f9:	89 45 b0             	mov    %eax,-0x50(%ebp)
    96fc:	11 d7                	adc    %edx,%edi
    96fe:	89 55 b4             	mov    %edx,-0x4c(%ebp)
    9701:	89 f0                	mov    %esi,%eax
    9703:	89 fa                	mov    %edi,%edx
    9705:	0f ac d0 03          	shrd   $0x3,%edx,%eax
    9709:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    970c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    970f:	c1 ea 03             	shr    $0x3,%edx
    9712:	85 c9                	test   %ecx,%ecx
    9714:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    9717:	0f 84 73 01 00 00    	je     9890 <bits_xe_read_bits+0x1e0>
    971d:	83 ec 0c             	sub    $0xc,%esp
    9720:	8d 40 01             	lea    0x1(%eax),%eax
    9723:	50                   	push   %eax
    9724:	e8 37 87 00 00       	call   11e60 <malloc@plt>
    9729:	83 c4 10             	add    $0x10,%esp
    972c:	89 45 cc             	mov    %eax,-0x34(%ebp)
    972f:	85 c0                	test   %eax,%eax
    9731:	0f 84 b7 01 00 00    	je     98ee <bits_xe_read_bits+0x23e>
    9737:	8b 45 08             	mov    0x8(%ebp),%eax
    973a:	8b 40 10             	mov    0x10(%eax),%eax
    973d:	85 c0                	test   %eax,%eax
    973f:	0f 84 b2 01 00 00    	je     98f7 <bits_xe_read_bits+0x247>
    9745:	8b 50 08             	mov    0x8(%eax),%edx
    9748:	85 d2                	test   %edx,%edx
    974a:	0f 84 bc 01 00 00    	je     990c <bits_xe_read_bits+0x25c>
    9750:	8b 52 04             	mov    0x4(%edx),%edx
    9753:	85 d2                	test   %edx,%edx
    9755:	0f 84 40 01 00 00    	je     989b <bits_xe_read_bits+0x1eb>
    975b:	83 ec 0c             	sub    $0xc,%esp
    975e:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    9761:	8b 75 c4             	mov    -0x3c(%ebp),%esi
    9764:	8b 7d c0             	mov    -0x40(%ebp),%edi
    9767:	51                   	push   %ecx
    9768:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    976b:	51                   	push   %ecx
    976c:	56                   	push   %esi
    976d:	57                   	push   %edi
    976e:	50                   	push   %eax
    976f:	ff d2                	call   *%edx
    9771:	83 c4 20             	add    $0x20,%esp
    9774:	89 45 c8             	mov    %eax,-0x38(%ebp)
    9777:	85 c0                	test   %eax,%eax
    9779:	0f 85 29 01 00 00    	jne    98a8 <bits_xe_read_bits+0x1f8>
    977f:	8b 75 e0             	mov    -0x20(%ebp),%esi
    9782:	8b 7d e4             	mov    -0x1c(%ebp),%edi
    9785:	89 f0                	mov    %esi,%eax
    9787:	89 fa                	mov    %edi,%edx
    9789:	0f a4 c2 03          	shld   $0x3,%eax,%edx
    978d:	c1 e0 03             	shl    $0x3,%eax
    9790:	8b 4b 04             	mov    0x4(%ebx),%ecx
    9793:	2b 45 d0             	sub    -0x30(%ebp),%eax
    9796:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
    9799:	89 45 c0             	mov    %eax,-0x40(%ebp)
    979c:	89 55 c4             	mov    %edx,-0x3c(%ebp)
    979f:	8b 03                	mov    (%ebx),%eax
    97a1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
    97a4:	89 45 b8             	mov    %eax,-0x48(%ebp)
    97a7:	39 ca                	cmp    %ecx,%edx
    97a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
    97ac:	72 0b                	jb     97b9 <bits_xe_read_bits+0x109>
    97ae:	0f 86 2c 01 00 00    	jbe    98e0 <bits_xe_read_bits+0x230>
    97b4:	8b 45 b8             	mov    -0x48(%ebp),%eax
    97b7:	89 ca                	mov    %ecx,%edx
    97b9:	89 03                	mov    %eax,(%ebx)
    97bb:	89 53 04             	mov    %edx,0x4(%ebx)
    97be:	8b 5d 08             	mov    0x8(%ebp),%ebx
    97c1:	8a 45 bc             	mov    -0x44(%ebp),%al
    97c4:	38 43 14             	cmp    %al,0x14(%ebx)
    97c7:	74 4f                	je     9818 <bits_xe_read_bits+0x168>
    97c9:	89 fa                	mov    %edi,%edx
    97cb:	09 f2                	or     %esi,%edx
    97cd:	74 49                	je     9818 <bits_xe_read_bits+0x168>
    97cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
    97d2:	89 c1                	mov    %eax,%ecx
    97d4:	8d 1c 30             	lea    (%eax,%esi,1),%ebx
    97d7:	90                   	nop
    97d8:	8a 11                	mov    (%ecx),%dl
    97da:	41                   	inc    %ecx
    97db:	c0 c2 04             	rol    $0x4,%dl
    97de:	89 d7                	mov    %edx,%edi
    97e0:	81 e7 ff 00 00 00    	and    $0xff,%edi
    97e6:	8d 04 bd 00 00 00 00 	lea    0x0(,%edi,4),%eax
    97ed:	c1 ff 02             	sar    $0x2,%edi
    97f0:	83 e0 cc             	and    $0xffffffcc,%eax
    97f3:	89 fa                	mov    %edi,%edx
    97f5:	83 e2 33             	and    $0x33,%edx
    97f8:	09 d0                	or     %edx,%eax
    97fa:	89 c6                	mov    %eax,%esi
    97fc:	81 e6 ff 00 00 00    	and    $0xff,%esi
    9802:	89 f0                	mov    %esi,%eax
    9804:	d1 f8                	sar    %eax
    9806:	8d 14 36             	lea    (%esi,%esi,1),%edx
    9809:	83 e2 aa             	and    $0xffffffaa,%edx
    980c:	83 e0 55             	and    $0x55,%eax
    980f:	09 d0                	or     %edx,%eax
    9811:	88 41 ff             	mov    %al,-0x1(%ecx)
    9814:	39 cb                	cmp    %ecx,%ebx
    9816:	75 c0                	jne    97d8 <bits_xe_read_bits+0x128>
    9818:	8b 75 d4             	mov    -0x2c(%ebp),%esi
    981b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
    981e:	89 f2                	mov    %esi,%edx
    9820:	09 da                	or     %ebx,%edx
    9822:	0f 84 8c 00 00 00    	je     98b4 <bits_xe_read_bits+0x204>
    9828:	8b 55 b4             	mov    -0x4c(%ebp),%edx
    982b:	8b 45 b0             	mov    -0x50(%ebp),%eax
    982e:	0f ac d0 03          	shrd   $0x3,%edx,%eax
    9832:	c1 ea 03             	shr    $0x3,%edx
    9835:	89 d3                	mov    %edx,%ebx
    9837:	09 c3                	or     %eax,%ebx
    9839:	74 3b                	je     9876 <bits_xe_read_bits+0x1c6>
    983b:	8b 7d d0             	mov    -0x30(%ebp),%edi
    983e:	b9 08 00 00 00       	mov    $0x8,%ecx
    9843:	8b 75 14             	mov    0x14(%ebp),%esi
    9846:	29 f9                	sub    %edi,%ecx
    9848:	8b 7d cc             	mov    -0x34(%ebp),%edi
    984b:	89 4d c0             	mov    %ecx,-0x40(%ebp)
    984e:	47                   	inc    %edi
    984f:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
    9852:	80 7d bc 00          	cmpb   $0x0,-0x44(%ebp)
    9856:	75 68                	jne    98c0 <bits_xe_read_bits+0x210>
    9858:	31 c0                	xor    %eax,%eax
    985a:	8a 4d c0             	mov    -0x40(%ebp),%cl
    985d:	8a 07                	mov    (%edi),%al
    985f:	31 d2                	xor    %edx,%edx
    9861:	8a 57 ff             	mov    -0x1(%edi),%dl
    9864:	46                   	inc    %esi
    9865:	d3 f8                	sar    %cl,%eax
    9867:	8a 4d d0             	mov    -0x30(%ebp),%cl
    986a:	47                   	inc    %edi
    986b:	d3 e2                	shl    %cl,%edx
    986d:	31 d0                	xor    %edx,%eax
    986f:	88 46 ff             	mov    %al,-0x1(%esi)
    9872:	39 f3                	cmp    %esi,%ebx
    9874:	75 e2                	jne    9858 <bits_xe_read_bits+0x1a8>
    9876:	83 ec 0c             	sub    $0xc,%esp
    9879:	8b 45 cc             	mov    -0x34(%ebp),%eax
    987c:	50                   	push   %eax
    987d:	e8 6e 88 00 00       	call   120f0 <free@plt>
    9882:	8b 45 c8             	mov    -0x38(%ebp),%eax
    9885:	83 c4 10             	add    $0x10,%esp
    9888:	8d 65 f4             	lea    -0xc(%ebp),%esp
    988b:	5b                   	pop    %ebx
    988c:	5e                   	pop    %esi
    988d:	5f                   	pop    %edi
    988e:	5d                   	pop    %ebp
    988f:	c3                   	ret    
    9890:	8b 45 14             	mov    0x14(%ebp),%eax
    9893:	89 45 cc             	mov    %eax,-0x34(%ebp)
    9896:	e9 9c fe ff ff       	jmp    9737 <bits_xe_read_bits+0x87>
    989b:	c7 45 c8 f2 ff ff ff 	movl   $0xfffffff2,-0x38(%ebp)
    98a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    98a8:	8b 75 d4             	mov    -0x2c(%ebp),%esi
    98ab:	8b 5d d0             	mov    -0x30(%ebp),%ebx
    98ae:	89 f2                	mov    %esi,%edx
    98b0:	09 da                	or     %ebx,%edx
    98b2:	75 c2                	jne    9876 <bits_xe_read_bits+0x1c6>
    98b4:	8b 45 c8             	mov    -0x38(%ebp),%eax
    98b7:	8d 65 f4             	lea    -0xc(%ebp),%esp
    98ba:	5b                   	pop    %ebx
    98bb:	5e                   	pop    %esi
    98bc:	5f                   	pop    %edi
    98bd:	5d                   	pop    %ebp
    98be:	c3                   	ret    
    98bf:	90                   	nop
    98c0:	31 c0                	xor    %eax,%eax
    98c2:	8a 4d d0             	mov    -0x30(%ebp),%cl
    98c5:	8a 47 ff             	mov    -0x1(%edi),%al
    98c8:	31 d2                	xor    %edx,%edx
    98ca:	8a 17                	mov    (%edi),%dl
    98cc:	46                   	inc    %esi
    98cd:	d3 f8                	sar    %cl,%eax
    98cf:	8a 4d c0             	mov    -0x40(%ebp),%cl
    98d2:	47                   	inc    %edi
    98d3:	d3 e2                	shl    %cl,%edx
    98d5:	31 d0                	xor    %edx,%eax
    98d7:	88 46 ff             	mov    %al,-0x1(%esi)
    98da:	39 f3                	cmp    %esi,%ebx
    98dc:	75 e2                	jne    98c0 <bits_xe_read_bits+0x210>
    98de:	eb 96                	jmp    9876 <bits_xe_read_bits+0x1c6>
    98e0:	3b 45 b8             	cmp    -0x48(%ebp),%eax
    98e3:	0f 86 d0 fe ff ff    	jbe    97b9 <bits_xe_read_bits+0x109>
    98e9:	e9 c6 fe ff ff       	jmp    97b4 <bits_xe_read_bits+0x104>
    98ee:	c7 45 c8 fe ff ff ff 	movl   $0xfffffffe,-0x38(%ebp)
    98f5:	eb bd                	jmp    98b4 <bits_xe_read_bits+0x204>
    98f7:	50                   	push   %eax
    98f8:	68 96 00 00 00       	push   $0x96
    98fd:	68 05 12 01 00       	push   $0x11205
    9902:	68 35 13 01 00       	push   $0x11335
    9907:	e8 04 86 00 00       	call   11f10 <assert_abort@plt>
    990c:	50                   	push   %eax
    990d:	68 97 00 00 00       	push   $0x97
    9912:	68 05 12 01 00       	push   $0x11205
    9917:	68 1d 12 01 00       	push   $0x1121d
    991c:	e8 ef 85 00 00       	call   11f10 <assert_abort@plt>
    9921:	eb 0d                	jmp    9930 <known_length_prefix_length>
    9923:	90                   	nop
    9924:	90                   	nop
    9925:	90                   	nop
    9926:	90                   	nop
    9927:	90                   	nop
    9928:	90                   	nop
    9929:	90                   	nop
    992a:	90                   	nop
    992b:	90                   	nop
    992c:	90                   	nop
    992d:	90                   	nop
    992e:	90                   	nop
    992f:	90                   	nop

00009930 <known_length_prefix_length>:
    9930:	55                   	push   %ebp
    9931:	89 e5                	mov    %esp,%ebp
    9933:	57                   	push   %edi
    9934:	56                   	push   %esi
    9935:	8b 45 0c             	mov    0xc(%ebp),%eax
    9938:	85 c0                	test   %eax,%eax
    993a:	75 0b                	jne    9947 <known_length_prefix_length+0x17>
    993c:	eb 5f                	jmp    999d <known_length_prefix_length+0x6d>
    993e:	66 90                	xchg   %ax,%ax
    9940:	8b 40 04             	mov    0x4(%eax),%eax
    9943:	85 c0                	test   %eax,%eax
    9945:	74 56                	je     999d <known_length_prefix_length+0x6d>
    9947:	8b 50 10             	mov    0x10(%eax),%edx
    994a:	85 d2                	test   %edx,%edx
    994c:	74 f2                	je     9940 <known_length_prefix_length+0x10>
    994e:	85 d2                	test   %edx,%edx
    9950:	7e 65                	jle    99b7 <known_length_prefix_length+0x87>
    9952:	8b 40 14             	mov    0x14(%eax),%eax
    9955:	8b 00                	mov    (%eax),%eax
    9957:	85 c0                	test   %eax,%eax
    9959:	74 57                	je     99b2 <known_length_prefix_length+0x82>
    995b:	8b 50 04             	mov    0x4(%eax),%edx
    995e:	42                   	inc    %edx
    995f:	83 38 03             	cmpl   $0x3,(%eax)
    9962:	89 50 04             	mov    %edx,0x4(%eax)
    9965:	75 23                	jne    998a <known_length_prefix_length+0x5a>
    9967:	83 ec 0c             	sub    $0xc,%esp
    996a:	8b 70 08             	mov    0x8(%eax),%esi
    996d:	8b 78 0c             	mov    0xc(%eax),%edi
    9970:	50                   	push   %eax
    9971:	e8 aa 1c 00 00       	call   b620 <bithenge_node_dec_ref>
    9976:	8b 45 14             	mov    0x14(%ebp),%eax
    9979:	83 c4 10             	add    $0x10,%esp
    997c:	89 30                	mov    %esi,(%eax)
    997e:	89 78 04             	mov    %edi,0x4(%eax)
    9981:	31 c0                	xor    %eax,%eax
    9983:	8d 65 f8             	lea    -0x8(%ebp),%esp
    9986:	5e                   	pop    %esi
    9987:	5f                   	pop    %edi
    9988:	5d                   	pop    %ebp
    9989:	c3                   	ret    
    998a:	83 ec 0c             	sub    $0xc,%esp
    998d:	50                   	push   %eax
    998e:	e8 8d 1c 00 00       	call   b620 <bithenge_node_dec_ref>
    9993:	83 c4 10             	add    $0x10,%esp
    9996:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    999b:	eb e6                	jmp    9983 <known_length_prefix_length+0x53>
    999d:	56                   	push   %esi
    999e:	68 96 01 00 00       	push   $0x196
    99a3:	68 02 15 01 00       	push   $0x11502
    99a8:	68 12 15 01 00       	push   $0x11512
    99ad:	e8 5e 85 00 00       	call   11f10 <assert_abort@plt>
    99b2:	e8 95 17 00 00       	call   b14c <bithenge_node_inc_ref.part.3>
    99b7:	51                   	push   %ecx
    99b8:	68 98 01 00 00       	push   $0x198
    99bd:	68 02 15 01 00       	push   $0x11502
    99c2:	68 cc 15 01 00       	push   $0x115cc
    99c7:	e8 44 85 00 00       	call   11f10 <assert_abort@plt>
    99cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

000099d0 <zero_terminated_apply>:
    99d0:	55                   	push   %ebp
    99d1:	89 e5                	mov    %esp,%ebp
    99d3:	56                   	push   %esi
    99d4:	53                   	push   %ebx
    99d5:	83 ec 20             	sub    $0x20,%esp
    99d8:	8b 5d 10             	mov    0x10(%ebp),%ebx
    99db:	83 3b 05             	cmpl   $0x5,(%ebx)
    99de:	0f 85 ac 00 00 00    	jne    9a90 <zero_terminated_apply+0xc0>
    99e4:	8b 43 08             	mov    0x8(%ebx),%eax
    99e7:	85 c0                	test   %eax,%eax
    99e9:	0f 84 ad 00 00 00    	je     9a9c <zero_terminated_apply+0xcc>
    99ef:	8d 55 e8             	lea    -0x18(%ebp),%edx
    99f2:	56                   	push   %esi
    99f3:	56                   	push   %esi
    99f4:	52                   	push   %edx
    99f5:	53                   	push   %ebx
    99f6:	ff 10                	call   *(%eax)
    99f8:	83 c4 10             	add    $0x10,%esp
    99fb:	85 c0                	test   %eax,%eax
    99fd:	0f 85 86 00 00 00    	jne    9a89 <zero_terminated_apply+0xb9>
    9a03:	8b 55 ec             	mov    -0x14(%ebp),%edx
    9a06:	8b 45 e8             	mov    -0x18(%ebp),%eax
    9a09:	89 d6                	mov    %edx,%esi
    9a0b:	09 c6                	or     %eax,%esi
    9a0d:	0f 84 7d 00 00 00    	je     9a90 <zero_terminated_apply+0xc0>
    9a13:	83 c0 ff             	add    $0xffffffff,%eax
    9a16:	8b 4b 08             	mov    0x8(%ebx),%ecx
    9a19:	83 d2 ff             	adc    $0xffffffff,%edx
    9a1c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    9a23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    9a2a:	85 c9                	test   %ecx,%ecx
    9a2c:	0f 84 7f 00 00 00    	je     9ab1 <zero_terminated_apply+0xe1>
    9a32:	8b 49 04             	mov    0x4(%ecx),%ecx
    9a35:	85 c9                	test   %ecx,%ecx
    9a37:	74 57                	je     9a90 <zero_terminated_apply+0xc0>
    9a39:	83 ec 0c             	sub    $0xc,%esp
    9a3c:	8d 75 f0             	lea    -0x10(%ebp),%esi
    9a3f:	56                   	push   %esi
    9a40:	8d 75 e7             	lea    -0x19(%ebp),%esi
    9a43:	56                   	push   %esi
    9a44:	52                   	push   %edx
    9a45:	50                   	push   %eax
    9a46:	53                   	push   %ebx
    9a47:	ff d1                	call   *%ecx
    9a49:	83 c4 20             	add    $0x20,%esp
    9a4c:	85 c0                	test   %eax,%eax
    9a4e:	75 39                	jne    9a89 <zero_terminated_apply+0xb9>
    9a50:	8b 45 f0             	mov    -0x10(%ebp),%eax
    9a53:	83 f0 01             	xor    $0x1,%eax
    9a56:	0b 45 f4             	or     -0xc(%ebp),%eax
    9a59:	75 35                	jne    9a90 <zero_terminated_apply+0xc0>
    9a5b:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
    9a5f:	75 2f                	jne    9a90 <zero_terminated_apply+0xc0>
    9a61:	8b 43 04             	mov    0x4(%ebx),%eax
    9a64:	8b 4d 14             	mov    0x14(%ebp),%ecx
    9a67:	40                   	inc    %eax
    9a68:	89 43 04             	mov    %eax,0x4(%ebx)
    9a6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
    9a6e:	52                   	push   %edx
    9a6f:	83 c0 ff             	add    $0xffffffff,%eax
    9a72:	52                   	push   %edx
    9a73:	8b 55 ec             	mov    -0x14(%ebp),%edx
    9a76:	83 d2 ff             	adc    $0xffffffff,%edx
    9a79:	52                   	push   %edx
    9a7a:	50                   	push   %eax
    9a7b:	6a 00                	push   $0x0
    9a7d:	6a 00                	push   $0x0
    9a7f:	53                   	push   %ebx
    9a80:	51                   	push   %ecx
    9a81:	e8 8a 2e 00 00       	call   c910 <bithenge_new_subblob>
    9a86:	83 c4 20             	add    $0x20,%esp
    9a89:	8d 65 f8             	lea    -0x8(%ebp),%esp
    9a8c:	5b                   	pop    %ebx
    9a8d:	5e                   	pop    %esi
    9a8e:	5d                   	pop    %ebp
    9a8f:	c3                   	ret    
    9a90:	8d 65 f8             	lea    -0x8(%ebp),%esp
    9a93:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    9a98:	5b                   	pop    %ebx
    9a99:	5e                   	pop    %esi
    9a9a:	5d                   	pop    %ebp
    9a9b:	c3                   	ret    
    9a9c:	50                   	push   %eax
    9a9d:	68 80 00 00 00       	push   $0x80
    9aa2:	68 05 12 01 00       	push   $0x11205
    9aa7:	68 1d 12 01 00       	push   $0x1121d
    9aac:	e8 5f 84 00 00       	call   11f10 <assert_abort@plt>
    9ab1:	53                   	push   %ebx
    9ab2:	68 97 00 00 00       	push   $0x97
    9ab7:	68 05 12 01 00       	push   $0x11205
    9abc:	68 1d 12 01 00       	push   $0x1121d
    9ac1:	e8 4a 84 00 00       	call   11f10 <assert_abort@plt>
    9ac6:	8d 76 00             	lea    0x0(%esi),%esi
    9ac9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00009ad0 <known_length_apply>:
    9ad0:	55                   	push   %ebp
    9ad1:	89 e5                	mov    %esp,%ebp
    9ad3:	57                   	push   %edi
    9ad4:	56                   	push   %esi
    9ad5:	53                   	push   %ebx
    9ad6:	83 ec 1c             	sub    $0x1c,%esp
    9ad9:	8b 45 0c             	mov    0xc(%ebp),%eax
    9adc:	8b 5d 10             	mov    0x10(%ebp),%ebx
    9adf:	85 c0                	test   %eax,%eax
    9ae1:	75 10                	jne    9af3 <known_length_apply+0x23>
    9ae3:	e9 a7 00 00 00       	jmp    9b8f <known_length_apply+0xbf>
    9ae8:	8b 40 04             	mov    0x4(%eax),%eax
    9aeb:	85 c0                	test   %eax,%eax
    9aed:	0f 84 9c 00 00 00    	je     9b8f <known_length_apply+0xbf>
    9af3:	8b 50 10             	mov    0x10(%eax),%edx
    9af6:	85 d2                	test   %edx,%edx
    9af8:	74 ee                	je     9ae8 <known_length_apply+0x18>
    9afa:	85 d2                	test   %edx,%edx
    9afc:	0f 8e a7 00 00 00    	jle    9ba9 <known_length_apply+0xd9>
    9b02:	8b 40 14             	mov    0x14(%eax),%eax
    9b05:	8b 00                	mov    (%eax),%eax
    9b07:	85 c0                	test   %eax,%eax
    9b09:	0f 84 95 00 00 00    	je     9ba4 <known_length_apply+0xd4>
    9b0f:	8b 70 04             	mov    0x4(%eax),%esi
    9b12:	46                   	inc    %esi
    9b13:	83 38 03             	cmpl   $0x3,(%eax)
    9b16:	89 70 04             	mov    %esi,0x4(%eax)
    9b19:	75 61                	jne    9b7c <known_length_apply+0xac>
    9b1b:	83 ec 0c             	sub    $0xc,%esp
    9b1e:	8b 70 08             	mov    0x8(%eax),%esi
    9b21:	8b 78 0c             	mov    0xc(%eax),%edi
    9b24:	50                   	push   %eax
    9b25:	e8 f6 1a 00 00       	call   b620 <bithenge_node_dec_ref>
    9b2a:	83 c4 10             	add    $0x10,%esp
    9b2d:	83 3b 05             	cmpl   $0x5,(%ebx)
    9b30:	75 3d                	jne    9b6f <known_length_apply+0x9f>
    9b32:	8b 43 08             	mov    0x8(%ebx),%eax
    9b35:	85 c0                	test   %eax,%eax
    9b37:	0f 84 81 00 00 00    	je     9bbe <known_length_apply+0xee>
    9b3d:	8d 55 e0             	lea    -0x20(%ebp),%edx
    9b40:	51                   	push   %ecx
    9b41:	51                   	push   %ecx
    9b42:	52                   	push   %edx
    9b43:	53                   	push   %ebx
    9b44:	ff 10                	call   *(%eax)
    9b46:	83 c4 10             	add    $0x10,%esp
    9b49:	85 c0                	test   %eax,%eax
    9b4b:	75 1a                	jne    9b67 <known_length_apply+0x97>
    9b4d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    9b50:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    9b53:	31 ce                	xor    %ecx,%esi
    9b55:	31 d7                	xor    %edx,%edi
    9b57:	09 f7                	or     %esi,%edi
    9b59:	75 14                	jne    9b6f <known_length_apply+0x9f>
    9b5b:	8b 53 04             	mov    0x4(%ebx),%edx
    9b5e:	42                   	inc    %edx
    9b5f:	89 53 04             	mov    %edx,0x4(%ebx)
    9b62:	8b 55 14             	mov    0x14(%ebp),%edx
    9b65:	89 1a                	mov    %ebx,(%edx)
    9b67:	8d 65 f4             	lea    -0xc(%ebp),%esp
    9b6a:	5b                   	pop    %ebx
    9b6b:	5e                   	pop    %esi
    9b6c:	5f                   	pop    %edi
    9b6d:	5d                   	pop    %ebp
    9b6e:	c3                   	ret    
    9b6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
    9b72:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    9b77:	5b                   	pop    %ebx
    9b78:	5e                   	pop    %esi
    9b79:	5f                   	pop    %edi
    9b7a:	5d                   	pop    %ebp
    9b7b:	c3                   	ret    
    9b7c:	83 ec 0c             	sub    $0xc,%esp
    9b7f:	50                   	push   %eax
    9b80:	e8 9b 1a 00 00       	call   b620 <bithenge_node_dec_ref>
    9b85:	83 c4 10             	add    $0x10,%esp
    9b88:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    9b8d:	eb d8                	jmp    9b67 <known_length_apply+0x97>
    9b8f:	50                   	push   %eax
    9b90:	68 96 01 00 00       	push   $0x196
    9b95:	68 02 15 01 00       	push   $0x11502
    9b9a:	68 12 15 01 00       	push   $0x11512
    9b9f:	e8 6c 83 00 00       	call   11f10 <assert_abort@plt>
    9ba4:	e8 a3 15 00 00       	call   b14c <bithenge_node_inc_ref.part.3>
    9ba9:	57                   	push   %edi
    9baa:	68 98 01 00 00       	push   $0x198
    9baf:	68 02 15 01 00       	push   $0x11502
    9bb4:	68 cc 15 01 00       	push   $0x115cc
    9bb9:	e8 52 83 00 00       	call   11f10 <assert_abort@plt>
    9bbe:	53                   	push   %ebx
    9bbf:	68 80 00 00 00       	push   $0x80
    9bc4:	68 05 12 01 00       	push   $0x11205
    9bc9:	68 1d 12 01 00       	push   $0x1121d
    9bce:	e8 3d 83 00 00       	call   11f10 <assert_abort@plt>
    9bd3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    9bd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00009be0 <uint_xe_prefix_apply>:
    9be0:	55                   	push   %ebp
    9be1:	89 e5                	mov    %esp,%ebp
    9be3:	57                   	push   %edi
    9be4:	56                   	push   %esi
    9be5:	53                   	push   %ebx
    9be6:	83 ec 3c             	sub    $0x3c,%esp
    9be9:	8b 45 0c             	mov    0xc(%ebp),%eax
    9bec:	8b 75 10             	mov    0x10(%ebp),%esi
    9bef:	85 c0                	test   %eax,%eax
    9bf1:	75 10                	jne    9c03 <uint_xe_prefix_apply+0x23>
    9bf3:	e9 91 03 00 00       	jmp    9f89 <uint_xe_prefix_apply+0x3a9>
    9bf8:	8b 40 04             	mov    0x4(%eax),%eax
    9bfb:	85 c0                	test   %eax,%eax
    9bfd:	0f 84 86 03 00 00    	je     9f89 <uint_xe_prefix_apply+0x3a9>
    9c03:	8b 50 10             	mov    0x10(%eax),%edx
    9c06:	85 d2                	test   %edx,%edx
    9c08:	74 ee                	je     9bf8 <uint_xe_prefix_apply+0x18>
    9c0a:	85 d2                	test   %edx,%edx
    9c0c:	0f 8e 90 03 00 00    	jle    9fa2 <uint_xe_prefix_apply+0x3c2>
    9c12:	8b 40 14             	mov    0x14(%eax),%eax
    9c15:	8b 00                	mov    (%eax),%eax
    9c17:	85 c0                	test   %eax,%eax
    9c19:	0f 84 ad 03 00 00    	je     9fcc <uint_xe_prefix_apply+0x3ec>
    9c1f:	8b 50 04             	mov    0x4(%eax),%edx
    9c22:	42                   	inc    %edx
    9c23:	83 38 03             	cmpl   $0x3,(%eax)
    9c26:	89 50 04             	mov    %edx,0x4(%eax)
    9c29:	0f 85 16 02 00 00    	jne    9e45 <uint_xe_prefix_apply+0x265>
    9c2f:	83 ec 0c             	sub    $0xc,%esp
    9c32:	8b 48 08             	mov    0x8(%eax),%ecx
    9c35:	8b 58 0c             	mov    0xc(%eax),%ebx
    9c38:	89 4d d0             	mov    %ecx,-0x30(%ebp)
    9c3b:	50                   	push   %eax
    9c3c:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
    9c3f:	e8 dc 19 00 00       	call   b620 <bithenge_node_dec_ref>
    9c44:	8b 7d d4             	mov    -0x2c(%ebp),%edi
    9c47:	83 c4 10             	add    $0x10,%esp
    9c4a:	85 ff                	test   %edi,%edi
    9c4c:	0f 88 ec 01 00 00    	js     9e3e <uint_xe_prefix_apply+0x25e>
    9c52:	8b 45 d0             	mov    -0x30(%ebp),%eax
    9c55:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    9c58:	89 c3                	mov    %eax,%ebx
    9c5a:	83 f8 3f             	cmp    $0x3f,%eax
    9c5d:	0f 87 db 01 00 00    	ja     9e3e <uint_xe_prefix_apply+0x25e>
    9c63:	89 d7                	mov    %edx,%edi
    9c65:	89 55 dc             	mov    %edx,-0x24(%ebp)
    9c68:	31 d2                	xor    %edx,%edx
    9c6a:	89 45 c0             	mov    %eax,-0x40(%ebp)
    9c6d:	81 7d 08 f4 3a 01 00 	cmpl   $0x13af4,0x8(%ebp)
    9c74:	89 45 d8             	mov    %eax,-0x28(%ebp)
    9c77:	0f 94 c2             	sete   %dl
    9c7a:	85 f6                	test   %esi,%esi
    9c7c:	0f 84 35 03 00 00    	je     9fb7 <uint_xe_prefix_apply+0x3d7>
    9c82:	8b 46 08             	mov    0x8(%esi),%eax
    9c85:	85 c0                	test   %eax,%eax
    9c87:	0f 84 44 03 00 00    	je     9fd1 <uint_xe_prefix_apply+0x3f1>
    9c8d:	8b 40 08             	mov    0x8(%eax),%eax
    9c90:	85 c0                	test   %eax,%eax
    9c92:	0f 84 a6 01 00 00    	je     9e3e <uint_xe_prefix_apply+0x25e>
    9c98:	51                   	push   %ecx
    9c99:	51                   	push   %ecx
    9c9a:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    9c9d:	52                   	push   %edx
    9c9e:	8d 55 d8             	lea    -0x28(%ebp),%edx
    9ca1:	52                   	push   %edx
    9ca2:	51                   	push   %ecx
    9ca3:	6a 00                	push   $0x0
    9ca5:	6a 00                	push   $0x0
    9ca7:	56                   	push   %esi
    9ca8:	ff d0                	call   *%eax
    9caa:	83 c4 20             	add    $0x20,%esp
    9cad:	85 c0                	test   %eax,%eax
    9caf:	0f 85 59 01 00 00    	jne    9e0e <uint_xe_prefix_apply+0x22e>
    9cb5:	8b 55 d8             	mov    -0x28(%ebp),%edx
    9cb8:	8b 45 dc             	mov    -0x24(%ebp),%eax
    9cbb:	89 d9                	mov    %ebx,%ecx
    9cbd:	31 c7                	xor    %eax,%edi
    9cbf:	31 d1                	xor    %edx,%ecx
    9cc1:	09 cf                	or     %ecx,%edi
    9cc3:	0f 85 75 01 00 00    	jne    9e3e <uint_xe_prefix_apply+0x25e>
    9cc9:	8b 75 18             	mov    0x18(%ebp),%esi
    9ccc:	85 f6                	test   %esi,%esi
    9cce:	74 08                	je     9cd8 <uint_xe_prefix_apply+0xf8>
    9cd0:	8b 7d 18             	mov    0x18(%ebp),%edi
    9cd3:	89 17                	mov    %edx,(%edi)
    9cd5:	89 47 04             	mov    %eax,0x4(%edi)
    9cd8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    9cdb:	8b 45 d0             	mov    -0x30(%ebp),%eax
    9cde:	0f ac d0 03          	shrd   $0x3,%edx,%eax
    9ce2:	c1 fa 03             	sar    $0x3,%edx
    9ce5:	89 c6                	mov    %eax,%esi
    9ce7:	89 45 c8             	mov    %eax,-0x38(%ebp)
    9cea:	89 55 cc             	mov    %edx,-0x34(%ebp)
    9ced:	81 7d 08 f4 3a 01 00 	cmpl   $0x13af4,0x8(%ebp)
    9cf4:	0f 84 5e 01 00 00    	je     9e58 <uint_xe_prefix_apply+0x278>
    9cfa:	89 55 c4             	mov    %edx,-0x3c(%ebp)
    9cfd:	09 d0                	or     %edx,%eax
    9cff:	0f 84 79 02 00 00    	je     9f7e <uint_xe_prefix_apply+0x39e>
    9d05:	0f b6 75 e0          	movzbl -0x20(%ebp),%esi
    9d09:	8d 4b f8             	lea    -0x8(%ebx),%ecx
    9d0c:	81 e6 ff 00 00 00    	and    $0xff,%esi
    9d12:	d3 e6                	shl    %cl,%esi
    9d14:	8b 45 c8             	mov    -0x38(%ebp),%eax
    9d17:	89 f7                	mov    %esi,%edi
    9d19:	c1 ff 1f             	sar    $0x1f,%edi
    9d1c:	83 f0 01             	xor    $0x1,%eax
    9d1f:	0b 45 c4             	or     -0x3c(%ebp),%eax
    9d22:	0f 84 d1 00 00 00    	je     9df9 <uint_xe_prefix_apply+0x219>
    9d28:	31 c0                	xor    %eax,%eax
    9d2a:	8d 4b f0             	lea    -0x10(%ebx),%ecx
    9d2d:	8a 45 e1             	mov    -0x1f(%ebp),%al
    9d30:	d3 e0                	shl    %cl,%eax
    9d32:	89 c2                	mov    %eax,%edx
    9d34:	c1 fa 1f             	sar    $0x1f,%edx
    9d37:	01 c6                	add    %eax,%esi
    9d39:	11 d7                	adc    %edx,%edi
    9d3b:	8b 45 c8             	mov    -0x38(%ebp),%eax
    9d3e:	83 f0 02             	xor    $0x2,%eax
    9d41:	0b 45 c4             	or     -0x3c(%ebp),%eax
    9d44:	0f 84 af 00 00 00    	je     9df9 <uint_xe_prefix_apply+0x219>
    9d4a:	31 c0                	xor    %eax,%eax
    9d4c:	8d 4b e8             	lea    -0x18(%ebx),%ecx
    9d4f:	8a 45 e2             	mov    -0x1e(%ebp),%al
    9d52:	d3 e0                	shl    %cl,%eax
    9d54:	89 c2                	mov    %eax,%edx
    9d56:	c1 fa 1f             	sar    $0x1f,%edx
    9d59:	01 c6                	add    %eax,%esi
    9d5b:	11 d7                	adc    %edx,%edi
    9d5d:	8b 45 c8             	mov    -0x38(%ebp),%eax
    9d60:	83 f0 03             	xor    $0x3,%eax
    9d63:	0b 45 c4             	or     -0x3c(%ebp),%eax
    9d66:	0f 84 8d 00 00 00    	je     9df9 <uint_xe_prefix_apply+0x219>
    9d6c:	31 c0                	xor    %eax,%eax
    9d6e:	8d 4b e0             	lea    -0x20(%ebx),%ecx
    9d71:	8a 45 e3             	mov    -0x1d(%ebp),%al
    9d74:	d3 e0                	shl    %cl,%eax
    9d76:	89 c2                	mov    %eax,%edx
    9d78:	c1 fa 1f             	sar    $0x1f,%edx
    9d7b:	01 c6                	add    %eax,%esi
    9d7d:	11 d7                	adc    %edx,%edi
    9d7f:	8b 45 c8             	mov    -0x38(%ebp),%eax
    9d82:	83 f0 04             	xor    $0x4,%eax
    9d85:	0b 45 c4             	or     -0x3c(%ebp),%eax
    9d88:	74 6f                	je     9df9 <uint_xe_prefix_apply+0x219>
    9d8a:	31 c0                	xor    %eax,%eax
    9d8c:	8d 4b d8             	lea    -0x28(%ebx),%ecx
    9d8f:	8a 45 e4             	mov    -0x1c(%ebp),%al
    9d92:	d3 e0                	shl    %cl,%eax
    9d94:	89 c2                	mov    %eax,%edx
    9d96:	c1 fa 1f             	sar    $0x1f,%edx
    9d99:	01 c6                	add    %eax,%esi
    9d9b:	11 d7                	adc    %edx,%edi
    9d9d:	8b 45 c8             	mov    -0x38(%ebp),%eax
    9da0:	83 f0 05             	xor    $0x5,%eax
    9da3:	0b 45 c4             	or     -0x3c(%ebp),%eax
    9da6:	74 51                	je     9df9 <uint_xe_prefix_apply+0x219>
    9da8:	31 c0                	xor    %eax,%eax
    9daa:	8d 4b d0             	lea    -0x30(%ebx),%ecx
    9dad:	8a 45 e5             	mov    -0x1b(%ebp),%al
    9db0:	d3 e0                	shl    %cl,%eax
    9db2:	89 c2                	mov    %eax,%edx
    9db4:	c1 fa 1f             	sar    $0x1f,%edx
    9db7:	01 c6                	add    %eax,%esi
    9db9:	11 d7                	adc    %edx,%edi
    9dbb:	8b 45 c8             	mov    -0x38(%ebp),%eax
    9dbe:	83 f0 06             	xor    $0x6,%eax
    9dc1:	0b 45 c4             	or     -0x3c(%ebp),%eax
    9dc4:	74 33                	je     9df9 <uint_xe_prefix_apply+0x219>
    9dc6:	31 c0                	xor    %eax,%eax
    9dc8:	8d 4b c8             	lea    -0x38(%ebx),%ecx
    9dcb:	8a 45 e6             	mov    -0x1a(%ebp),%al
    9dce:	d3 e0                	shl    %cl,%eax
    9dd0:	89 c2                	mov    %eax,%edx
    9dd2:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
    9dd5:	c1 fa 1f             	sar    $0x1f,%edx
    9dd8:	01 c6                	add    %eax,%esi
    9dda:	11 d7                	adc    %edx,%edi
    9ddc:	8b 45 c8             	mov    -0x38(%ebp),%eax
    9ddf:	83 f0 07             	xor    $0x7,%eax
    9de2:	09 c1                	or     %eax,%ecx
    9de4:	74 13                	je     9df9 <uint_xe_prefix_apply+0x219>
    9de6:	31 c0                	xor    %eax,%eax
    9de8:	8d 4b c0             	lea    -0x40(%ebx),%ecx
    9deb:	8a 45 e7             	mov    -0x19(%ebp),%al
    9dee:	d3 e0                	shl    %cl,%eax
    9df0:	89 c2                	mov    %eax,%edx
    9df2:	c1 fa 1f             	sar    $0x1f,%edx
    9df5:	01 c6                	add    %eax,%esi
    9df7:	11 d7                	adc    %edx,%edi
    9df9:	f6 45 c0 07          	testb  $0x7,-0x40(%ebp)
    9dfd:	75 17                	jne    9e16 <uint_xe_prefix_apply+0x236>
    9dff:	8b 55 14             	mov    0x14(%ebp),%edx
    9e02:	50                   	push   %eax
    9e03:	57                   	push   %edi
    9e04:	56                   	push   %esi
    9e05:	52                   	push   %edx
    9e06:	e8 25 1c 00 00       	call   ba30 <bithenge_new_integer_node>
    9e0b:	83 c4 10             	add    $0x10,%esp
    9e0e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    9e11:	5b                   	pop    %ebx
    9e12:	5e                   	pop    %esi
    9e13:	5f                   	pop    %edi
    9e14:	5d                   	pop    %ebp
    9e15:	c3                   	ret    
    9e16:	8b 4d c8             	mov    -0x38(%ebp),%ecx
    9e19:	8d 45 e0             	lea    -0x20(%ebp),%eax
    9e1c:	01 c8                	add    %ecx,%eax
    9e1e:	31 d2                	xor    %edx,%edx
    9e20:	b9 08 00 00 00       	mov    $0x8,%ecx
    9e25:	8a 10                	mov    (%eax),%dl
    9e27:	8b 45 d0             	mov    -0x30(%ebp),%eax
    9e2a:	83 e0 07             	and    $0x7,%eax
    9e2d:	29 c1                	sub    %eax,%ecx
    9e2f:	89 d0                	mov    %edx,%eax
    9e31:	d3 f8                	sar    %cl,%eax
    9e33:	89 c2                	mov    %eax,%edx
    9e35:	c1 fa 1f             	sar    $0x1f,%edx
    9e38:	01 c6                	add    %eax,%esi
    9e3a:	11 d7                	adc    %edx,%edi
    9e3c:	eb c1                	jmp    9dff <uint_xe_prefix_apply+0x21f>
    9e3e:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    9e43:	eb c9                	jmp    9e0e <uint_xe_prefix_apply+0x22e>
    9e45:	83 ec 0c             	sub    $0xc,%esp
    9e48:	50                   	push   %eax
    9e49:	e8 d2 17 00 00       	call   b620 <bithenge_node_dec_ref>
    9e4e:	83 c4 10             	add    $0x10,%esp
    9e51:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    9e56:	eb b6                	jmp    9e0e <uint_xe_prefix_apply+0x22e>
    9e58:	89 c1                	mov    %eax,%ecx
    9e5a:	89 d3                	mov    %edx,%ebx
    9e5c:	09 d0                	or     %edx,%eax
    9e5e:	0f 84 3a 01 00 00    	je     9f9e <uint_xe_prefix_apply+0x3be>
    9e64:	0f b6 75 e0          	movzbl -0x20(%ebp),%esi
    9e68:	89 c8                	mov    %ecx,%eax
    9e6a:	81 e6 ff 00 00 00    	and    $0xff,%esi
    9e70:	83 f0 01             	xor    $0x1,%eax
    9e73:	31 ff                	xor    %edi,%edi
    9e75:	89 55 c4             	mov    %edx,-0x3c(%ebp)
    9e78:	09 d0                	or     %edx,%eax
    9e7a:	0f 84 be 00 00 00    	je     9f3e <uint_xe_prefix_apply+0x35e>
    9e80:	31 c0                	xor    %eax,%eax
    9e82:	8a 45 e1             	mov    -0x1f(%ebp),%al
    9e85:	c1 e0 08             	shl    $0x8,%eax
    9e88:	89 c2                	mov    %eax,%edx
    9e8a:	c1 fa 1f             	sar    $0x1f,%edx
    9e8d:	01 c6                	add    %eax,%esi
    9e8f:	11 d7                	adc    %edx,%edi
    9e91:	89 c8                	mov    %ecx,%eax
    9e93:	83 f0 02             	xor    $0x2,%eax
    9e96:	09 d8                	or     %ebx,%eax
    9e98:	0f 84 a0 00 00 00    	je     9f3e <uint_xe_prefix_apply+0x35e>
    9e9e:	31 c0                	xor    %eax,%eax
    9ea0:	8a 45 e2             	mov    -0x1e(%ebp),%al
    9ea3:	c1 e0 10             	shl    $0x10,%eax
    9ea6:	89 c2                	mov    %eax,%edx
    9ea8:	c1 fa 1f             	sar    $0x1f,%edx
    9eab:	01 c6                	add    %eax,%esi
    9ead:	11 d7                	adc    %edx,%edi
    9eaf:	89 c8                	mov    %ecx,%eax
    9eb1:	83 f0 03             	xor    $0x3,%eax
    9eb4:	09 d8                	or     %ebx,%eax
    9eb6:	0f 84 82 00 00 00    	je     9f3e <uint_xe_prefix_apply+0x35e>
    9ebc:	31 c0                	xor    %eax,%eax
    9ebe:	8a 45 e3             	mov    -0x1d(%ebp),%al
    9ec1:	c1 e0 18             	shl    $0x18,%eax
    9ec4:	89 c2                	mov    %eax,%edx
    9ec6:	c1 fa 1f             	sar    $0x1f,%edx
    9ec9:	01 c6                	add    %eax,%esi
    9ecb:	11 d7                	adc    %edx,%edi
    9ecd:	89 c8                	mov    %ecx,%eax
    9ecf:	83 f0 04             	xor    $0x4,%eax
    9ed2:	09 d8                	or     %ebx,%eax
    9ed4:	74 68                	je     9f3e <uint_xe_prefix_apply+0x35e>
    9ed6:	31 c0                	xor    %eax,%eax
    9ed8:	b1 20                	mov    $0x20,%cl
    9eda:	8a 45 e4             	mov    -0x1c(%ebp),%al
    9edd:	d3 e0                	shl    %cl,%eax
    9edf:	89 c2                	mov    %eax,%edx
    9ee1:	c1 fa 1f             	sar    $0x1f,%edx
    9ee4:	01 c6                	add    %eax,%esi
    9ee6:	11 d7                	adc    %edx,%edi
    9ee8:	8b 45 c8             	mov    -0x38(%ebp),%eax
    9eeb:	83 f0 05             	xor    $0x5,%eax
    9eee:	09 d8                	or     %ebx,%eax
    9ef0:	74 4c                	je     9f3e <uint_xe_prefix_apply+0x35e>
    9ef2:	31 c0                	xor    %eax,%eax
    9ef4:	b1 28                	mov    $0x28,%cl
    9ef6:	8a 45 e5             	mov    -0x1b(%ebp),%al
    9ef9:	d3 e0                	shl    %cl,%eax
    9efb:	89 c2                	mov    %eax,%edx
    9efd:	c1 fa 1f             	sar    $0x1f,%edx
    9f00:	01 c6                	add    %eax,%esi
    9f02:	11 d7                	adc    %edx,%edi
    9f04:	8b 45 c8             	mov    -0x38(%ebp),%eax
    9f07:	83 f0 06             	xor    $0x6,%eax
    9f0a:	09 d8                	or     %ebx,%eax
    9f0c:	74 30                	je     9f3e <uint_xe_prefix_apply+0x35e>
    9f0e:	31 c0                	xor    %eax,%eax
    9f10:	b1 30                	mov    $0x30,%cl
    9f12:	8a 45 e6             	mov    -0x1a(%ebp),%al
    9f15:	d3 e0                	shl    %cl,%eax
    9f17:	89 c2                	mov    %eax,%edx
    9f19:	89 d9                	mov    %ebx,%ecx
    9f1b:	c1 fa 1f             	sar    $0x1f,%edx
    9f1e:	01 c6                	add    %eax,%esi
    9f20:	11 d7                	adc    %edx,%edi
    9f22:	8b 45 c8             	mov    -0x38(%ebp),%eax
    9f25:	83 f0 07             	xor    $0x7,%eax
    9f28:	09 c1                	or     %eax,%ecx
    9f2a:	74 12                	je     9f3e <uint_xe_prefix_apply+0x35e>
    9f2c:	31 c0                	xor    %eax,%eax
    9f2e:	b1 38                	mov    $0x38,%cl
    9f30:	8a 45 e7             	mov    -0x19(%ebp),%al
    9f33:	d3 e0                	shl    %cl,%eax
    9f35:	89 c2                	mov    %eax,%edx
    9f37:	c1 fa 1f             	sar    $0x1f,%edx
    9f3a:	01 c6                	add    %eax,%esi
    9f3c:	11 d7                	adc    %edx,%edi
    9f3e:	f6 45 c0 07          	testb  $0x7,-0x40(%ebp)
    9f42:	0f 84 b7 fe ff ff    	je     9dff <uint_xe_prefix_apply+0x21f>
    9f48:	8b 5d c8             	mov    -0x38(%ebp),%ebx
    9f4b:	8d 55 e0             	lea    -0x20(%ebp),%edx
    9f4e:	01 da                	add    %ebx,%edx
    9f50:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    9f53:	83 e1 07             	and    $0x7,%ecx
    9f56:	b8 01 00 00 00       	mov    $0x1,%eax
    9f5b:	d3 e0                	shl    %cl,%eax
    9f5d:	8a 1a                	mov    (%edx),%bl
    9f5f:	48                   	dec    %eax
    9f60:	81 e3 ff 00 00 00    	and    $0xff,%ebx
    9f66:	8b 4d c8             	mov    -0x38(%ebp),%ecx
    9f69:	c1 e1 03             	shl    $0x3,%ecx
    9f6c:	21 d8                	and    %ebx,%eax
    9f6e:	d3 e0                	shl    %cl,%eax
    9f70:	89 c2                	mov    %eax,%edx
    9f72:	c1 fa 1f             	sar    $0x1f,%edx
    9f75:	01 c6                	add    %eax,%esi
    9f77:	11 d7                	adc    %edx,%edi
    9f79:	e9 81 fe ff ff       	jmp    9dff <uint_xe_prefix_apply+0x21f>
    9f7e:	8b 75 c8             	mov    -0x38(%ebp),%esi
    9f81:	8b 7d cc             	mov    -0x34(%ebp),%edi
    9f84:	e9 70 fe ff ff       	jmp    9df9 <uint_xe_prefix_apply+0x219>
    9f89:	53                   	push   %ebx
    9f8a:	68 96 01 00 00       	push   $0x196
    9f8f:	68 02 15 01 00       	push   $0x11502
    9f94:	68 12 15 01 00       	push   $0x11512
    9f99:	e8 72 7f 00 00       	call   11f10 <assert_abort@plt>
    9f9e:	89 d7                	mov    %edx,%edi
    9fa0:	eb 9c                	jmp    9f3e <uint_xe_prefix_apply+0x35e>
    9fa2:	51                   	push   %ecx
    9fa3:	68 98 01 00 00       	push   $0x198
    9fa8:	68 02 15 01 00       	push   $0x11502
    9fad:	68 cc 15 01 00       	push   $0x115cc
    9fb2:	e8 59 7f 00 00       	call   11f10 <assert_abort@plt>
    9fb7:	56                   	push   %esi
    9fb8:	68 b2 00 00 00       	push   $0xb2
    9fbd:	68 05 12 01 00       	push   $0x11205
    9fc2:	68 35 13 01 00       	push   $0x11335
    9fc7:	e8 44 7f 00 00       	call   11f10 <assert_abort@plt>
    9fcc:	e8 7b 11 00 00       	call   b14c <bithenge_node_inc_ref.part.3>
    9fd1:	53                   	push   %ebx
    9fd2:	68 b3 00 00 00       	push   $0xb3
    9fd7:	68 05 12 01 00       	push   $0x11205
    9fdc:	68 1d 12 01 00       	push   $0x1121d
    9fe1:	e8 2a 7f 00 00       	call   11f10 <assert_abort@plt>
    9fe6:	8d 76 00             	lea    0x0(%esi),%esi
    9fe9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00009ff0 <bithenge_scope_dec_ref.part.12>:
    9ff0:	55                   	push   %ebp
    9ff1:	89 e5                	mov    %esp,%ebp
    9ff3:	57                   	push   %edi
    9ff4:	56                   	push   %esi
    9ff5:	53                   	push   %ebx
    9ff6:	83 ec 28             	sub    $0x28,%esp
    9ff9:	89 c6                	mov    %eax,%esi
    9ffb:	8b 40 18             	mov    0x18(%eax),%eax
    9ffe:	31 db                	xor    %ebx,%ebx
    a000:	50                   	push   %eax
    a001:	e8 1a 16 00 00       	call   b620 <bithenge_node_dec_ref>
    a006:	8b 56 10             	mov    0x10(%esi),%edx
    a009:	83 c4 10             	add    $0x10,%esp
    a00c:	85 d2                	test   %edx,%edx
    a00e:	7e 18                	jle    a028 <bithenge_scope_dec_ref.part.12+0x38>
    a010:	8b 46 14             	mov    0x14(%esi),%eax
    a013:	83 ec 0c             	sub    $0xc,%esp
    a016:	8b 04 98             	mov    (%eax,%ebx,4),%eax
    a019:	43                   	inc    %ebx
    a01a:	50                   	push   %eax
    a01b:	e8 00 16 00 00       	call   b620 <bithenge_node_dec_ref>
    a020:	83 c4 10             	add    $0x10,%esp
    a023:	3b 5e 10             	cmp    0x10(%esi),%ebx
    a026:	7c e8                	jl     a010 <bithenge_scope_dec_ref.part.12+0x20>
    a028:	8b 7e 04             	mov    0x4(%esi),%edi
    a02b:	85 ff                	test   %edi,%edi
    a02d:	74 09                	je     a038 <bithenge_scope_dec_ref.part.12+0x48>
    a02f:	8b 07                	mov    (%edi),%eax
    a031:	48                   	dec    %eax
    a032:	89 07                	mov    %eax,(%edi)
    a034:	85 c0                	test   %eax,%eax
    a036:	74 30                	je     a068 <bithenge_scope_dec_ref.part.12+0x78>
    a038:	83 ec 0c             	sub    $0xc,%esp
    a03b:	8b 46 14             	mov    0x14(%esi),%eax
    a03e:	50                   	push   %eax
    a03f:	e8 ac 80 00 00       	call   120f0 <free@plt>
    a044:	8b 4e 08             	mov    0x8(%esi),%ecx
    a047:	5a                   	pop    %edx
    a048:	51                   	push   %ecx
    a049:	e8 a2 80 00 00       	call   120f0 <free@plt>
    a04e:	89 34 24             	mov    %esi,(%esp)
    a051:	e8 9a 80 00 00       	call   120f0 <free@plt>
    a056:	83 c4 10             	add    $0x10,%esp
    a059:	8d 65 f4             	lea    -0xc(%ebp),%esp
    a05c:	5b                   	pop    %ebx
    a05d:	5e                   	pop    %esi
    a05e:	5f                   	pop    %edi
    a05f:	5d                   	pop    %ebp
    a060:	c3                   	ret    
    a061:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    a068:	83 ec 0c             	sub    $0xc,%esp
    a06b:	8b 47 18             	mov    0x18(%edi),%eax
    a06e:	31 db                	xor    %ebx,%ebx
    a070:	50                   	push   %eax
    a071:	e8 aa 15 00 00       	call   b620 <bithenge_node_dec_ref>
    a076:	8b 47 10             	mov    0x10(%edi),%eax
    a079:	83 c4 10             	add    $0x10,%esp
    a07c:	85 c0                	test   %eax,%eax
    a07e:	7e 18                	jle    a098 <bithenge_scope_dec_ref.part.12+0xa8>
    a080:	8b 47 14             	mov    0x14(%edi),%eax
    a083:	83 ec 0c             	sub    $0xc,%esp
    a086:	8b 04 98             	mov    (%eax,%ebx,4),%eax
    a089:	43                   	inc    %ebx
    a08a:	50                   	push   %eax
    a08b:	e8 90 15 00 00       	call   b620 <bithenge_node_dec_ref>
    a090:	83 c4 10             	add    $0x10,%esp
    a093:	3b 5f 10             	cmp    0x10(%edi),%ebx
    a096:	7c e8                	jl     a080 <bithenge_scope_dec_ref.part.12+0x90>
    a098:	8b 57 04             	mov    0x4(%edi),%edx
    a09b:	85 d2                	test   %edx,%edx
    a09d:	74 09                	je     a0a8 <bithenge_scope_dec_ref.part.12+0xb8>
    a09f:	8b 02                	mov    (%edx),%eax
    a0a1:	48                   	dec    %eax
    a0a2:	89 02                	mov    %eax,(%edx)
    a0a4:	85 c0                	test   %eax,%eax
    a0a6:	74 28                	je     a0d0 <bithenge_scope_dec_ref.part.12+0xe0>
    a0a8:	83 ec 0c             	sub    $0xc,%esp
    a0ab:	8b 5f 14             	mov    0x14(%edi),%ebx
    a0ae:	53                   	push   %ebx
    a0af:	e8 3c 80 00 00       	call   120f0 <free@plt>
    a0b4:	58                   	pop    %eax
    a0b5:	8b 47 08             	mov    0x8(%edi),%eax
    a0b8:	50                   	push   %eax
    a0b9:	e8 32 80 00 00       	call   120f0 <free@plt>
    a0be:	89 3c 24             	mov    %edi,(%esp)
    a0c1:	e8 2a 80 00 00       	call   120f0 <free@plt>
    a0c6:	83 c4 10             	add    $0x10,%esp
    a0c9:	e9 6a ff ff ff       	jmp    a038 <bithenge_scope_dec_ref.part.12+0x48>
    a0ce:	66 90                	xchg   %ax,%ax
    a0d0:	83 ec 0c             	sub    $0xc,%esp
    a0d3:	8b 4a 18             	mov    0x18(%edx),%ecx
    a0d6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    a0d9:	31 db                	xor    %ebx,%ebx
    a0db:	51                   	push   %ecx
    a0dc:	e8 3f 15 00 00       	call   b620 <bithenge_node_dec_ref>
    a0e1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    a0e4:	83 c4 10             	add    $0x10,%esp
    a0e7:	8b 42 10             	mov    0x10(%edx),%eax
    a0ea:	85 c0                	test   %eax,%eax
    a0ec:	7e 20                	jle    a10e <bithenge_scope_dec_ref.part.12+0x11e>
    a0ee:	66 90                	xchg   %ax,%ax
    a0f0:	8b 42 14             	mov    0x14(%edx),%eax
    a0f3:	83 ec 0c             	sub    $0xc,%esp
    a0f6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    a0f9:	8b 04 98             	mov    (%eax,%ebx,4),%eax
    a0fc:	43                   	inc    %ebx
    a0fd:	50                   	push   %eax
    a0fe:	e8 1d 15 00 00       	call   b620 <bithenge_node_dec_ref>
    a103:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    a106:	83 c4 10             	add    $0x10,%esp
    a109:	3b 5a 10             	cmp    0x10(%edx),%ebx
    a10c:	7c e2                	jl     a0f0 <bithenge_scope_dec_ref.part.12+0x100>
    a10e:	8b 42 04             	mov    0x4(%edx),%eax
    a111:	85 c0                	test   %eax,%eax
    a113:	74 14                	je     a129 <bithenge_scope_dec_ref.part.12+0x139>
    a115:	8b 08                	mov    (%eax),%ecx
    a117:	49                   	dec    %ecx
    a118:	89 08                	mov    %ecx,(%eax)
    a11a:	85 c9                	test   %ecx,%ecx
    a11c:	75 0b                	jne    a129 <bithenge_scope_dec_ref.part.12+0x139>
    a11e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    a121:	e8 ca fe ff ff       	call   9ff0 <bithenge_scope_dec_ref.part.12>
    a126:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    a129:	83 ec 0c             	sub    $0xc,%esp
    a12c:	8b 42 14             	mov    0x14(%edx),%eax
    a12f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    a132:	50                   	push   %eax
    a133:	e8 b8 7f 00 00       	call   120f0 <free@plt>
    a138:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    a13b:	58                   	pop    %eax
    a13c:	8b 42 08             	mov    0x8(%edx),%eax
    a13f:	50                   	push   %eax
    a140:	e8 ab 7f 00 00       	call   120f0 <free@plt>
    a145:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    a148:	89 14 24             	mov    %edx,(%esp)
    a14b:	e8 a0 7f 00 00       	call   120f0 <free@plt>
    a150:	83 c4 10             	add    $0x10,%esp
    a153:	e9 50 ff ff ff       	jmp    a0a8 <bithenge_scope_dec_ref.part.12+0xb8>
    a158:	90                   	nop
    a159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000a160 <bithenge_init_transform>:
    a160:	55                   	push   %ebp
    a161:	89 e5                	mov    %esp,%ebp
    a163:	83 ec 08             	sub    $0x8,%esp
    a166:	8b 45 0c             	mov    0xc(%ebp),%eax
    a169:	8b 55 08             	mov    0x8(%ebp),%edx
    a16c:	85 c0                	test   %eax,%eax
    a16e:	74 39                	je     a1a9 <bithenge_init_transform+0x49>
    a170:	8b 08                	mov    (%eax),%ecx
    a172:	85 c9                	test   %ecx,%ecx
    a174:	74 1a                	je     a190 <bithenge_init_transform+0x30>
    a176:	8b 48 0c             	mov    0xc(%eax),%ecx
    a179:	85 c9                	test   %ecx,%ecx
    a17b:	74 3e                	je     a1bb <bithenge_init_transform+0x5b>
    a17d:	89 02                	mov    %eax,(%edx)
    a17f:	8b 45 10             	mov    0x10(%ebp),%eax
    a182:	89 42 08             	mov    %eax,0x8(%edx)
    a185:	c7 42 04 01 00 00 00 	movl   $0x1,0x4(%edx)
    a18c:	31 c0                	xor    %eax,%eax
    a18e:	c9                   	leave  
    a18f:	c3                   	ret    
    a190:	8b 48 08             	mov    0x8(%eax),%ecx
    a193:	85 c9                	test   %ecx,%ecx
    a195:	75 df                	jne    a176 <bithenge_init_transform+0x16>
    a197:	50                   	push   %eax
    a198:	6a 3f                	push   $0x3f
    a19a:	68 02 15 01 00       	push   $0x11502
    a19f:	68 ec 15 01 00       	push   $0x115ec
    a1a4:	e8 67 7d 00 00       	call   11f10 <assert_abort@plt>
    a1a9:	50                   	push   %eax
    a1aa:	6a 3e                	push   $0x3e
    a1ac:	68 02 15 01 00       	push   $0x11502
    a1b1:	68 67 11 01 00       	push   $0x11167
    a1b6:	e8 55 7d 00 00       	call   11f10 <assert_abort@plt>
    a1bb:	50                   	push   %eax
    a1bc:	6a 40                	push   $0x40
    a1be:	68 02 15 01 00       	push   $0x11502
    a1c3:	68 18 15 01 00       	push   $0x11518
    a1c8:	e8 43 7d 00 00       	call   11f10 <assert_abort@plt>
    a1cd:	8d 76 00             	lea    0x0(%esi),%esi

0000a1d0 <bithenge_transform_prefix_apply>:
    a1d0:	55                   	push   %ebp
    a1d1:	89 e5                	mov    %esp,%ebp
    a1d3:	57                   	push   %edi
    a1d4:	56                   	push   %esi
    a1d5:	53                   	push   %ebx
    a1d6:	83 ec 2c             	sub    $0x2c,%esp
    a1d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
    a1dc:	8b 75 0c             	mov    0xc(%ebp),%esi
    a1df:	8b 7d 10             	mov    0x10(%ebp),%edi
    a1e2:	85 db                	test   %ebx,%ebx
    a1e4:	0f 84 ce 00 00 00    	je     a2b8 <bithenge_transform_prefix_apply+0xe8>
    a1ea:	8b 03                	mov    (%ebx),%eax
    a1ec:	85 c0                	test   %eax,%eax
    a1ee:	0f 84 af 00 00 00    	je     a2a3 <bithenge_transform_prefix_apply+0xd3>
    a1f4:	8b 50 08             	mov    0x8(%eax),%edx
    a1f7:	85 d2                	test   %edx,%edx
    a1f9:	74 1d                	je     a218 <bithenge_transform_prefix_apply+0x48>
    a1fb:	83 ec 0c             	sub    $0xc,%esp
    a1fe:	8b 45 18             	mov    0x18(%ebp),%eax
    a201:	50                   	push   %eax
    a202:	8b 45 14             	mov    0x14(%ebp),%eax
    a205:	50                   	push   %eax
    a206:	57                   	push   %edi
    a207:	56                   	push   %esi
    a208:	53                   	push   %ebx
    a209:	ff d2                	call   *%edx
    a20b:	83 c4 20             	add    $0x20,%esp
    a20e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    a211:	5b                   	pop    %ebx
    a212:	5e                   	pop    %esi
    a213:	5f                   	pop    %edi
    a214:	5d                   	pop    %ebp
    a215:	c3                   	ret    
    a216:	66 90                	xchg   %ax,%ax
    a218:	8b 40 04             	mov    0x4(%eax),%eax
    a21b:	85 c0                	test   %eax,%eax
    a21d:	74 7a                	je     a299 <bithenge_transform_prefix_apply+0xc9>
    a21f:	8d 55 e0             	lea    -0x20(%ebp),%edx
    a222:	52                   	push   %edx
    a223:	57                   	push   %edi
    a224:	56                   	push   %esi
    a225:	53                   	push   %ebx
    a226:	ff d0                	call   *%eax
    a228:	83 c4 10             	add    $0x10,%esp
    a22b:	85 c0                	test   %eax,%eax
    a22d:	75 df                	jne    a20e <bithenge_transform_prefix_apply+0x3e>
    a22f:	85 ff                	test   %edi,%edi
    a231:	0f 84 96 00 00 00    	je     a2cd <bithenge_transform_prefix_apply+0xfd>
    a237:	8b 47 04             	mov    0x4(%edi),%eax
    a23a:	40                   	inc    %eax
    a23b:	89 47 04             	mov    %eax,0x4(%edi)
    a23e:	50                   	push   %eax
    a23f:	50                   	push   %eax
    a240:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    a243:	50                   	push   %eax
    a244:	8b 45 e0             	mov    -0x20(%ebp),%eax
    a247:	50                   	push   %eax
    a248:	8d 45 dc             	lea    -0x24(%ebp),%eax
    a24b:	6a 00                	push   $0x0
    a24d:	6a 00                	push   $0x0
    a24f:	57                   	push   %edi
    a250:	50                   	push   %eax
    a251:	e8 ba 26 00 00       	call   c910 <bithenge_new_subblob>
    a256:	83 c4 20             	add    $0x20,%esp
    a259:	85 c0                	test   %eax,%eax
    a25b:	75 b1                	jne    a20e <bithenge_transform_prefix_apply+0x3e>
    a25d:	8b 55 dc             	mov    -0x24(%ebp),%edx
    a260:	8b 45 14             	mov    0x14(%ebp),%eax
    a263:	50                   	push   %eax
    a264:	52                   	push   %edx
    a265:	56                   	push   %esi
    a266:	53                   	push   %ebx
    a267:	e8 84 02 00 00       	call   a4f0 <bithenge_transform_apply>
    a26c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
    a26f:	59                   	pop    %ecx
    a270:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    a273:	53                   	push   %ebx
    a274:	e8 a7 13 00 00       	call   b620 <bithenge_node_dec_ref>
    a279:	8b 75 18             	mov    0x18(%ebp),%esi
    a27c:	83 c4 10             	add    $0x10,%esp
    a27f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    a282:	85 f6                	test   %esi,%esi
    a284:	74 88                	je     a20e <bithenge_transform_prefix_apply+0x3e>
    a286:	8b 75 18             	mov    0x18(%ebp),%esi
    a289:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    a28c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    a28f:	89 0e                	mov    %ecx,(%esi)
    a291:	89 5e 04             	mov    %ebx,0x4(%esi)
    a294:	e9 75 ff ff ff       	jmp    a20e <bithenge_transform_prefix_apply+0x3e>
    a299:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    a29e:	e9 6b ff ff ff       	jmp    a20e <bithenge_transform_prefix_apply+0x3e>
    a2a3:	52                   	push   %edx
    a2a4:	68 9d 00 00 00       	push   $0x9d
    a2a9:	68 02 15 01 00       	push   $0x11502
    a2ae:	68 61 11 01 00       	push   $0x11161
    a2b3:	e8 58 7c 00 00       	call   11f10 <assert_abort@plt>
    a2b8:	51                   	push   %ecx
    a2b9:	68 9c 00 00 00       	push   $0x9c
    a2be:	68 02 15 01 00       	push   $0x11502
    a2c3:	68 35 13 01 00       	push   $0x11335
    a2c8:	e8 43 7c 00 00       	call   11f10 <assert_abort@plt>
    a2cd:	e8 7a 0e 00 00       	call   b14c <bithenge_node_inc_ref.part.3>
    a2d2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    a2d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000a2e0 <barrier_transform_prefix_length>:
    a2e0:	55                   	push   %ebp
    a2e1:	89 e5                	mov    %esp,%ebp
    a2e3:	57                   	push   %edi
    a2e4:	56                   	push   %esi
    a2e5:	53                   	push   %ebx
    a2e6:	83 ec 38             	sub    $0x38,%esp
    a2e9:	8b 75 0c             	mov    0xc(%ebp),%esi
    a2ec:	8b 7d 10             	mov    0x10(%ebp),%edi
    a2ef:	6a 20                	push   $0x20
    a2f1:	e8 6a 7b 00 00       	call   11e60 <malloc@plt>
    a2f6:	83 c4 10             	add    $0x10,%esp
    a2f9:	85 c0                	test   %eax,%eax
    a2fb:	0f 84 ba 01 00 00    	je     a4bb <barrier_transform_prefix_length+0x1db>
    a301:	89 c3                	mov    %eax,%ebx
    a303:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    a309:	85 f6                	test   %esi,%esi
    a30b:	74 05                	je     a312 <barrier_transform_prefix_length+0x32>
    a30d:	8b 06                	mov    (%esi),%eax
    a30f:	40                   	inc    %eax
    a310:	89 06                	mov    %eax,(%esi)
    a312:	83 ec 0c             	sub    $0xc,%esp
    a315:	89 73 04             	mov    %esi,0x4(%ebx)
    a318:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
    a31f:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
    a326:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
    a32d:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%ebx)
    a334:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
    a33b:	c6 43 0c 01          	movb   $0x1,0xc(%ebx)
    a33f:	6a 00                	push   $0x0
    a341:	e8 da 12 00 00       	call   b620 <bithenge_node_dec_ref>
    a346:	8b 45 08             	mov    0x8(%ebp),%eax
    a349:	83 c4 10             	add    $0x10,%esp
    a34c:	89 7b 1c             	mov    %edi,0x1c(%ebx)
    a34f:	8b 40 0c             	mov    0xc(%eax),%eax
    a352:	85 c0                	test   %eax,%eax
    a354:	0f 84 79 01 00 00    	je     a4d3 <barrier_transform_prefix_length+0x1f3>
    a35a:	8b 10                	mov    (%eax),%edx
    a35c:	85 d2                	test   %edx,%edx
    a35e:	0f 84 d8 00 00 00    	je     a43c <barrier_transform_prefix_length+0x15c>
    a364:	8b 4a 04             	mov    0x4(%edx),%ecx
    a367:	85 c9                	test   %ecx,%ecx
    a369:	74 25                	je     a390 <barrier_transform_prefix_length+0xb0>
    a36b:	8b 75 14             	mov    0x14(%ebp),%esi
    a36e:	56                   	push   %esi
    a36f:	57                   	push   %edi
    a370:	53                   	push   %ebx
    a371:	50                   	push   %eax
    a372:	ff d1                	call   *%ecx
    a374:	83 c4 10             	add    $0x10,%esp
    a377:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    a37a:	8b 03                	mov    (%ebx),%eax
    a37c:	48                   	dec    %eax
    a37d:	89 03                	mov    %eax,(%ebx)
    a37f:	85 c0                	test   %eax,%eax
    a381:	74 4d                	je     a3d0 <barrier_transform_prefix_length+0xf0>
    a383:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    a386:	8d 65 f4             	lea    -0xc(%ebp),%esp
    a389:	5b                   	pop    %ebx
    a38a:	5e                   	pop    %esi
    a38b:	5f                   	pop    %edi
    a38c:	5d                   	pop    %ebp
    a38d:	c3                   	ret    
    a38e:	66 90                	xchg   %ax,%ax
    a390:	8b 4a 08             	mov    0x8(%edx),%ecx
    a393:	85 c9                	test   %ecx,%ecx
    a395:	0f 84 2c 01 00 00    	je     a4c7 <barrier_transform_prefix_length+0x1e7>
    a39b:	83 ec 0c             	sub    $0xc,%esp
    a39e:	8b 55 14             	mov    0x14(%ebp),%edx
    a3a1:	52                   	push   %edx
    a3a2:	8d 55 e4             	lea    -0x1c(%ebp),%edx
    a3a5:	52                   	push   %edx
    a3a6:	57                   	push   %edi
    a3a7:	53                   	push   %ebx
    a3a8:	50                   	push   %eax
    a3a9:	e8 22 fe ff ff       	call   a1d0 <bithenge_transform_prefix_apply>
    a3ae:	83 c4 20             	add    $0x20,%esp
    a3b1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    a3b4:	85 c0                	test   %eax,%eax
    a3b6:	75 c2                	jne    a37a <barrier_transform_prefix_length+0x9a>
    a3b8:	83 ec 0c             	sub    $0xc,%esp
    a3bb:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    a3be:	56                   	push   %esi
    a3bf:	e8 5c 12 00 00       	call   b620 <bithenge_node_dec_ref>
    a3c4:	83 c4 10             	add    $0x10,%esp
    a3c7:	eb b1                	jmp    a37a <barrier_transform_prefix_length+0x9a>
    a3c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    a3d0:	83 ec 0c             	sub    $0xc,%esp
    a3d3:	8b 53 18             	mov    0x18(%ebx),%edx
    a3d6:	31 f6                	xor    %esi,%esi
    a3d8:	52                   	push   %edx
    a3d9:	e8 42 12 00 00       	call   b620 <bithenge_node_dec_ref>
    a3de:	8b 4b 10             	mov    0x10(%ebx),%ecx
    a3e1:	83 c4 10             	add    $0x10,%esp
    a3e4:	85 c9                	test   %ecx,%ecx
    a3e6:	7e 18                	jle    a400 <barrier_transform_prefix_length+0x120>
    a3e8:	8b 43 14             	mov    0x14(%ebx),%eax
    a3eb:	83 ec 0c             	sub    $0xc,%esp
    a3ee:	8b 04 b0             	mov    (%eax,%esi,4),%eax
    a3f1:	46                   	inc    %esi
    a3f2:	50                   	push   %eax
    a3f3:	e8 28 12 00 00       	call   b620 <bithenge_node_dec_ref>
    a3f8:	83 c4 10             	add    $0x10,%esp
    a3fb:	3b 73 10             	cmp    0x10(%ebx),%esi
    a3fe:	7c e8                	jl     a3e8 <barrier_transform_prefix_length+0x108>
    a400:	8b 7b 04             	mov    0x4(%ebx),%edi
    a403:	85 ff                	test   %edi,%edi
    a405:	74 09                	je     a410 <barrier_transform_prefix_length+0x130>
    a407:	8b 07                	mov    (%edi),%eax
    a409:	48                   	dec    %eax
    a40a:	89 07                	mov    %eax,(%edi)
    a40c:	85 c0                	test   %eax,%eax
    a40e:	74 40                	je     a450 <barrier_transform_prefix_length+0x170>
    a410:	83 ec 0c             	sub    $0xc,%esp
    a413:	8b 43 14             	mov    0x14(%ebx),%eax
    a416:	50                   	push   %eax
    a417:	e8 d4 7c 00 00       	call   120f0 <free@plt>
    a41c:	8b 4b 08             	mov    0x8(%ebx),%ecx
    a41f:	5a                   	pop    %edx
    a420:	51                   	push   %ecx
    a421:	e8 ca 7c 00 00       	call   120f0 <free@plt>
    a426:	89 1c 24             	mov    %ebx,(%esp)
    a429:	e8 c2 7c 00 00       	call   120f0 <free@plt>
    a42e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    a431:	83 c4 10             	add    $0x10,%esp
    a434:	8d 65 f4             	lea    -0xc(%ebp),%esp
    a437:	5b                   	pop    %ebx
    a438:	5e                   	pop    %esi
    a439:	5f                   	pop    %edi
    a43a:	5d                   	pop    %ebp
    a43b:	c3                   	ret    
    a43c:	57                   	push   %edi
    a43d:	6a 7d                	push   $0x7d
    a43f:	68 02 15 01 00       	push   $0x11502
    a444:	68 61 11 01 00       	push   $0x11161
    a449:	e8 c2 7a 00 00       	call   11f10 <assert_abort@plt>
    a44e:	66 90                	xchg   %ax,%ax
    a450:	83 ec 0c             	sub    $0xc,%esp
    a453:	8b 47 18             	mov    0x18(%edi),%eax
    a456:	31 f6                	xor    %esi,%esi
    a458:	50                   	push   %eax
    a459:	e8 c2 11 00 00       	call   b620 <bithenge_node_dec_ref>
    a45e:	8b 47 10             	mov    0x10(%edi),%eax
    a461:	83 c4 10             	add    $0x10,%esp
    a464:	85 c0                	test   %eax,%eax
    a466:	7e 18                	jle    a480 <barrier_transform_prefix_length+0x1a0>
    a468:	8b 47 14             	mov    0x14(%edi),%eax
    a46b:	83 ec 0c             	sub    $0xc,%esp
    a46e:	8b 04 b0             	mov    (%eax,%esi,4),%eax
    a471:	46                   	inc    %esi
    a472:	50                   	push   %eax
    a473:	e8 a8 11 00 00       	call   b620 <bithenge_node_dec_ref>
    a478:	83 c4 10             	add    $0x10,%esp
    a47b:	3b 77 10             	cmp    0x10(%edi),%esi
    a47e:	7c e8                	jl     a468 <barrier_transform_prefix_length+0x188>
    a480:	8b 47 04             	mov    0x4(%edi),%eax
    a483:	85 c0                	test   %eax,%eax
    a485:	74 0e                	je     a495 <barrier_transform_prefix_length+0x1b5>
    a487:	8b 08                	mov    (%eax),%ecx
    a489:	49                   	dec    %ecx
    a48a:	89 08                	mov    %ecx,(%eax)
    a48c:	85 c9                	test   %ecx,%ecx
    a48e:	75 05                	jne    a495 <barrier_transform_prefix_length+0x1b5>
    a490:	e8 5b fb ff ff       	call   9ff0 <bithenge_scope_dec_ref.part.12>
    a495:	83 ec 0c             	sub    $0xc,%esp
    a498:	8b 77 14             	mov    0x14(%edi),%esi
    a49b:	56                   	push   %esi
    a49c:	e8 4f 7c 00 00       	call   120f0 <free@plt>
    a4a1:	58                   	pop    %eax
    a4a2:	8b 47 08             	mov    0x8(%edi),%eax
    a4a5:	50                   	push   %eax
    a4a6:	e8 45 7c 00 00       	call   120f0 <free@plt>
    a4ab:	89 3c 24             	mov    %edi,(%esp)
    a4ae:	e8 3d 7c 00 00       	call   120f0 <free@plt>
    a4b3:	83 c4 10             	add    $0x10,%esp
    a4b6:	e9 55 ff ff ff       	jmp    a410 <barrier_transform_prefix_length+0x130>
    a4bb:	c7 45 d4 fe ff ff ff 	movl   $0xfffffffe,-0x2c(%ebp)
    a4c2:	e9 bc fe ff ff       	jmp    a383 <barrier_transform_prefix_length+0xa3>
    a4c7:	c7 45 d4 f5 ff ff ff 	movl   $0xfffffff5,-0x2c(%ebp)
    a4ce:	e9 a7 fe ff ff       	jmp    a37a <barrier_transform_prefix_length+0x9a>
    a4d3:	50                   	push   %eax
    a4d4:	6a 7c                	push   $0x7c
    a4d6:	68 02 15 01 00       	push   $0x11502
    a4db:	68 35 13 01 00       	push   $0x11335
    a4e0:	e8 2b 7a 00 00       	call   11f10 <assert_abort@plt>
    a4e5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    a4e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000a4f0 <bithenge_transform_apply>:
    a4f0:	55                   	push   %ebp
    a4f1:	89 e5                	mov    %esp,%ebp
    a4f3:	56                   	push   %esi
    a4f4:	53                   	push   %ebx
    a4f5:	83 ec 30             	sub    $0x30,%esp
    a4f8:	8b 5d 08             	mov    0x8(%ebp),%ebx
    a4fb:	8b 75 10             	mov    0x10(%ebp),%esi
    a4fe:	85 db                	test   %ebx,%ebx
    a500:	0f 84 4e 01 00 00    	je     a654 <bithenge_transform_apply+0x164>
    a506:	8b 03                	mov    (%ebx),%eax
    a508:	85 c0                	test   %eax,%eax
    a50a:	0f 84 56 01 00 00    	je     a666 <bithenge_transform_apply+0x176>
    a510:	8b 10                	mov    (%eax),%edx
    a512:	85 d2                	test   %edx,%edx
    a514:	74 1a                	je     a530 <bithenge_transform_apply+0x40>
    a516:	8b 45 14             	mov    0x14(%ebp),%eax
    a519:	50                   	push   %eax
    a51a:	8b 45 0c             	mov    0xc(%ebp),%eax
    a51d:	56                   	push   %esi
    a51e:	50                   	push   %eax
    a51f:	53                   	push   %ebx
    a520:	ff d2                	call   *%edx
    a522:	83 c4 10             	add    $0x10,%esp
    a525:	8d 65 f8             	lea    -0x8(%ebp),%esp
    a528:	5b                   	pop    %ebx
    a529:	5e                   	pop    %esi
    a52a:	5d                   	pop    %ebp
    a52b:	c3                   	ret    
    a52c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    a530:	83 3e 05             	cmpl   $0x5,(%esi)
    a533:	0f 85 07 01 00 00    	jne    a640 <bithenge_transform_apply+0x150>
    a539:	8b 50 08             	mov    0x8(%eax),%edx
    a53c:	85 d2                	test   %edx,%edx
    a53e:	74 78                	je     a5b8 <bithenge_transform_apply+0xc8>
    a540:	83 ec 0c             	sub    $0xc,%esp
    a543:	8d 45 e8             	lea    -0x18(%ebp),%eax
    a546:	8b 4d 14             	mov    0x14(%ebp),%ecx
    a549:	50                   	push   %eax
    a54a:	8b 45 0c             	mov    0xc(%ebp),%eax
    a54d:	51                   	push   %ecx
    a54e:	56                   	push   %esi
    a54f:	50                   	push   %eax
    a550:	53                   	push   %ebx
    a551:	ff d2                	call   *%edx
    a553:	83 c4 20             	add    $0x20,%esp
    a556:	85 c0                	test   %eax,%eax
    a558:	75 cb                	jne    a525 <bithenge_transform_apply+0x35>
    a55a:	83 3e 05             	cmpl   $0x5,(%esi)
    a55d:	0f 85 2a 01 00 00    	jne    a68d <bithenge_transform_apply+0x19d>
    a563:	8b 46 08             	mov    0x8(%esi),%eax
    a566:	85 c0                	test   %eax,%eax
    a568:	0f 84 0a 01 00 00    	je     a678 <bithenge_transform_apply+0x188>
    a56e:	52                   	push   %edx
    a56f:	52                   	push   %edx
    a570:	8d 55 f0             	lea    -0x10(%ebp),%edx
    a573:	52                   	push   %edx
    a574:	56                   	push   %esi
    a575:	ff 10                	call   *(%eax)
    a577:	83 c4 10             	add    $0x10,%esp
    a57a:	85 c0                	test   %eax,%eax
    a57c:	75 19                	jne    a597 <bithenge_transform_apply+0xa7>
    a57e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
    a581:	8b 55 f0             	mov    -0x10(%ebp),%edx
    a584:	31 ca                	xor    %ecx,%edx
    a586:	8b 5d ec             	mov    -0x14(%ebp),%ebx
    a589:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    a58c:	31 d9                	xor    %ebx,%ecx
    a58e:	09 d1                	or     %edx,%ecx
    a590:	74 93                	je     a525 <bithenge_transform_apply+0x35>
    a592:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    a597:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    a59a:	8b 45 14             	mov    0x14(%ebp),%eax
    a59d:	83 ec 0c             	sub    $0xc,%esp
    a5a0:	8b 00                	mov    (%eax),%eax
    a5a2:	50                   	push   %eax
    a5a3:	e8 78 10 00 00       	call   b620 <bithenge_node_dec_ref>
    a5a8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    a5ab:	83 c4 10             	add    $0x10,%esp
    a5ae:	8d 65 f8             	lea    -0x8(%ebp),%esp
    a5b1:	5b                   	pop    %ebx
    a5b2:	5e                   	pop    %esi
    a5b3:	5d                   	pop    %ebp
    a5b4:	c3                   	ret    
    a5b5:	8d 76 00             	lea    0x0(%esi),%esi
    a5b8:	8b 40 04             	mov    0x4(%eax),%eax
    a5bb:	85 c0                	test   %eax,%eax
    a5bd:	0f 84 87 00 00 00    	je     a64a <bithenge_transform_apply+0x15a>
    a5c3:	8d 55 f0             	lea    -0x10(%ebp),%edx
    a5c6:	52                   	push   %edx
    a5c7:	8b 55 0c             	mov    0xc(%ebp),%edx
    a5ca:	56                   	push   %esi
    a5cb:	52                   	push   %edx
    a5cc:	53                   	push   %ebx
    a5cd:	ff d0                	call   *%eax
    a5cf:	83 c4 10             	add    $0x10,%esp
    a5d2:	85 c0                	test   %eax,%eax
    a5d4:	0f 85 4b ff ff ff    	jne    a525 <bithenge_transform_apply+0x35>
    a5da:	8b 46 04             	mov    0x4(%esi),%eax
    a5dd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    a5e0:	40                   	inc    %eax
    a5e1:	89 46 04             	mov    %eax,0x4(%esi)
    a5e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
    a5e7:	52                   	push   %edx
    a5e8:	52                   	push   %edx
    a5e9:	51                   	push   %ecx
    a5ea:	50                   	push   %eax
    a5eb:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    a5ee:	6a 00                	push   $0x0
    a5f0:	6a 00                	push   $0x0
    a5f2:	56                   	push   %esi
    a5f3:	50                   	push   %eax
    a5f4:	e8 17 23 00 00       	call   c910 <bithenge_new_subblob>
    a5f9:	83 c4 20             	add    $0x20,%esp
    a5fc:	85 c0                	test   %eax,%eax
    a5fe:	0f 85 21 ff ff ff    	jne    a525 <bithenge_transform_apply+0x35>
    a604:	8b 45 14             	mov    0x14(%ebp),%eax
    a607:	50                   	push   %eax
    a608:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    a60b:	50                   	push   %eax
    a60c:	8b 45 0c             	mov    0xc(%ebp),%eax
    a60f:	50                   	push   %eax
    a610:	53                   	push   %ebx
    a611:	e8 da fe ff ff       	call   a4f0 <bithenge_transform_apply>
    a616:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    a619:	58                   	pop    %eax
    a61a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    a61d:	50                   	push   %eax
    a61e:	e8 fd 0f 00 00       	call   b620 <bithenge_node_dec_ref>
    a623:	8b 4d f0             	mov    -0x10(%ebp),%ecx
    a626:	8b 5d f4             	mov    -0xc(%ebp),%ebx
    a629:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    a62c:	89 5d ec             	mov    %ebx,-0x14(%ebp)
    a62f:	83 c4 10             	add    $0x10,%esp
    a632:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    a635:	e9 1c ff ff ff       	jmp    a556 <bithenge_transform_apply+0x66>
    a63a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    a640:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    a645:	e9 db fe ff ff       	jmp    a525 <bithenge_transform_apply+0x35>
    a64a:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    a64f:	e9 d1 fe ff ff       	jmp    a525 <bithenge_transform_apply+0x35>
    a654:	50                   	push   %eax
    a655:	6a 58                	push   $0x58
    a657:	68 02 15 01 00       	push   $0x11502
    a65c:	68 35 13 01 00       	push   $0x11335
    a661:	e8 aa 78 00 00       	call   11f10 <assert_abort@plt>
    a666:	50                   	push   %eax
    a667:	6a 59                	push   $0x59
    a669:	68 02 15 01 00       	push   $0x11502
    a66e:	68 61 11 01 00       	push   $0x11161
    a673:	e8 98 78 00 00       	call   11f10 <assert_abort@plt>
    a678:	51                   	push   %ecx
    a679:	68 80 00 00 00       	push   $0x80
    a67e:	68 05 12 01 00       	push   $0x11205
    a683:	68 1d 12 01 00       	push   $0x1121d
    a688:	e8 83 78 00 00       	call   11f10 <assert_abort@plt>
    a68d:	53                   	push   %ebx
    a68e:	68 d9 00 00 00       	push   $0xd9
    a693:	68 05 12 01 00       	push   $0x11205
    a698:	68 84 12 01 00       	push   $0x11284
    a69d:	e8 6e 78 00 00       	call   11f10 <assert_abort@plt>
    a6a2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    a6a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000a6b0 <barrier_transform_prefix_apply>:
    a6b0:	55                   	push   %ebp
    a6b1:	89 e5                	mov    %esp,%ebp
    a6b3:	57                   	push   %edi
    a6b4:	56                   	push   %esi
    a6b5:	53                   	push   %ebx
    a6b6:	83 ec 38             	sub    $0x38,%esp
    a6b9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    a6bc:	8b 7d 10             	mov    0x10(%ebp),%edi
    a6bf:	6a 20                	push   $0x20
    a6c1:	e8 9a 77 00 00       	call   11e60 <malloc@plt>
    a6c6:	83 c4 10             	add    $0x10,%esp
    a6c9:	85 c0                	test   %eax,%eax
    a6cb:	0f 84 24 02 00 00    	je     a8f5 <barrier_transform_prefix_apply+0x245>
    a6d1:	89 c6                	mov    %eax,%esi
    a6d3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    a6d9:	85 db                	test   %ebx,%ebx
    a6db:	74 05                	je     a6e2 <barrier_transform_prefix_apply+0x32>
    a6dd:	8b 03                	mov    (%ebx),%eax
    a6df:	40                   	inc    %eax
    a6e0:	89 03                	mov    %eax,(%ebx)
    a6e2:	83 ec 0c             	sub    $0xc,%esp
    a6e5:	89 5e 04             	mov    %ebx,0x4(%esi)
    a6e8:	c7 46 08 00 00 00 00 	movl   $0x0,0x8(%esi)
    a6ef:	c7 46 10 00 00 00 00 	movl   $0x0,0x10(%esi)
    a6f6:	c7 46 14 00 00 00 00 	movl   $0x0,0x14(%esi)
    a6fd:	c7 46 18 00 00 00 00 	movl   $0x0,0x18(%esi)
    a704:	c7 46 1c 00 00 00 00 	movl   $0x0,0x1c(%esi)
    a70b:	c6 46 0c 01          	movb   $0x1,0xc(%esi)
    a70f:	6a 00                	push   $0x0
    a711:	e8 0a 0f 00 00       	call   b620 <bithenge_node_dec_ref>
    a716:	8b 45 08             	mov    0x8(%ebp),%eax
    a719:	83 c4 10             	add    $0x10,%esp
    a71c:	89 7e 1c             	mov    %edi,0x1c(%esi)
    a71f:	8b 58 0c             	mov    0xc(%eax),%ebx
    a722:	85 db                	test   %ebx,%ebx
    a724:	0f 84 e3 01 00 00    	je     a90d <barrier_transform_prefix_apply+0x25d>
    a72a:	8b 03                	mov    (%ebx),%eax
    a72c:	85 c0                	test   %eax,%eax
    a72e:	0f 84 38 01 00 00    	je     a86c <barrier_transform_prefix_apply+0x1bc>
    a734:	8b 48 08             	mov    0x8(%eax),%ecx
    a737:	85 c9                	test   %ecx,%ecx
    a739:	74 35                	je     a770 <barrier_transform_prefix_apply+0xc0>
    a73b:	83 ec 0c             	sub    $0xc,%esp
    a73e:	8b 45 18             	mov    0x18(%ebp),%eax
    a741:	50                   	push   %eax
    a742:	8b 45 14             	mov    0x14(%ebp),%eax
    a745:	50                   	push   %eax
    a746:	57                   	push   %edi
    a747:	56                   	push   %esi
    a748:	53                   	push   %ebx
    a749:	ff d1                	call   *%ecx
    a74b:	83 c4 20             	add    $0x20,%esp
    a74e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    a751:	8b 06                	mov    (%esi),%eax
    a753:	48                   	dec    %eax
    a754:	89 06                	mov    %eax,(%esi)
    a756:	85 c0                	test   %eax,%eax
    a758:	0f 84 a2 00 00 00    	je     a800 <barrier_transform_prefix_apply+0x150>
    a75e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    a761:	8d 65 f4             	lea    -0xc(%ebp),%esp
    a764:	5b                   	pop    %ebx
    a765:	5e                   	pop    %esi
    a766:	5f                   	pop    %edi
    a767:	5d                   	pop    %ebp
    a768:	c3                   	ret    
    a769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    a770:	8b 40 04             	mov    0x4(%eax),%eax
    a773:	85 c0                	test   %eax,%eax
    a775:	0f 84 86 01 00 00    	je     a901 <barrier_transform_prefix_apply+0x251>
    a77b:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    a77e:	51                   	push   %ecx
    a77f:	57                   	push   %edi
    a780:	56                   	push   %esi
    a781:	53                   	push   %ebx
    a782:	ff d0                	call   *%eax
    a784:	83 c4 10             	add    $0x10,%esp
    a787:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    a78a:	85 c0                	test   %eax,%eax
    a78c:	75 c3                	jne    a751 <barrier_transform_prefix_apply+0xa1>
    a78e:	85 ff                	test   %edi,%edi
    a790:	0f 84 8c 01 00 00    	je     a922 <barrier_transform_prefix_apply+0x272>
    a796:	8b 47 04             	mov    0x4(%edi),%eax
    a799:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    a79c:	40                   	inc    %eax
    a79d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    a7a0:	89 47 04             	mov    %eax,0x4(%edi)
    a7a3:	50                   	push   %eax
    a7a4:	50                   	push   %eax
    a7a5:	8d 45 dc             	lea    -0x24(%ebp),%eax
    a7a8:	52                   	push   %edx
    a7a9:	51                   	push   %ecx
    a7aa:	6a 00                	push   $0x0
    a7ac:	6a 00                	push   $0x0
    a7ae:	57                   	push   %edi
    a7af:	50                   	push   %eax
    a7b0:	e8 5b 21 00 00       	call   c910 <bithenge_new_subblob>
    a7b5:	83 c4 20             	add    $0x20,%esp
    a7b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    a7bb:	85 c0                	test   %eax,%eax
    a7bd:	75 92                	jne    a751 <barrier_transform_prefix_apply+0xa1>
    a7bf:	8b 7d 14             	mov    0x14(%ebp),%edi
    a7c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
    a7c5:	57                   	push   %edi
    a7c6:	50                   	push   %eax
    a7c7:	56                   	push   %esi
    a7c8:	53                   	push   %ebx
    a7c9:	e8 22 fd ff ff       	call   a4f0 <bithenge_transform_apply>
    a7ce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    a7d1:	58                   	pop    %eax
    a7d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
    a7d5:	50                   	push   %eax
    a7d6:	e8 45 0e 00 00       	call   b620 <bithenge_node_dec_ref>
    a7db:	8b 45 18             	mov    0x18(%ebp),%eax
    a7de:	83 c4 10             	add    $0x10,%esp
    a7e1:	85 c0                	test   %eax,%eax
    a7e3:	0f 84 68 ff ff ff    	je     a751 <barrier_transform_prefix_apply+0xa1>
    a7e9:	8b 4d 18             	mov    0x18(%ebp),%ecx
    a7ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
    a7ef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    a7f2:	89 01                	mov    %eax,(%ecx)
    a7f4:	89 51 04             	mov    %edx,0x4(%ecx)
    a7f7:	e9 55 ff ff ff       	jmp    a751 <barrier_transform_prefix_apply+0xa1>
    a7fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    a800:	83 ec 0c             	sub    $0xc,%esp
    a803:	8b 56 18             	mov    0x18(%esi),%edx
    a806:	31 ff                	xor    %edi,%edi
    a808:	52                   	push   %edx
    a809:	e8 12 0e 00 00       	call   b620 <bithenge_node_dec_ref>
    a80e:	8b 4e 10             	mov    0x10(%esi),%ecx
    a811:	83 c4 10             	add    $0x10,%esp
    a814:	85 c9                	test   %ecx,%ecx
    a816:	7e 18                	jle    a830 <barrier_transform_prefix_apply+0x180>
    a818:	8b 46 14             	mov    0x14(%esi),%eax
    a81b:	83 ec 0c             	sub    $0xc,%esp
    a81e:	8b 04 b8             	mov    (%eax,%edi,4),%eax
    a821:	47                   	inc    %edi
    a822:	50                   	push   %eax
    a823:	e8 f8 0d 00 00       	call   b620 <bithenge_node_dec_ref>
    a828:	83 c4 10             	add    $0x10,%esp
    a82b:	3b 7e 10             	cmp    0x10(%esi),%edi
    a82e:	7c e8                	jl     a818 <barrier_transform_prefix_apply+0x168>
    a830:	8b 5e 04             	mov    0x4(%esi),%ebx
    a833:	85 db                	test   %ebx,%ebx
    a835:	74 09                	je     a840 <barrier_transform_prefix_apply+0x190>
    a837:	8b 03                	mov    (%ebx),%eax
    a839:	48                   	dec    %eax
    a83a:	89 03                	mov    %eax,(%ebx)
    a83c:	85 c0                	test   %eax,%eax
    a83e:	74 48                	je     a888 <barrier_transform_prefix_apply+0x1d8>
    a840:	83 ec 0c             	sub    $0xc,%esp
    a843:	8b 46 14             	mov    0x14(%esi),%eax
    a846:	50                   	push   %eax
    a847:	e8 a4 78 00 00       	call   120f0 <free@plt>
    a84c:	8b 4e 08             	mov    0x8(%esi),%ecx
    a84f:	5a                   	pop    %edx
    a850:	51                   	push   %ecx
    a851:	e8 9a 78 00 00       	call   120f0 <free@plt>
    a856:	89 34 24             	mov    %esi,(%esp)
    a859:	e8 92 78 00 00       	call   120f0 <free@plt>
    a85e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    a861:	83 c4 10             	add    $0x10,%esp
    a864:	8d 65 f4             	lea    -0xc(%ebp),%esp
    a867:	5b                   	pop    %ebx
    a868:	5e                   	pop    %esi
    a869:	5f                   	pop    %edi
    a86a:	5d                   	pop    %ebp
    a86b:	c3                   	ret    
    a86c:	50                   	push   %eax
    a86d:	68 9d 00 00 00       	push   $0x9d
    a872:	68 02 15 01 00       	push   $0x11502
    a877:	68 61 11 01 00       	push   $0x11161
    a87c:	e8 8f 76 00 00       	call   11f10 <assert_abort@plt>
    a881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    a888:	83 ec 0c             	sub    $0xc,%esp
    a88b:	8b 43 18             	mov    0x18(%ebx),%eax
    a88e:	31 ff                	xor    %edi,%edi
    a890:	50                   	push   %eax
    a891:	e8 8a 0d 00 00       	call   b620 <bithenge_node_dec_ref>
    a896:	8b 43 10             	mov    0x10(%ebx),%eax
    a899:	83 c4 10             	add    $0x10,%esp
    a89c:	85 c0                	test   %eax,%eax
    a89e:	7e 18                	jle    a8b8 <barrier_transform_prefix_apply+0x208>
    a8a0:	8b 43 14             	mov    0x14(%ebx),%eax
    a8a3:	83 ec 0c             	sub    $0xc,%esp
    a8a6:	8b 04 b8             	mov    (%eax,%edi,4),%eax
    a8a9:	47                   	inc    %edi
    a8aa:	50                   	push   %eax
    a8ab:	e8 70 0d 00 00       	call   b620 <bithenge_node_dec_ref>
    a8b0:	83 c4 10             	add    $0x10,%esp
    a8b3:	3b 7b 10             	cmp    0x10(%ebx),%edi
    a8b6:	7c e8                	jl     a8a0 <barrier_transform_prefix_apply+0x1f0>
    a8b8:	8b 43 04             	mov    0x4(%ebx),%eax
    a8bb:	85 c0                	test   %eax,%eax
    a8bd:	74 10                	je     a8cf <barrier_transform_prefix_apply+0x21f>
    a8bf:	8b 10                	mov    (%eax),%edx
    a8c1:	8d 4a ff             	lea    -0x1(%edx),%ecx
    a8c4:	89 08                	mov    %ecx,(%eax)
    a8c6:	85 c9                	test   %ecx,%ecx
    a8c8:	75 05                	jne    a8cf <barrier_transform_prefix_apply+0x21f>
    a8ca:	e8 21 f7 ff ff       	call   9ff0 <bithenge_scope_dec_ref.part.12>
    a8cf:	83 ec 0c             	sub    $0xc,%esp
    a8d2:	8b 7b 14             	mov    0x14(%ebx),%edi
    a8d5:	57                   	push   %edi
    a8d6:	e8 15 78 00 00       	call   120f0 <free@plt>
    a8db:	58                   	pop    %eax
    a8dc:	8b 43 08             	mov    0x8(%ebx),%eax
    a8df:	50                   	push   %eax
    a8e0:	e8 0b 78 00 00       	call   120f0 <free@plt>
    a8e5:	89 1c 24             	mov    %ebx,(%esp)
    a8e8:	e8 03 78 00 00       	call   120f0 <free@plt>
    a8ed:	83 c4 10             	add    $0x10,%esp
    a8f0:	e9 4b ff ff ff       	jmp    a840 <barrier_transform_prefix_apply+0x190>
    a8f5:	c7 45 d4 fe ff ff ff 	movl   $0xfffffffe,-0x2c(%ebp)
    a8fc:	e9 5d fe ff ff       	jmp    a75e <barrier_transform_prefix_apply+0xae>
    a901:	c7 45 d4 f5 ff ff ff 	movl   $0xfffffff5,-0x2c(%ebp)
    a908:	e9 44 fe ff ff       	jmp    a751 <barrier_transform_prefix_apply+0xa1>
    a90d:	50                   	push   %eax
    a90e:	68 9c 00 00 00       	push   $0x9c
    a913:	68 02 15 01 00       	push   $0x11502
    a918:	68 35 13 01 00       	push   $0x11335
    a91d:	e8 ee 75 00 00       	call   11f10 <assert_abort@plt>
    a922:	e8 25 08 00 00       	call   b14c <bithenge_node_inc_ref.part.3>
    a927:	89 f6                	mov    %esi,%esi
    a929:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000a930 <barrier_transform_apply>:
    a930:	55                   	push   %ebp
    a931:	89 e5                	mov    %esp,%ebp
    a933:	57                   	push   %edi
    a934:	56                   	push   %esi
    a935:	53                   	push   %ebx
    a936:	83 ec 28             	sub    $0x28,%esp
    a939:	8b 75 0c             	mov    0xc(%ebp),%esi
    a93c:	8b 7d 10             	mov    0x10(%ebp),%edi
    a93f:	6a 20                	push   $0x20
    a941:	e8 1a 75 00 00       	call   11e60 <malloc@plt>
    a946:	83 c4 10             	add    $0x10,%esp
    a949:	85 c0                	test   %eax,%eax
    a94b:	0f 84 6f 01 00 00    	je     aac0 <barrier_transform_apply+0x190>
    a951:	89 c3                	mov    %eax,%ebx
    a953:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    a959:	85 f6                	test   %esi,%esi
    a95b:	74 05                	je     a962 <barrier_transform_apply+0x32>
    a95d:	8b 06                	mov    (%esi),%eax
    a95f:	40                   	inc    %eax
    a960:	89 06                	mov    %eax,(%esi)
    a962:	83 ec 0c             	sub    $0xc,%esp
    a965:	89 73 04             	mov    %esi,0x4(%ebx)
    a968:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
    a96f:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
    a976:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
    a97d:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%ebx)
    a984:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
    a98b:	c6 43 0c 01          	movb   $0x1,0xc(%ebx)
    a98f:	6a 00                	push   $0x0
    a991:	e8 8a 0c 00 00       	call   b620 <bithenge_node_dec_ref>
    a996:	8b 45 08             	mov    0x8(%ebp),%eax
    a999:	8b 75 14             	mov    0x14(%ebp),%esi
    a99c:	89 7b 1c             	mov    %edi,0x1c(%ebx)
    a99f:	56                   	push   %esi
    a9a0:	57                   	push   %edi
    a9a1:	8b 78 0c             	mov    0xc(%eax),%edi
    a9a4:	53                   	push   %ebx
    a9a5:	57                   	push   %edi
    a9a6:	e8 45 fb ff ff       	call   a4f0 <bithenge_transform_apply>
    a9ab:	83 c4 20             	add    $0x20,%esp
    a9ae:	89 c7                	mov    %eax,%edi
    a9b0:	8b 03                	mov    (%ebx),%eax
    a9b2:	48                   	dec    %eax
    a9b3:	89 03                	mov    %eax,(%ebx)
    a9b5:	85 c0                	test   %eax,%eax
    a9b7:	74 0f                	je     a9c8 <barrier_transform_apply+0x98>
    a9b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
    a9bc:	89 f8                	mov    %edi,%eax
    a9be:	5b                   	pop    %ebx
    a9bf:	5e                   	pop    %esi
    a9c0:	5f                   	pop    %edi
    a9c1:	5d                   	pop    %ebp
    a9c2:	c3                   	ret    
    a9c3:	90                   	nop
    a9c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    a9c8:	83 ec 0c             	sub    $0xc,%esp
    a9cb:	8b 53 18             	mov    0x18(%ebx),%edx
    a9ce:	31 f6                	xor    %esi,%esi
    a9d0:	52                   	push   %edx
    a9d1:	e8 4a 0c 00 00       	call   b620 <bithenge_node_dec_ref>
    a9d6:	8b 4b 10             	mov    0x10(%ebx),%ecx
    a9d9:	83 c4 10             	add    $0x10,%esp
    a9dc:	85 c9                	test   %ecx,%ecx
    a9de:	7e 18                	jle    a9f8 <barrier_transform_apply+0xc8>
    a9e0:	8b 43 14             	mov    0x14(%ebx),%eax
    a9e3:	83 ec 0c             	sub    $0xc,%esp
    a9e6:	8b 04 b0             	mov    (%eax,%esi,4),%eax
    a9e9:	46                   	inc    %esi
    a9ea:	50                   	push   %eax
    a9eb:	e8 30 0c 00 00       	call   b620 <bithenge_node_dec_ref>
    a9f0:	83 c4 10             	add    $0x10,%esp
    a9f3:	3b 73 10             	cmp    0x10(%ebx),%esi
    a9f6:	7c e8                	jl     a9e0 <barrier_transform_apply+0xb0>
    a9f8:	8b 53 04             	mov    0x4(%ebx),%edx
    a9fb:	85 d2                	test   %edx,%edx
    a9fd:	74 09                	je     aa08 <barrier_transform_apply+0xd8>
    a9ff:	8b 02                	mov    (%edx),%eax
    aa01:	48                   	dec    %eax
    aa02:	89 02                	mov    %eax,(%edx)
    aa04:	85 c0                	test   %eax,%eax
    aa06:	74 30                	je     aa38 <barrier_transform_apply+0x108>
    aa08:	83 ec 0c             	sub    $0xc,%esp
    aa0b:	8b 43 14             	mov    0x14(%ebx),%eax
    aa0e:	50                   	push   %eax
    aa0f:	e8 dc 76 00 00       	call   120f0 <free@plt>
    aa14:	8b 4b 08             	mov    0x8(%ebx),%ecx
    aa17:	5a                   	pop    %edx
    aa18:	51                   	push   %ecx
    aa19:	e8 d2 76 00 00       	call   120f0 <free@plt>
    aa1e:	89 1c 24             	mov    %ebx,(%esp)
    aa21:	e8 ca 76 00 00       	call   120f0 <free@plt>
    aa26:	83 c4 10             	add    $0x10,%esp
    aa29:	8d 65 f4             	lea    -0xc(%ebp),%esp
    aa2c:	89 f8                	mov    %edi,%eax
    aa2e:	5b                   	pop    %ebx
    aa2f:	5e                   	pop    %esi
    aa30:	5f                   	pop    %edi
    aa31:	5d                   	pop    %ebp
    aa32:	c3                   	ret    
    aa33:	90                   	nop
    aa34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    aa38:	83 ec 0c             	sub    $0xc,%esp
    aa3b:	8b 42 18             	mov    0x18(%edx),%eax
    aa3e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    aa41:	31 f6                	xor    %esi,%esi
    aa43:	50                   	push   %eax
    aa44:	e8 d7 0b 00 00       	call   b620 <bithenge_node_dec_ref>
    aa49:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    aa4c:	83 c4 10             	add    $0x10,%esp
    aa4f:	8b 42 10             	mov    0x10(%edx),%eax
    aa52:	85 c0                	test   %eax,%eax
    aa54:	7e 20                	jle    aa76 <barrier_transform_apply+0x146>
    aa56:	66 90                	xchg   %ax,%ax
    aa58:	8b 42 14             	mov    0x14(%edx),%eax
    aa5b:	83 ec 0c             	sub    $0xc,%esp
    aa5e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    aa61:	8b 04 b0             	mov    (%eax,%esi,4),%eax
    aa64:	46                   	inc    %esi
    aa65:	50                   	push   %eax
    aa66:	e8 b5 0b 00 00       	call   b620 <bithenge_node_dec_ref>
    aa6b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    aa6e:	83 c4 10             	add    $0x10,%esp
    aa71:	3b 72 10             	cmp    0x10(%edx),%esi
    aa74:	7c e2                	jl     aa58 <barrier_transform_apply+0x128>
    aa76:	8b 42 04             	mov    0x4(%edx),%eax
    aa79:	85 c0                	test   %eax,%eax
    aa7b:	74 14                	je     aa91 <barrier_transform_apply+0x161>
    aa7d:	8b 08                	mov    (%eax),%ecx
    aa7f:	49                   	dec    %ecx
    aa80:	89 08                	mov    %ecx,(%eax)
    aa82:	85 c9                	test   %ecx,%ecx
    aa84:	75 0b                	jne    aa91 <barrier_transform_apply+0x161>
    aa86:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    aa89:	e8 62 f5 ff ff       	call   9ff0 <bithenge_scope_dec_ref.part.12>
    aa8e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    aa91:	83 ec 0c             	sub    $0xc,%esp
    aa94:	8b 72 14             	mov    0x14(%edx),%esi
    aa97:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    aa9a:	56                   	push   %esi
    aa9b:	e8 50 76 00 00       	call   120f0 <free@plt>
    aaa0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    aaa3:	58                   	pop    %eax
    aaa4:	8b 42 08             	mov    0x8(%edx),%eax
    aaa7:	50                   	push   %eax
    aaa8:	e8 43 76 00 00       	call   120f0 <free@plt>
    aaad:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    aab0:	89 14 24             	mov    %edx,(%esp)
    aab3:	e8 38 76 00 00       	call   120f0 <free@plt>
    aab8:	83 c4 10             	add    $0x10,%esp
    aabb:	e9 48 ff ff ff       	jmp    aa08 <barrier_transform_apply+0xd8>
    aac0:	bf fe ff ff ff       	mov    $0xfffffffe,%edi
    aac5:	e9 ef fe ff ff       	jmp    a9b9 <barrier_transform_apply+0x89>
    aaca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0000aad0 <bithenge_transform_prefix_length>:
    aad0:	55                   	push   %ebp
    aad1:	89 e5                	mov    %esp,%ebp
    aad3:	83 ec 28             	sub    $0x28,%esp
    aad6:	8b 45 08             	mov    0x8(%ebp),%eax
    aad9:	85 c0                	test   %eax,%eax
    aadb:	74 77                	je     ab54 <bithenge_transform_prefix_length+0x84>
    aadd:	8b 10                	mov    (%eax),%edx
    aadf:	85 d2                	test   %edx,%edx
    aae1:	74 5f                	je     ab42 <bithenge_transform_prefix_length+0x72>
    aae3:	8b 4a 04             	mov    0x4(%edx),%ecx
    aae6:	85 c9                	test   %ecx,%ecx
    aae8:	74 16                	je     ab00 <bithenge_transform_prefix_length+0x30>
    aaea:	8b 55 14             	mov    0x14(%ebp),%edx
    aaed:	52                   	push   %edx
    aaee:	8b 55 10             	mov    0x10(%ebp),%edx
    aaf1:	52                   	push   %edx
    aaf2:	8b 55 0c             	mov    0xc(%ebp),%edx
    aaf5:	52                   	push   %edx
    aaf6:	50                   	push   %eax
    aaf7:	ff d1                	call   *%ecx
    aaf9:	83 c4 10             	add    $0x10,%esp
    aafc:	c9                   	leave  
    aafd:	c3                   	ret    
    aafe:	66 90                	xchg   %ax,%ax
    ab00:	8b 52 08             	mov    0x8(%edx),%edx
    ab03:	85 d2                	test   %edx,%edx
    ab05:	74 34                	je     ab3b <bithenge_transform_prefix_length+0x6b>
    ab07:	83 ec 0c             	sub    $0xc,%esp
    ab0a:	8b 4d 14             	mov    0x14(%ebp),%ecx
    ab0d:	51                   	push   %ecx
    ab0e:	8d 4d f4             	lea    -0xc(%ebp),%ecx
    ab11:	51                   	push   %ecx
    ab12:	8b 4d 10             	mov    0x10(%ebp),%ecx
    ab15:	51                   	push   %ecx
    ab16:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    ab19:	51                   	push   %ecx
    ab1a:	50                   	push   %eax
    ab1b:	ff d2                	call   *%edx
    ab1d:	83 c4 20             	add    $0x20,%esp
    ab20:	85 c0                	test   %eax,%eax
    ab22:	75 d8                	jne    aafc <bithenge_transform_prefix_length+0x2c>
    ab24:	83 ec 0c             	sub    $0xc,%esp
    ab27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    ab2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    ab2d:	50                   	push   %eax
    ab2e:	e8 ed 0a 00 00       	call   b620 <bithenge_node_dec_ref>
    ab33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    ab36:	83 c4 10             	add    $0x10,%esp
    ab39:	c9                   	leave  
    ab3a:	c3                   	ret    
    ab3b:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    ab40:	c9                   	leave  
    ab41:	c3                   	ret    
    ab42:	51                   	push   %ecx
    ab43:	6a 7d                	push   $0x7d
    ab45:	68 02 15 01 00       	push   $0x11502
    ab4a:	68 61 11 01 00       	push   $0x11161
    ab4f:	e8 bc 73 00 00       	call   11f10 <assert_abort@plt>
    ab54:	50                   	push   %eax
    ab55:	6a 7c                	push   $0x7c
    ab57:	68 02 15 01 00       	push   $0x11502
    ab5c:	68 35 13 01 00       	push   $0x11335
    ab61:	e8 aa 73 00 00       	call   11f10 <assert_abort@plt>
    ab66:	8d 76 00             	lea    0x0(%esi),%esi
    ab69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000ab70 <bithenge_scope_new>:
    ab70:	55                   	push   %ebp
    ab71:	89 e5                	mov    %esp,%ebp
    ab73:	53                   	push   %ebx
    ab74:	83 ec 10             	sub    $0x10,%esp
    ab77:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    ab7a:	6a 20                	push   $0x20
    ab7c:	e8 df 72 00 00       	call   11e60 <malloc@plt>
    ab81:	83 c4 10             	add    $0x10,%esp
    ab84:	85 c0                	test   %eax,%eax
    ab86:	74 45                	je     abcd <bithenge_scope_new+0x5d>
    ab88:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    ab8e:	85 db                	test   %ebx,%ebx
    ab90:	74 05                	je     ab97 <bithenge_scope_new+0x27>
    ab92:	8b 13                	mov    (%ebx),%edx
    ab94:	42                   	inc    %edx
    ab95:	89 13                	mov    %edx,(%ebx)
    ab97:	8b 55 08             	mov    0x8(%ebp),%edx
    ab9a:	89 58 04             	mov    %ebx,0x4(%eax)
    ab9d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    aba4:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
    aba8:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    abaf:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    abb6:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    abbd:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    abc4:	89 02                	mov    %eax,(%edx)
    abc6:	31 c0                	xor    %eax,%eax
    abc8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    abcb:	c9                   	leave  
    abcc:	c3                   	ret    
    abcd:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    abd2:	eb f4                	jmp    abc8 <bithenge_scope_new+0x58>
    abd4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    abda:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0000abe0 <bithenge_scope_dec_ref>:
    abe0:	55                   	push   %ebp
    abe1:	89 e5                	mov    %esp,%ebp
    abe3:	57                   	push   %edi
    abe4:	56                   	push   %esi
    abe5:	53                   	push   %ebx
    abe6:	83 ec 1c             	sub    $0x1c,%esp
    abe9:	8b 75 08             	mov    0x8(%ebp),%esi
    abec:	85 f6                	test   %esi,%esi
    abee:	74 09                	je     abf9 <bithenge_scope_dec_ref+0x19>
    abf0:	8b 06                	mov    (%esi),%eax
    abf2:	48                   	dec    %eax
    abf3:	89 06                	mov    %eax,(%esi)
    abf5:	85 c0                	test   %eax,%eax
    abf7:	74 0f                	je     ac08 <bithenge_scope_dec_ref+0x28>
    abf9:	8d 65 f4             	lea    -0xc(%ebp),%esp
    abfc:	5b                   	pop    %ebx
    abfd:	5e                   	pop    %esi
    abfe:	5f                   	pop    %edi
    abff:	5d                   	pop    %ebp
    ac00:	c3                   	ret    
    ac01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    ac08:	83 ec 0c             	sub    $0xc,%esp
    ac0b:	8b 46 18             	mov    0x18(%esi),%eax
    ac0e:	31 db                	xor    %ebx,%ebx
    ac10:	50                   	push   %eax
    ac11:	e8 0a 0a 00 00       	call   b620 <bithenge_node_dec_ref>
    ac16:	8b 56 10             	mov    0x10(%esi),%edx
    ac19:	83 c4 10             	add    $0x10,%esp
    ac1c:	85 d2                	test   %edx,%edx
    ac1e:	7e 18                	jle    ac38 <bithenge_scope_dec_ref+0x58>
    ac20:	8b 46 14             	mov    0x14(%esi),%eax
    ac23:	83 ec 0c             	sub    $0xc,%esp
    ac26:	8b 04 98             	mov    (%eax,%ebx,4),%eax
    ac29:	43                   	inc    %ebx
    ac2a:	50                   	push   %eax
    ac2b:	e8 f0 09 00 00       	call   b620 <bithenge_node_dec_ref>
    ac30:	83 c4 10             	add    $0x10,%esp
    ac33:	3b 5e 10             	cmp    0x10(%esi),%ebx
    ac36:	7c e8                	jl     ac20 <bithenge_scope_dec_ref+0x40>
    ac38:	8b 7e 04             	mov    0x4(%esi),%edi
    ac3b:	85 ff                	test   %edi,%edi
    ac3d:	74 09                	je     ac48 <bithenge_scope_dec_ref+0x68>
    ac3f:	8b 07                	mov    (%edi),%eax
    ac41:	48                   	dec    %eax
    ac42:	89 07                	mov    %eax,(%edi)
    ac44:	85 c0                	test   %eax,%eax
    ac46:	74 28                	je     ac70 <bithenge_scope_dec_ref+0x90>
    ac48:	83 ec 0c             	sub    $0xc,%esp
    ac4b:	8b 46 14             	mov    0x14(%esi),%eax
    ac4e:	50                   	push   %eax
    ac4f:	e8 9c 74 00 00       	call   120f0 <free@plt>
    ac54:	8b 4e 08             	mov    0x8(%esi),%ecx
    ac57:	5a                   	pop    %edx
    ac58:	51                   	push   %ecx
    ac59:	e8 92 74 00 00       	call   120f0 <free@plt>
    ac5e:	89 75 08             	mov    %esi,0x8(%ebp)
    ac61:	83 c4 10             	add    $0x10,%esp
    ac64:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ac67:	5b                   	pop    %ebx
    ac68:	5e                   	pop    %esi
    ac69:	5f                   	pop    %edi
    ac6a:	5d                   	pop    %ebp
    ac6b:	e9 80 74 00 00       	jmp    120f0 <free@plt>
    ac70:	83 ec 0c             	sub    $0xc,%esp
    ac73:	8b 47 18             	mov    0x18(%edi),%eax
    ac76:	31 db                	xor    %ebx,%ebx
    ac78:	50                   	push   %eax
    ac79:	e8 a2 09 00 00       	call   b620 <bithenge_node_dec_ref>
    ac7e:	8b 47 10             	mov    0x10(%edi),%eax
    ac81:	83 c4 10             	add    $0x10,%esp
    ac84:	85 c0                	test   %eax,%eax
    ac86:	7e 18                	jle    aca0 <bithenge_scope_dec_ref+0xc0>
    ac88:	8b 47 14             	mov    0x14(%edi),%eax
    ac8b:	83 ec 0c             	sub    $0xc,%esp
    ac8e:	8b 04 98             	mov    (%eax,%ebx,4),%eax
    ac91:	43                   	inc    %ebx
    ac92:	50                   	push   %eax
    ac93:	e8 88 09 00 00       	call   b620 <bithenge_node_dec_ref>
    ac98:	83 c4 10             	add    $0x10,%esp
    ac9b:	3b 5f 10             	cmp    0x10(%edi),%ebx
    ac9e:	7c e8                	jl     ac88 <bithenge_scope_dec_ref+0xa8>
    aca0:	8b 57 04             	mov    0x4(%edi),%edx
    aca3:	85 d2                	test   %edx,%edx
    aca5:	74 09                	je     acb0 <bithenge_scope_dec_ref+0xd0>
    aca7:	8b 02                	mov    (%edx),%eax
    aca9:	48                   	dec    %eax
    acaa:	89 02                	mov    %eax,(%edx)
    acac:	85 c0                	test   %eax,%eax
    acae:	74 28                	je     acd8 <bithenge_scope_dec_ref+0xf8>
    acb0:	83 ec 0c             	sub    $0xc,%esp
    acb3:	8b 5f 14             	mov    0x14(%edi),%ebx
    acb6:	53                   	push   %ebx
    acb7:	e8 34 74 00 00       	call   120f0 <free@plt>
    acbc:	58                   	pop    %eax
    acbd:	8b 47 08             	mov    0x8(%edi),%eax
    acc0:	50                   	push   %eax
    acc1:	e8 2a 74 00 00       	call   120f0 <free@plt>
    acc6:	89 3c 24             	mov    %edi,(%esp)
    acc9:	e8 22 74 00 00       	call   120f0 <free@plt>
    acce:	83 c4 10             	add    $0x10,%esp
    acd1:	e9 72 ff ff ff       	jmp    ac48 <bithenge_scope_dec_ref+0x68>
    acd6:	66 90                	xchg   %ax,%ax
    acd8:	83 ec 0c             	sub    $0xc,%esp
    acdb:	8b 4a 18             	mov    0x18(%edx),%ecx
    acde:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    ace1:	31 db                	xor    %ebx,%ebx
    ace3:	51                   	push   %ecx
    ace4:	e8 37 09 00 00       	call   b620 <bithenge_node_dec_ref>
    ace9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    acec:	83 c4 10             	add    $0x10,%esp
    acef:	8b 42 10             	mov    0x10(%edx),%eax
    acf2:	85 c0                	test   %eax,%eax
    acf4:	7e 20                	jle    ad16 <bithenge_scope_dec_ref+0x136>
    acf6:	66 90                	xchg   %ax,%ax
    acf8:	8b 42 14             	mov    0x14(%edx),%eax
    acfb:	83 ec 0c             	sub    $0xc,%esp
    acfe:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    ad01:	8b 04 98             	mov    (%eax,%ebx,4),%eax
    ad04:	43                   	inc    %ebx
    ad05:	50                   	push   %eax
    ad06:	e8 15 09 00 00       	call   b620 <bithenge_node_dec_ref>
    ad0b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    ad0e:	83 c4 10             	add    $0x10,%esp
    ad11:	3b 5a 10             	cmp    0x10(%edx),%ebx
    ad14:	7c e2                	jl     acf8 <bithenge_scope_dec_ref+0x118>
    ad16:	8b 42 04             	mov    0x4(%edx),%eax
    ad19:	85 c0                	test   %eax,%eax
    ad1b:	74 14                	je     ad31 <bithenge_scope_dec_ref+0x151>
    ad1d:	8b 08                	mov    (%eax),%ecx
    ad1f:	49                   	dec    %ecx
    ad20:	89 08                	mov    %ecx,(%eax)
    ad22:	85 c9                	test   %ecx,%ecx
    ad24:	75 0b                	jne    ad31 <bithenge_scope_dec_ref+0x151>
    ad26:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    ad29:	e8 c2 f2 ff ff       	call   9ff0 <bithenge_scope_dec_ref.part.12>
    ad2e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    ad31:	83 ec 0c             	sub    $0xc,%esp
    ad34:	8b 42 14             	mov    0x14(%edx),%eax
    ad37:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    ad3a:	50                   	push   %eax
    ad3b:	e8 b0 73 00 00       	call   120f0 <free@plt>
    ad40:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    ad43:	58                   	pop    %eax
    ad44:	8b 42 08             	mov    0x8(%edx),%eax
    ad47:	50                   	push   %eax
    ad48:	e8 a3 73 00 00       	call   120f0 <free@plt>
    ad4d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    ad50:	89 14 24             	mov    %edx,(%esp)
    ad53:	e8 98 73 00 00       	call   120f0 <free@plt>
    ad58:	83 c4 10             	add    $0x10,%esp
    ad5b:	e9 50 ff ff ff       	jmp    acb0 <bithenge_scope_dec_ref+0xd0>

0000ad60 <bithenge_scope_outer>:
    ad60:	55                   	push   %ebp
    ad61:	89 e5                	mov    %esp,%ebp
    ad63:	8b 45 08             	mov    0x8(%ebp),%eax
    ad66:	5d                   	pop    %ebp
    ad67:	8b 40 04             	mov    0x4(%eax),%eax
    ad6a:	c3                   	ret    
    ad6b:	90                   	nop
    ad6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000ad70 <bithenge_scope_get_error>:
    ad70:	55                   	push   %ebp
    ad71:	89 e5                	mov    %esp,%ebp
    ad73:	8b 45 08             	mov    0x8(%ebp),%eax
    ad76:	5d                   	pop    %ebp
    ad77:	8b 40 08             	mov    0x8(%eax),%eax
    ad7a:	c3                   	ret    
    ad7b:	90                   	nop
    ad7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000ad80 <bithenge_scope_error>:
    ad80:	55                   	push   %ebp
    ad81:	89 e5                	mov    %esp,%ebp
    ad83:	57                   	push   %edi
    ad84:	56                   	push   %esi
    ad85:	53                   	push   %ebx
    ad86:	83 ec 2c             	sub    $0x2c,%esp
    ad89:	8b 75 08             	mov    0x8(%ebp),%esi
    ad8c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    ad8f:	8b 46 08             	mov    0x8(%esi),%eax
    ad92:	85 c0                	test   %eax,%eax
    ad94:	74 17                	je     adad <bithenge_scope_error+0x2d>
    ad96:	e9 e5 00 00 00       	jmp    ae80 <bithenge_scope_error+0x100>
    ad9b:	90                   	nop
    ad9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    ada0:	89 c6                	mov    %eax,%esi
    ada2:	8b 40 08             	mov    0x8(%eax),%eax
    ada5:	85 c0                	test   %eax,%eax
    ada7:	0f 85 d3 00 00 00    	jne    ae80 <bithenge_scope_error+0x100>
    adad:	8b 46 04             	mov    0x4(%esi),%eax
    adb0:	85 c0                	test   %eax,%eax
    adb2:	75 ec                	jne    ada0 <bithenge_scope_error+0x20>
    adb4:	83 ec 0c             	sub    $0xc,%esp
    adb7:	c7 45 e0 00 01 00 00 	movl   $0x100,-0x20(%ebp)
    adbe:	68 00 01 00 00       	push   $0x100
    adc3:	e8 98 70 00 00       	call   11e60 <malloc@plt>
    adc8:	83 c4 10             	add    $0x10,%esp
    adcb:	89 46 08             	mov    %eax,0x8(%esi)
    adce:	85 c0                	test   %eax,%eax
    add0:	0f 84 ce 00 00 00    	je     aea4 <bithenge_scope_error+0x124>
    add6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    add9:	8d 45 10             	lea    0x10(%ebp),%eax
    addc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    addf:	eb 4f                	jmp    ae30 <bithenge_scope_error+0xb0>
    ade1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    ade8:	56                   	push   %esi
    ade9:	56                   	push   %esi
    adea:	6a 25                	push   $0x25
    adec:	53                   	push   %ebx
    aded:	e8 fe 70 00 00       	call   11ef0 <str_chr@plt>
    adf2:	83 c4 10             	add    $0x10,%esp
    adf5:	89 c7                	mov    %eax,%edi
    adf7:	85 c0                	test   %eax,%eax
    adf9:	0f 84 91 00 00 00    	je     ae90 <bithenge_scope_error+0x110>
    adff:	8b 55 e0             	mov    -0x20(%ebp),%edx
    ae02:	89 f8                	mov    %edi,%eax
    ae04:	29 d8                	sub    %ebx,%eax
    ae06:	8d 72 ff             	lea    -0x1(%edx),%esi
    ae09:	39 c6                	cmp    %eax,%esi
    ae0b:	76 02                	jbe    ae0f <bithenge_scope_error+0x8f>
    ae0d:	89 c6                	mov    %eax,%esi
    ae0f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    ae12:	50                   	push   %eax
    ae13:	56                   	push   %esi
    ae14:	53                   	push   %ebx
    ae15:	52                   	push   %edx
    ae16:	e8 35 70 00 00       	call   11e50 <memcpy@plt>
    ae1b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    ae1e:	8b 5d e0             	mov    -0x20(%ebp),%ebx
    ae21:	29 f3                	sub    %esi,%ebx
    ae23:	01 f1                	add    %esi,%ecx
    ae25:	89 5d e0             	mov    %ebx,-0x20(%ebp)
    ae28:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    ae2b:	83 c4 10             	add    $0x10,%esp
    ae2e:	89 fb                	mov    %edi,%ebx
    ae30:	8a 03                	mov    (%ebx),%al
    ae32:	84 c0                	test   %al,%al
    ae34:	74 37                	je     ae6d <bithenge_scope_error+0xed>
    ae36:	3c 25                	cmp    $0x25,%al
    ae38:	75 ae                	jne    ade8 <bithenge_scope_error+0x68>
    ae3a:	80 7b 01 74          	cmpb   $0x74,0x1(%ebx)
    ae3e:	75 a8                	jne    ade8 <bithenge_scope_error+0x68>
    ae40:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    ae43:	83 c3 02             	add    $0x2,%ebx
    ae46:	89 c8                	mov    %ecx,%eax
    ae48:	83 c1 04             	add    $0x4,%ecx
    ae4b:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    ae4e:	8b 38                	mov    (%eax),%edi
    ae50:	8d 45 e0             	lea    -0x20(%ebp),%eax
    ae53:	57                   	push   %edi
    ae54:	6a 00                	push   $0x0
    ae56:	50                   	push   %eax
    ae57:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    ae5a:	50                   	push   %eax
    ae5b:	e8 b0 6d ff ff       	call   1c10 <bithenge_print_node_to_string>
    ae60:	83 c4 10             	add    $0x10,%esp
    ae63:	85 c0                	test   %eax,%eax
    ae65:	75 1e                	jne    ae85 <bithenge_scope_error+0x105>
    ae67:	8a 03                	mov    (%ebx),%al
    ae69:	84 c0                	test   %al,%al
    ae6b:	75 c9                	jne    ae36 <bithenge_scope_error+0xb6>
    ae6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    ae70:	c6 00 00             	movb   $0x0,(%eax)
    ae73:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ae76:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    ae7b:	5b                   	pop    %ebx
    ae7c:	5e                   	pop    %esi
    ae7d:	5f                   	pop    %edi
    ae7e:	5d                   	pop    %ebp
    ae7f:	c3                   	ret    
    ae80:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    ae85:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ae88:	5b                   	pop    %ebx
    ae89:	5e                   	pop    %esi
    ae8a:	5f                   	pop    %edi
    ae8b:	5d                   	pop    %ebp
    ae8c:	c3                   	ret    
    ae8d:	8d 76 00             	lea    0x0(%esi),%esi
    ae90:	83 ec 0c             	sub    $0xc,%esp
    ae93:	53                   	push   %ebx
    ae94:	e8 97 71 00 00       	call   12030 <str_length@plt>
    ae99:	83 c4 10             	add    $0x10,%esp
    ae9c:	8d 3c 03             	lea    (%ebx,%eax,1),%edi
    ae9f:	e9 5b ff ff ff       	jmp    adff <bithenge_scope_error+0x7f>
    aea4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    aea9:	eb da                	jmp    ae85 <bithenge_scope_error+0x105>
    aeab:	90                   	nop
    aeac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000aeb0 <bithenge_scope_get_current_node>:
    aeb0:	55                   	push   %ebp
    aeb1:	89 e5                	mov    %esp,%ebp
    aeb3:	8b 45 08             	mov    0x8(%ebp),%eax
    aeb6:	8b 40 18             	mov    0x18(%eax),%eax
    aeb9:	85 c0                	test   %eax,%eax
    aebb:	74 07                	je     aec4 <bithenge_scope_get_current_node+0x14>
    aebd:	8b 50 04             	mov    0x4(%eax),%edx
    aec0:	42                   	inc    %edx
    aec1:	89 50 04             	mov    %edx,0x4(%eax)
    aec4:	5d                   	pop    %ebp
    aec5:	c3                   	ret    
    aec6:	8d 76 00             	lea    0x0(%esi),%esi
    aec9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000aed0 <bithenge_scope_set_current_node>:
    aed0:	55                   	push   %ebp
    aed1:	89 e5                	mov    %esp,%ebp
    aed3:	53                   	push   %ebx
    aed4:	83 ec 10             	sub    $0x10,%esp
    aed7:	8b 5d 08             	mov    0x8(%ebp),%ebx
    aeda:	8b 43 18             	mov    0x18(%ebx),%eax
    aedd:	50                   	push   %eax
    aede:	e8 3d 07 00 00       	call   b620 <bithenge_node_dec_ref>
    aee3:	8b 45 0c             	mov    0xc(%ebp),%eax
    aee6:	83 c4 10             	add    $0x10,%esp
    aee9:	89 43 18             	mov    %eax,0x18(%ebx)
    aeec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    aeef:	c9                   	leave  
    aef0:	c3                   	ret    
    aef1:	eb 0d                	jmp    af00 <bithenge_scope_in_node>
    aef3:	90                   	nop
    aef4:	90                   	nop
    aef5:	90                   	nop
    aef6:	90                   	nop
    aef7:	90                   	nop
    aef8:	90                   	nop
    aef9:	90                   	nop
    aefa:	90                   	nop
    aefb:	90                   	nop
    aefc:	90                   	nop
    aefd:	90                   	nop
    aefe:	90                   	nop
    aeff:	90                   	nop

0000af00 <bithenge_scope_in_node>:
    af00:	55                   	push   %ebp
    af01:	89 e5                	mov    %esp,%ebp
    af03:	8b 45 08             	mov    0x8(%ebp),%eax
    af06:	8b 40 1c             	mov    0x1c(%eax),%eax
    af09:	85 c0                	test   %eax,%eax
    af0b:	74 07                	je     af14 <bithenge_scope_in_node+0x14>
    af0d:	8b 50 04             	mov    0x4(%eax),%edx
    af10:	42                   	inc    %edx
    af11:	89 50 04             	mov    %edx,0x4(%eax)
    af14:	5d                   	pop    %ebp
    af15:	c3                   	ret    
    af16:	8d 76 00             	lea    0x0(%esi),%esi
    af19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000af20 <bithenge_scope_set_in_node>:
    af20:	55                   	push   %ebp
    af21:	89 e5                	mov    %esp,%ebp
    af23:	53                   	push   %ebx
    af24:	83 ec 10             	sub    $0x10,%esp
    af27:	8b 5d 08             	mov    0x8(%ebp),%ebx
    af2a:	8b 43 1c             	mov    0x1c(%ebx),%eax
    af2d:	50                   	push   %eax
    af2e:	e8 ed 06 00 00       	call   b620 <bithenge_node_dec_ref>
    af33:	8b 45 0c             	mov    0xc(%ebp),%eax
    af36:	83 c4 10             	add    $0x10,%esp
    af39:	89 43 1c             	mov    %eax,0x1c(%ebx)
    af3c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    af3f:	c9                   	leave  
    af40:	c3                   	ret    
    af41:	eb 0d                	jmp    af50 <bithenge_scope_set_barrier>
    af43:	90                   	nop
    af44:	90                   	nop
    af45:	90                   	nop
    af46:	90                   	nop
    af47:	90                   	nop
    af48:	90                   	nop
    af49:	90                   	nop
    af4a:	90                   	nop
    af4b:	90                   	nop
    af4c:	90                   	nop
    af4d:	90                   	nop
    af4e:	90                   	nop
    af4f:	90                   	nop

0000af50 <bithenge_scope_set_barrier>:
    af50:	55                   	push   %ebp
    af51:	89 e5                	mov    %esp,%ebp
    af53:	8b 45 08             	mov    0x8(%ebp),%eax
    af56:	c6 40 0c 01          	movb   $0x1,0xc(%eax)
    af5a:	5d                   	pop    %ebp
    af5b:	c3                   	ret    
    af5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000af60 <bithenge_scope_is_barrier>:
    af60:	55                   	push   %ebp
    af61:	89 e5                	mov    %esp,%ebp
    af63:	8b 45 08             	mov    0x8(%ebp),%eax
    af66:	5d                   	pop    %ebp
    af67:	8a 40 0c             	mov    0xc(%eax),%al
    af6a:	c3                   	ret    
    af6b:	90                   	nop
    af6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000af70 <bithenge_scope_alloc_params>:
    af70:	55                   	push   %ebp
    af71:	89 e5                	mov    %esp,%ebp
    af73:	57                   	push   %edi
    af74:	56                   	push   %esi
    af75:	53                   	push   %ebx
    af76:	83 ec 18             	sub    $0x18,%esp
    af79:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    af7c:	8b 75 08             	mov    0x8(%ebp),%esi
    af7f:	8d 3c 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edi
    af86:	57                   	push   %edi
    af87:	e8 d4 6e 00 00       	call   11e60 <malloc@plt>
    af8c:	83 c4 10             	add    $0x10,%esp
    af8f:	89 46 14             	mov    %eax,0x14(%esi)
    af92:	85 c0                	test   %eax,%eax
    af94:	74 21                	je     afb7 <bithenge_scope_alloc_params+0x47>
    af96:	89 5e 10             	mov    %ebx,0x10(%esi)
    af99:	8d 14 38             	lea    (%eax,%edi,1),%edx
    af9c:	85 db                	test   %ebx,%ebx
    af9e:	7e 0d                	jle    afad <bithenge_scope_alloc_params+0x3d>
    afa0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    afa6:	83 c0 04             	add    $0x4,%eax
    afa9:	39 d0                	cmp    %edx,%eax
    afab:	75 f3                	jne    afa0 <bithenge_scope_alloc_params+0x30>
    afad:	31 c0                	xor    %eax,%eax
    afaf:	8d 65 f4             	lea    -0xc(%ebp),%esp
    afb2:	5b                   	pop    %ebx
    afb3:	5e                   	pop    %esi
    afb4:	5f                   	pop    %edi
    afb5:	5d                   	pop    %ebp
    afb6:	c3                   	ret    
    afb7:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    afbc:	eb f1                	jmp    afaf <bithenge_scope_alloc_params+0x3f>
    afbe:	66 90                	xchg   %ax,%ax

0000afc0 <bithenge_scope_set_param>:
    afc0:	55                   	push   %ebp
    afc1:	89 e5                	mov    %esp,%ebp
    afc3:	83 ec 08             	sub    $0x8,%esp
    afc6:	8b 45 08             	mov    0x8(%ebp),%eax
    afc9:	8b 55 0c             	mov    0xc(%ebp),%edx
    afcc:	85 c0                	test   %eax,%eax
    afce:	74 2b                	je     affb <bithenge_scope_set_param+0x3b>
    afd0:	85 d2                	test   %edx,%edx
    afd2:	78 12                	js     afe6 <bithenge_scope_set_param+0x26>
    afd4:	3b 50 10             	cmp    0x10(%eax),%edx
    afd7:	7d 0d                	jge    afe6 <bithenge_scope_set_param+0x26>
    afd9:	8b 40 14             	mov    0x14(%eax),%eax
    afdc:	8b 4d 10             	mov    0x10(%ebp),%ecx
    afdf:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
    afe2:	31 c0                	xor    %eax,%eax
    afe4:	c9                   	leave  
    afe5:	c3                   	ret    
    afe6:	50                   	push   %eax
    afe7:	68 84 01 00 00       	push   $0x184
    afec:	68 02 15 01 00       	push   $0x11502
    aff1:	68 cc 15 01 00       	push   $0x115cc
    aff6:	e8 15 6f 00 00       	call   11f10 <assert_abort@plt>
    affb:	52                   	push   %edx
    affc:	68 83 01 00 00       	push   $0x183
    b001:	68 02 15 01 00       	push   $0x11502
    b006:	68 12 15 01 00       	push   $0x11512
    b00b:	e8 00 6f 00 00       	call   11f10 <assert_abort@plt>

0000b010 <bithenge_scope_get_param>:
    b010:	55                   	push   %ebp
    b011:	89 e5                	mov    %esp,%ebp
    b013:	53                   	push   %ebx
    b014:	50                   	push   %eax
    b015:	8b 45 08             	mov    0x8(%ebp),%eax
    b018:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    b01b:	85 c0                	test   %eax,%eax
    b01d:	75 10                	jne    b02f <bithenge_scope_get_param+0x1f>
    b01f:	eb 3d                	jmp    b05e <bithenge_scope_get_param+0x4e>
    b021:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    b028:	8b 40 04             	mov    0x4(%eax),%eax
    b02b:	85 c0                	test   %eax,%eax
    b02d:	74 2f                	je     b05e <bithenge_scope_get_param+0x4e>
    b02f:	8b 50 10             	mov    0x10(%eax),%edx
    b032:	85 d2                	test   %edx,%edx
    b034:	74 f2                	je     b028 <bithenge_scope_get_param+0x18>
    b036:	89 cb                	mov    %ecx,%ebx
    b038:	c1 eb 1f             	shr    $0x1f,%ebx
    b03b:	75 3b                	jne    b078 <bithenge_scope_get_param+0x68>
    b03d:	39 d1                	cmp    %edx,%ecx
    b03f:	7d 37                	jge    b078 <bithenge_scope_get_param+0x68>
    b041:	8b 40 14             	mov    0x14(%eax),%eax
    b044:	8b 55 10             	mov    0x10(%ebp),%edx
    b047:	8b 04 88             	mov    (%eax,%ecx,4),%eax
    b04a:	89 02                	mov    %eax,(%edx)
    b04c:	85 c0                	test   %eax,%eax
    b04e:	74 23                	je     b073 <bithenge_scope_get_param+0x63>
    b050:	8b 50 04             	mov    0x4(%eax),%edx
    b053:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    b056:	42                   	inc    %edx
    b057:	89 50 04             	mov    %edx,0x4(%eax)
    b05a:	31 c0                	xor    %eax,%eax
    b05c:	c9                   	leave  
    b05d:	c3                   	ret    
    b05e:	53                   	push   %ebx
    b05f:	68 96 01 00 00       	push   $0x196
    b064:	68 02 15 01 00       	push   $0x11502
    b069:	68 12 15 01 00       	push   $0x11512
    b06e:	e8 9d 6e 00 00       	call   11f10 <assert_abort@plt>
    b073:	e8 d4 00 00 00       	call   b14c <bithenge_node_inc_ref.part.3>
    b078:	51                   	push   %ecx
    b079:	68 98 01 00 00       	push   $0x198
    b07e:	68 02 15 01 00       	push   $0x11502
    b083:	68 cc 15 01 00       	push   $0x115cc
    b088:	e8 83 6e 00 00       	call   11f10 <assert_abort@plt>
    b08d:	8d 76 00             	lea    0x0(%esi),%esi

0000b090 <bithenge_barrier_transform_set_subtransform>:
    b090:	55                   	push   %ebp
    b091:	89 e5                	mov    %esp,%ebp
    b093:	83 ec 08             	sub    $0x8,%esp
    b096:	8b 45 0c             	mov    0xc(%ebp),%eax
    b099:	8b 55 08             	mov    0x8(%ebp),%edx
    b09c:	85 c0                	test   %eax,%eax
    b09e:	74 15                	je     b0b5 <bithenge_barrier_transform_set_subtransform+0x25>
    b0a0:	8b 48 08             	mov    0x8(%eax),%ecx
    b0a3:	85 c9                	test   %ecx,%ecx
    b0a5:	75 38                	jne    b0df <bithenge_barrier_transform_set_subtransform+0x4f>
    b0a7:	8b 4a 0c             	mov    0xc(%edx),%ecx
    b0aa:	85 c9                	test   %ecx,%ecx
    b0ac:	75 1c                	jne    b0ca <bithenge_barrier_transform_set_subtransform+0x3a>
    b0ae:	89 42 0c             	mov    %eax,0xc(%edx)
    b0b1:	31 c0                	xor    %eax,%eax
    b0b3:	c9                   	leave  
    b0b4:	c3                   	ret    
    b0b5:	50                   	push   %eax
    b0b6:	68 fc 01 00 00       	push   $0x1fc
    b0bb:	68 02 15 01 00       	push   $0x11502
    b0c0:	68 2c 15 01 00       	push   $0x1152c
    b0c5:	e8 46 6e 00 00       	call   11f10 <assert_abort@plt>
    b0ca:	50                   	push   %eax
    b0cb:	68 05 02 00 00       	push   $0x205
    b0d0:	68 02 15 01 00       	push   $0x11502
    b0d5:	68 25 15 01 00       	push   $0x11525
    b0da:	e8 31 6e 00 00       	call   11f10 <assert_abort@plt>
    b0df:	50                   	push   %eax
    b0e0:	68 fd 01 00 00       	push   $0x1fd
    b0e5:	68 02 15 01 00       	push   $0x11502
    b0ea:	68 0c 16 01 00       	push   $0x1160c
    b0ef:	e8 1c 6e 00 00       	call   11f10 <assert_abort@plt>
    b0f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    b0fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0000b100 <bithenge_new_barrier_transform>:
    b100:	55                   	push   %ebp
    b101:	89 e5                	mov    %esp,%ebp
    b103:	83 ec 14             	sub    $0x14,%esp
    b106:	6a 10                	push   $0x10
    b108:	e8 53 6d 00 00       	call   11e60 <malloc@plt>
    b10d:	83 c4 10             	add    $0x10,%esp
    b110:	85 c0                	test   %eax,%eax
    b112:	74 24                	je     b138 <bithenge_new_barrier_transform+0x38>
    b114:	8b 55 0c             	mov    0xc(%ebp),%edx
    b117:	c7 00 3c 17 01 00    	movl   $0x1173c,(%eax)
    b11d:	89 50 08             	mov    %edx,0x8(%eax)
    b120:	8b 55 08             	mov    0x8(%ebp),%edx
    b123:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    b12a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    b131:	89 02                	mov    %eax,(%edx)
    b133:	31 c0                	xor    %eax,%eax
    b135:	c9                   	leave  
    b136:	c3                   	ret    
    b137:	90                   	nop
    b138:	83 ec 0c             	sub    $0xc,%esp
    b13b:	6a 00                	push   $0x0
    b13d:	e8 ae 6f 00 00       	call   120f0 <free@plt>
    b142:	83 c4 10             	add    $0x10,%esp
    b145:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    b14a:	c9                   	leave  
    b14b:	c3                   	ret    

0000b14c <bithenge_node_inc_ref.part.3>:
    b14c:	55                   	push   %ebp
    b14d:	89 e5                	mov    %esp,%ebp
    b14f:	83 ec 0c             	sub    $0xc,%esp
    b152:	6a 70                	push   $0x70
    b154:	68 50 12 01 00       	push   $0x11250
    b159:	68 98 14 01 00       	push   $0x11498
    b15e:	e8 ad 6d 00 00       	call   11f10 <assert_abort@plt>
    b163:	66 90                	xchg   %ax,%ax
    b165:	66 90                	xchg   %ax,%ax
    b167:	66 90                	xchg   %ax,%ax
    b169:	66 90                	xchg   %ax,%ax
    b16b:	66 90                	xchg   %ax,%ax
    b16d:	66 90                	xchg   %ax,%ax
    b16f:	90                   	nop

0000b170 <empty_internal_node_for_each>:
    b170:	55                   	push   %ebp
    b171:	31 c0                	xor    %eax,%eax
    b173:	89 e5                	mov    %esp,%ebp
    b175:	5d                   	pop    %ebp
    b176:	c3                   	ret    
    b177:	89 f6                	mov    %esi,%esi
    b179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000b180 <empty_internal_node_get>:
    b180:	55                   	push   %ebp
    b181:	83 c8 ff             	or     $0xffffffff,%eax
    b184:	89 e5                	mov    %esp,%ebp
    b186:	5d                   	pop    %ebp
    b187:	c3                   	ret    
    b188:	90                   	nop
    b189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000b190 <internal_node_indestructible>:
    b190:	55                   	push   %ebp
    b191:	89 e5                	mov    %esp,%ebp
    b193:	83 ec 0c             	sub    $0xc,%esp
    b196:	68 a8 00 00 00       	push   $0xa8
    b19b:	68 4c 17 01 00       	push   $0x1174c
    b1a0:	68 48 12 01 00       	push   $0x11248
    b1a5:	e8 66 6d 00 00       	call   11f10 <assert_abort@plt>
    b1aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0000b1b0 <simple_internal_node_for_each>:
    b1b0:	55                   	push   %ebp
    b1b1:	89 e5                	mov    %esp,%ebp
    b1b3:	57                   	push   %edi
    b1b4:	56                   	push   %esi
    b1b5:	53                   	push   %ebx
    b1b6:	83 ec 1c             	sub    $0x1c,%esp
    b1b9:	8b 55 08             	mov    0x8(%ebp),%edx
    b1bc:	83 7a 18 00          	cmpl   $0x0,0x18(%edx)
    b1c0:	0f 8e 8a 00 00 00    	jle    b250 <simple_internal_node_for_each+0xa0>
    b1c6:	8b 4a 10             	mov    0x10(%edx),%ecx
    b1c9:	8b 01                	mov    (%ecx),%eax
    b1cb:	85 c0                	test   %eax,%eax
    b1cd:	74 6e                	je     b23d <simple_internal_node_for_each+0x8d>
    b1cf:	8b 58 04             	mov    0x4(%eax),%ebx
    b1d2:	8b 49 04             	mov    0x4(%ecx),%ecx
    b1d5:	43                   	inc    %ebx
    b1d6:	85 c9                	test   %ecx,%ecx
    b1d8:	89 58 04             	mov    %ebx,0x4(%eax)
    b1db:	74 60                	je     b23d <simple_internal_node_for_each+0x8d>
    b1dd:	bb 0c 00 00 00       	mov    $0xc,%ebx
    b1e2:	31 f6                	xor    %esi,%esi
    b1e4:	31 ff                	xor    %edi,%edi
    b1e6:	66 90                	xchg   %ax,%ax
    b1e8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    b1eb:	8b 51 04             	mov    0x4(%ecx),%edx
    b1ee:	42                   	inc    %edx
    b1ef:	89 51 04             	mov    %edx,0x4(%ecx)
    b1f2:	52                   	push   %edx
    b1f3:	8b 55 10             	mov    0x10(%ebp),%edx
    b1f6:	52                   	push   %edx
    b1f7:	51                   	push   %ecx
    b1f8:	50                   	push   %eax
    b1f9:	ff 55 0c             	call   *0xc(%ebp)
    b1fc:	83 c4 10             	add    $0x10,%esp
    b1ff:	85 c0                	test   %eax,%eax
    b201:	75 12                	jne    b215 <simple_internal_node_for_each+0x65>
    b203:	83 c6 01             	add    $0x1,%esi
    b206:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    b209:	83 d7 00             	adc    $0x0,%edi
    b20c:	39 7a 18             	cmp    %edi,0x18(%edx)
    b20f:	7f 14                	jg     b225 <simple_internal_node_for_each+0x75>
    b211:	7d 0d                	jge    b220 <simple_internal_node_for_each+0x70>
    b213:	31 c0                	xor    %eax,%eax
    b215:	8d 65 f4             	lea    -0xc(%ebp),%esp
    b218:	5b                   	pop    %ebx
    b219:	5e                   	pop    %esi
    b21a:	5f                   	pop    %edi
    b21b:	5d                   	pop    %ebp
    b21c:	c3                   	ret    
    b21d:	8d 76 00             	lea    0x0(%esi),%esi
    b220:	39 72 14             	cmp    %esi,0x14(%edx)
    b223:	76 ee                	jbe    b213 <simple_internal_node_for_each+0x63>
    b225:	8b 4a 10             	mov    0x10(%edx),%ecx
    b228:	8b 44 19 fc          	mov    -0x4(%ecx,%ebx,1),%eax
    b22c:	85 c0                	test   %eax,%eax
    b22e:	74 0d                	je     b23d <simple_internal_node_for_each+0x8d>
    b230:	8b 0c 19             	mov    (%ecx,%ebx,1),%ecx
    b233:	ff 40 04             	incl   0x4(%eax)
    b236:	83 c3 08             	add    $0x8,%ebx
    b239:	85 c9                	test   %ecx,%ecx
    b23b:	75 ab                	jne    b1e8 <simple_internal_node_for_each+0x38>
    b23d:	56                   	push   %esi
    b23e:	6a 70                	push   $0x70
    b240:	68 50 12 01 00       	push   $0x11250
    b245:	68 98 14 01 00       	push   $0x11498
    b24a:	e8 c1 6c 00 00       	call   11f10 <assert_abort@plt>
    b24f:	90                   	nop
    b250:	7c c1                	jl     b213 <simple_internal_node_for_each+0x63>
    b252:	83 7a 14 00          	cmpl   $0x0,0x14(%edx)
    b256:	0f 87 6a ff ff ff    	ja     b1c6 <simple_internal_node_for_each+0x16>
    b25c:	31 c0                	xor    %eax,%eax
    b25e:	eb b5                	jmp    b215 <simple_internal_node_for_each+0x65>

0000b260 <simple_internal_node_destroy>:
    b260:	55                   	push   %ebp
    b261:	89 e5                	mov    %esp,%ebp
    b263:	57                   	push   %edi
    b264:	56                   	push   %esi
    b265:	53                   	push   %ebx
    b266:	83 ec 1c             	sub    $0x1c,%esp
    b269:	8b 45 08             	mov    0x8(%ebp),%eax
    b26c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    b26f:	8b 58 18             	mov    0x18(%eax),%ebx
    b272:	8b 48 14             	mov    0x14(%eax),%ecx
    b275:	83 fb 00             	cmp    $0x0,%ebx
    b278:	0f 8e 12 01 00 00    	jle    b390 <simple_internal_node_destroy+0x130>
    b27e:	31 f6                	xor    %esi,%esi
    b280:	31 ff                	xor    %edi,%edi
    b282:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    b288:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    b28b:	8b 52 10             	mov    0x10(%edx),%edx
    b28e:	8b 14 b2             	mov    (%edx,%esi,4),%edx
    b291:	85 d2                	test   %edx,%edx
    b293:	74 13                	je     b2a8 <simple_internal_node_destroy+0x48>
    b295:	8b 42 04             	mov    0x4(%edx),%eax
    b298:	85 c0                	test   %eax,%eax
    b29a:	0f 84 04 01 00 00    	je     b3a4 <simple_internal_node_destroy+0x144>
    b2a0:	48                   	dec    %eax
    b2a1:	89 42 04             	mov    %eax,0x4(%edx)
    b2a4:	85 c0                	test   %eax,%eax
    b2a6:	74 40                	je     b2e8 <simple_internal_node_destroy+0x88>
    b2a8:	83 c6 01             	add    $0x1,%esi
    b2ab:	89 c8                	mov    %ecx,%eax
    b2ad:	83 d7 00             	adc    $0x0,%edi
    b2b0:	89 da                	mov    %ebx,%edx
    b2b2:	0f a4 c2 01          	shld   $0x1,%eax,%edx
    b2b6:	01 c0                	add    %eax,%eax
    b2b8:	39 fa                	cmp    %edi,%edx
    b2ba:	7f cc                	jg     b288 <simple_internal_node_destroy+0x28>
    b2bc:	7d 62                	jge    b320 <simple_internal_node_destroy+0xc0>
    b2be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    b2c1:	80 78 1c 00          	cmpb   $0x0,0x1c(%eax)
    b2c5:	74 12                	je     b2d9 <simple_internal_node_destroy+0x79>
    b2c7:	83 ec 0c             	sub    $0xc,%esp
    b2ca:	8b 40 10             	mov    0x10(%eax),%eax
    b2cd:	50                   	push   %eax
    b2ce:	e8 1d 6e 00 00       	call   120f0 <free@plt>
    b2d3:	83 c4 10             	add    $0x10,%esp
    b2d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    b2d9:	89 45 08             	mov    %eax,0x8(%ebp)
    b2dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
    b2df:	5b                   	pop    %ebx
    b2e0:	5e                   	pop    %esi
    b2e1:	5f                   	pop    %edi
    b2e2:	5d                   	pop    %ebp
    b2e3:	e9 08 6e 00 00       	jmp    120f0 <free@plt>
    b2e8:	8b 02                	mov    (%edx),%eax
    b2ea:	83 f8 02             	cmp    $0x2,%eax
    b2ed:	74 b9                	je     b2a8 <simple_internal_node_destroy+0x48>
    b2ef:	76 7f                	jbe    b370 <simple_internal_node_destroy+0x110>
    b2f1:	83 f8 04             	cmp    $0x4,%eax
    b2f4:	74 3a                	je     b330 <simple_internal_node_destroy+0xd0>
    b2f6:	83 f8 05             	cmp    $0x5,%eax
    b2f9:	75 55                	jne    b350 <simple_internal_node_destroy+0xf0>
    b2fb:	8b 42 08             	mov    0x8(%edx),%eax
    b2fe:	85 c0                	test   %eax,%eax
    b300:	0f 84 b0 00 00 00    	je     b3b6 <simple_internal_node_destroy+0x156>
    b306:	83 ec 0c             	sub    $0xc,%esp
    b309:	52                   	push   %edx
    b30a:	ff 50 0c             	call   *0xc(%eax)
    b30d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    b310:	83 c4 10             	add    $0x10,%esp
    b313:	8b 48 14             	mov    0x14(%eax),%ecx
    b316:	8b 58 18             	mov    0x18(%eax),%ebx
    b319:	eb 8d                	jmp    b2a8 <simple_internal_node_destroy+0x48>
    b31b:	90                   	nop
    b31c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    b320:	39 f0                	cmp    %esi,%eax
    b322:	0f 87 60 ff ff ff    	ja     b288 <simple_internal_node_destroy+0x28>
    b328:	eb 94                	jmp    b2be <simple_internal_node_destroy+0x5e>
    b32a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    b330:	80 7a 0c 00          	cmpb   $0x0,0xc(%edx)
    b334:	74 1a                	je     b350 <simple_internal_node_destroy+0xf0>
    b336:	83 ec 0c             	sub    $0xc,%esp
    b339:	8b 4a 08             	mov    0x8(%edx),%ecx
    b33c:	89 55 e0             	mov    %edx,-0x20(%ebp)
    b33f:	51                   	push   %ecx
    b340:	e8 ab 6d 00 00       	call   120f0 <free@plt>
    b345:	83 c4 10             	add    $0x10,%esp
    b348:	8b 55 e0             	mov    -0x20(%ebp),%edx
    b34b:	90                   	nop
    b34c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    b350:	83 ec 0c             	sub    $0xc,%esp
    b353:	52                   	push   %edx
    b354:	e8 97 6d 00 00       	call   120f0 <free@plt>
    b359:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    b35c:	83 c4 10             	add    $0x10,%esp
    b35f:	8b 48 14             	mov    0x14(%eax),%ecx
    b362:	8b 58 18             	mov    0x18(%eax),%ebx
    b365:	e9 3e ff ff ff       	jmp    b2a8 <simple_internal_node_destroy+0x48>
    b36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    b370:	48                   	dec    %eax
    b371:	75 dd                	jne    b350 <simple_internal_node_destroy+0xf0>
    b373:	83 ec 0c             	sub    $0xc,%esp
    b376:	8b 42 08             	mov    0x8(%edx),%eax
    b379:	52                   	push   %edx
    b37a:	ff 50 08             	call   *0x8(%eax)
    b37d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    b380:	83 c4 10             	add    $0x10,%esp
    b383:	8b 48 14             	mov    0x14(%eax),%ecx
    b386:	8b 58 18             	mov    0x18(%eax),%ebx
    b389:	e9 1a ff ff ff       	jmp    b2a8 <simple_internal_node_destroy+0x48>
    b38e:	66 90                	xchg   %ax,%ax
    b390:	0f 8c 28 ff ff ff    	jl     b2be <simple_internal_node_destroy+0x5e>
    b396:	83 f9 00             	cmp    $0x0,%ecx
    b399:	0f 87 df fe ff ff    	ja     b27e <simple_internal_node_destroy+0x1e>
    b39f:	e9 1a ff ff ff       	jmp    b2be <simple_internal_node_destroy+0x5e>
    b3a4:	56                   	push   %esi
    b3a5:	6a 4e                	push   $0x4e
    b3a7:	68 4c 17 01 00       	push   $0x1174c
    b3ac:	68 57 17 01 00       	push   $0x11757
    b3b1:	e8 5a 6b 00 00       	call   11f10 <assert_abort@plt>
    b3b6:	53                   	push   %ebx
    b3b7:	6a 2e                	push   $0x2e
    b3b9:	68 4c 17 01 00       	push   $0x1174c
    b3be:	68 1d 12 01 00       	push   $0x1121d
    b3c3:	e8 48 6b 00 00       	call   11f10 <assert_abort@plt>
    b3c8:	90                   	nop
    b3c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000b3d0 <get_for_each_func>:
    b3d0:	55                   	push   %ebp
    b3d1:	89 e5                	mov    %esp,%ebp
    b3d3:	57                   	push   %edi
    b3d4:	56                   	push   %esi
    b3d5:	53                   	push   %ebx
    b3d6:	83 ec 2c             	sub    $0x2c,%esp
    b3d9:	8b 5d 10             	mov    0x10(%ebp),%ebx
    b3dc:	8b 75 08             	mov    0x8(%ebp),%esi
    b3df:	8b 7d 0c             	mov    0xc(%ebp),%edi
    b3e2:	8b 13                	mov    (%ebx),%edx
    b3e4:	8b 06                	mov    (%esi),%eax
    b3e6:	3b 02                	cmp    (%edx),%eax
    b3e8:	74 46                	je     b430 <get_for_each_func+0x60>
    b3ea:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
    b3ee:	31 c0                	xor    %eax,%eax
    b3f0:	8b 56 04             	mov    0x4(%esi),%edx
    b3f3:	85 d2                	test   %edx,%edx
    b3f5:	0f 84 f7 01 00 00    	je     b5f2 <get_for_each_func+0x222>
    b3fb:	4a                   	dec    %edx
    b3fc:	89 56 04             	mov    %edx,0x4(%esi)
    b3ff:	85 d2                	test   %edx,%edx
    b401:	74 3d                	je     b440 <get_for_each_func+0x70>
    b403:	85 c0                	test   %eax,%eax
    b405:	75 21                	jne    b428 <get_for_each_func+0x58>
    b407:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
    b40b:	0f 85 c7 01 00 00    	jne    b5d8 <get_for_each_func+0x208>
    b411:	85 ff                	test   %edi,%edi
    b413:	74 13                	je     b428 <get_for_each_func+0x58>
    b415:	8b 57 04             	mov    0x4(%edi),%edx
    b418:	85 d2                	test   %edx,%edx
    b41a:	0f 84 d2 01 00 00    	je     b5f2 <get_for_each_func+0x222>
    b420:	4a                   	dec    %edx
    b421:	89 57 04             	mov    %edx,0x4(%edi)
    b424:	85 d2                	test   %edx,%edx
    b426:	74 50                	je     b478 <get_for_each_func+0xa8>
    b428:	8d 65 f4             	lea    -0xc(%ebp),%esp
    b42b:	5b                   	pop    %ebx
    b42c:	5e                   	pop    %esi
    b42d:	5f                   	pop    %edi
    b42e:	5d                   	pop    %ebp
    b42f:	c3                   	ret    
    b430:	83 f8 05             	cmp    $0x5,%eax
    b433:	0f 87 af 01 00 00    	ja     b5e8 <get_for_each_func+0x218>
    b439:	ff 24 85 6c 17 01 00 	jmp    *0x1176c(,%eax,4)
    b440:	8b 16                	mov    (%esi),%edx
    b442:	83 fa 02             	cmp    $0x2,%edx
    b445:	74 bc                	je     b403 <get_for_each_func+0x33>
    b447:	76 6f                	jbe    b4b8 <get_for_each_func+0xe8>
    b449:	83 fa 04             	cmp    $0x4,%edx
    b44c:	0f 84 2e 01 00 00    	je     b580 <get_for_each_func+0x1b0>
    b452:	83 fa 05             	cmp    $0x5,%edx
    b455:	0f 85 45 01 00 00    	jne    b5a0 <get_for_each_func+0x1d0>
    b45b:	8b 56 08             	mov    0x8(%esi),%edx
    b45e:	85 d2                	test   %edx,%edx
    b460:	0f 84 9e 01 00 00    	je     b604 <get_for_each_func+0x234>
    b466:	83 ec 0c             	sub    $0xc,%esp
    b469:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    b46c:	56                   	push   %esi
    b46d:	ff 52 0c             	call   *0xc(%edx)
    b470:	83 c4 10             	add    $0x10,%esp
    b473:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    b476:	eb 8b                	jmp    b403 <get_for_each_func+0x33>
    b478:	8b 17                	mov    (%edi),%edx
    b47a:	83 fa 02             	cmp    $0x2,%edx
    b47d:	74 a9                	je     b428 <get_for_each_func+0x58>
    b47f:	0f 86 33 01 00 00    	jbe    b5b8 <get_for_each_func+0x1e8>
    b485:	83 fa 04             	cmp    $0x4,%edx
    b488:	0f 84 ba 00 00 00    	je     b548 <get_for_each_func+0x178>
    b48e:	83 fa 05             	cmp    $0x5,%edx
    b491:	0f 85 d1 00 00 00    	jne    b568 <get_for_each_func+0x198>
    b497:	8b 57 08             	mov    0x8(%edi),%edx
    b49a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    b49d:	85 d2                	test   %edx,%edx
    b49f:	0f 84 5f 01 00 00    	je     b604 <get_for_each_func+0x234>
    b4a5:	83 ec 0c             	sub    $0xc,%esp
    b4a8:	57                   	push   %edi
    b4a9:	ff 52 0c             	call   *0xc(%edx)
    b4ac:	83 c4 10             	add    $0x10,%esp
    b4af:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    b4b2:	e9 71 ff ff ff       	jmp    b428 <get_for_each_func+0x58>
    b4b7:	90                   	nop
    b4b8:	4a                   	dec    %edx
    b4b9:	0f 85 e1 00 00 00    	jne    b5a0 <get_for_each_func+0x1d0>
    b4bf:	83 ec 0c             	sub    $0xc,%esp
    b4c2:	8b 56 08             	mov    0x8(%esi),%edx
    b4c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    b4c8:	56                   	push   %esi
    b4c9:	ff 52 08             	call   *0x8(%edx)
    b4cc:	83 c4 10             	add    $0x10,%esp
    b4cf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    b4d2:	e9 2c ff ff ff       	jmp    b403 <get_for_each_func+0x33>
    b4d7:	90                   	nop
    b4d8:	50                   	push   %eax
    b4d9:	8d 45 e7             	lea    -0x19(%ebp),%eax
    b4dc:	52                   	push   %edx
    b4dd:	56                   	push   %esi
    b4de:	50                   	push   %eax
    b4df:	e8 bc 15 00 00       	call   caa0 <bithenge_blob_equal>
    b4e4:	83 c4 10             	add    $0x10,%esp
    b4e7:	e9 04 ff ff ff       	jmp    b3f0 <get_for_each_func+0x20>
    b4ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    b4f0:	50                   	push   %eax
    b4f1:	50                   	push   %eax
    b4f2:	8b 42 08             	mov    0x8(%edx),%eax
    b4f5:	50                   	push   %eax
    b4f6:	8b 46 08             	mov    0x8(%esi),%eax
    b4f9:	50                   	push   %eax
    b4fa:	e8 c1 6a 00 00       	call   11fc0 <str_cmp@plt>
    b4ff:	83 c4 10             	add    $0x10,%esp
    b502:	85 c0                	test   %eax,%eax
    b504:	0f 94 45 e7          	sete   -0x19(%ebp)
    b508:	31 c0                	xor    %eax,%eax
    b50a:	e9 e1 fe ff ff       	jmp    b3f0 <get_for_each_func+0x20>
    b50f:	90                   	nop
    b510:	8b 42 08             	mov    0x8(%edx),%eax
    b513:	8b 4e 08             	mov    0x8(%esi),%ecx
    b516:	31 c1                	xor    %eax,%ecx
    b518:	8b 46 0c             	mov    0xc(%esi),%eax
    b51b:	33 42 0c             	xor    0xc(%edx),%eax
    b51e:	09 c1                	or     %eax,%ecx
    b520:	0f 94 45 e7          	sete   -0x19(%ebp)
    b524:	31 c0                	xor    %eax,%eax
    b526:	e9 c5 fe ff ff       	jmp    b3f0 <get_for_each_func+0x20>
    b52b:	90                   	nop
    b52c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    b530:	8a 42 08             	mov    0x8(%edx),%al
    b533:	38 46 08             	cmp    %al,0x8(%esi)
    b536:	0f 94 45 e7          	sete   -0x19(%ebp)
    b53a:	31 c0                	xor    %eax,%eax
    b53c:	e9 af fe ff ff       	jmp    b3f0 <get_for_each_func+0x20>
    b541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    b548:	80 7f 0c 00          	cmpb   $0x0,0xc(%edi)
    b54c:	74 1a                	je     b568 <get_for_each_func+0x198>
    b54e:	83 ec 0c             	sub    $0xc,%esp
    b551:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    b554:	8b 47 08             	mov    0x8(%edi),%eax
    b557:	50                   	push   %eax
    b558:	e8 93 6b 00 00       	call   120f0 <free@plt>
    b55d:	83 c4 10             	add    $0x10,%esp
    b560:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    b563:	90                   	nop
    b564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    b568:	83 ec 0c             	sub    $0xc,%esp
    b56b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    b56e:	57                   	push   %edi
    b56f:	e8 7c 6b 00 00       	call   120f0 <free@plt>
    b574:	83 c4 10             	add    $0x10,%esp
    b577:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    b57a:	e9 a9 fe ff ff       	jmp    b428 <get_for_each_func+0x58>
    b57f:	90                   	nop
    b580:	80 7e 0c 00          	cmpb   $0x0,0xc(%esi)
    b584:	74 1a                	je     b5a0 <get_for_each_func+0x1d0>
    b586:	83 ec 0c             	sub    $0xc,%esp
    b589:	8b 56 08             	mov    0x8(%esi),%edx
    b58c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    b58f:	52                   	push   %edx
    b590:	e8 5b 6b 00 00       	call   120f0 <free@plt>
    b595:	83 c4 10             	add    $0x10,%esp
    b598:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    b59b:	90                   	nop
    b59c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    b5a0:	83 ec 0c             	sub    $0xc,%esp
    b5a3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    b5a6:	56                   	push   %esi
    b5a7:	e8 44 6b 00 00       	call   120f0 <free@plt>
    b5ac:	83 c4 10             	add    $0x10,%esp
    b5af:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    b5b2:	e9 4c fe ff ff       	jmp    b403 <get_for_each_func+0x33>
    b5b7:	90                   	nop
    b5b8:	4a                   	dec    %edx
    b5b9:	75 ad                	jne    b568 <get_for_each_func+0x198>
    b5bb:	83 ec 0c             	sub    $0xc,%esp
    b5be:	8b 57 08             	mov    0x8(%edi),%edx
    b5c1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    b5c4:	57                   	push   %edi
    b5c5:	ff 52 08             	call   *0x8(%edx)
    b5c8:	83 c4 10             	add    $0x10,%esp
    b5cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    b5ce:	e9 55 fe ff ff       	jmp    b428 <get_for_each_func+0x58>
    b5d3:	90                   	nop
    b5d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    b5d8:	8b 43 04             	mov    0x4(%ebx),%eax
    b5db:	89 38                	mov    %edi,(%eax)
    b5dd:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
    b5e2:	e9 41 fe ff ff       	jmp    b428 <get_for_each_func+0x58>
    b5e7:	90                   	nop
    b5e8:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    b5ed:	e9 fe fd ff ff       	jmp    b3f0 <get_for_each_func+0x20>
    b5f2:	53                   	push   %ebx
    b5f3:	6a 4e                	push   $0x4e
    b5f5:	68 4c 17 01 00       	push   $0x1174c
    b5fa:	68 57 17 01 00       	push   $0x11757
    b5ff:	e8 0c 69 00 00       	call   11f10 <assert_abort@plt>
    b604:	51                   	push   %ecx
    b605:	6a 2e                	push   $0x2e
    b607:	68 4c 17 01 00       	push   $0x1174c
    b60c:	68 1d 12 01 00       	push   $0x1121d
    b611:	e8 fa 68 00 00       	call   11f10 <assert_abort@plt>
    b616:	8d 76 00             	lea    0x0(%esi),%esi
    b619:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000b620 <bithenge_node_dec_ref>:
    b620:	55                   	push   %ebp
    b621:	89 e5                	mov    %esp,%ebp
    b623:	53                   	push   %ebx
    b624:	53                   	push   %ebx
    b625:	8b 5d 08             	mov    0x8(%ebp),%ebx
    b628:	85 db                	test   %ebx,%ebx
    b62a:	74 0f                	je     b63b <bithenge_node_dec_ref+0x1b>
    b62c:	8b 43 04             	mov    0x4(%ebx),%eax
    b62f:	85 c0                	test   %eax,%eax
    b631:	74 6e                	je     b6a1 <bithenge_node_dec_ref+0x81>
    b633:	48                   	dec    %eax
    b634:	89 43 04             	mov    %eax,0x4(%ebx)
    b637:	85 c0                	test   %eax,%eax
    b639:	74 05                	je     b640 <bithenge_node_dec_ref+0x20>
    b63b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    b63e:	c9                   	leave  
    b63f:	c3                   	ret    
    b640:	8b 03                	mov    (%ebx),%eax
    b642:	83 f8 02             	cmp    $0x2,%eax
    b645:	74 f4                	je     b63b <bithenge_node_dec_ref+0x1b>
    b647:	76 1f                	jbe    b668 <bithenge_node_dec_ref+0x48>
    b649:	83 f8 04             	cmp    $0x4,%eax
    b64c:	74 32                	je     b680 <bithenge_node_dec_ref+0x60>
    b64e:	83 f8 05             	cmp    $0x5,%eax
    b651:	75 42                	jne    b695 <bithenge_node_dec_ref+0x75>
    b653:	8b 43 08             	mov    0x8(%ebx),%eax
    b656:	85 c0                	test   %eax,%eax
    b658:	74 59                	je     b6b3 <bithenge_node_dec_ref+0x93>
    b65a:	89 5d 08             	mov    %ebx,0x8(%ebp)
    b65d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    b660:	8b 40 0c             	mov    0xc(%eax),%eax
    b663:	c9                   	leave  
    b664:	ff e0                	jmp    *%eax
    b666:	66 90                	xchg   %ax,%ax
    b668:	48                   	dec    %eax
    b669:	75 2a                	jne    b695 <bithenge_node_dec_ref+0x75>
    b66b:	8b 43 08             	mov    0x8(%ebx),%eax
    b66e:	89 5d 08             	mov    %ebx,0x8(%ebp)
    b671:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    b674:	8b 40 08             	mov    0x8(%eax),%eax
    b677:	c9                   	leave  
    b678:	ff e0                	jmp    *%eax
    b67a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    b680:	80 7b 0c 00          	cmpb   $0x0,0xc(%ebx)
    b684:	74 0f                	je     b695 <bithenge_node_dec_ref+0x75>
    b686:	83 ec 0c             	sub    $0xc,%esp
    b689:	8b 43 08             	mov    0x8(%ebx),%eax
    b68c:	50                   	push   %eax
    b68d:	e8 5e 6a 00 00       	call   120f0 <free@plt>
    b692:	83 c4 10             	add    $0x10,%esp
    b695:	89 5d 08             	mov    %ebx,0x8(%ebp)
    b698:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    b69b:	c9                   	leave  
    b69c:	e9 4f 6a 00 00       	jmp    120f0 <free@plt>
    b6a1:	51                   	push   %ecx
    b6a2:	6a 4e                	push   $0x4e
    b6a4:	68 4c 17 01 00       	push   $0x1174c
    b6a9:	68 57 17 01 00       	push   $0x11757
    b6ae:	e8 5d 68 00 00       	call   11f10 <assert_abort@plt>
    b6b3:	52                   	push   %edx
    b6b4:	6a 2e                	push   $0x2e
    b6b6:	68 4c 17 01 00       	push   $0x1174c
    b6bb:	68 1d 12 01 00       	push   $0x1121d
    b6c0:	e8 4b 68 00 00       	call   11f10 <assert_abort@plt>
    b6c5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    b6c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000b6d0 <bithenge_node_get>:
    b6d0:	55                   	push   %ebp
    b6d1:	89 e5                	mov    %esp,%ebp
    b6d3:	57                   	push   %edi
    b6d4:	56                   	push   %esi
    b6d5:	53                   	push   %ebx
    b6d6:	83 ec 2c             	sub    $0x2c,%esp
    b6d9:	8b 45 08             	mov    0x8(%ebp),%eax
    b6dc:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    b6df:	8b 08                	mov    (%eax),%ecx
    b6e1:	83 f9 05             	cmp    $0x5,%ecx
    b6e4:	74 2a                	je     b710 <bithenge_node_get+0x40>
    b6e6:	49                   	dec    %ecx
    b6e7:	0f 85 6f 01 00 00    	jne    b85c <bithenge_node_get+0x18c>
    b6ed:	8b 70 08             	mov    0x8(%eax),%esi
    b6f0:	8b 4e 04             	mov    0x4(%esi),%ecx
    b6f3:	85 c9                	test   %ecx,%ecx
    b6f5:	74 39                	je     b730 <bithenge_node_get+0x60>
    b6f7:	8b 7d 10             	mov    0x10(%ebp),%edi
    b6fa:	56                   	push   %esi
    b6fb:	57                   	push   %edi
    b6fc:	53                   	push   %ebx
    b6fd:	50                   	push   %eax
    b6fe:	ff d1                	call   *%ecx
    b700:	83 c4 10             	add    $0x10,%esp
    b703:	89 c7                	mov    %eax,%edi
    b705:	8d 65 f4             	lea    -0xc(%ebp),%esp
    b708:	89 f8                	mov    %edi,%eax
    b70a:	5b                   	pop    %ebx
    b70b:	5e                   	pop    %esi
    b70c:	5f                   	pop    %edi
    b70d:	5d                   	pop    %ebp
    b70e:	c3                   	ret    
    b70f:	90                   	nop
    b710:	83 3b 03             	cmpl   $0x3,(%ebx)
    b713:	74 73                	je     b788 <bithenge_node_get+0xb8>
    b715:	83 ec 0c             	sub    $0xc,%esp
    b718:	83 cf ff             	or     $0xffffffff,%edi
    b71b:	53                   	push   %ebx
    b71c:	e8 ff fe ff ff       	call   b620 <bithenge_node_dec_ref>
    b721:	83 c4 10             	add    $0x10,%esp
    b724:	8d 65 f4             	lea    -0xc(%ebp),%esp
    b727:	89 f8                	mov    %edi,%eax
    b729:	5b                   	pop    %ebx
    b72a:	5e                   	pop    %esi
    b72b:	5f                   	pop    %edi
    b72c:	5d                   	pop    %ebp
    b72d:	c3                   	ret    
    b72e:	66 90                	xchg   %ax,%ax
    b730:	8b 55 10             	mov    0x10(%ebp),%edx
    b733:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    b736:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    b739:	89 5d e0             	mov    %ebx,-0x20(%ebp)
    b73c:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
    b742:	52                   	push   %edx
    b743:	51                   	push   %ecx
    b744:	68 d0 b3 00 00       	push   $0xb3d0
    b749:	50                   	push   %eax
    b74a:	ff 16                	call   *(%esi)
    b74c:	89 1c 24             	mov    %ebx,(%esp)
    b74f:	89 c7                	mov    %eax,%edi
    b751:	e8 ca fe ff ff       	call   b620 <bithenge_node_dec_ref>
    b756:	8b 45 10             	mov    0x10(%ebp),%eax
    b759:	83 c4 10             	add    $0x10,%esp
    b75c:	8b 00                	mov    (%eax),%eax
    b75e:	83 ff f7             	cmp    $0xfffffff7,%edi
    b761:	0f 84 99 00 00 00    	je     b800 <bithenge_node_get+0x130>
    b767:	85 ff                	test   %edi,%edi
    b769:	75 03                	jne    b76e <bithenge_node_get+0x9e>
    b76b:	83 cf ff             	or     $0xffffffff,%edi
    b76e:	83 ec 0c             	sub    $0xc,%esp
    b771:	50                   	push   %eax
    b772:	e8 a9 fe ff ff       	call   b620 <bithenge_node_dec_ref>
    b777:	83 c4 10             	add    $0x10,%esp
    b77a:	8d 65 f4             	lea    -0xc(%ebp),%esp
    b77d:	89 f8                	mov    %edi,%eax
    b77f:	5b                   	pop    %ebx
    b780:	5e                   	pop    %esi
    b781:	5f                   	pop    %edi
    b782:	5d                   	pop    %ebp
    b783:	c3                   	ret    
    b784:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    b788:	83 ec 0c             	sub    $0xc,%esp
    b78b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    b78e:	8b 73 08             	mov    0x8(%ebx),%esi
    b791:	8b 7b 0c             	mov    0xc(%ebx),%edi
    b794:	53                   	push   %ebx
    b795:	e8 86 fe ff ff       	call   b620 <bithenge_node_dec_ref>
    b79a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    b79d:	83 c4 10             	add    $0x10,%esp
    b7a0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
    b7a7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    b7ae:	83 38 05             	cmpl   $0x5,(%eax)
    b7b1:	0f 85 ee 00 00 00    	jne    b8a5 <bithenge_node_get+0x1d5>
    b7b7:	8b 50 08             	mov    0x8(%eax),%edx
    b7ba:	85 d2                	test   %edx,%edx
    b7bc:	0f 84 ce 00 00 00    	je     b890 <bithenge_node_get+0x1c0>
    b7c2:	8b 52 04             	mov    0x4(%edx),%edx
    b7c5:	85 d2                	test   %edx,%edx
    b7c7:	0f 84 85 00 00 00    	je     b852 <bithenge_node_get+0x182>
    b7cd:	83 ec 0c             	sub    $0xc,%esp
    b7d0:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    b7d3:	51                   	push   %ecx
    b7d4:	8d 4d df             	lea    -0x21(%ebp),%ecx
    b7d7:	51                   	push   %ecx
    b7d8:	57                   	push   %edi
    b7d9:	56                   	push   %esi
    b7da:	50                   	push   %eax
    b7db:	ff d2                	call   *%edx
    b7dd:	83 c4 20             	add    $0x20,%esp
    b7e0:	89 c7                	mov    %eax,%edi
    b7e2:	85 c0                	test   %eax,%eax
    b7e4:	0f 85 1b ff ff ff    	jne    b705 <bithenge_node_get+0x35>
    b7ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
    b7ed:	83 f0 01             	xor    $0x1,%eax
    b7f0:	0b 45 e4             	or     -0x1c(%ebp),%eax
    b7f3:	74 1a                	je     b80f <bithenge_node_get+0x13f>
    b7f5:	83 cf ff             	or     $0xffffffff,%edi
    b7f8:	e9 08 ff ff ff       	jmp    b705 <bithenge_node_get+0x35>
    b7fd:	8d 76 00             	lea    0x0(%esi),%esi
    b800:	85 c0                	test   %eax,%eax
    b802:	0f 84 66 ff ff ff    	je     b76e <bithenge_node_get+0x9e>
    b808:	31 ff                	xor    %edi,%edi
    b80a:	e9 f6 fe ff ff       	jmp    b705 <bithenge_node_get+0x35>
    b80f:	0f b6 75 df          	movzbl -0x21(%ebp),%esi
    b813:	8b 45 10             	mov    0x10(%ebp),%eax
    b816:	81 e6 ff 00 00 00    	and    $0xff,%esi
    b81c:	89 f3                	mov    %esi,%ebx
    b81e:	31 f6                	xor    %esi,%esi
    b820:	85 c0                	test   %eax,%eax
    b822:	74 57                	je     b87b <bithenge_node_get+0x1ab>
    b824:	83 ec 0c             	sub    $0xc,%esp
    b827:	6a 10                	push   $0x10
    b829:	e8 32 66 00 00       	call   11e60 <malloc@plt>
    b82e:	83 c4 10             	add    $0x10,%esp
    b831:	85 c0                	test   %eax,%eax
    b833:	74 3c                	je     b871 <bithenge_node_get+0x1a1>
    b835:	8b 55 10             	mov    0x10(%ebp),%edx
    b838:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    b83e:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    b845:	89 58 08             	mov    %ebx,0x8(%eax)
    b848:	89 70 0c             	mov    %esi,0xc(%eax)
    b84b:	89 02                	mov    %eax,(%edx)
    b84d:	e9 b3 fe ff ff       	jmp    b705 <bithenge_node_get+0x35>
    b852:	bf f2 ff ff ff       	mov    $0xfffffff2,%edi
    b857:	e9 a9 fe ff ff       	jmp    b705 <bithenge_node_get+0x35>
    b85c:	50                   	push   %eax
    b85d:	68 89 00 00 00       	push   $0x89
    b862:	68 4c 17 01 00       	push   $0x1174c
    b867:	68 a8 12 01 00       	push   $0x112a8
    b86c:	e8 9f 66 00 00       	call   11f10 <assert_abort@plt>
    b871:	bf fe ff ff ff       	mov    $0xfffffffe,%edi
    b876:	e9 8a fe ff ff       	jmp    b705 <bithenge_node_get+0x35>
    b87b:	50                   	push   %eax
    b87c:	68 3f 01 00 00       	push   $0x13f
    b881:	68 4c 17 01 00       	push   $0x1174c
    b886:	68 66 17 01 00       	push   $0x11766
    b88b:	e8 80 66 00 00       	call   11f10 <assert_abort@plt>
    b890:	50                   	push   %eax
    b891:	68 97 00 00 00       	push   $0x97
    b896:	68 05 12 01 00       	push   $0x11205
    b89b:	68 1d 12 01 00       	push   $0x1121d
    b8a0:	e8 6b 66 00 00       	call   11f10 <assert_abort@plt>
    b8a5:	e8 18 03 00 00       	call   bbc2 <bithenge_node_as_blob.part.1>
    b8aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0000b8b0 <bithenge_init_internal_node>:
    b8b0:	55                   	push   %ebp
    b8b1:	89 e5                	mov    %esp,%ebp
    b8b3:	8b 45 08             	mov    0x8(%ebp),%eax
    b8b6:	8b 55 0c             	mov    0xc(%ebp),%edx
    b8b9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    b8bf:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    b8c6:	89 50 08             	mov    %edx,0x8(%eax)
    b8c9:	31 c0                	xor    %eax,%eax
    b8cb:	5d                   	pop    %ebp
    b8cc:	c3                   	ret    
    b8cd:	8d 76 00             	lea    0x0(%esi),%esi

0000b8d0 <bithenge_new_empty_internal_node>:
    b8d0:	55                   	push   %ebp
    b8d1:	a1 e4 3b 01 00       	mov    0x13be4,%eax
    b8d6:	89 e5                	mov    %esp,%ebp
    b8d8:	40                   	inc    %eax
    b8d9:	a3 e4 3b 01 00       	mov    %eax,0x13be4
    b8de:	8b 45 08             	mov    0x8(%ebp),%eax
    b8e1:	c7 00 e0 3b 01 00    	movl   $0x13be0,(%eax)
    b8e7:	31 c0                	xor    %eax,%eax
    b8e9:	5d                   	pop    %ebp
    b8ea:	c3                   	ret    
    b8eb:	90                   	nop
    b8ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000b8f0 <bithenge_new_simple_internal_node>:
    b8f0:	55                   	push   %ebp
    b8f1:	89 e5                	mov    %esp,%ebp
    b8f3:	57                   	push   %edi
    b8f4:	56                   	push   %esi
    b8f5:	53                   	push   %ebx
    b8f6:	83 ec 1c             	sub    $0x1c,%esp
    b8f9:	8b 45 08             	mov    0x8(%ebp),%eax
    b8fc:	8b 75 10             	mov    0x10(%ebp),%esi
    b8ff:	8b 7d 14             	mov    0x14(%ebp),%edi
    b902:	8b 5d 18             	mov    0x18(%ebp),%ebx
    b905:	85 c0                	test   %eax,%eax
    b907:	0f 84 c7 00 00 00    	je     b9d4 <bithenge_new_simple_internal_node+0xe4>
    b90d:	83 ec 0c             	sub    $0xc,%esp
    b910:	6a 20                	push   $0x20
    b912:	e8 49 65 00 00       	call   11e60 <malloc@plt>
    b917:	83 c4 10             	add    $0x10,%esp
    b91a:	85 c0                	test   %eax,%eax
    b91c:	74 32                	je     b950 <bithenge_new_simple_internal_node+0x60>
    b91e:	89 78 18             	mov    %edi,0x18(%eax)
    b921:	8b 7d 08             	mov    0x8(%ebp),%edi
    b924:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    b927:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    b92d:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    b934:	c7 40 08 d4 3b 01 00 	movl   $0x13bd4,0x8(%eax)
    b93b:	89 48 10             	mov    %ecx,0x10(%eax)
    b93e:	89 70 14             	mov    %esi,0x14(%eax)
    b941:	88 58 1c             	mov    %bl,0x1c(%eax)
    b944:	89 07                	mov    %eax,(%edi)
    b946:	31 c0                	xor    %eax,%eax
    b948:	8d 65 f4             	lea    -0xc(%ebp),%esp
    b94b:	5b                   	pop    %ebx
    b94c:	5e                   	pop    %esi
    b94d:	5f                   	pop    %edi
    b94e:	5d                   	pop    %ebp
    b94f:	c3                   	ret    
    b950:	0f a4 f7 01          	shld   $0x1,%esi,%edi
    b954:	01 f6                	add    %esi,%esi
    b956:	89 7d e4             	mov    %edi,-0x1c(%ebp)
    b959:	89 75 e0             	mov    %esi,-0x20(%ebp)
    b95c:	83 ff 00             	cmp    $0x0,%edi
    b95f:	7e 69                	jle    b9ca <bithenge_new_simple_internal_node+0xda>
    b961:	89 5d dc             	mov    %ebx,-0x24(%ebp)
    b964:	31 f6                	xor    %esi,%esi
    b966:	31 ff                	xor    %edi,%edi
    b968:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    b96b:	90                   	nop
    b96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    b970:	8d 04 b5 00 00 00 00 	lea    0x0(,%esi,4),%eax
    b977:	83 ec 0c             	sub    $0xc,%esp
    b97a:	8b 14 03             	mov    (%ebx,%eax,1),%edx
    b97d:	52                   	push   %edx
    b97e:	e8 9d fc ff ff       	call   b620 <bithenge_node_dec_ref>
    b983:	83 c6 01             	add    $0x1,%esi
    b986:	8b 55 e0             	mov    -0x20(%ebp),%edx
    b989:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    b98c:	89 d0                	mov    %edx,%eax
    b98e:	83 d7 00             	adc    $0x0,%edi
    b991:	89 ca                	mov    %ecx,%edx
    b993:	31 f0                	xor    %esi,%eax
    b995:	31 fa                	xor    %edi,%edx
    b997:	83 c4 10             	add    $0x10,%esp
    b99a:	09 c2                	or     %eax,%edx
    b99c:	75 d2                	jne    b970 <bithenge_new_simple_internal_node+0x80>
    b99e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
    b9a1:	84 db                	test   %bl,%bl
    b9a3:	75 14                	jne    b9b9 <bithenge_new_simple_internal_node+0xc9>
    b9a5:	83 ec 0c             	sub    $0xc,%esp
    b9a8:	6a 00                	push   $0x0
    b9aa:	e8 41 67 00 00       	call   120f0 <free@plt>
    b9af:	83 c4 10             	add    $0x10,%esp
    b9b2:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    b9b7:	eb 8f                	jmp    b948 <bithenge_new_simple_internal_node+0x58>
    b9b9:	83 ec 0c             	sub    $0xc,%esp
    b9bc:	8b 45 0c             	mov    0xc(%ebp),%eax
    b9bf:	50                   	push   %eax
    b9c0:	e8 2b 67 00 00       	call   120f0 <free@plt>
    b9c5:	83 c4 10             	add    $0x10,%esp
    b9c8:	eb db                	jmp    b9a5 <bithenge_new_simple_internal_node+0xb5>
    b9ca:	7c d5                	jl     b9a1 <bithenge_new_simple_internal_node+0xb1>
    b9cc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
    b9d0:	77 8f                	ja     b961 <bithenge_new_simple_internal_node+0x71>
    b9d2:	eb cd                	jmp    b9a1 <bithenge_new_simple_internal_node+0xb1>
    b9d4:	51                   	push   %ecx
    b9d5:	68 0e 01 00 00       	push   $0x10e
    b9da:	68 4c 17 01 00       	push   $0x1174c
    b9df:	68 66 17 01 00       	push   $0x11766
    b9e4:	e8 27 65 00 00       	call   11f10 <assert_abort@plt>
    b9e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000b9f0 <bithenge_new_boolean_node>:
    b9f0:	55                   	push   %ebp
    b9f1:	89 e5                	mov    %esp,%ebp
    b9f3:	83 ec 08             	sub    $0x8,%esp
    b9f6:	8b 55 08             	mov    0x8(%ebp),%edx
    b9f9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    b9fc:	85 d2                	test   %edx,%edx
    b9fe:	74 1b                	je     ba1b <bithenge_new_boolean_node+0x2b>
    ba00:	b8 b4 3b 01 00       	mov    $0x13bb4,%eax
    ba05:	84 c9                	test   %cl,%cl
    ba07:	75 05                	jne    ba0e <bithenge_new_boolean_node+0x1e>
    ba09:	b8 c4 3b 01 00       	mov    $0x13bc4,%eax
    ba0e:	89 02                	mov    %eax,(%edx)
    ba10:	8b 50 04             	mov    0x4(%eax),%edx
    ba13:	42                   	inc    %edx
    ba14:	89 50 04             	mov    %edx,0x4(%eax)
    ba17:	31 c0                	xor    %eax,%eax
    ba19:	c9                   	leave  
    ba1a:	c3                   	ret    
    ba1b:	51                   	push   %ecx
    ba1c:	68 30 01 00 00       	push   $0x130
    ba21:	68 4c 17 01 00       	push   $0x1174c
    ba26:	68 66 17 01 00       	push   $0x11766
    ba2b:	e8 e0 64 00 00       	call   11f10 <assert_abort@plt>

0000ba30 <bithenge_new_integer_node>:
    ba30:	55                   	push   %ebp
    ba31:	89 e5                	mov    %esp,%ebp
    ba33:	57                   	push   %edi
    ba34:	56                   	push   %esi
    ba35:	53                   	push   %ebx
    ba36:	83 ec 0c             	sub    $0xc,%esp
    ba39:	8b 5d 08             	mov    0x8(%ebp),%ebx
    ba3c:	8b 75 0c             	mov    0xc(%ebp),%esi
    ba3f:	8b 7d 10             	mov    0x10(%ebp),%edi
    ba42:	85 db                	test   %ebx,%ebx
    ba44:	74 37                	je     ba7d <bithenge_new_integer_node+0x4d>
    ba46:	83 ec 0c             	sub    $0xc,%esp
    ba49:	6a 10                	push   $0x10
    ba4b:	e8 10 64 00 00       	call   11e60 <malloc@plt>
    ba50:	83 c4 10             	add    $0x10,%esp
    ba53:	85 c0                	test   %eax,%eax
    ba55:	74 1f                	je     ba76 <bithenge_new_integer_node+0x46>
    ba57:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    ba5d:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    ba64:	89 70 08             	mov    %esi,0x8(%eax)
    ba67:	89 78 0c             	mov    %edi,0xc(%eax)
    ba6a:	89 03                	mov    %eax,(%ebx)
    ba6c:	31 c0                	xor    %eax,%eax
    ba6e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ba71:	5b                   	pop    %ebx
    ba72:	5e                   	pop    %esi
    ba73:	5f                   	pop    %edi
    ba74:	5d                   	pop    %ebp
    ba75:	c3                   	ret    
    ba76:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    ba7b:	eb f1                	jmp    ba6e <bithenge_new_integer_node+0x3e>
    ba7d:	50                   	push   %eax
    ba7e:	68 3f 01 00 00       	push   $0x13f
    ba83:	68 4c 17 01 00       	push   $0x1174c
    ba88:	68 66 17 01 00       	push   $0x11766
    ba8d:	e8 7e 64 00 00       	call   11f10 <assert_abort@plt>
    ba92:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    ba99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000baa0 <bithenge_new_string_node>:
    baa0:	55                   	push   %ebp
    baa1:	89 e5                	mov    %esp,%ebp
    baa3:	56                   	push   %esi
    baa4:	53                   	push   %ebx
    baa5:	83 ec 10             	sub    $0x10,%esp
    baa8:	8b 75 08             	mov    0x8(%ebp),%esi
    baab:	8b 5d 10             	mov    0x10(%ebp),%ebx
    baae:	85 f6                	test   %esi,%esi
    bab0:	74 56                	je     bb08 <bithenge_new_string_node+0x68>
    bab2:	83 ec 0c             	sub    $0xc,%esp
    bab5:	6a 10                	push   $0x10
    bab7:	e8 a4 63 00 00       	call   11e60 <malloc@plt>
    babc:	83 c4 10             	add    $0x10,%esp
    babf:	85 c0                	test   %eax,%eax
    bac1:	74 25                	je     bae8 <bithenge_new_string_node+0x48>
    bac3:	8b 55 0c             	mov    0xc(%ebp),%edx
    bac6:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
    bacc:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    bad3:	89 50 08             	mov    %edx,0x8(%eax)
    bad6:	88 58 0c             	mov    %bl,0xc(%eax)
    bad9:	89 06                	mov    %eax,(%esi)
    badb:	31 c0                	xor    %eax,%eax
    badd:	8d 65 f8             	lea    -0x8(%ebp),%esp
    bae0:	5b                   	pop    %ebx
    bae1:	5e                   	pop    %esi
    bae2:	5d                   	pop    %ebp
    bae3:	c3                   	ret    
    bae4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    bae8:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    baed:	84 db                	test   %bl,%bl
    baef:	74 ec                	je     badd <bithenge_new_string_node+0x3d>
    baf1:	83 ec 0c             	sub    $0xc,%esp
    baf4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    baf7:	8b 45 0c             	mov    0xc(%ebp),%eax
    bafa:	50                   	push   %eax
    bafb:	e8 f0 65 00 00       	call   120f0 <free@plt>
    bb00:	83 c4 10             	add    $0x10,%esp
    bb03:	8b 45 f4             	mov    -0xc(%ebp),%eax
    bb06:	eb d5                	jmp    badd <bithenge_new_string_node+0x3d>
    bb08:	52                   	push   %edx
    bb09:	68 53 01 00 00       	push   $0x153
    bb0e:	68 4c 17 01 00       	push   $0x1174c
    bb13:	68 66 17 01 00       	push   $0x11766
    bb18:	e8 f3 63 00 00       	call   11f10 <assert_abort@plt>
    bb1d:	8d 76 00             	lea    0x0(%esi),%esi

0000bb20 <bithenge_node_equal>:
    bb20:	55                   	push   %ebp
    bb21:	89 e5                	mov    %esp,%ebp
    bb23:	56                   	push   %esi
    bb24:	53                   	push   %ebx
    bb25:	8b 55 0c             	mov    0xc(%ebp),%edx
    bb28:	8b 4d 10             	mov    0x10(%ebp),%ecx
    bb2b:	8b 5d 08             	mov    0x8(%ebp),%ebx
    bb2e:	8b 02                	mov    (%edx),%eax
    bb30:	3b 01                	cmp    (%ecx),%eax
    bb32:	74 0c                	je     bb40 <bithenge_node_equal+0x20>
    bb34:	c6 03 00             	movb   $0x0,(%ebx)
    bb37:	31 c0                	xor    %eax,%eax
    bb39:	8d 65 f8             	lea    -0x8(%ebp),%esp
    bb3c:	5b                   	pop    %ebx
    bb3d:	5e                   	pop    %esi
    bb3e:	5d                   	pop    %ebp
    bb3f:	c3                   	ret    
    bb40:	83 f8 05             	cmp    $0x5,%eax
    bb43:	77 73                	ja     bbb8 <bithenge_node_equal+0x98>
    bb45:	ff 24 85 84 17 01 00 	jmp    *0x11784(,%eax,4)
    bb4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    bb50:	89 5d 08             	mov    %ebx,0x8(%ebp)
    bb53:	89 4d 10             	mov    %ecx,0x10(%ebp)
    bb56:	89 55 0c             	mov    %edx,0xc(%ebp)
    bb59:	8d 65 f8             	lea    -0x8(%ebp),%esp
    bb5c:	5b                   	pop    %ebx
    bb5d:	5e                   	pop    %esi
    bb5e:	5d                   	pop    %ebp
    bb5f:	e9 3c 0f 00 00       	jmp    caa0 <bithenge_blob_equal>
    bb64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    bb68:	50                   	push   %eax
    bb69:	50                   	push   %eax
    bb6a:	8b 49 08             	mov    0x8(%ecx),%ecx
    bb6d:	51                   	push   %ecx
    bb6e:	8b 72 08             	mov    0x8(%edx),%esi
    bb71:	56                   	push   %esi
    bb72:	e8 49 64 00 00       	call   11fc0 <str_cmp@plt>
    bb77:	83 c4 10             	add    $0x10,%esp
    bb7a:	85 c0                	test   %eax,%eax
    bb7c:	0f 94 03             	sete   (%ebx)
    bb7f:	31 c0                	xor    %eax,%eax
    bb81:	eb b6                	jmp    bb39 <bithenge_node_equal+0x19>
    bb83:	90                   	nop
    bb84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    bb88:	8b 72 08             	mov    0x8(%edx),%esi
    bb8b:	8b 41 08             	mov    0x8(%ecx),%eax
    bb8e:	31 c6                	xor    %eax,%esi
    bb90:	8b 42 0c             	mov    0xc(%edx),%eax
    bb93:	8b 51 0c             	mov    0xc(%ecx),%edx
    bb96:	31 d0                	xor    %edx,%eax
    bb98:	09 c6                	or     %eax,%esi
    bb9a:	0f 94 03             	sete   (%ebx)
    bb9d:	31 c0                	xor    %eax,%eax
    bb9f:	eb 98                	jmp    bb39 <bithenge_node_equal+0x19>
    bba1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    bba8:	8a 41 08             	mov    0x8(%ecx),%al
    bbab:	38 42 08             	cmp    %al,0x8(%edx)
    bbae:	0f 94 03             	sete   (%ebx)
    bbb1:	31 c0                	xor    %eax,%eax
    bbb3:	eb 84                	jmp    bb39 <bithenge_node_equal+0x19>
    bbb5:	8d 76 00             	lea    0x0(%esi),%esi
    bbb8:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    bbbd:	e9 77 ff ff ff       	jmp    bb39 <bithenge_node_equal+0x19>

0000bbc2 <bithenge_node_as_blob.part.1>:
    bbc2:	55                   	push   %ebp
    bbc3:	89 e5                	mov    %esp,%ebp
    bbc5:	83 ec 0c             	sub    $0xc,%esp
    bbc8:	68 d9 00 00 00       	push   $0xd9
    bbcd:	68 05 12 01 00       	push   $0x11205
    bbd2:	68 84 12 01 00       	push   $0x11284
    bbd7:	e8 34 63 00 00       	call   11f10 <assert_abort@plt>
    bbdc:	66 90                	xchg   %ax,%ax
    bbde:	66 90                	xchg   %ax,%ax

0000bbe0 <block_size>:
    bbe0:	55                   	push   %ebp
    bbe1:	89 e5                	mov    %esp,%ebp
    bbe3:	53                   	push   %ebx
    bbe4:	8b 45 08             	mov    0x8(%ebp),%eax
    bbe7:	8b 58 18             	mov    0x18(%eax),%ebx
    bbea:	8b 48 14             	mov    0x14(%eax),%ecx
    bbed:	8b 45 0c             	mov    0xc(%ebp),%eax
    bbf0:	89 08                	mov    %ecx,(%eax)
    bbf2:	89 58 04             	mov    %ebx,0x4(%eax)
    bbf5:	5b                   	pop    %ebx
    bbf6:	31 c0                	xor    %eax,%eax
    bbf8:	5d                   	pop    %ebp
    bbf9:	c3                   	ret    
    bbfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0000bc00 <block_destroy>:
    bc00:	55                   	push   %ebp
    bc01:	89 e5                	mov    %esp,%ebp
    bc03:	53                   	push   %ebx
    bc04:	83 ec 10             	sub    $0x10,%esp
    bc07:	8b 5d 08             	mov    0x8(%ebp),%ebx
    bc0a:	8b 43 10             	mov    0x10(%ebx),%eax
    bc0d:	50                   	push   %eax
    bc0e:	e8 0d 43 00 00       	call   ff20 <block_fini>
    bc13:	89 5d 08             	mov    %ebx,0x8(%ebp)
    bc16:	83 c4 10             	add    $0x10,%esp
    bc19:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    bc1c:	c9                   	leave  
    bc1d:	e9 ce 64 00 00       	jmp    120f0 <free@plt>
    bc22:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    bc29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000bc30 <block_read>:
    bc30:	55                   	push   %ebp
    bc31:	89 e5                	mov    %esp,%ebp
    bc33:	57                   	push   %edi
    bc34:	56                   	push   %esi
    bc35:	53                   	push   %ebx
    bc36:	83 ec 1c             	sub    $0x1c,%esp
    bc39:	8b 45 08             	mov    0x8(%ebp),%eax
    bc3c:	8b 7d 10             	mov    0x10(%ebp),%edi
    bc3f:	89 c3                	mov    %eax,%ebx
    bc41:	89 45 dc             	mov    %eax,-0x24(%ebp)
    bc44:	8b 45 14             	mov    0x14(%ebp),%eax
    bc47:	8b 75 0c             	mov    0xc(%ebp),%esi
    bc4a:	8b 4b 14             	mov    0x14(%ebx),%ecx
    bc4d:	8b 5b 18             	mov    0x18(%ebx),%ebx
    bc50:	89 45 d8             	mov    %eax,-0x28(%ebp)
    bc53:	39 fb                	cmp    %edi,%ebx
    bc55:	8b 45 18             	mov    0x18(%ebp),%eax
    bc58:	73 0e                	jae    bc68 <block_read+0x38>
    bc5a:	83 c4 1c             	add    $0x1c,%esp
    bc5d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
    bc62:	5b                   	pop    %ebx
    bc63:	5e                   	pop    %esi
    bc64:	5f                   	pop    %edi
    bc65:	5d                   	pop    %ebp
    bc66:	c3                   	ret    
    bc67:	90                   	nop
    bc68:	76 46                	jbe    bcb0 <block_read+0x80>
    bc6a:	29 f1                	sub    %esi,%ecx
    bc6c:	8b 10                	mov    (%eax),%edx
    bc6e:	19 fb                	sbb    %edi,%ebx
    bc70:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    bc73:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    bc76:	8b 58 04             	mov    0x4(%eax),%ebx
    bc79:	89 d9                	mov    %ebx,%ecx
    bc7b:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
    bc7e:	72 07                	jb     bc87 <block_read+0x57>
    bc80:	77 46                	ja     bcc8 <block_read+0x98>
    bc82:	3b 55 e0             	cmp    -0x20(%ebp),%edx
    bc85:	77 41                	ja     bcc8 <block_read+0x98>
    bc87:	89 10                	mov    %edx,(%eax)
    bc89:	89 48 04             	mov    %ecx,0x4(%eax)
    bc8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
    bc8f:	89 75 0c             	mov    %esi,0xc(%ebp)
    bc92:	89 45 18             	mov    %eax,0x18(%ebp)
    bc95:	8b 45 dc             	mov    -0x24(%ebp),%eax
    bc98:	89 7d 10             	mov    %edi,0x10(%ebp)
    bc9b:	89 55 14             	mov    %edx,0x14(%ebp)
    bc9e:	8b 40 10             	mov    0x10(%eax),%eax
    bca1:	89 45 08             	mov    %eax,0x8(%ebp)
    bca4:	83 c4 1c             	add    $0x1c,%esp
    bca7:	5b                   	pop    %ebx
    bca8:	5e                   	pop    %esi
    bca9:	5f                   	pop    %edi
    bcaa:	5d                   	pop    %ebp
    bcab:	e9 60 51 00 00       	jmp    10e10 <block_read_bytes_direct>
    bcb0:	39 f1                	cmp    %esi,%ecx
    bcb2:	73 b6                	jae    bc6a <block_read+0x3a>
    bcb4:	83 c4 1c             	add    $0x1c,%esp
    bcb7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
    bcbc:	5b                   	pop    %ebx
    bcbd:	5e                   	pop    %esi
    bcbe:	5f                   	pop    %edi
    bcbf:	5d                   	pop    %ebp
    bcc0:	c3                   	ret    
    bcc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    bcc8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    bccb:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    bcce:	89 ca                	mov    %ecx,%edx
    bcd0:	89 d9                	mov    %ebx,%ecx
    bcd2:	eb b3                	jmp    bc87 <block_read+0x57>
    bcd4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    bcda:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0000bce0 <bithenge_new_block_blob>:
    bce0:	55                   	push   %ebp
    bce1:	89 e5                	mov    %esp,%ebp
    bce3:	57                   	push   %edi
    bce4:	56                   	push   %esi
    bce5:	53                   	push   %ebx
    bce6:	83 ec 2c             	sub    $0x2c,%esp
    bce9:	8b 45 08             	mov    0x8(%ebp),%eax
    bcec:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    bcef:	85 c0                	test   %eax,%eax
    bcf1:	0f 84 f6 00 00 00    	je     bded <bithenge_new_block_blob+0x10d>
    bcf7:	56                   	push   %esi
    bcf8:	56                   	push   %esi
    bcf9:	68 00 08 00 00       	push   $0x800
    bcfe:	53                   	push   %ebx
    bcff:	e8 8c 3b 00 00       	call   f890 <block_init>
    bd04:	83 c4 10             	add    $0x10,%esp
    bd07:	85 c0                	test   %eax,%eax
    bd09:	74 0d                	je     bd18 <bithenge_new_block_blob+0x38>
    bd0b:	8d 65 f4             	lea    -0xc(%ebp),%esp
    bd0e:	5b                   	pop    %ebx
    bd0f:	5e                   	pop    %esi
    bd10:	5f                   	pop    %edi
    bd11:	5d                   	pop    %ebp
    bd12:	c3                   	ret    
    bd13:	90                   	nop
    bd14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    bd18:	8d 45 dc             	lea    -0x24(%ebp),%eax
    bd1b:	51                   	push   %ecx
    bd1c:	51                   	push   %ecx
    bd1d:	50                   	push   %eax
    bd1e:	53                   	push   %ebx
    bd1f:	e8 cc 4f 00 00       	call   10cf0 <block_get_bsize>
    bd24:	83 c4 10             	add    $0x10,%esp
    bd27:	85 c0                	test   %eax,%eax
    bd29:	75 6d                	jne    bd98 <bithenge_new_block_blob+0xb8>
    bd2b:	8d 45 e0             	lea    -0x20(%ebp),%eax
    bd2e:	52                   	push   %edx
    bd2f:	52                   	push   %edx
    bd30:	50                   	push   %eax
    bd31:	53                   	push   %ebx
    bd32:	e8 49 50 00 00       	call   10d80 <block_get_nblocks>
    bd37:	83 c4 10             	add    $0x10,%esp
    bd3a:	85 c0                	test   %eax,%eax
    bd3c:	75 5a                	jne    bd98 <bithenge_new_block_blob+0xb8>
    bd3e:	8b 75 dc             	mov    -0x24(%ebp),%esi
    bd41:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    bd44:	89 f0                	mov    %esi,%eax
    bd46:	83 ec 0c             	sub    $0xc,%esp
    bd49:	f7 65 e0             	mull   -0x20(%ebp)
    bd4c:	0f af ce             	imul   %esi,%ecx
    bd4f:	89 d7                	mov    %edx,%edi
    bd51:	6a 1c                	push   $0x1c
    bd53:	01 cf                	add    %ecx,%edi
    bd55:	89 c6                	mov    %eax,%esi
    bd57:	e8 04 61 00 00       	call   11e60 <malloc@plt>
    bd5c:	83 c4 10             	add    $0x10,%esp
    bd5f:	89 c2                	mov    %eax,%edx
    bd61:	85 c0                	test   %eax,%eax
    bd63:	74 72                	je     bdd7 <bithenge_new_block_blob+0xf7>
    bd65:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    bd68:	50                   	push   %eax
    bd69:	50                   	push   %eax
    bd6a:	68 bc 17 01 00       	push   $0x117bc
    bd6f:	52                   	push   %edx
    bd70:	e8 2b 07 00 00       	call   c4a0 <bithenge_init_random_access_blob>
    bd75:	83 c4 10             	add    $0x10,%esp
    bd78:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    bd7b:	85 c0                	test   %eax,%eax
    bd7d:	75 39                	jne    bdb8 <bithenge_new_block_blob+0xd8>
    bd7f:	89 7a 18             	mov    %edi,0x18(%edx)
    bd82:	8b 7d 08             	mov    0x8(%ebp),%edi
    bd85:	89 5a 10             	mov    %ebx,0x10(%edx)
    bd88:	89 72 14             	mov    %esi,0x14(%edx)
    bd8b:	89 17                	mov    %edx,(%edi)
    bd8d:	8d 65 f4             	lea    -0xc(%ebp),%esp
    bd90:	5b                   	pop    %ebx
    bd91:	5e                   	pop    %esi
    bd92:	5f                   	pop    %edi
    bd93:	5d                   	pop    %ebp
    bd94:	c3                   	ret    
    bd95:	8d 76 00             	lea    0x0(%esi),%esi
    bd98:	83 ec 0c             	sub    $0xc,%esp
    bd9b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    bd9e:	53                   	push   %ebx
    bd9f:	e8 7c 41 00 00       	call   ff20 <block_fini>
    bda4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    bda7:	83 c4 10             	add    $0x10,%esp
    bdaa:	8d 65 f4             	lea    -0xc(%ebp),%esp
    bdad:	5b                   	pop    %ebx
    bdae:	5e                   	pop    %esi
    bdaf:	5f                   	pop    %edi
    bdb0:	5d                   	pop    %ebp
    bdb1:	c3                   	ret    
    bdb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    bdb8:	83 ec 0c             	sub    $0xc,%esp
    bdbb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    bdbe:	52                   	push   %edx
    bdbf:	e8 2c 63 00 00       	call   120f0 <free@plt>
    bdc4:	89 1c 24             	mov    %ebx,(%esp)
    bdc7:	e8 54 41 00 00       	call   ff20 <block_fini>
    bdcc:	83 c4 10             	add    $0x10,%esp
    bdcf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    bdd2:	e9 34 ff ff ff       	jmp    bd0b <bithenge_new_block_blob+0x2b>
    bdd7:	83 ec 0c             	sub    $0xc,%esp
    bdda:	53                   	push   %ebx
    bddb:	e8 40 41 00 00       	call   ff20 <block_fini>
    bde0:	83 c4 10             	add    $0x10,%esp
    bde3:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    bde8:	e9 1e ff ff ff       	jmp    bd0b <bithenge_new_block_blob+0x2b>
    bded:	57                   	push   %edi
    bdee:	6a 64                	push   $0x64
    bdf0:	68 a8 17 01 00       	push   $0x117a8
    bdf5:	68 66 17 01 00       	push   $0x11766
    bdfa:	e8 11 61 00 00       	call   11f10 <assert_abort@plt>
    bdff:	90                   	nop

0000be00 <memory_size>:
    be00:	55                   	push   %ebp
    be01:	89 e5                	mov    %esp,%ebp
    be03:	8b 55 08             	mov    0x8(%ebp),%edx
    be06:	8b 45 0c             	mov    0xc(%ebp),%eax
    be09:	8b 4a 14             	mov    0x14(%edx),%ecx
    be0c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    be13:	89 08                	mov    %ecx,(%eax)
    be15:	31 c0                	xor    %eax,%eax
    be17:	5d                   	pop    %ebp
    be18:	c3                   	ret    
    be19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000be20 <subblob_read_bits>:
    be20:	55                   	push   %ebp
    be21:	89 e5                	mov    %esp,%ebp
    be23:	57                   	push   %edi
    be24:	56                   	push   %esi
    be25:	53                   	push   %ebx
    be26:	83 ec 1c             	sub    $0x1c,%esp
    be29:	8b 55 08             	mov    0x8(%ebp),%edx
    be2c:	8b 45 14             	mov    0x14(%ebp),%eax
    be2f:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
    be32:	89 45 d8             	mov    %eax,-0x28(%ebp)
    be35:	8b 75 0c             	mov    0xc(%ebp),%esi
    be38:	8b 7d 10             	mov    0x10(%ebp),%edi
    be3b:	8b 45 18             	mov    0x18(%ebp),%eax
    be3e:	89 5d dc             	mov    %ebx,-0x24(%ebp)
    be41:	80 7a 24 00          	cmpb   $0x0,0x24(%edx)
    be45:	74 23                	je     be6a <subblob_read_bits+0x4a>
    be47:	8b 5a 20             	mov    0x20(%edx),%ebx
    be4a:	8b 4a 1c             	mov    0x1c(%edx),%ecx
    be4d:	39 fb                	cmp    %edi,%ebx
    be4f:	76 67                	jbe    beb8 <subblob_read_bits+0x98>
    be51:	29 f1                	sub    %esi,%ecx
    be53:	19 fb                	sbb    %edi,%ebx
    be55:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    be58:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    be5b:	8b 48 04             	mov    0x4(%eax),%ecx
    be5e:	8b 18                	mov    (%eax),%ebx
    be60:	3b 4d e4             	cmp    -0x1c(%ebp),%ecx
    be63:	73 6b                	jae    bed0 <subblob_read_bits+0xb0>
    be65:	89 18                	mov    %ebx,(%eax)
    be67:	89 48 04             	mov    %ecx,0x4(%eax)
    be6a:	03 72 14             	add    0x14(%edx),%esi
    be6d:	13 7a 18             	adc    0x18(%edx),%edi
    be70:	89 f1                	mov    %esi,%ecx
    be72:	0f b6 75 dc          	movzbl -0x24(%ebp),%esi
    be76:	8b 52 10             	mov    0x10(%edx),%edx
    be79:	81 e6 ff 00 00 00    	and    $0xff,%esi
    be7f:	89 fb                	mov    %edi,%ebx
    be81:	85 d2                	test   %edx,%edx
    be83:	74 77                	je     befc <subblob_read_bits+0xdc>
    be85:	8b 7a 08             	mov    0x8(%edx),%edi
    be88:	85 ff                	test   %edi,%edi
    be8a:	74 5b                	je     bee7 <subblob_read_bits+0xc7>
    be8c:	8b 7f 08             	mov    0x8(%edi),%edi
    be8f:	85 ff                	test   %edi,%edi
    be91:	74 2b                	je     bebe <subblob_read_bits+0x9e>
    be93:	89 45 18             	mov    %eax,0x18(%ebp)
    be96:	8b 45 d8             	mov    -0x28(%ebp),%eax
    be99:	89 75 1c             	mov    %esi,0x1c(%ebp)
    be9c:	89 45 14             	mov    %eax,0x14(%ebp)
    be9f:	89 5d 10             	mov    %ebx,0x10(%ebp)
    bea2:	89 4d 0c             	mov    %ecx,0xc(%ebp)
    bea5:	89 55 08             	mov    %edx,0x8(%ebp)
    bea8:	8d 65 f4             	lea    -0xc(%ebp),%esp
    beab:	89 f8                	mov    %edi,%eax
    bead:	5b                   	pop    %ebx
    beae:	5e                   	pop    %esi
    beaf:	5f                   	pop    %edi
    beb0:	5d                   	pop    %ebp
    beb1:	ff e0                	jmp    *%eax
    beb3:	90                   	nop
    beb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    beb8:	72 04                	jb     bebe <subblob_read_bits+0x9e>
    beba:	39 f1                	cmp    %esi,%ecx
    bebc:	73 93                	jae    be51 <subblob_read_bits+0x31>
    bebe:	8d 65 f4             	lea    -0xc(%ebp),%esp
    bec1:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    bec6:	5b                   	pop    %ebx
    bec7:	5e                   	pop    %esi
    bec8:	5f                   	pop    %edi
    bec9:	5d                   	pop    %ebp
    beca:	c3                   	ret    
    becb:	90                   	nop
    becc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    bed0:	76 0e                	jbe    bee0 <subblob_read_bits+0xc0>
    bed2:	8b 5d e0             	mov    -0x20(%ebp),%ebx
    bed5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    bed8:	eb 8b                	jmp    be65 <subblob_read_bits+0x45>
    beda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    bee0:	3b 5d e0             	cmp    -0x20(%ebp),%ebx
    bee3:	76 80                	jbe    be65 <subblob_read_bits+0x45>
    bee5:	eb eb                	jmp    bed2 <subblob_read_bits+0xb2>
    bee7:	50                   	push   %eax
    bee8:	68 b3 00 00 00       	push   $0xb3
    beed:	68 05 12 01 00       	push   $0x11205
    bef2:	68 1d 12 01 00       	push   $0x1121d
    bef7:	e8 14 60 00 00       	call   11f10 <assert_abort@plt>
    befc:	52                   	push   %edx
    befd:	68 b2 00 00 00       	push   $0xb2
    bf02:	68 05 12 01 00       	push   $0x11205
    bf07:	68 35 13 01 00       	push   $0x11335
    bf0c:	e8 ff 5f 00 00       	call   11f10 <assert_abort@plt>
    bf11:	eb 0d                	jmp    bf20 <sequential_destroy>
    bf13:	90                   	nop
    bf14:	90                   	nop
    bf15:	90                   	nop
    bf16:	90                   	nop
    bf17:	90                   	nop
    bf18:	90                   	nop
    bf19:	90                   	nop
    bf1a:	90                   	nop
    bf1b:	90                   	nop
    bf1c:	90                   	nop
    bf1d:	90                   	nop
    bf1e:	90                   	nop
    bf1f:	90                   	nop

0000bf20 <sequential_destroy>:
    bf20:	55                   	push   %ebp
    bf21:	89 e5                	mov    %esp,%ebp
    bf23:	53                   	push   %ebx
    bf24:	83 ec 10             	sub    $0x10,%esp
    bf27:	8b 5d 08             	mov    0x8(%ebp),%ebx
    bf2a:	8b 43 14             	mov    0x14(%ebx),%eax
    bf2d:	50                   	push   %eax
    bf2e:	e8 bd 61 00 00       	call   120f0 <free@plt>
    bf33:	8b 43 10             	mov    0x10(%ebx),%eax
    bf36:	89 5d 08             	mov    %ebx,0x8(%ebp)
    bf39:	83 c4 10             	add    $0x10,%esp
    bf3c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    bf3f:	8b 40 08             	mov    0x8(%eax),%eax
    bf42:	c9                   	leave  
    bf43:	ff e0                	jmp    *%eax
    bf45:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    bf49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000bf50 <memory_destroy>:
    bf50:	55                   	push   %ebp
    bf51:	89 e5                	mov    %esp,%ebp
    bf53:	53                   	push   %ebx
    bf54:	52                   	push   %edx
    bf55:	8b 5d 08             	mov    0x8(%ebp),%ebx
    bf58:	80 7b 18 00          	cmpb   $0x0,0x18(%ebx)
    bf5c:	74 0f                	je     bf6d <memory_destroy+0x1d>
    bf5e:	83 ec 0c             	sub    $0xc,%esp
    bf61:	8b 43 10             	mov    0x10(%ebx),%eax
    bf64:	50                   	push   %eax
    bf65:	e8 86 61 00 00       	call   120f0 <free@plt>
    bf6a:	83 c4 10             	add    $0x10,%esp
    bf6d:	89 5d 08             	mov    %ebx,0x8(%ebp)
    bf70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    bf73:	c9                   	leave  
    bf74:	e9 77 61 00 00       	jmp    120f0 <free@plt>
    bf79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000bf80 <memory_read>:
    bf80:	55                   	push   %ebp
    bf81:	89 e5                	mov    %esp,%ebp
    bf83:	57                   	push   %edi
    bf84:	56                   	push   %esi
    bf85:	53                   	push   %ebx
    bf86:	83 ec 1c             	sub    $0x1c,%esp
    bf89:	31 db                	xor    %ebx,%ebx
    bf8b:	8b 7d 08             	mov    0x8(%ebp),%edi
    bf8e:	8b 55 10             	mov    0x10(%ebp),%edx
    bf91:	8b 45 0c             	mov    0xc(%ebp),%eax
    bf94:	8b 75 18             	mov    0x18(%ebp),%esi
    bf97:	8b 4f 14             	mov    0x14(%edi),%ecx
    bf9a:	39 d3                	cmp    %edx,%ebx
    bf9c:	73 12                	jae    bfb0 <memory_read+0x30>
    bf9e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    bfa1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
    bfa6:	5b                   	pop    %ebx
    bfa7:	5e                   	pop    %esi
    bfa8:	5f                   	pop    %edi
    bfa9:	5d                   	pop    %ebp
    bfaa:	c3                   	ret    
    bfab:	90                   	nop
    bfac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    bfb0:	76 3e                	jbe    bff0 <memory_read+0x70>
    bfb2:	29 c1                	sub    %eax,%ecx
    bfb4:	19 d3                	sbb    %edx,%ebx
    bfb6:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    bfb9:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    bfbc:	8b 5e 04             	mov    0x4(%esi),%ebx
    bfbf:	8b 0e                	mov    (%esi),%ecx
    bfc1:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
    bfc4:	72 07                	jb     bfcd <memory_read+0x4d>
    bfc6:	77 30                	ja     bff8 <memory_read+0x78>
    bfc8:	3b 4d e0             	cmp    -0x20(%ebp),%ecx
    bfcb:	77 2b                	ja     bff8 <memory_read+0x78>
    bfcd:	89 0e                	mov    %ecx,(%esi)
    bfcf:	89 5e 04             	mov    %ebx,0x4(%esi)
    bfd2:	52                   	push   %edx
    bfd3:	51                   	push   %ecx
    bfd4:	8b 4f 10             	mov    0x10(%edi),%ecx
    bfd7:	8b 5d 14             	mov    0x14(%ebp),%ebx
    bfda:	01 c8                	add    %ecx,%eax
    bfdc:	50                   	push   %eax
    bfdd:	53                   	push   %ebx
    bfde:	e8 6d 5e 00 00       	call   11e50 <memcpy@plt>
    bfe3:	83 c4 10             	add    $0x10,%esp
    bfe6:	8d 65 f4             	lea    -0xc(%ebp),%esp
    bfe9:	31 c0                	xor    %eax,%eax
    bfeb:	5b                   	pop    %ebx
    bfec:	5e                   	pop    %esi
    bfed:	5f                   	pop    %edi
    bfee:	5d                   	pop    %ebp
    bfef:	c3                   	ret    
    bff0:	39 c1                	cmp    %eax,%ecx
    bff2:	72 aa                	jb     bf9e <memory_read+0x1e>
    bff4:	eb bc                	jmp    bfb2 <memory_read+0x32>
    bff6:	66 90                	xchg   %ax,%ax
    bff8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    bffb:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    bffe:	eb cd                	jmp    bfcd <memory_read+0x4d>

0000c000 <sequential_read>:
    c000:	55                   	push   %ebp
    c001:	89 e5                	mov    %esp,%ebp
    c003:	57                   	push   %edi
    c004:	56                   	push   %esi
    c005:	53                   	push   %ebx
    c006:	83 ec 2c             	sub    $0x2c,%esp
    c009:	8b 45 0c             	mov    0xc(%ebp),%eax
    c00c:	8b 5d 18             	mov    0x18(%ebp),%ebx
    c00f:	89 c6                	mov    %eax,%esi
    c011:	8b 55 10             	mov    0x10(%ebp),%edx
    c014:	03 33                	add    (%ebx),%esi
    c016:	89 d7                	mov    %edx,%edi
    c018:	89 45 d0             	mov    %eax,-0x30(%ebp)
    c01b:	8b 45 08             	mov    0x8(%ebp),%eax
    c01e:	13 7b 04             	adc    0x4(%ebx),%edi
    c021:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    c024:	8b 50 24             	mov    0x24(%eax),%edx
    c027:	8b 40 20             	mov    0x20(%eax),%eax
    c02a:	39 d7                	cmp    %edx,%edi
    c02c:	0f 82 b2 00 00 00    	jb     c0e4 <sequential_read+0xe4>
    c032:	0f 86 08 01 00 00    	jbe    c140 <sequential_read+0x140>
    c038:	8b 5d 08             	mov    0x8(%ebp),%ebx
    c03b:	8b 4b 18             	mov    0x18(%ebx),%ecx
    c03e:	8b 5b 1c             	mov    0x1c(%ebx),%ebx
    c041:	39 df                	cmp    %ebx,%edi
    c043:	0f 86 2f 01 00 00    	jbe    c178 <sequential_read+0x178>
    c049:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    c050:	0f a4 cb 01          	shld   $0x1,%ecx,%ebx
    c054:	01 c9                	add    %ecx,%ecx
    c056:	83 fb 00             	cmp    $0x0,%ebx
    c059:	77 0f                	ja     c06a <sequential_read+0x6a>
    c05b:	81 f9 00 10 00 00    	cmp    $0x1000,%ecx
    c061:	73 07                	jae    c06a <sequential_read+0x6a>
    c063:	b9 00 10 00 00       	mov    $0x1000,%ecx
    c068:	31 db                	xor    %ebx,%ebx
    c06a:	39 df                	cmp    %ebx,%edi
    c06c:	77 e2                	ja     c050 <sequential_read+0x50>
    c06e:	0f 83 ec 00 00 00    	jae    c160 <sequential_read+0x160>
    c074:	8b 45 08             	mov    0x8(%ebp),%eax
    c077:	89 48 18             	mov    %ecx,0x18(%eax)
    c07a:	89 58 1c             	mov    %ebx,0x1c(%eax)
    c07d:	52                   	push   %edx
    c07e:	52                   	push   %edx
    c07f:	51                   	push   %ecx
    c080:	8b 48 14             	mov    0x14(%eax),%ecx
    c083:	51                   	push   %ecx
    c084:	e8 17 5f 00 00       	call   11fa0 <realloc@plt>
    c089:	83 c4 10             	add    $0x10,%esp
    c08c:	89 45 cc             	mov    %eax,-0x34(%ebp)
    c08f:	85 c0                	test   %eax,%eax
    c091:	0f 84 fb 00 00 00    	je     c192 <sequential_read+0x192>
    c097:	89 c2                	mov    %eax,%edx
    c099:	8b 45 08             	mov    0x8(%ebp),%eax
    c09c:	89 50 14             	mov    %edx,0x14(%eax)
    c09f:	8b 50 24             	mov    0x24(%eax),%edx
    c0a2:	8b 40 20             	mov    0x20(%eax),%eax
    c0a5:	89 f1                	mov    %esi,%ecx
    c0a7:	89 fb                	mov    %edi,%ebx
    c0a9:	29 c1                	sub    %eax,%ecx
    c0ab:	19 d3                	sbb    %edx,%ebx
    c0ad:	52                   	push   %edx
    c0ae:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    c0b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
    c0b4:	8d 55 e0             	lea    -0x20(%ebp),%edx
    c0b7:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    c0ba:	8b 4b 10             	mov    0x10(%ebx),%ecx
    c0bd:	52                   	push   %edx
    c0be:	8b 55 cc             	mov    -0x34(%ebp),%edx
    c0c1:	01 d0                	add    %edx,%eax
    c0c3:	50                   	push   %eax
    c0c4:	53                   	push   %ebx
    c0c5:	ff 51 04             	call   *0x4(%ecx)
    c0c8:	83 c4 10             	add    $0x10,%esp
    c0cb:	85 c0                	test   %eax,%eax
    c0cd:	75 65                	jne    c134 <sequential_read+0x134>
    c0cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
    c0d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
    c0d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    c0d8:	03 43 20             	add    0x20(%ebx),%eax
    c0db:	13 53 24             	adc    0x24(%ebx),%edx
    c0de:	89 43 20             	mov    %eax,0x20(%ebx)
    c0e1:	89 53 24             	mov    %edx,0x24(%ebx)
    c0e4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
    c0e7:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    c0ea:	39 d3                	cmp    %edx,%ebx
    c0ec:	0f 87 7e 00 00 00    	ja     c170 <sequential_read+0x170>
    c0f2:	72 04                	jb     c0f8 <sequential_read+0xf8>
    c0f4:	39 c1                	cmp    %eax,%ecx
    c0f6:	77 78                	ja     c170 <sequential_read+0x170>
    c0f8:	29 f0                	sub    %esi,%eax
    c0fa:	19 fa                	sbb    %edi,%edx
    c0fc:	8b 7d 18             	mov    0x18(%ebp),%edi
    c0ff:	8b 5f 04             	mov    0x4(%edi),%ebx
    c102:	8b 0f                	mov    (%edi),%ecx
    c104:	39 d3                	cmp    %edx,%ebx
    c106:	72 08                	jb     c110 <sequential_read+0x110>
    c108:	77 4e                	ja     c158 <sequential_read+0x158>
    c10a:	39 c1                	cmp    %eax,%ecx
    c10c:	77 4a                	ja     c158 <sequential_read+0x158>
    c10e:	66 90                	xchg   %ax,%ax
    c110:	8b 45 18             	mov    0x18(%ebp),%eax
    c113:	8b 7d 08             	mov    0x8(%ebp),%edi
    c116:	89 58 04             	mov    %ebx,0x4(%eax)
    c119:	89 08                	mov    %ecx,(%eax)
    c11b:	53                   	push   %ebx
    c11c:	8b 45 d0             	mov    -0x30(%ebp),%eax
    c11f:	8b 77 14             	mov    0x14(%edi),%esi
    c122:	8b 7d 14             	mov    0x14(%ebp),%edi
    c125:	01 f0                	add    %esi,%eax
    c127:	51                   	push   %ecx
    c128:	50                   	push   %eax
    c129:	57                   	push   %edi
    c12a:	e8 21 5d 00 00       	call   11e50 <memcpy@plt>
    c12f:	83 c4 10             	add    $0x10,%esp
    c132:	31 c0                	xor    %eax,%eax
    c134:	8d 65 f4             	lea    -0xc(%ebp),%esp
    c137:	5b                   	pop    %ebx
    c138:	5e                   	pop    %esi
    c139:	5f                   	pop    %edi
    c13a:	5d                   	pop    %ebp
    c13b:	c3                   	ret    
    c13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    c140:	39 c6                	cmp    %eax,%esi
    c142:	0f 87 f0 fe ff ff    	ja     c038 <sequential_read+0x38>
    c148:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
    c14b:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    c14e:	39 d3                	cmp    %edx,%ebx
    c150:	77 1e                	ja     c170 <sequential_read+0x170>
    c152:	eb 9e                	jmp    c0f2 <sequential_read+0xf2>
    c154:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    c158:	89 c1                	mov    %eax,%ecx
    c15a:	89 d3                	mov    %edx,%ebx
    c15c:	eb b2                	jmp    c110 <sequential_read+0x110>
    c15e:	66 90                	xchg   %ax,%ax
    c160:	39 ce                	cmp    %ecx,%esi
    c162:	0f 87 e8 fe ff ff    	ja     c050 <sequential_read+0x50>
    c168:	e9 07 ff ff ff       	jmp    c074 <sequential_read+0x74>
    c16d:	8d 76 00             	lea    0x0(%esi),%esi
    c170:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    c175:	eb bd                	jmp    c134 <sequential_read+0x134>
    c177:	90                   	nop
    c178:	73 0e                	jae    c188 <sequential_read+0x188>
    c17a:	8b 5d 08             	mov    0x8(%ebp),%ebx
    c17d:	8b 5b 14             	mov    0x14(%ebx),%ebx
    c180:	89 5d cc             	mov    %ebx,-0x34(%ebp)
    c183:	e9 1d ff ff ff       	jmp    c0a5 <sequential_read+0xa5>
    c188:	39 ce                	cmp    %ecx,%esi
    c18a:	0f 87 c0 fe ff ff    	ja     c050 <sequential_read+0x50>
    c190:	eb e8                	jmp    c17a <sequential_read+0x17a>
    c192:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    c197:	eb 9b                	jmp    c134 <sequential_read+0x134>
    c199:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000c1a0 <subblob_destroy>:
    c1a0:	55                   	push   %ebp
    c1a1:	89 e5                	mov    %esp,%ebp
    c1a3:	53                   	push   %ebx
    c1a4:	50                   	push   %eax
    c1a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
    c1a8:	8b 43 10             	mov    0x10(%ebx),%eax
    c1ab:	85 c0                	test   %eax,%eax
    c1ad:	74 0c                	je     c1bb <subblob_destroy+0x1b>
    c1af:	83 ec 0c             	sub    $0xc,%esp
    c1b2:	50                   	push   %eax
    c1b3:	e8 68 f4 ff ff       	call   b620 <bithenge_node_dec_ref>
    c1b8:	83 c4 10             	add    $0x10,%esp
    c1bb:	89 5d 08             	mov    %ebx,0x8(%ebp)
    c1be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    c1c1:	c9                   	leave  
    c1c2:	e9 29 5f 00 00       	jmp    120f0 <free@plt>
    c1c7:	89 f6                	mov    %esi,%esi
    c1c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000c1d0 <subblob_read>:
    c1d0:	55                   	push   %ebp
    c1d1:	89 e5                	mov    %esp,%ebp
    c1d3:	57                   	push   %edi
    c1d4:	56                   	push   %esi
    c1d5:	53                   	push   %ebx
    c1d6:	83 ec 1c             	sub    $0x1c,%esp
    c1d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
    c1dc:	8b 45 14             	mov    0x14(%ebp),%eax
    c1df:	8b 75 0c             	mov    0xc(%ebp),%esi
    c1e2:	8b 7d 10             	mov    0x10(%ebp),%edi
    c1e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
    c1e8:	8b 4d 18             	mov    0x18(%ebp),%ecx
    c1eb:	80 7b 24 00          	cmpb   $0x0,0x24(%ebx)
    c1ef:	74 23                	je     c214 <subblob_read+0x44>
    c1f1:	8b 53 20             	mov    0x20(%ebx),%edx
    c1f4:	8b 43 1c             	mov    0x1c(%ebx),%eax
    c1f7:	39 fa                	cmp    %edi,%edx
    c1f9:	76 55                	jbe    c250 <subblob_read+0x80>
    c1fb:	29 f0                	sub    %esi,%eax
    c1fd:	19 fa                	sbb    %edi,%edx
    c1ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
    c202:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    c205:	8b 41 04             	mov    0x4(%ecx),%eax
    c208:	8b 11                	mov    (%ecx),%edx
    c20a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
    c20d:	73 59                	jae    c268 <subblob_read+0x98>
    c20f:	89 11                	mov    %edx,(%ecx)
    c211:	89 41 04             	mov    %eax,0x4(%ecx)
    c214:	89 f0                	mov    %esi,%eax
    c216:	89 fa                	mov    %edi,%edx
    c218:	03 43 14             	add    0x14(%ebx),%eax
    c21b:	13 53 18             	adc    0x18(%ebx),%edx
    c21e:	8b 5b 10             	mov    0x10(%ebx),%ebx
    c221:	85 db                	test   %ebx,%ebx
    c223:	74 6f                	je     c294 <subblob_read+0xc4>
    c225:	8b 7b 08             	mov    0x8(%ebx),%edi
    c228:	85 ff                	test   %edi,%edi
    c22a:	74 53                	je     c27f <subblob_read+0xaf>
    c22c:	8b 7f 04             	mov    0x4(%edi),%edi
    c22f:	85 ff                	test   %edi,%edi
    c231:	74 23                	je     c256 <subblob_read+0x86>
    c233:	8b 75 dc             	mov    -0x24(%ebp),%esi
    c236:	89 45 0c             	mov    %eax,0xc(%ebp)
    c239:	89 75 14             	mov    %esi,0x14(%ebp)
    c23c:	89 5d 08             	mov    %ebx,0x8(%ebp)
    c23f:	89 4d 18             	mov    %ecx,0x18(%ebp)
    c242:	89 55 10             	mov    %edx,0x10(%ebp)
    c245:	8d 65 f4             	lea    -0xc(%ebp),%esp
    c248:	89 f8                	mov    %edi,%eax
    c24a:	5b                   	pop    %ebx
    c24b:	5e                   	pop    %esi
    c24c:	5f                   	pop    %edi
    c24d:	5d                   	pop    %ebp
    c24e:	ff e0                	jmp    *%eax
    c250:	72 04                	jb     c256 <subblob_read+0x86>
    c252:	39 f0                	cmp    %esi,%eax
    c254:	73 a5                	jae    c1fb <subblob_read+0x2b>
    c256:	8d 65 f4             	lea    -0xc(%ebp),%esp
    c259:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    c25e:	5b                   	pop    %ebx
    c25f:	5e                   	pop    %esi
    c260:	5f                   	pop    %edi
    c261:	5d                   	pop    %ebp
    c262:	c3                   	ret    
    c263:	90                   	nop
    c264:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    c268:	76 0e                	jbe    c278 <subblob_read+0xa8>
    c26a:	8b 55 e0             	mov    -0x20(%ebp),%edx
    c26d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    c270:	eb 9d                	jmp    c20f <subblob_read+0x3f>
    c272:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    c278:	3b 55 e0             	cmp    -0x20(%ebp),%edx
    c27b:	76 92                	jbe    c20f <subblob_read+0x3f>
    c27d:	eb eb                	jmp    c26a <subblob_read+0x9a>
    c27f:	50                   	push   %eax
    c280:	68 97 00 00 00       	push   $0x97
    c285:	68 05 12 01 00       	push   $0x11205
    c28a:	68 1d 12 01 00       	push   $0x1121d
    c28f:	e8 7c 5c 00 00       	call   11f10 <assert_abort@plt>
    c294:	e8 f2 09 00 00       	call   cc8b <bithenge_blob_read.part.1>
    c299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000c2a0 <subblob_size>:
    c2a0:	55                   	push   %ebp
    c2a1:	89 e5                	mov    %esp,%ebp
    c2a3:	56                   	push   %esi
    c2a4:	53                   	push   %ebx
    c2a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
    c2a8:	8b 75 0c             	mov    0xc(%ebp),%esi
    c2ab:	80 7b 24 00          	cmpb   $0x0,0x24(%ebx)
    c2af:	74 17                	je     c2c8 <subblob_size+0x28>
    c2b1:	8b 43 1c             	mov    0x1c(%ebx),%eax
    c2b4:	8b 53 20             	mov    0x20(%ebx),%edx
    c2b7:	89 56 04             	mov    %edx,0x4(%esi)
    c2ba:	89 06                	mov    %eax,(%esi)
    c2bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
    c2bf:	31 c0                	xor    %eax,%eax
    c2c1:	5b                   	pop    %ebx
    c2c2:	5e                   	pop    %esi
    c2c3:	5d                   	pop    %ebp
    c2c4:	c3                   	ret    
    c2c5:	8d 76 00             	lea    0x0(%esi),%esi
    c2c8:	8b 43 10             	mov    0x10(%ebx),%eax
    c2cb:	85 c0                	test   %eax,%eax
    c2cd:	74 22                	je     c2f1 <subblob_size+0x51>
    c2cf:	8b 50 08             	mov    0x8(%eax),%edx
    c2d2:	85 d2                	test   %edx,%edx
    c2d4:	74 2d                	je     c303 <subblob_size+0x63>
    c2d6:	51                   	push   %ecx
    c2d7:	51                   	push   %ecx
    c2d8:	56                   	push   %esi
    c2d9:	50                   	push   %eax
    c2da:	ff 12                	call   *(%edx)
    c2dc:	8b 4b 14             	mov    0x14(%ebx),%ecx
    c2df:	8b 5b 18             	mov    0x18(%ebx),%ebx
    c2e2:	29 0e                	sub    %ecx,(%esi)
    c2e4:	19 5e 04             	sbb    %ebx,0x4(%esi)
    c2e7:	83 c4 10             	add    $0x10,%esp
    c2ea:	8d 65 f8             	lea    -0x8(%ebp),%esp
    c2ed:	5b                   	pop    %ebx
    c2ee:	5e                   	pop    %esi
    c2ef:	5d                   	pop    %ebp
    c2f0:	c3                   	ret    
    c2f1:	56                   	push   %esi
    c2f2:	6a 7f                	push   $0x7f
    c2f4:	68 05 12 01 00       	push   $0x11205
    c2f9:	68 35 13 01 00       	push   $0x11335
    c2fe:	e8 0d 5c 00 00       	call   11f10 <assert_abort@plt>
    c303:	53                   	push   %ebx
    c304:	68 80 00 00 00       	push   $0x80
    c309:	68 05 12 01 00       	push   $0x11205
    c30e:	68 1d 12 01 00       	push   $0x1121d
    c313:	e8 f8 5b 00 00       	call   11f10 <assert_abort@plt>
    c318:	90                   	nop
    c319:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000c320 <sequential_size>:
    c320:	55                   	push   %ebp
    c321:	89 e5                	mov    %esp,%ebp
    c323:	57                   	push   %edi
    c324:	56                   	push   %esi
    c325:	53                   	push   %ebx
    c326:	83 ec 2c             	sub    $0x2c,%esp
    c329:	8b 5d 08             	mov    0x8(%ebp),%ebx
    c32c:	8b 4b 10             	mov    0x10(%ebx),%ecx
    c32f:	8b 01                	mov    (%ecx),%eax
    c331:	85 c0                	test   %eax,%eax
    c333:	74 17                	je     c34c <sequential_size+0x2c>
    c335:	8b 55 0c             	mov    0xc(%ebp),%edx
    c338:	57                   	push   %edi
    c339:	57                   	push   %edi
    c33a:	52                   	push   %edx
    c33b:	53                   	push   %ebx
    c33c:	ff d0                	call   *%eax
    c33e:	83 c4 10             	add    $0x10,%esp
    c341:	85 c0                	test   %eax,%eax
    c343:	0f 84 35 01 00 00    	je     c47e <sequential_size+0x15e>
    c349:	8b 4b 10             	mov    0x10(%ebx),%ecx
    c34c:	8b 43 20             	mov    0x20(%ebx),%eax
    c34f:	8b 73 18             	mov    0x18(%ebx),%esi
    c352:	8b 53 24             	mov    0x24(%ebx),%edx
    c355:	29 c6                	sub    %eax,%esi
    c357:	8b 7b 1c             	mov    0x1c(%ebx),%edi
    c35a:	89 75 e0             	mov    %esi,-0x20(%ebp)
    c35d:	19 d7                	sbb    %edx,%edi
    c35f:	52                   	push   %edx
    c360:	8b 73 14             	mov    0x14(%ebx),%esi
    c363:	89 7d e4             	mov    %edi,-0x1c(%ebp)
    c366:	01 f0                	add    %esi,%eax
    c368:	8d 7d e0             	lea    -0x20(%ebp),%edi
    c36b:	57                   	push   %edi
    c36c:	50                   	push   %eax
    c36d:	53                   	push   %ebx
    c36e:	ff 51 04             	call   *0x4(%ecx)
    c371:	83 c4 10             	add    $0x10,%esp
    c374:	85 c0                	test   %eax,%eax
    c376:	0f 85 02 01 00 00    	jne    c47e <sequential_size+0x15e>
    c37c:	8b 45 e0             	mov    -0x20(%ebp),%eax
    c37f:	8b 73 18             	mov    0x18(%ebx),%esi
    c382:	03 43 20             	add    0x20(%ebx),%eax
    c385:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    c388:	89 f1                	mov    %esi,%ecx
    c38a:	8b 7b 1c             	mov    0x1c(%ebx),%edi
    c38d:	13 53 24             	adc    0x24(%ebx),%edx
    c390:	31 c1                	xor    %eax,%ecx
    c392:	89 4d d0             	mov    %ecx,-0x30(%ebp)
    c395:	89 f9                	mov    %edi,%ecx
    c397:	31 d1                	xor    %edx,%ecx
    c399:	89 43 20             	mov    %eax,0x20(%ebx)
    c39c:	89 53 24             	mov    %edx,0x24(%ebx)
    c39f:	0b 4d d0             	or     -0x30(%ebp),%ecx
    c3a2:	0f 85 cc 00 00 00    	jne    c474 <sequential_size+0x154>
    c3a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
    c3ab:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    c3ae:	eb 67                	jmp    c417 <sequential_size+0xf7>
    c3b0:	0f 83 da 00 00 00    	jae    c490 <sequential_size+0x170>
    c3b6:	8b 43 14             	mov    0x14(%ebx),%eax
    c3b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    c3c0:	2b 75 d0             	sub    -0x30(%ebp),%esi
    c3c3:	1b 7d d4             	sbb    -0x2c(%ebp),%edi
    c3c6:	89 75 e0             	mov    %esi,-0x20(%ebp)
    c3c9:	89 7d e4             	mov    %edi,-0x1c(%ebp)
    c3cc:	56                   	push   %esi
    c3cd:	8d 7d e0             	lea    -0x20(%ebp),%edi
    c3d0:	8b 53 10             	mov    0x10(%ebx),%edx
    c3d3:	57                   	push   %edi
    c3d4:	8b 7d d0             	mov    -0x30(%ebp),%edi
    c3d7:	01 f8                	add    %edi,%eax
    c3d9:	50                   	push   %eax
    c3da:	53                   	push   %ebx
    c3db:	ff 52 04             	call   *0x4(%edx)
    c3de:	83 c4 10             	add    $0x10,%esp
    c3e1:	85 c0                	test   %eax,%eax
    c3e3:	0f 85 95 00 00 00    	jne    c47e <sequential_size+0x15e>
    c3e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
    c3ec:	8b 73 18             	mov    0x18(%ebx),%esi
    c3ef:	03 43 20             	add    0x20(%ebx),%eax
    c3f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    c3f5:	89 f1                	mov    %esi,%ecx
    c3f7:	8b 7b 1c             	mov    0x1c(%ebx),%edi
    c3fa:	13 53 24             	adc    0x24(%ebx),%edx
    c3fd:	31 c1                	xor    %eax,%ecx
    c3ff:	89 4d d0             	mov    %ecx,-0x30(%ebp)
    c402:	89 f9                	mov    %edi,%ecx
    c404:	31 d1                	xor    %edx,%ecx
    c406:	89 43 20             	mov    %eax,0x20(%ebx)
    c409:	89 53 24             	mov    %edx,0x24(%ebx)
    c40c:	0b 4d d0             	or     -0x30(%ebp),%ecx
    c40f:	75 63                	jne    c474 <sequential_size+0x154>
    c411:	89 75 d0             	mov    %esi,-0x30(%ebp)
    c414:	89 7d d4             	mov    %edi,-0x2c(%ebp)
    c417:	0f a4 f7 01          	shld   $0x1,%esi,%edi
    c41b:	01 f6                	add    %esi,%esi
    c41d:	39 d7                	cmp    %edx,%edi
    c41f:	76 8f                	jbe    c3b0 <sequential_size+0x90>
    c421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    c428:	0f a4 c2 01          	shld   $0x1,%eax,%edx
    c42c:	01 c0                	add    %eax,%eax
    c42e:	83 fa 00             	cmp    $0x0,%edx
    c431:	77 0e                	ja     c441 <sequential_size+0x121>
    c433:	3d 00 10 00 00       	cmp    $0x1000,%eax
    c438:	73 07                	jae    c441 <sequential_size+0x121>
    c43a:	b8 00 10 00 00       	mov    $0x1000,%eax
    c43f:	31 d2                	xor    %edx,%edx
    c441:	39 d7                	cmp    %edx,%edi
    c443:	77 e3                	ja     c428 <sequential_size+0x108>
    c445:	73 41                	jae    c488 <sequential_size+0x168>
    c447:	89 53 1c             	mov    %edx,0x1c(%ebx)
    c44a:	89 43 18             	mov    %eax,0x18(%ebx)
    c44d:	52                   	push   %edx
    c44e:	52                   	push   %edx
    c44f:	8b 4b 14             	mov    0x14(%ebx),%ecx
    c452:	50                   	push   %eax
    c453:	51                   	push   %ecx
    c454:	e8 47 5b 00 00       	call   11fa0 <realloc@plt>
    c459:	83 c4 10             	add    $0x10,%esp
    c45c:	85 c0                	test   %eax,%eax
    c45e:	74 39                	je     c499 <sequential_size+0x179>
    c460:	8b 53 20             	mov    0x20(%ebx),%edx
    c463:	8b 4b 24             	mov    0x24(%ebx),%ecx
    c466:	89 43 14             	mov    %eax,0x14(%ebx)
    c469:	89 55 d0             	mov    %edx,-0x30(%ebp)
    c46c:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    c46f:	e9 4c ff ff ff       	jmp    c3c0 <sequential_size+0xa0>
    c474:	8b 7d 0c             	mov    0xc(%ebp),%edi
    c477:	89 07                	mov    %eax,(%edi)
    c479:	89 57 04             	mov    %edx,0x4(%edi)
    c47c:	31 c0                	xor    %eax,%eax
    c47e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    c481:	5b                   	pop    %ebx
    c482:	5e                   	pop    %esi
    c483:	5f                   	pop    %edi
    c484:	5d                   	pop    %ebp
    c485:	c3                   	ret    
    c486:	66 90                	xchg   %ax,%ax
    c488:	39 c6                	cmp    %eax,%esi
    c48a:	77 9c                	ja     c428 <sequential_size+0x108>
    c48c:	eb b9                	jmp    c447 <sequential_size+0x127>
    c48e:	66 90                	xchg   %ax,%ax
    c490:	39 c6                	cmp    %eax,%esi
    c492:	77 94                	ja     c428 <sequential_size+0x108>
    c494:	e9 1d ff ff ff       	jmp    c3b6 <sequential_size+0x96>
    c499:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    c49e:	eb de                	jmp    c47e <sequential_size+0x15e>

0000c4a0 <bithenge_init_random_access_blob>:
    c4a0:	55                   	push   %ebp
    c4a1:	89 e5                	mov    %esp,%ebp
    c4a3:	83 ec 08             	sub    $0x8,%esp
    c4a6:	8b 55 08             	mov    0x8(%ebp),%edx
    c4a9:	8b 45 0c             	mov    0xc(%ebp),%eax
    c4ac:	85 d2                	test   %edx,%edx
    c4ae:	74 6d                	je     c51d <bithenge_init_random_access_blob+0x7d>
    c4b0:	85 c0                	test   %eax,%eax
    c4b2:	74 57                	je     c50b <bithenge_init_random_access_blob+0x6b>
    c4b4:	8b 48 0c             	mov    0xc(%eax),%ecx
    c4b7:	85 c9                	test   %ecx,%ecx
    c4b9:	74 3e                	je     c4f9 <bithenge_init_random_access_blob+0x59>
    c4bb:	8b 48 04             	mov    0x4(%eax),%ecx
    c4be:	85 c9                	test   %ecx,%ecx
    c4c0:	74 1e                	je     c4e0 <bithenge_init_random_access_blob+0x40>
    c4c2:	8b 08                	mov    (%eax),%ecx
    c4c4:	85 c9                	test   %ecx,%ecx
    c4c6:	74 67                	je     c52f <bithenge_init_random_access_blob+0x8f>
    c4c8:	89 42 08             	mov    %eax,0x8(%edx)
    c4cb:	c7 02 05 00 00 00    	movl   $0x5,(%edx)
    c4d1:	c7 42 04 01 00 00 00 	movl   $0x1,0x4(%edx)
    c4d8:	31 c0                	xor    %eax,%eax
    c4da:	c9                   	leave  
    c4db:	c3                   	ret    
    c4dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    c4e0:	8b 48 08             	mov    0x8(%eax),%ecx
    c4e3:	85 c9                	test   %ecx,%ecx
    c4e5:	75 db                	jne    c4c2 <bithenge_init_random_access_blob+0x22>
    c4e7:	50                   	push   %eax
    c4e8:	6a 39                	push   $0x39
    c4ea:	68 cc 17 01 00       	push   $0x117cc
    c4ef:	68 dc 17 01 00       	push   $0x117dc
    c4f4:	e8 17 5a 00 00       	call   11f10 <assert_abort@plt>
    c4f9:	50                   	push   %eax
    c4fa:	6a 38                	push   $0x38
    c4fc:	68 cc 17 01 00       	push   $0x117cc
    c501:	68 18 15 01 00       	push   $0x11518
    c506:	e8 05 5a 00 00       	call   11f10 <assert_abort@plt>
    c50b:	50                   	push   %eax
    c50c:	6a 37                	push   $0x37
    c50e:	68 cc 17 01 00       	push   $0x117cc
    c513:	68 67 11 01 00       	push   $0x11167
    c518:	e8 f3 59 00 00       	call   11f10 <assert_abort@plt>
    c51d:	50                   	push   %eax
    c51e:	6a 36                	push   $0x36
    c520:	68 cc 17 01 00       	push   $0x117cc
    c525:	68 d7 17 01 00       	push   $0x117d7
    c52a:	e8 e1 59 00 00       	call   11f10 <assert_abort@plt>
    c52f:	50                   	push   %eax
    c530:	6a 3a                	push   $0x3a
    c532:	68 cc 17 01 00       	push   $0x117cc
    c537:	68 f8 17 01 00       	push   $0x117f8
    c53c:	e8 cf 59 00 00       	call   11f10 <assert_abort@plt>
    c541:	eb 0d                	jmp    c550 <bithenge_init_sequential_blob>
    c543:	90                   	nop
    c544:	90                   	nop
    c545:	90                   	nop
    c546:	90                   	nop
    c547:	90                   	nop
    c548:	90                   	nop
    c549:	90                   	nop
    c54a:	90                   	nop
    c54b:	90                   	nop
    c54c:	90                   	nop
    c54d:	90                   	nop
    c54e:	90                   	nop
    c54f:	90                   	nop

0000c550 <bithenge_init_sequential_blob>:
    c550:	55                   	push   %ebp
    c551:	89 e5                	mov    %esp,%ebp
    c553:	83 ec 08             	sub    $0x8,%esp
    c556:	8b 45 08             	mov    0x8(%ebp),%eax
    c559:	8b 55 0c             	mov    0xc(%ebp),%edx
    c55c:	85 c0                	test   %eax,%eax
    c55e:	74 54                	je     c5b4 <bithenge_init_sequential_blob+0x64>
    c560:	85 d2                	test   %edx,%edx
    c562:	0f 84 8b 00 00 00    	je     c5f3 <bithenge_init_sequential_blob+0xa3>
    c568:	8b 4a 08             	mov    0x8(%edx),%ecx
    c56b:	85 c9                	test   %ecx,%ecx
    c56d:	74 6f                	je     c5de <bithenge_init_sequential_blob+0x8e>
    c56f:	8b 4a 04             	mov    0x4(%edx),%ecx
    c572:	85 c9                	test   %ecx,%ecx
    c574:	74 53                	je     c5c9 <bithenge_init_sequential_blob+0x79>
    c576:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    c57c:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    c583:	c7 40 08 68 18 01 00 	movl   $0x11868,0x8(%eax)
    c58a:	89 50 10             	mov    %edx,0x10(%eax)
    c58d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    c594:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    c59b:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    c5a2:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
    c5a9:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    c5b0:	31 c0                	xor    %eax,%eax
    c5b2:	c9                   	leave  
    c5b3:	c3                   	ret    
    c5b4:	50                   	push   %eax
    c5b5:	68 a3 00 00 00       	push   $0xa3
    c5ba:	68 cc 17 01 00       	push   $0x117cc
    c5bf:	68 d7 17 01 00       	push   $0x117d7
    c5c4:	e8 47 59 00 00       	call   11f10 <assert_abort@plt>
    c5c9:	50                   	push   %eax
    c5ca:	68 a6 00 00 00       	push   $0xa6
    c5cf:	68 cc 17 01 00       	push   $0x117cc
    c5d4:	68 02 18 01 00       	push   $0x11802
    c5d9:	e8 32 59 00 00       	call   11f10 <assert_abort@plt>
    c5de:	50                   	push   %eax
    c5df:	68 a5 00 00 00       	push   $0xa5
    c5e4:	68 cc 17 01 00       	push   $0x117cc
    c5e9:	68 18 15 01 00       	push   $0x11518
    c5ee:	e8 1d 59 00 00       	call   11f10 <assert_abort@plt>
    c5f3:	50                   	push   %eax
    c5f4:	68 a4 00 00 00       	push   $0xa4
    c5f9:	68 cc 17 01 00       	push   $0x117cc
    c5fe:	68 67 11 01 00       	push   $0x11167
    c603:	e8 08 59 00 00       	call   11f10 <assert_abort@plt>
    c608:	90                   	nop
    c609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000c610 <bithenge_new_blob_from_buffer>:
    c610:	55                   	push   %ebp
    c611:	89 e5                	mov    %esp,%ebp
    c613:	57                   	push   %edi
    c614:	56                   	push   %esi
    c615:	53                   	push   %ebx
    c616:	83 ec 0c             	sub    $0xc,%esp
    c619:	8b 7d 0c             	mov    0xc(%ebp),%edi
    c61c:	8b 75 10             	mov    0x10(%ebp),%esi
    c61f:	8b 5d 14             	mov    0x14(%ebp),%ebx
    c622:	85 ff                	test   %edi,%edi
    c624:	75 04                	jne    c62a <bithenge_new_blob_from_buffer+0x1a>
    c626:	85 f6                	test   %esi,%esi
    c628:	75 6c                	jne    c696 <bithenge_new_blob_from_buffer+0x86>
    c62a:	83 ec 0c             	sub    $0xc,%esp
    c62d:	6a 1c                	push   $0x1c
    c62f:	e8 2c 58 00 00       	call   11e60 <malloc@plt>
    c634:	83 c4 10             	add    $0x10,%esp
    c637:	85 c0                	test   %eax,%eax
    c639:	74 2d                	je     c668 <bithenge_new_blob_from_buffer+0x58>
    c63b:	8b 55 08             	mov    0x8(%ebp),%edx
    c63e:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    c644:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    c64b:	c7 40 08 58 18 01 00 	movl   $0x11858,0x8(%eax)
    c652:	89 78 10             	mov    %edi,0x10(%eax)
    c655:	89 70 14             	mov    %esi,0x14(%eax)
    c658:	88 58 18             	mov    %bl,0x18(%eax)
    c65b:	89 02                	mov    %eax,(%edx)
    c65d:	8d 65 f4             	lea    -0xc(%ebp),%esp
    c660:	31 c0                	xor    %eax,%eax
    c662:	5b                   	pop    %ebx
    c663:	5e                   	pop    %esi
    c664:	5f                   	pop    %edi
    c665:	5d                   	pop    %ebp
    c666:	c3                   	ret    
    c667:	90                   	nop
    c668:	84 db                	test   %bl,%bl
    c66a:	75 1c                	jne    c688 <bithenge_new_blob_from_buffer+0x78>
    c66c:	83 ec 0c             	sub    $0xc,%esp
    c66f:	6a 00                	push   $0x0
    c671:	e8 7a 5a 00 00       	call   120f0 <free@plt>
    c676:	83 c4 10             	add    $0x10,%esp
    c679:	8d 65 f4             	lea    -0xc(%ebp),%esp
    c67c:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    c681:	5b                   	pop    %ebx
    c682:	5e                   	pop    %esi
    c683:	5f                   	pop    %edi
    c684:	5d                   	pop    %ebp
    c685:	c3                   	ret    
    c686:	66 90                	xchg   %ax,%ax
    c688:	83 ec 0c             	sub    $0xc,%esp
    c68b:	57                   	push   %edi
    c68c:	e8 5f 5a 00 00       	call   120f0 <free@plt>
    c691:	83 c4 10             	add    $0x10,%esp
    c694:	eb d6                	jmp    c66c <bithenge_new_blob_from_buffer+0x5c>
    c696:	50                   	push   %eax
    c697:	68 f6 00 00 00       	push   $0xf6
    c69c:	68 cc 17 01 00       	push   $0x117cc
    c6a1:	68 0c 18 01 00       	push   $0x1180c
    c6a6:	e8 65 58 00 00       	call   11f10 <assert_abort@plt>
    c6ab:	90                   	nop
    c6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000c6b0 <bithenge_new_blob_from_data>:
    c6b0:	55                   	push   %ebp
    c6b1:	89 e5                	mov    %esp,%ebp
    c6b3:	56                   	push   %esi
    c6b4:	53                   	push   %ebx
    c6b5:	83 ec 0c             	sub    $0xc,%esp
    c6b8:	8b 75 10             	mov    0x10(%ebp),%esi
    c6bb:	56                   	push   %esi
    c6bc:	e8 9f 57 00 00       	call   11e60 <malloc@plt>
    c6c1:	83 c4 10             	add    $0x10,%esp
    c6c4:	85 c0                	test   %eax,%eax
    c6c6:	74 78                	je     c740 <bithenge_new_blob_from_data+0x90>
    c6c8:	89 c3                	mov    %eax,%ebx
    c6ca:	8b 55 0c             	mov    0xc(%ebp),%edx
    c6cd:	50                   	push   %eax
    c6ce:	56                   	push   %esi
    c6cf:	52                   	push   %edx
    c6d0:	53                   	push   %ebx
    c6d1:	e8 7a 57 00 00       	call   11e50 <memcpy@plt>
    c6d6:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
    c6dd:	e8 7e 57 00 00       	call   11e60 <malloc@plt>
    c6e2:	83 c4 10             	add    $0x10,%esp
    c6e5:	85 c0                	test   %eax,%eax
    c6e7:	74 2f                	je     c718 <bithenge_new_blob_from_data+0x68>
    c6e9:	8b 55 08             	mov    0x8(%ebp),%edx
    c6ec:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    c6f2:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    c6f9:	c7 40 08 58 18 01 00 	movl   $0x11858,0x8(%eax)
    c700:	89 58 10             	mov    %ebx,0x10(%eax)
    c703:	89 70 14             	mov    %esi,0x14(%eax)
    c706:	c6 40 18 01          	movb   $0x1,0x18(%eax)
    c70a:	89 02                	mov    %eax,(%edx)
    c70c:	31 c0                	xor    %eax,%eax
    c70e:	8d 65 f8             	lea    -0x8(%ebp),%esp
    c711:	5b                   	pop    %ebx
    c712:	5e                   	pop    %esi
    c713:	5d                   	pop    %ebp
    c714:	c3                   	ret    
    c715:	8d 76 00             	lea    0x0(%esi),%esi
    c718:	83 ec 0c             	sub    $0xc,%esp
    c71b:	53                   	push   %ebx
    c71c:	e8 cf 59 00 00       	call   120f0 <free@plt>
    c721:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
    c728:	e8 c3 59 00 00       	call   120f0 <free@plt>
    c72d:	83 c4 10             	add    $0x10,%esp
    c730:	8d 65 f8             	lea    -0x8(%ebp),%esp
    c733:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    c738:	5b                   	pop    %ebx
    c739:	5e                   	pop    %esi
    c73a:	5d                   	pop    %ebp
    c73b:	c3                   	ret    
    c73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    c740:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    c745:	eb c7                	jmp    c70e <bithenge_new_blob_from_data+0x5e>
    c747:	89 f6                	mov    %esi,%esi
    c749:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000c750 <bithenge_new_offset_blob>:
    c750:	55                   	push   %ebp
    c751:	89 e5                	mov    %esp,%ebp
    c753:	57                   	push   %edi
    c754:	56                   	push   %esi
    c755:	53                   	push   %ebx
    c756:	83 ec 1c             	sub    $0x1c,%esp
    c759:	8b 45 08             	mov    0x8(%ebp),%eax
    c75c:	8b 55 0c             	mov    0xc(%ebp),%edx
    c75f:	8b 75 10             	mov    0x10(%ebp),%esi
    c762:	8b 7d 14             	mov    0x14(%ebp),%edi
    c765:	85 c0                	test   %eax,%eax
    c767:	0f 84 70 01 00 00    	je     c8dd <bithenge_new_offset_blob+0x18d>
    c76d:	85 d2                	test   %edx,%edx
    c76f:	0f 84 53 01 00 00    	je     c8c8 <bithenge_new_offset_blob+0x178>
    c775:	81 7a 08 48 18 01 00 	cmpl   $0x11848,0x8(%edx)
    c77c:	74 72                	je     c7f0 <bithenge_new_offset_blob+0xa0>
    c77e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
    c782:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
    c789:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    c790:	83 ec 0c             	sub    $0xc,%esp
    c793:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    c796:	6a 28                	push   $0x28
    c798:	e8 c3 56 00 00       	call   11e60 <malloc@plt>
    c79d:	83 c4 10             	add    $0x10,%esp
    c7a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    c7a3:	85 c0                	test   %eax,%eax
    c7a5:	0f 84 9d 00 00 00    	je     c848 <bithenge_new_offset_blob+0xf8>
    c7ab:	8b 4d 08             	mov    0x8(%ebp),%ecx
    c7ae:	89 70 14             	mov    %esi,0x14(%eax)
    c7b1:	89 78 18             	mov    %edi,0x18(%eax)
    c7b4:	8b 75 d8             	mov    -0x28(%ebp),%esi
    c7b7:	8b 7d dc             	mov    -0x24(%ebp),%edi
    c7ba:	8a 5d e3             	mov    -0x1d(%ebp),%bl
    c7bd:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    c7c3:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    c7ca:	c7 40 08 48 18 01 00 	movl   $0x11848,0x8(%eax)
    c7d1:	89 50 10             	mov    %edx,0x10(%eax)
    c7d4:	89 70 1c             	mov    %esi,0x1c(%eax)
    c7d7:	89 78 20             	mov    %edi,0x20(%eax)
    c7da:	88 58 24             	mov    %bl,0x24(%eax)
    c7dd:	89 01                	mov    %eax,(%ecx)
    c7df:	31 c0                	xor    %eax,%eax
    c7e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
    c7e4:	5b                   	pop    %ebx
    c7e5:	5e                   	pop    %esi
    c7e6:	5f                   	pop    %edi
    c7e7:	5d                   	pop    %ebp
    c7e8:	c3                   	ret    
    c7e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    c7f0:	8a 42 24             	mov    0x24(%edx),%al
    c7f3:	88 45 e3             	mov    %al,-0x1d(%ebp)
    c7f6:	84 c0                	test   %al,%al
    c7f8:	75 7e                	jne    c878 <bithenge_new_offset_blob+0x128>
    c7fa:	83 7a 04 01          	cmpl   $0x1,0x4(%edx)
    c7fe:	0f 84 ac 00 00 00    	je     c8b0 <bithenge_new_offset_blob+0x160>
    c804:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
    c80b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    c812:	8b 42 10             	mov    0x10(%edx),%eax
    c815:	85 c0                	test   %eax,%eax
    c817:	0f 84 d5 00 00 00    	je     c8f2 <bithenge_new_offset_blob+0x1a2>
    c81d:	03 72 14             	add    0x14(%edx),%esi
    c820:	8b 48 04             	mov    0x4(%eax),%ecx
    c823:	13 7a 18             	adc    0x18(%edx),%edi
    c826:	83 ec 0c             	sub    $0xc,%esp
    c829:	41                   	inc    %ecx
    c82a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    c82d:	89 48 04             	mov    %ecx,0x4(%eax)
    c830:	52                   	push   %edx
    c831:	e8 ea ed ff ff       	call   b620 <bithenge_node_dec_ref>
    c836:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    c839:	83 c4 10             	add    $0x10,%esp
    c83c:	89 c2                	mov    %eax,%edx
    c83e:	e9 4d ff ff ff       	jmp    c790 <bithenge_new_offset_blob+0x40>
    c843:	90                   	nop
    c844:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    c848:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    c84d:	83 ec 0c             	sub    $0xc,%esp
    c850:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    c853:	52                   	push   %edx
    c854:	e8 c7 ed ff ff       	call   b620 <bithenge_node_dec_ref>
    c859:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
    c860:	e8 8b 58 00 00       	call   120f0 <free@plt>
    c865:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    c868:	83 c4 10             	add    $0x10,%esp
    c86b:	8d 65 f4             	lea    -0xc(%ebp),%esp
    c86e:	5b                   	pop    %ebx
    c86f:	5e                   	pop    %esi
    c870:	5f                   	pop    %edi
    c871:	5d                   	pop    %ebp
    c872:	c3                   	ret    
    c873:	90                   	nop
    c874:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    c878:	8b 5a 20             	mov    0x20(%edx),%ebx
    c87b:	8b 4a 1c             	mov    0x1c(%edx),%ecx
    c87e:	39 df                	cmp    %ebx,%edi
    c880:	77 22                	ja     c8a4 <bithenge_new_offset_blob+0x154>
    c882:	73 1c                	jae    c8a0 <bithenge_new_offset_blob+0x150>
    c884:	83 7a 04 01          	cmpl   $0x1,0x4(%edx)
    c888:	74 26                	je     c8b0 <bithenge_new_offset_blob+0x160>
    c88a:	29 f1                	sub    %esi,%ecx
    c88c:	19 fb                	sbb    %edi,%ebx
    c88e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
    c891:	89 5d dc             	mov    %ebx,-0x24(%ebp)
    c894:	e9 79 ff ff ff       	jmp    c812 <bithenge_new_offset_blob+0xc2>
    c899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    c8a0:	39 ce                	cmp    %ecx,%esi
    c8a2:	76 e0                	jbe    c884 <bithenge_new_offset_blob+0x134>
    c8a4:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    c8a9:	eb a2                	jmp    c84d <bithenge_new_offset_blob+0xfd>
    c8ab:	90                   	nop
    c8ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    c8b0:	01 72 14             	add    %esi,0x14(%edx)
    c8b3:	8b 45 08             	mov    0x8(%ebp),%eax
    c8b6:	11 7a 18             	adc    %edi,0x18(%edx)
    c8b9:	29 72 1c             	sub    %esi,0x1c(%edx)
    c8bc:	19 7a 20             	sbb    %edi,0x20(%edx)
    c8bf:	89 10                	mov    %edx,(%eax)
    c8c1:	31 c0                	xor    %eax,%eax
    c8c3:	e9 19 ff ff ff       	jmp    c7e1 <bithenge_new_offset_blob+0x91>
    c8c8:	56                   	push   %esi
    c8c9:	68 76 01 00 00       	push   $0x176
    c8ce:	68 cc 17 01 00       	push   $0x117cc
    c8d3:	68 1b 18 01 00       	push   $0x1181b
    c8d8:	e8 33 56 00 00       	call   11f10 <assert_abort@plt>
    c8dd:	57                   	push   %edi
    c8de:	68 75 01 00 00       	push   $0x175
    c8e3:	68 cc 17 01 00       	push   $0x117cc
    c8e8:	68 66 17 01 00       	push   $0x11766
    c8ed:	e8 1e 56 00 00       	call   11f10 <assert_abort@plt>
    c8f2:	53                   	push   %ebx
    c8f3:	6a 70                	push   $0x70
    c8f5:	68 50 12 01 00       	push   $0x11250
    c8fa:	68 98 14 01 00       	push   $0x11498
    c8ff:	e8 0c 56 00 00       	call   11f10 <assert_abort@plt>
    c904:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    c90a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0000c910 <bithenge_new_subblob>:
    c910:	55                   	push   %ebp
    c911:	89 e5                	mov    %esp,%ebp
    c913:	57                   	push   %edi
    c914:	56                   	push   %esi
    c915:	53                   	push   %ebx
    c916:	83 ec 1c             	sub    $0x1c,%esp
    c919:	8b 45 18             	mov    0x18(%ebp),%eax
    c91c:	8b 55 1c             	mov    0x1c(%ebp),%edx
    c91f:	8b 4d 08             	mov    0x8(%ebp),%ecx
    c922:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    c925:	8b 75 10             	mov    0x10(%ebp),%esi
    c928:	8b 7d 14             	mov    0x14(%ebp),%edi
    c92b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    c92e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    c931:	85 c9                	test   %ecx,%ecx
    c933:	0f 84 3c 01 00 00    	je     ca75 <bithenge_new_subblob+0x165>
    c939:	85 db                	test   %ebx,%ebx
    c93b:	0f 84 1f 01 00 00    	je     ca60 <bithenge_new_subblob+0x150>
    c941:	81 7b 08 48 18 01 00 	cmpl   $0x11848,0x8(%ebx)
    c948:	74 56                	je     c9a0 <bithenge_new_subblob+0x90>
    c94a:	83 ec 0c             	sub    $0xc,%esp
    c94d:	6a 28                	push   $0x28
    c94f:	e8 0c 55 00 00       	call   11e60 <malloc@plt>
    c954:	83 c4 10             	add    $0x10,%esp
    c957:	85 c0                	test   %eax,%eax
    c959:	0f 84 99 00 00 00    	je     c9f8 <bithenge_new_subblob+0xe8>
    c95f:	89 78 18             	mov    %edi,0x18(%eax)
    c962:	8b 7d 08             	mov    0x8(%ebp),%edi
    c965:	89 58 10             	mov    %ebx,0x10(%eax)
    c968:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    c96b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    c96e:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    c974:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    c97b:	c7 40 08 48 18 01 00 	movl   $0x11848,0x8(%eax)
    c982:	89 70 14             	mov    %esi,0x14(%eax)
    c985:	89 48 1c             	mov    %ecx,0x1c(%eax)
    c988:	89 58 20             	mov    %ebx,0x20(%eax)
    c98b:	c6 40 24 01          	movb   $0x1,0x24(%eax)
    c98f:	89 07                	mov    %eax,(%edi)
    c991:	31 c0                	xor    %eax,%eax
    c993:	8d 65 f4             	lea    -0xc(%ebp),%esp
    c996:	5b                   	pop    %ebx
    c997:	5e                   	pop    %esi
    c998:	5f                   	pop    %edi
    c999:	5d                   	pop    %ebp
    c99a:	c3                   	ret    
    c99b:	90                   	nop
    c99c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    c9a0:	80 7b 24 00          	cmpb   $0x0,0x24(%ebx)
    c9a4:	74 1a                	je     c9c0 <bithenge_new_subblob+0xb0>
    c9a6:	01 f0                	add    %esi,%eax
    c9a8:	11 fa                	adc    %edi,%edx
    c9aa:	3b 53 20             	cmp    0x20(%ebx),%edx
    c9ad:	0f 87 a6 00 00 00    	ja     ca59 <bithenge_new_subblob+0x149>
    c9b3:	0f 83 97 00 00 00    	jae    ca50 <bithenge_new_subblob+0x140>
    c9b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    c9c0:	83 7b 04 01          	cmpl   $0x1,0x4(%ebx)
    c9c4:	74 62                	je     ca28 <bithenge_new_subblob+0x118>
    c9c6:	03 73 14             	add    0x14(%ebx),%esi
    c9c9:	8b 43 10             	mov    0x10(%ebx),%eax
    c9cc:	13 7b 18             	adc    0x18(%ebx),%edi
    c9cf:	85 c0                	test   %eax,%eax
    c9d1:	0f 84 b3 00 00 00    	je     ca8a <bithenge_new_subblob+0x17a>
    c9d7:	8b 50 04             	mov    0x4(%eax),%edx
    c9da:	83 ec 0c             	sub    $0xc,%esp
    c9dd:	42                   	inc    %edx
    c9de:	89 45 dc             	mov    %eax,-0x24(%ebp)
    c9e1:	89 50 04             	mov    %edx,0x4(%eax)
    c9e4:	53                   	push   %ebx
    c9e5:	e8 36 ec ff ff       	call   b620 <bithenge_node_dec_ref>
    c9ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
    c9ed:	83 c4 10             	add    $0x10,%esp
    c9f0:	89 c3                	mov    %eax,%ebx
    c9f2:	e9 53 ff ff ff       	jmp    c94a <bithenge_new_subblob+0x3a>
    c9f7:	90                   	nop
    c9f8:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    c9fd:	83 ec 0c             	sub    $0xc,%esp
    ca00:	89 45 e0             	mov    %eax,-0x20(%ebp)
    ca03:	53                   	push   %ebx
    ca04:	e8 17 ec ff ff       	call   b620 <bithenge_node_dec_ref>
    ca09:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
    ca10:	e8 db 56 00 00       	call   120f0 <free@plt>
    ca15:	8b 45 e0             	mov    -0x20(%ebp),%eax
    ca18:	83 c4 10             	add    $0x10,%esp
    ca1b:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ca1e:	5b                   	pop    %ebx
    ca1f:	5e                   	pop    %esi
    ca20:	5f                   	pop    %edi
    ca21:	5d                   	pop    %ebp
    ca22:	c3                   	ret    
    ca23:	90                   	nop
    ca24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    ca28:	01 73 14             	add    %esi,0x14(%ebx)
    ca2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
    ca2e:	89 43 1c             	mov    %eax,0x1c(%ebx)
    ca31:	8b 45 08             	mov    0x8(%ebp),%eax
    ca34:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    ca37:	c6 43 24 01          	movb   $0x1,0x24(%ebx)
    ca3b:	11 7b 18             	adc    %edi,0x18(%ebx)
    ca3e:	89 53 20             	mov    %edx,0x20(%ebx)
    ca41:	89 18                	mov    %ebx,(%eax)
    ca43:	31 c0                	xor    %eax,%eax
    ca45:	e9 49 ff ff ff       	jmp    c993 <bithenge_new_subblob+0x83>
    ca4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    ca50:	3b 43 1c             	cmp    0x1c(%ebx),%eax
    ca53:	0f 86 67 ff ff ff    	jbe    c9c0 <bithenge_new_subblob+0xb0>
    ca59:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    ca5e:	eb 9d                	jmp    c9fd <bithenge_new_subblob+0xed>
    ca60:	53                   	push   %ebx
    ca61:	68 76 01 00 00       	push   $0x176
    ca66:	68 cc 17 01 00       	push   $0x117cc
    ca6b:	68 1b 18 01 00       	push   $0x1181b
    ca70:	e8 9b 54 00 00       	call   11f10 <assert_abort@plt>
    ca75:	56                   	push   %esi
    ca76:	68 75 01 00 00       	push   $0x175
    ca7b:	68 cc 17 01 00       	push   $0x117cc
    ca80:	68 66 17 01 00       	push   $0x11766
    ca85:	e8 86 54 00 00       	call   11f10 <assert_abort@plt>
    ca8a:	51                   	push   %ecx
    ca8b:	6a 70                	push   $0x70
    ca8d:	68 50 12 01 00       	push   $0x11250
    ca92:	68 98 14 01 00       	push   $0x11498
    ca97:	e8 74 54 00 00       	call   11f10 <assert_abort@plt>
    ca9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000caa0 <bithenge_blob_equal>:
    caa0:	55                   	push   %ebp
    caa1:	89 e5                	mov    %esp,%ebp
    caa3:	57                   	push   %edi
    caa4:	56                   	push   %esi
    caa5:	53                   	push   %ebx
    caa6:	81 ec 1c 20 00 00    	sub    $0x201c,%esp
    caac:	8b 75 0c             	mov    0xc(%ebp),%esi
    caaf:	85 f6                	test   %esi,%esi
    cab1:	0f 84 aa 01 00 00    	je     cc61 <bithenge_blob_equal+0x1c1>
    cab7:	8b 45 0c             	mov    0xc(%ebp),%eax
    caba:	8b 40 08             	mov    0x8(%eax),%eax
    cabd:	85 c0                	test   %eax,%eax
    cabf:	0f 84 b1 01 00 00    	je     cc76 <bithenge_blob_equal+0x1d6>
    cac5:	8b 55 10             	mov    0x10(%ebp),%edx
    cac8:	85 d2                	test   %edx,%edx
    caca:	0f 84 7c 01 00 00    	je     cc4c <bithenge_blob_equal+0x1ac>
    cad0:	8b 7d 10             	mov    0x10(%ebp),%edi
    cad3:	8b 7f 08             	mov    0x8(%edi),%edi
    cad6:	85 ff                	test   %edi,%edi
    cad8:	0f 84 59 01 00 00    	je     cc37 <bithenge_blob_equal+0x197>
    cade:	c7 85 d8 df ff ff 00 	movl   $0x1000,-0x2028(%ebp)
    cae5:	10 00 00 
    cae8:	c7 85 dc df ff ff 00 	movl   $0x0,-0x2024(%ebp)
    caef:	00 00 00 
    caf2:	c7 85 e0 df ff ff 00 	movl   $0x1000,-0x2020(%ebp)
    caf9:	10 00 00 
    cafc:	c7 85 e4 df ff ff 00 	movl   $0x0,-0x201c(%ebp)
    cb03:	00 00 00 
    cb06:	31 f6                	xor    %esi,%esi
    cb08:	31 ff                	xor    %edi,%edi
    cb0a:	e9 9b 00 00 00       	jmp    cbaa <bithenge_blob_equal+0x10a>
    cb0f:	90                   	nop
    cb10:	8b 45 10             	mov    0x10(%ebp),%eax
    cb13:	8b 40 08             	mov    0x8(%eax),%eax
    cb16:	85 c0                	test   %eax,%eax
    cb18:	0f 84 04 01 00 00    	je     cc22 <bithenge_blob_equal+0x182>
    cb1e:	8b 40 04             	mov    0x4(%eax),%eax
    cb21:	85 c0                	test   %eax,%eax
    cb23:	0f 84 d7 00 00 00    	je     cc00 <bithenge_blob_equal+0x160>
    cb29:	83 ec 0c             	sub    $0xc,%esp
    cb2c:	8d 95 e0 df ff ff    	lea    -0x2020(%ebp),%edx
    cb32:	8d 8d e8 ef ff ff    	lea    -0x1018(%ebp),%ecx
    cb38:	52                   	push   %edx
    cb39:	8b 55 10             	mov    0x10(%ebp),%edx
    cb3c:	51                   	push   %ecx
    cb3d:	57                   	push   %edi
    cb3e:	56                   	push   %esi
    cb3f:	52                   	push   %edx
    cb40:	ff d0                	call   *%eax
    cb42:	83 c4 20             	add    $0x20,%esp
    cb45:	89 c3                	mov    %eax,%ebx
    cb47:	85 c0                	test   %eax,%eax
    cb49:	0f 85 88 00 00 00    	jne    cbd7 <bithenge_blob_equal+0x137>
    cb4f:	8b 85 dc df ff ff    	mov    -0x2024(%ebp),%eax
    cb55:	8b 8d d8 df ff ff    	mov    -0x2028(%ebp),%ecx
    cb5b:	8b 95 e0 df ff ff    	mov    -0x2020(%ebp),%edx
    cb61:	33 85 e4 df ff ff    	xor    -0x201c(%ebp),%eax
    cb67:	31 ca                	xor    %ecx,%edx
    cb69:	09 d0                	or     %edx,%eax
    cb6b:	75 7b                	jne    cbe8 <bithenge_blob_equal+0x148>
    cb6d:	50                   	push   %eax
    cb6e:	8d 85 e8 ef ff ff    	lea    -0x1018(%ebp),%eax
    cb74:	51                   	push   %ecx
    cb75:	50                   	push   %eax
    cb76:	8d 85 e8 df ff ff    	lea    -0x2018(%ebp),%eax
    cb7c:	50                   	push   %eax
    cb7d:	e8 2e 54 00 00       	call   11fb0 <memcmp@plt>
    cb82:	83 c4 10             	add    $0x10,%esp
    cb85:	85 c0                	test   %eax,%eax
    cb87:	75 5f                	jne    cbe8 <bithenge_blob_equal+0x148>
    cb89:	8b 85 d8 df ff ff    	mov    -0x2028(%ebp),%eax
    cb8f:	8b 95 dc df ff ff    	mov    -0x2024(%ebp),%edx
    cb95:	01 c6                	add    %eax,%esi
    cb97:	11 d7                	adc    %edx,%edi
    cb99:	80 f4 10             	xor    $0x10,%ah
    cb9c:	09 c2                	or     %eax,%edx
    cb9e:	75 70                	jne    cc10 <bithenge_blob_equal+0x170>
    cba0:	8b 45 0c             	mov    0xc(%ebp),%eax
    cba3:	8b 40 08             	mov    0x8(%eax),%eax
    cba6:	85 c0                	test   %eax,%eax
    cba8:	74 78                	je     cc22 <bithenge_blob_equal+0x182>
    cbaa:	8b 40 04             	mov    0x4(%eax),%eax
    cbad:	85 c0                	test   %eax,%eax
    cbaf:	74 4f                	je     cc00 <bithenge_blob_equal+0x160>
    cbb1:	83 ec 0c             	sub    $0xc,%esp
    cbb4:	8d 8d d8 df ff ff    	lea    -0x2028(%ebp),%ecx
    cbba:	8d 9d e8 df ff ff    	lea    -0x2018(%ebp),%ebx
    cbc0:	51                   	push   %ecx
    cbc1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    cbc4:	53                   	push   %ebx
    cbc5:	57                   	push   %edi
    cbc6:	56                   	push   %esi
    cbc7:	51                   	push   %ecx
    cbc8:	ff d0                	call   *%eax
    cbca:	83 c4 20             	add    $0x20,%esp
    cbcd:	89 c3                	mov    %eax,%ebx
    cbcf:	85 c0                	test   %eax,%eax
    cbd1:	0f 84 39 ff ff ff    	je     cb10 <bithenge_blob_equal+0x70>
    cbd7:	8d 65 f4             	lea    -0xc(%ebp),%esp
    cbda:	89 df                	mov    %ebx,%edi
    cbdc:	89 f8                	mov    %edi,%eax
    cbde:	5b                   	pop    %ebx
    cbdf:	5e                   	pop    %esi
    cbe0:	5f                   	pop    %edi
    cbe1:	5d                   	pop    %ebp
    cbe2:	c3                   	ret    
    cbe3:	90                   	nop
    cbe4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    cbe8:	8b 45 08             	mov    0x8(%ebp),%eax
    cbeb:	89 df                	mov    %ebx,%edi
    cbed:	c6 00 00             	movb   $0x0,(%eax)
    cbf0:	8d 65 f4             	lea    -0xc(%ebp),%esp
    cbf3:	89 f8                	mov    %edi,%eax
    cbf5:	5b                   	pop    %ebx
    cbf6:	5e                   	pop    %esi
    cbf7:	5f                   	pop    %edi
    cbf8:	5d                   	pop    %ebp
    cbf9:	c3                   	ret    
    cbfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    cc00:	8d 65 f4             	lea    -0xc(%ebp),%esp
    cc03:	bf f2 ff ff ff       	mov    $0xfffffff2,%edi
    cc08:	89 f8                	mov    %edi,%eax
    cc0a:	5b                   	pop    %ebx
    cc0b:	5e                   	pop    %esi
    cc0c:	5f                   	pop    %edi
    cc0d:	5d                   	pop    %ebp
    cc0e:	c3                   	ret    
    cc0f:	90                   	nop
    cc10:	8b 45 08             	mov    0x8(%ebp),%eax
    cc13:	89 df                	mov    %ebx,%edi
    cc15:	c6 00 01             	movb   $0x1,(%eax)
    cc18:	8d 65 f4             	lea    -0xc(%ebp),%esp
    cc1b:	89 f8                	mov    %edi,%eax
    cc1d:	5b                   	pop    %ebx
    cc1e:	5e                   	pop    %esi
    cc1f:	5f                   	pop    %edi
    cc20:	5d                   	pop    %ebp
    cc21:	c3                   	ret    
    cc22:	53                   	push   %ebx
    cc23:	68 97 00 00 00       	push   $0x97
    cc28:	68 05 12 01 00       	push   $0x11205
    cc2d:	68 1d 12 01 00       	push   $0x1121d
    cc32:	e8 d9 52 00 00       	call   11f10 <assert_abort@plt>
    cc37:	56                   	push   %esi
    cc38:	68 d4 01 00 00       	push   $0x1d4
    cc3d:	68 cc 17 01 00       	push   $0x117cc
    cc42:	68 35 18 01 00       	push   $0x11835
    cc47:	e8 c4 52 00 00       	call   11f10 <assert_abort@plt>
    cc4c:	50                   	push   %eax
    cc4d:	68 d3 01 00 00       	push   $0x1d3
    cc52:	68 cc 17 01 00       	push   $0x117cc
    cc57:	68 da 17 01 00       	push   $0x117da
    cc5c:	e8 af 52 00 00       	call   11f10 <assert_abort@plt>
    cc61:	53                   	push   %ebx
    cc62:	68 d1 01 00 00       	push   $0x1d1
    cc67:	68 cc 17 01 00       	push   $0x117cc
    cc6c:	68 22 18 01 00       	push   $0x11822
    cc71:	e8 9a 52 00 00       	call   11f10 <assert_abort@plt>
    cc76:	51                   	push   %ecx
    cc77:	68 d2 01 00 00       	push   $0x1d2
    cc7c:	68 cc 17 01 00       	push   $0x117cc
    cc81:	68 24 18 01 00       	push   $0x11824
    cc86:	e8 85 52 00 00       	call   11f10 <assert_abort@plt>

0000cc8b <bithenge_blob_read.part.1>:
    cc8b:	55                   	push   %ebp
    cc8c:	89 e5                	mov    %esp,%ebp
    cc8e:	83 ec 0c             	sub    $0xc,%esp
    cc91:	68 96 00 00 00       	push   $0x96
    cc96:	68 05 12 01 00       	push   $0x11205
    cc9b:	68 35 13 01 00       	push   $0x11335
    cca0:	e8 6b 52 00 00       	call   11f10 <assert_abort@plt>
    cca5:	66 90                	xchg   %ax,%ax
    cca7:	66 90                	xchg   %ax,%ax
    cca9:	66 90                	xchg   %ax,%ax
    ccab:	66 90                	xchg   %ax,%ax
    ccad:	66 90                	xchg   %ax,%ax
    ccaf:	90                   	nop

0000ccb0 <compose_prefix_length>:
    ccb0:	55                   	push   %ebp
    ccb1:	89 e5                	mov    %esp,%ebp
    ccb3:	8b 45 08             	mov    0x8(%ebp),%eax
    ccb6:	8b 50 10             	mov    0x10(%eax),%edx
    ccb9:	8b 40 0c             	mov    0xc(%eax),%eax
    ccbc:	8b 44 90 fc          	mov    -0x4(%eax,%edx,4),%eax
    ccc0:	89 45 08             	mov    %eax,0x8(%ebp)
    ccc3:	5d                   	pop    %ebp
    ccc4:	e9 07 de ff ff       	jmp    aad0 <bithenge_transform_prefix_length>
    ccc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000ccd0 <partial_transform_apply>:
    ccd0:	55                   	push   %ebp
    ccd1:	89 e5                	mov    %esp,%ebp
    ccd3:	83 ec 08             	sub    $0x8,%esp
    ccd6:	8b 45 10             	mov    0x10(%ebp),%eax
    ccd9:	83 38 05             	cmpl   $0x5,(%eax)
    ccdc:	75 22                	jne    cd00 <partial_transform_apply+0x30>
    ccde:	83 ec 0c             	sub    $0xc,%esp
    cce1:	8b 55 14             	mov    0x14(%ebp),%edx
    cce4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    cce7:	6a 00                	push   $0x0
    cce9:	52                   	push   %edx
    ccea:	50                   	push   %eax
    cceb:	8b 45 08             	mov    0x8(%ebp),%eax
    ccee:	51                   	push   %ecx
    ccef:	8b 40 0c             	mov    0xc(%eax),%eax
    ccf2:	50                   	push   %eax
    ccf3:	e8 d8 d4 ff ff       	call   a1d0 <bithenge_transform_prefix_apply>
    ccf8:	83 c4 20             	add    $0x20,%esp
    ccfb:	c9                   	leave  
    ccfc:	c3                   	ret    
    ccfd:	8d 76 00             	lea    0x0(%esi),%esi
    cd00:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    cd05:	c9                   	leave  
    cd06:	c3                   	ret    
    cd07:	89 f6                	mov    %esi,%esi
    cd09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000cd10 <compose_apply>:
    cd10:	55                   	push   %ebp
    cd11:	89 e5                	mov    %esp,%ebp
    cd13:	57                   	push   %edi
    cd14:	56                   	push   %esi
    cd15:	53                   	push   %ebx
    cd16:	83 ec 2c             	sub    $0x2c,%esp
    cd19:	8b 5d 10             	mov    0x10(%ebp),%ebx
    cd1c:	8b 75 08             	mov    0x8(%ebp),%esi
    cd1f:	85 db                	test   %ebx,%ebx
    cd21:	74 74                	je     cd97 <compose_apply+0x87>
    cd23:	8b 46 10             	mov    0x10(%esi),%eax
    cd26:	8b 7b 04             	mov    0x4(%ebx),%edi
    cd29:	47                   	inc    %edi
    cd2a:	85 c0                	test   %eax,%eax
    cd2c:	8d 50 ff             	lea    -0x1(%eax),%edx
    cd2f:	89 7b 04             	mov    %edi,0x4(%ebx)
    cd32:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    cd35:	74 51                	je     cd88 <compose_apply+0x78>
    cd37:	8d 3c 85 fc ff ff ff 	lea    -0x4(,%eax,4),%edi
    cd3e:	eb 13                	jmp    cd53 <compose_apply+0x43>
    cd40:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    cd43:	83 ef 04             	sub    $0x4,%edi
    cd46:	48                   	dec    %eax
    cd47:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    cd4a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    cd4d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    cd50:	40                   	inc    %eax
    cd51:	74 35                	je     cd88 <compose_apply+0x78>
    cd53:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    cd56:	8b 55 0c             	mov    0xc(%ebp),%edx
    cd59:	50                   	push   %eax
    cd5a:	8b 46 0c             	mov    0xc(%esi),%eax
    cd5d:	53                   	push   %ebx
    cd5e:	52                   	push   %edx
    cd5f:	8b 0c 38             	mov    (%eax,%edi,1),%ecx
    cd62:	51                   	push   %ecx
    cd63:	e8 88 d7 ff ff       	call   a4f0 <bithenge_transform_apply>
    cd68:	89 1c 24             	mov    %ebx,(%esp)
    cd6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
    cd6e:	e8 ad e8 ff ff       	call   b620 <bithenge_node_dec_ref>
    cd73:	8b 45 d0             	mov    -0x30(%ebp),%eax
    cd76:	83 c4 10             	add    $0x10,%esp
    cd79:	85 c0                	test   %eax,%eax
    cd7b:	74 c3                	je     cd40 <compose_apply+0x30>
    cd7d:	8d 65 f4             	lea    -0xc(%ebp),%esp
    cd80:	5b                   	pop    %ebx
    cd81:	5e                   	pop    %esi
    cd82:	5f                   	pop    %edi
    cd83:	5d                   	pop    %ebp
    cd84:	c3                   	ret    
    cd85:	8d 76 00             	lea    0x0(%esi),%esi
    cd88:	8b 45 14             	mov    0x14(%ebp),%eax
    cd8b:	89 18                	mov    %ebx,(%eax)
    cd8d:	8d 65 f4             	lea    -0xc(%ebp),%esp
    cd90:	31 c0                	xor    %eax,%eax
    cd92:	5b                   	pop    %ebx
    cd93:	5e                   	pop    %esi
    cd94:	5f                   	pop    %edi
    cd95:	5d                   	pop    %ebp
    cd96:	c3                   	ret    
    cd97:	50                   	push   %eax
    cd98:	6a 70                	push   $0x70
    cd9a:	68 50 12 01 00       	push   $0x11250
    cd9f:	68 98 14 01 00       	push   $0x11498
    cda4:	e8 67 51 00 00       	call   11f10 <assert_abort@plt>
    cda9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000cdb0 <if_transform_prefix_length>:
    cdb0:	55                   	push   %ebp
    cdb1:	89 e5                	mov    %esp,%ebp
    cdb3:	57                   	push   %edi
    cdb4:	56                   	push   %esi
    cdb5:	53                   	push   %ebx
    cdb6:	83 ec 1c             	sub    $0x1c,%esp
    cdb9:	8b 75 08             	mov    0x8(%ebp),%esi
    cdbc:	8b 7d 0c             	mov    0xc(%ebp),%edi
    cdbf:	8b 46 0c             	mov    0xc(%esi),%eax
    cdc2:	85 c0                	test   %eax,%eax
    cdc4:	74 6d                	je     ce33 <if_transform_prefix_length+0x83>
    cdc6:	8b 10                	mov    (%eax),%edx
    cdc8:	85 d2                	test   %edx,%edx
    cdca:	74 79                	je     ce45 <if_transform_prefix_length+0x95>
    cdcc:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
    cdcf:	53                   	push   %ebx
    cdd0:	51                   	push   %ecx
    cdd1:	57                   	push   %edi
    cdd2:	50                   	push   %eax
    cdd3:	ff 12                	call   *(%edx)
    cdd5:	83 c4 10             	add    $0x10,%esp
    cdd8:	85 c0                	test   %eax,%eax
    cdda:	75 30                	jne    ce0c <if_transform_prefix_length+0x5c>
    cddc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    cddf:	83 38 02             	cmpl   $0x2,(%eax)
    cde2:	75 3c                	jne    ce20 <if_transform_prefix_length+0x70>
    cde4:	83 ec 0c             	sub    $0xc,%esp
    cde7:	8a 58 08             	mov    0x8(%eax),%bl
    cdea:	50                   	push   %eax
    cdeb:	e8 30 e8 ff ff       	call   b620 <bithenge_node_dec_ref>
    cdf0:	83 c4 10             	add    $0x10,%esp
    cdf3:	84 db                	test   %bl,%bl
    cdf5:	75 21                	jne    ce18 <if_transform_prefix_length+0x68>
    cdf7:	8b 46 14             	mov    0x14(%esi),%eax
    cdfa:	8b 55 14             	mov    0x14(%ebp),%edx
    cdfd:	8b 4d 10             	mov    0x10(%ebp),%ecx
    ce00:	52                   	push   %edx
    ce01:	51                   	push   %ecx
    ce02:	57                   	push   %edi
    ce03:	50                   	push   %eax
    ce04:	e8 c7 dc ff ff       	call   aad0 <bithenge_transform_prefix_length>
    ce09:	83 c4 10             	add    $0x10,%esp
    ce0c:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ce0f:	5b                   	pop    %ebx
    ce10:	5e                   	pop    %esi
    ce11:	5f                   	pop    %edi
    ce12:	5d                   	pop    %ebp
    ce13:	c3                   	ret    
    ce14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    ce18:	8b 46 10             	mov    0x10(%esi),%eax
    ce1b:	eb dd                	jmp    cdfa <if_transform_prefix_length+0x4a>
    ce1d:	8d 76 00             	lea    0x0(%esi),%esi
    ce20:	83 ec 0c             	sub    $0xc,%esp
    ce23:	50                   	push   %eax
    ce24:	e8 f7 e7 ff ff       	call   b620 <bithenge_node_dec_ref>
    ce29:	83 c4 10             	add    $0x10,%esp
    ce2c:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    ce31:	eb d9                	jmp    ce0c <if_transform_prefix_length+0x5c>
    ce33:	57                   	push   %edi
    ce34:	6a 5a                	push   $0x5a
    ce36:	68 a3 13 01 00       	push   $0x113a3
    ce3b:	68 35 13 01 00       	push   $0x11335
    ce40:	e8 cb 50 00 00       	call   11f10 <assert_abort@plt>
    ce45:	56                   	push   %esi
    ce46:	6a 5b                	push   $0x5b
    ce48:	68 a3 13 01 00       	push   $0x113a3
    ce4d:	68 61 11 01 00       	push   $0x11161
    ce52:	e8 b9 50 00 00       	call   11f10 <assert_abort@plt>
    ce57:	89 f6                	mov    %esi,%esi
    ce59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000ce60 <if_transform_apply>:
    ce60:	55                   	push   %ebp
    ce61:	89 e5                	mov    %esp,%ebp
    ce63:	57                   	push   %edi
    ce64:	56                   	push   %esi
    ce65:	53                   	push   %ebx
    ce66:	83 ec 1c             	sub    $0x1c,%esp
    ce69:	8b 75 08             	mov    0x8(%ebp),%esi
    ce6c:	8b 7d 0c             	mov    0xc(%ebp),%edi
    ce6f:	8b 46 0c             	mov    0xc(%esi),%eax
    ce72:	85 c0                	test   %eax,%eax
    ce74:	74 6d                	je     cee3 <if_transform_apply+0x83>
    ce76:	8b 10                	mov    (%eax),%edx
    ce78:	85 d2                	test   %edx,%edx
    ce7a:	74 79                	je     cef5 <if_transform_apply+0x95>
    ce7c:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
    ce7f:	53                   	push   %ebx
    ce80:	51                   	push   %ecx
    ce81:	57                   	push   %edi
    ce82:	50                   	push   %eax
    ce83:	ff 12                	call   *(%edx)
    ce85:	83 c4 10             	add    $0x10,%esp
    ce88:	85 c0                	test   %eax,%eax
    ce8a:	75 30                	jne    cebc <if_transform_apply+0x5c>
    ce8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    ce8f:	83 38 02             	cmpl   $0x2,(%eax)
    ce92:	75 3c                	jne    ced0 <if_transform_apply+0x70>
    ce94:	83 ec 0c             	sub    $0xc,%esp
    ce97:	8a 58 08             	mov    0x8(%eax),%bl
    ce9a:	50                   	push   %eax
    ce9b:	e8 80 e7 ff ff       	call   b620 <bithenge_node_dec_ref>
    cea0:	83 c4 10             	add    $0x10,%esp
    cea3:	84 db                	test   %bl,%bl
    cea5:	75 21                	jne    cec8 <if_transform_apply+0x68>
    cea7:	8b 46 14             	mov    0x14(%esi),%eax
    ceaa:	8b 55 14             	mov    0x14(%ebp),%edx
    cead:	8b 4d 10             	mov    0x10(%ebp),%ecx
    ceb0:	52                   	push   %edx
    ceb1:	51                   	push   %ecx
    ceb2:	57                   	push   %edi
    ceb3:	50                   	push   %eax
    ceb4:	e8 37 d6 ff ff       	call   a4f0 <bithenge_transform_apply>
    ceb9:	83 c4 10             	add    $0x10,%esp
    cebc:	8d 65 f4             	lea    -0xc(%ebp),%esp
    cebf:	5b                   	pop    %ebx
    cec0:	5e                   	pop    %esi
    cec1:	5f                   	pop    %edi
    cec2:	5d                   	pop    %ebp
    cec3:	c3                   	ret    
    cec4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    cec8:	8b 46 10             	mov    0x10(%esi),%eax
    cecb:	eb dd                	jmp    ceaa <if_transform_apply+0x4a>
    cecd:	8d 76 00             	lea    0x0(%esi),%esi
    ced0:	83 ec 0c             	sub    $0xc,%esp
    ced3:	50                   	push   %eax
    ced4:	e8 47 e7 ff ff       	call   b620 <bithenge_node_dec_ref>
    ced9:	83 c4 10             	add    $0x10,%esp
    cedc:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    cee1:	eb d9                	jmp    cebc <if_transform_apply+0x5c>
    cee3:	57                   	push   %edi
    cee4:	6a 5a                	push   $0x5a
    cee6:	68 a3 13 01 00       	push   $0x113a3
    ceeb:	68 35 13 01 00       	push   $0x11335
    cef0:	e8 1b 50 00 00       	call   11f10 <assert_abort@plt>
    cef5:	56                   	push   %esi
    cef6:	6a 5b                	push   $0x5b
    cef8:	68 a3 13 01 00       	push   $0x113a3
    cefd:	68 61 11 01 00       	push   $0x11161
    cf02:	e8 09 50 00 00       	call   11f10 <assert_abort@plt>
    cf07:	89 f6                	mov    %esi,%esi
    cf09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000cf10 <compose_destroy>:
    cf10:	55                   	push   %ebp
    cf11:	89 e5                	mov    %esp,%ebp
    cf13:	57                   	push   %edi
    cf14:	56                   	push   %esi
    cf15:	53                   	push   %ebx
    cf16:	83 ec 1c             	sub    $0x1c,%esp
    cf19:	8b 7d 08             	mov    0x8(%ebp),%edi
    cf1c:	8b 47 10             	mov    0x10(%edi),%eax
    cf1f:	8b 77 0c             	mov    0xc(%edi),%esi
    cf22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    cf25:	85 c0                	test   %eax,%eax
    cf27:	74 3c                	je     cf65 <compose_destroy+0x55>
    cf29:	31 db                	xor    %ebx,%ebx
    cf2b:	90                   	nop
    cf2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    cf30:	8b 14 9e             	mov    (%esi,%ebx,4),%edx
    cf33:	85 d2                	test   %edx,%edx
    cf35:	74 28                	je     cf5f <compose_destroy+0x4f>
    cf37:	8b 0a                	mov    (%edx),%ecx
    cf39:	85 c9                	test   %ecx,%ecx
    cf3b:	74 43                	je     cf80 <compose_destroy+0x70>
    cf3d:	8b 42 04             	mov    0x4(%edx),%eax
    cf40:	85 c0                	test   %eax,%eax
    cf42:	74 4e                	je     cf92 <compose_destroy+0x82>
    cf44:	48                   	dec    %eax
    cf45:	89 42 04             	mov    %eax,0x4(%edx)
    cf48:	85 c0                	test   %eax,%eax
    cf4a:	75 13                	jne    cf5f <compose_destroy+0x4f>
    cf4c:	83 ec 0c             	sub    $0xc,%esp
    cf4f:	52                   	push   %edx
    cf50:	ff 51 0c             	call   *0xc(%ecx)
    cf53:	8b 47 10             	mov    0x10(%edi),%eax
    cf56:	8b 77 0c             	mov    0xc(%edi),%esi
    cf59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    cf5c:	83 c4 10             	add    $0x10,%esp
    cf5f:	43                   	inc    %ebx
    cf60:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
    cf63:	72 cb                	jb     cf30 <compose_destroy+0x20>
    cf65:	83 ec 0c             	sub    $0xc,%esp
    cf68:	56                   	push   %esi
    cf69:	e8 82 51 00 00       	call   120f0 <free@plt>
    cf6e:	89 7d 08             	mov    %edi,0x8(%ebp)
    cf71:	83 c4 10             	add    $0x10,%esp
    cf74:	8d 65 f4             	lea    -0xc(%ebp),%esp
    cf77:	5b                   	pop    %ebx
    cf78:	5e                   	pop    %esi
    cf79:	5f                   	pop    %edi
    cf7a:	5d                   	pop    %ebp
    cf7b:	e9 70 51 00 00       	jmp    120f0 <free@plt>
    cf80:	52                   	push   %edx
    cf81:	6a 74                	push   $0x74
    cf83:	68 18 13 01 00       	push   $0x11318
    cf88:	68 61 11 01 00       	push   $0x11161
    cf8d:	e8 7e 4f 00 00       	call   11f10 <assert_abort@plt>
    cf92:	50                   	push   %eax
    cf93:	6a 75                	push   $0x75
    cf95:	68 18 13 01 00       	push   $0x11318
    cf9a:	68 6b 11 01 00       	push   $0x1116b
    cf9f:	e8 6c 4f 00 00       	call   11f10 <assert_abort@plt>
    cfa4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    cfaa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0000cfb0 <partial_transform_destroy>:
    cfb0:	55                   	push   %ebp
    cfb1:	89 e5                	mov    %esp,%ebp
    cfb3:	53                   	push   %ebx
    cfb4:	51                   	push   %ecx
    cfb5:	8b 5d 08             	mov    0x8(%ebp),%ebx
    cfb8:	8b 53 0c             	mov    0xc(%ebx),%edx
    cfbb:	85 d2                	test   %edx,%edx
    cfbd:	74 1f                	je     cfde <partial_transform_destroy+0x2e>
    cfbf:	8b 0a                	mov    (%edx),%ecx
    cfc1:	85 c9                	test   %ecx,%ecx
    cfc3:	74 37                	je     cffc <partial_transform_destroy+0x4c>
    cfc5:	8b 42 04             	mov    0x4(%edx),%eax
    cfc8:	85 c0                	test   %eax,%eax
    cfca:	74 1e                	je     cfea <partial_transform_destroy+0x3a>
    cfcc:	48                   	dec    %eax
    cfcd:	89 42 04             	mov    %eax,0x4(%edx)
    cfd0:	85 c0                	test   %eax,%eax
    cfd2:	75 0a                	jne    cfde <partial_transform_destroy+0x2e>
    cfd4:	83 ec 0c             	sub    $0xc,%esp
    cfd7:	52                   	push   %edx
    cfd8:	ff 51 0c             	call   *0xc(%ecx)
    cfdb:	83 c4 10             	add    $0x10,%esp
    cfde:	89 5d 08             	mov    %ebx,0x8(%ebp)
    cfe1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    cfe4:	c9                   	leave  
    cfe5:	e9 06 51 00 00       	jmp    120f0 <free@plt>
    cfea:	50                   	push   %eax
    cfeb:	6a 75                	push   $0x75
    cfed:	68 18 13 01 00       	push   $0x11318
    cff2:	68 6b 11 01 00       	push   $0x1116b
    cff7:	e8 14 4f 00 00       	call   11f10 <assert_abort@plt>
    cffc:	52                   	push   %edx
    cffd:	6a 74                	push   $0x74
    cfff:	68 18 13 01 00       	push   $0x11318
    d004:	68 61 11 01 00       	push   $0x11161
    d009:	e8 02 4f 00 00       	call   11f10 <assert_abort@plt>
    d00e:	66 90                	xchg   %ax,%ax

0000d010 <if_transform_destroy>:
    d010:	55                   	push   %ebp
    d011:	89 e5                	mov    %esp,%ebp
    d013:	53                   	push   %ebx
    d014:	50                   	push   %eax
    d015:	8b 5d 08             	mov    0x8(%ebp),%ebx
    d018:	8b 53 0c             	mov    0xc(%ebx),%edx
    d01b:	85 d2                	test   %edx,%edx
    d01d:	74 27                	je     d046 <if_transform_destroy+0x36>
    d01f:	8b 0a                	mov    (%edx),%ecx
    d021:	85 c9                	test   %ecx,%ecx
    d023:	0f 84 ab 00 00 00    	je     d0d4 <if_transform_destroy+0xc4>
    d029:	8b 42 04             	mov    0x4(%edx),%eax
    d02c:	85 c0                	test   %eax,%eax
    d02e:	0f 84 8e 00 00 00    	je     d0c2 <if_transform_destroy+0xb2>
    d034:	48                   	dec    %eax
    d035:	89 42 04             	mov    %eax,0x4(%edx)
    d038:	85 c0                	test   %eax,%eax
    d03a:	75 0a                	jne    d046 <if_transform_destroy+0x36>
    d03c:	83 ec 0c             	sub    $0xc,%esp
    d03f:	52                   	push   %edx
    d040:	ff 51 04             	call   *0x4(%ecx)
    d043:	83 c4 10             	add    $0x10,%esp
    d046:	8b 53 10             	mov    0x10(%ebx),%edx
    d049:	85 d2                	test   %edx,%edx
    d04b:	74 1f                	je     d06c <if_transform_destroy+0x5c>
    d04d:	8b 0a                	mov    (%edx),%ecx
    d04f:	85 c9                	test   %ecx,%ecx
    d051:	74 5d                	je     d0b0 <if_transform_destroy+0xa0>
    d053:	8b 42 04             	mov    0x4(%edx),%eax
    d056:	85 c0                	test   %eax,%eax
    d058:	74 44                	je     d09e <if_transform_destroy+0x8e>
    d05a:	48                   	dec    %eax
    d05b:	89 42 04             	mov    %eax,0x4(%edx)
    d05e:	85 c0                	test   %eax,%eax
    d060:	75 0a                	jne    d06c <if_transform_destroy+0x5c>
    d062:	83 ec 0c             	sub    $0xc,%esp
    d065:	52                   	push   %edx
    d066:	ff 51 0c             	call   *0xc(%ecx)
    d069:	83 c4 10             	add    $0x10,%esp
    d06c:	8b 53 14             	mov    0x14(%ebx),%edx
    d06f:	85 d2                	test   %edx,%edx
    d071:	74 1f                	je     d092 <if_transform_destroy+0x82>
    d073:	8b 0a                	mov    (%edx),%ecx
    d075:	85 c9                	test   %ecx,%ecx
    d077:	74 37                	je     d0b0 <if_transform_destroy+0xa0>
    d079:	8b 42 04             	mov    0x4(%edx),%eax
    d07c:	85 c0                	test   %eax,%eax
    d07e:	74 1e                	je     d09e <if_transform_destroy+0x8e>
    d080:	48                   	dec    %eax
    d081:	89 42 04             	mov    %eax,0x4(%edx)
    d084:	85 c0                	test   %eax,%eax
    d086:	75 0a                	jne    d092 <if_transform_destroy+0x82>
    d088:	83 ec 0c             	sub    $0xc,%esp
    d08b:	52                   	push   %edx
    d08c:	ff 51 0c             	call   *0xc(%ecx)
    d08f:	83 c4 10             	add    $0x10,%esp
    d092:	89 5d 08             	mov    %ebx,0x8(%ebp)
    d095:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    d098:	c9                   	leave  
    d099:	e9 52 50 00 00       	jmp    120f0 <free@plt>
    d09e:	50                   	push   %eax
    d09f:	6a 75                	push   $0x75
    d0a1:	68 18 13 01 00       	push   $0x11318
    d0a6:	68 6b 11 01 00       	push   $0x1116b
    d0ab:	e8 60 4e 00 00       	call   11f10 <assert_abort@plt>
    d0b0:	52                   	push   %edx
    d0b1:	6a 74                	push   $0x74
    d0b3:	68 18 13 01 00       	push   $0x11318
    d0b8:	68 61 11 01 00       	push   $0x11161
    d0bd:	e8 4e 4e 00 00       	call   11f10 <assert_abort@plt>
    d0c2:	51                   	push   %ecx
    d0c3:	6a 4c                	push   $0x4c
    d0c5:	68 a3 13 01 00       	push   $0x113a3
    d0ca:	68 6b 11 01 00       	push   $0x1116b
    d0cf:	e8 3c 4e 00 00       	call   11f10 <assert_abort@plt>
    d0d4:	53                   	push   %ebx
    d0d5:	6a 4b                	push   $0x4b
    d0d7:	68 a3 13 01 00       	push   $0x113a3
    d0dc:	68 61 11 01 00       	push   $0x11161
    d0e1:	e8 2a 4e 00 00       	call   11f10 <assert_abort@plt>
    d0e6:	8d 76 00             	lea    0x0(%esi),%esi
    d0e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000d0f0 <bithenge_new_composed_transform>:
    d0f0:	55                   	push   %ebp
    d0f1:	89 e5                	mov    %esp,%ebp
    d0f3:	57                   	push   %edi
    d0f4:	56                   	push   %esi
    d0f5:	53                   	push   %ebx
    d0f6:	83 ec 1c             	sub    $0x1c,%esp
    d0f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    d0fc:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
    d100:	0f 84 ca 00 00 00    	je     d1d0 <bithenge_new_composed_transform+0xe0>
    d106:	83 ec 0c             	sub    $0xc,%esp
    d109:	6a 14                	push   $0x14
    d10b:	e8 50 4d 00 00       	call   11e60 <malloc@plt>
    d110:	83 c4 10             	add    $0x10,%esp
    d113:	89 c6                	mov    %eax,%esi
    d115:	85 c0                	test   %eax,%eax
    d117:	0f 84 a3 00 00 00    	je     d1c0 <bithenge_new_composed_transform+0xd0>
    d11d:	57                   	push   %edi
    d11e:	6a 00                	push   $0x0
    d120:	68 98 18 01 00       	push   $0x11898
    d125:	50                   	push   %eax
    d126:	e8 35 d0 ff ff       	call   a160 <bithenge_init_transform>
    d12b:	83 c4 10             	add    $0x10,%esp
    d12e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    d131:	85 c0                	test   %eax,%eax
    d133:	74 6b                	je     d1a0 <bithenge_new_composed_transform+0xb0>
    d135:	8b 4d 10             	mov    0x10(%ebp),%ecx
    d138:	31 ff                	xor    %edi,%edi
    d13a:	85 c9                	test   %ecx,%ecx
    d13c:	74 40                	je     d17e <bithenge_new_composed_transform+0x8e>
    d13e:	89 75 e0             	mov    %esi,-0x20(%ebp)
    d141:	8b 75 10             	mov    0x10(%ebp),%esi
    d144:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    d148:	8b 14 bb             	mov    (%ebx,%edi,4),%edx
    d14b:	85 d2                	test   %edx,%edx
    d14d:	74 27                	je     d176 <bithenge_new_composed_transform+0x86>
    d14f:	8b 0a                	mov    (%edx),%ecx
    d151:	85 c9                	test   %ecx,%ecx
    d153:	0f 84 93 00 00 00    	je     d1ec <bithenge_new_composed_transform+0xfc>
    d159:	8b 42 04             	mov    0x4(%edx),%eax
    d15c:	85 c0                	test   %eax,%eax
    d15e:	0f 84 9a 00 00 00    	je     d1fe <bithenge_new_composed_transform+0x10e>
    d164:	48                   	dec    %eax
    d165:	89 42 04             	mov    %eax,0x4(%edx)
    d168:	85 c0                	test   %eax,%eax
    d16a:	75 0a                	jne    d176 <bithenge_new_composed_transform+0x86>
    d16c:	83 ec 0c             	sub    $0xc,%esp
    d16f:	52                   	push   %edx
    d170:	ff 51 0c             	call   *0xc(%ecx)
    d173:	83 c4 10             	add    $0x10,%esp
    d176:	47                   	inc    %edi
    d177:	39 fe                	cmp    %edi,%esi
    d179:	75 cd                	jne    d148 <bithenge_new_composed_transform+0x58>
    d17b:	8b 75 e0             	mov    -0x20(%ebp),%esi
    d17e:	83 ec 0c             	sub    $0xc,%esp
    d181:	53                   	push   %ebx
    d182:	e8 69 4f 00 00       	call   120f0 <free@plt>
    d187:	89 34 24             	mov    %esi,(%esp)
    d18a:	e8 61 4f 00 00       	call   120f0 <free@plt>
    d18f:	83 c4 10             	add    $0x10,%esp
    d192:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    d195:	8d 65 f4             	lea    -0xc(%ebp),%esp
    d198:	5b                   	pop    %ebx
    d199:	5e                   	pop    %esi
    d19a:	5f                   	pop    %edi
    d19b:	5d                   	pop    %ebp
    d19c:	c3                   	ret    
    d19d:	8d 76 00             	lea    0x0(%esi),%esi
    d1a0:	8b 45 10             	mov    0x10(%ebp),%eax
    d1a3:	89 5e 0c             	mov    %ebx,0xc(%esi)
    d1a6:	89 46 10             	mov    %eax,0x10(%esi)
    d1a9:	8b 45 08             	mov    0x8(%ebp),%eax
    d1ac:	89 30                	mov    %esi,(%eax)
    d1ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    d1b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
    d1b4:	5b                   	pop    %ebx
    d1b5:	5e                   	pop    %esi
    d1b6:	5f                   	pop    %edi
    d1b7:	5d                   	pop    %ebp
    d1b8:	c3                   	ret    
    d1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    d1c0:	c7 45 e4 fe ff ff ff 	movl   $0xfffffffe,-0x1c(%ebp)
    d1c7:	e9 69 ff ff ff       	jmp    d135 <bithenge_new_composed_transform+0x45>
    d1cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    d1d0:	83 ec 0c             	sub    $0xc,%esp
    d1d3:	8b 75 08             	mov    0x8(%ebp),%esi
    d1d6:	8b 03                	mov    (%ebx),%eax
    d1d8:	89 06                	mov    %eax,(%esi)
    d1da:	53                   	push   %ebx
    d1db:	e8 10 4f 00 00       	call   120f0 <free@plt>
    d1e0:	83 c4 10             	add    $0x10,%esp
    d1e3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    d1ea:	eb a6                	jmp    d192 <bithenge_new_composed_transform+0xa2>
    d1ec:	52                   	push   %edx
    d1ed:	6a 74                	push   $0x74
    d1ef:	68 18 13 01 00       	push   $0x11318
    d1f4:	68 61 11 01 00       	push   $0x11161
    d1f9:	e8 12 4d 00 00       	call   11f10 <assert_abort@plt>
    d1fe:	50                   	push   %eax
    d1ff:	6a 75                	push   $0x75
    d201:	68 18 13 01 00       	push   $0x11318
    d206:	68 6b 11 01 00       	push   $0x1116b
    d20b:	e8 00 4d 00 00       	call   11f10 <assert_abort@plt>

0000d210 <bithenge_if_transform>:
    d210:	55                   	push   %ebp
    d211:	89 e5                	mov    %esp,%ebp
    d213:	57                   	push   %edi
    d214:	56                   	push   %esi
    d215:	53                   	push   %ebx
    d216:	83 ec 28             	sub    $0x28,%esp
    d219:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    d21c:	8b 75 10             	mov    0x10(%ebp),%esi
    d21f:	6a 18                	push   $0x18
    d221:	8b 7d 14             	mov    0x14(%ebp),%edi
    d224:	e8 37 4c 00 00       	call   11e60 <malloc@plt>
    d229:	83 c4 10             	add    $0x10,%esp
    d22c:	89 c2                	mov    %eax,%edx
    d22e:	85 c0                	test   %eax,%eax
    d230:	0f 84 02 01 00 00    	je     d338 <bithenge_if_transform+0x128>
    d236:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    d239:	50                   	push   %eax
    d23a:	6a 00                	push   $0x0
    d23c:	68 88 18 01 00       	push   $0x11888
    d241:	52                   	push   %edx
    d242:	e8 19 cf ff ff       	call   a160 <bithenge_init_transform>
    d247:	83 c4 10             	add    $0x10,%esp
    d24a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    d24d:	85 c0                	test   %eax,%eax
    d24f:	0f 84 cb 00 00 00    	je     d320 <bithenge_if_transform+0x110>
    d255:	83 ec 0c             	sub    $0xc,%esp
    d258:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    d25b:	52                   	push   %edx
    d25c:	e8 8f 4e 00 00       	call   120f0 <free@plt>
    d261:	83 c4 10             	add    $0x10,%esp
    d264:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    d267:	85 db                	test   %ebx,%ebx
    d269:	74 1d                	je     d288 <bithenge_if_transform+0x78>
    d26b:	8b 0b                	mov    (%ebx),%ecx
    d26d:	85 c9                	test   %ecx,%ecx
    d26f:	0f 84 03 01 00 00    	je     d378 <bithenge_if_transform+0x168>
    d275:	8b 53 04             	mov    0x4(%ebx),%edx
    d278:	85 d2                	test   %edx,%edx
    d27a:	0f 84 e6 00 00 00    	je     d366 <bithenge_if_transform+0x156>
    d280:	4a                   	dec    %edx
    d281:	89 53 04             	mov    %edx,0x4(%ebx)
    d284:	85 d2                	test   %edx,%edx
    d286:	74 50                	je     d2d8 <bithenge_if_transform+0xc8>
    d288:	85 f6                	test   %esi,%esi
    d28a:	74 1d                	je     d2a9 <bithenge_if_transform+0x99>
    d28c:	8b 0e                	mov    (%esi),%ecx
    d28e:	85 c9                	test   %ecx,%ecx
    d290:	0f 84 ac 00 00 00    	je     d342 <bithenge_if_transform+0x132>
    d296:	8b 56 04             	mov    0x4(%esi),%edx
    d299:	85 d2                	test   %edx,%edx
    d29b:	0f 84 b3 00 00 00    	je     d354 <bithenge_if_transform+0x144>
    d2a1:	4a                   	dec    %edx
    d2a2:	89 56 04             	mov    %edx,0x4(%esi)
    d2a5:	85 d2                	test   %edx,%edx
    d2a7:	74 47                	je     d2f0 <bithenge_if_transform+0xe0>
    d2a9:	85 ff                	test   %edi,%edi
    d2ab:	74 1d                	je     d2ca <bithenge_if_transform+0xba>
    d2ad:	8b 0f                	mov    (%edi),%ecx
    d2af:	85 c9                	test   %ecx,%ecx
    d2b1:	0f 84 8b 00 00 00    	je     d342 <bithenge_if_transform+0x132>
    d2b7:	8b 57 04             	mov    0x4(%edi),%edx
    d2ba:	85 d2                	test   %edx,%edx
    d2bc:	0f 84 92 00 00 00    	je     d354 <bithenge_if_transform+0x144>
    d2c2:	4a                   	dec    %edx
    d2c3:	89 57 04             	mov    %edx,0x4(%edi)
    d2c6:	85 d2                	test   %edx,%edx
    d2c8:	74 3e                	je     d308 <bithenge_if_transform+0xf8>
    d2ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
    d2cd:	5b                   	pop    %ebx
    d2ce:	5e                   	pop    %esi
    d2cf:	5f                   	pop    %edi
    d2d0:	5d                   	pop    %ebp
    d2d1:	c3                   	ret    
    d2d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    d2d8:	83 ec 0c             	sub    $0xc,%esp
    d2db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    d2de:	53                   	push   %ebx
    d2df:	ff 51 04             	call   *0x4(%ecx)
    d2e2:	83 c4 10             	add    $0x10,%esp
    d2e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    d2e8:	eb 9e                	jmp    d288 <bithenge_if_transform+0x78>
    d2ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    d2f0:	83 ec 0c             	sub    $0xc,%esp
    d2f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    d2f6:	56                   	push   %esi
    d2f7:	ff 51 0c             	call   *0xc(%ecx)
    d2fa:	83 c4 10             	add    $0x10,%esp
    d2fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    d300:	eb a7                	jmp    d2a9 <bithenge_if_transform+0x99>
    d302:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    d308:	83 ec 0c             	sub    $0xc,%esp
    d30b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    d30e:	57                   	push   %edi
    d30f:	ff 51 0c             	call   *0xc(%ecx)
    d312:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    d315:	83 c4 10             	add    $0x10,%esp
    d318:	8d 65 f4             	lea    -0xc(%ebp),%esp
    d31b:	5b                   	pop    %ebx
    d31c:	5e                   	pop    %esi
    d31d:	5f                   	pop    %edi
    d31e:	5d                   	pop    %ebp
    d31f:	c3                   	ret    
    d320:	8b 4d 08             	mov    0x8(%ebp),%ecx
    d323:	89 5a 0c             	mov    %ebx,0xc(%edx)
    d326:	89 72 10             	mov    %esi,0x10(%edx)
    d329:	89 7a 14             	mov    %edi,0x14(%edx)
    d32c:	89 11                	mov    %edx,(%ecx)
    d32e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    d331:	5b                   	pop    %ebx
    d332:	5e                   	pop    %esi
    d333:	5f                   	pop    %edi
    d334:	5d                   	pop    %ebp
    d335:	c3                   	ret    
    d336:	66 90                	xchg   %ax,%ax
    d338:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d33d:	e9 13 ff ff ff       	jmp    d255 <bithenge_if_transform+0x45>
    d342:	52                   	push   %edx
    d343:	6a 74                	push   $0x74
    d345:	68 18 13 01 00       	push   $0x11318
    d34a:	68 61 11 01 00       	push   $0x11161
    d34f:	e8 bc 4b 00 00       	call   11f10 <assert_abort@plt>
    d354:	50                   	push   %eax
    d355:	6a 75                	push   $0x75
    d357:	68 18 13 01 00       	push   $0x11318
    d35c:	68 6b 11 01 00       	push   $0x1116b
    d361:	e8 aa 4b 00 00       	call   11f10 <assert_abort@plt>
    d366:	51                   	push   %ecx
    d367:	6a 4c                	push   $0x4c
    d369:	68 a3 13 01 00       	push   $0x113a3
    d36e:	68 6b 11 01 00       	push   $0x1116b
    d373:	e8 98 4b 00 00       	call   11f10 <assert_abort@plt>
    d378:	53                   	push   %ebx
    d379:	6a 4b                	push   $0x4b
    d37b:	68 a3 13 01 00       	push   $0x113a3
    d380:	68 61 11 01 00       	push   $0x11161
    d385:	e8 86 4b 00 00       	call   11f10 <assert_abort@plt>
    d38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0000d390 <bithenge_partial_transform>:
    d390:	55                   	push   %ebp
    d391:	89 e5                	mov    %esp,%ebp
    d393:	56                   	push   %esi
    d394:	53                   	push   %ebx
    d395:	83 ec 1c             	sub    $0x1c,%esp
    d398:	8b 75 0c             	mov    0xc(%ebp),%esi
    d39b:	6a 10                	push   $0x10
    d39d:	e8 be 4a 00 00       	call   11e60 <malloc@plt>
    d3a2:	83 c4 10             	add    $0x10,%esp
    d3a5:	89 c3                	mov    %eax,%ebx
    d3a7:	85 c0                	test   %eax,%eax
    d3a9:	74 75                	je     d420 <bithenge_partial_transform+0x90>
    d3ab:	51                   	push   %ecx
    d3ac:	6a 00                	push   $0x0
    d3ae:	68 78 18 01 00       	push   $0x11878
    d3b3:	50                   	push   %eax
    d3b4:	e8 a7 cd ff ff       	call   a160 <bithenge_init_transform>
    d3b9:	83 c4 10             	add    $0x10,%esp
    d3bc:	85 c0                	test   %eax,%eax
    d3be:	74 50                	je     d410 <bithenge_partial_transform+0x80>
    d3c0:	83 ec 0c             	sub    $0xc,%esp
    d3c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    d3c6:	53                   	push   %ebx
    d3c7:	e8 24 4d 00 00       	call   120f0 <free@plt>
    d3cc:	83 c4 10             	add    $0x10,%esp
    d3cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
    d3d2:	85 f6                	test   %esi,%esi
    d3d4:	74 15                	je     d3eb <bithenge_partial_transform+0x5b>
    d3d6:	8b 0e                	mov    (%esi),%ecx
    d3d8:	85 c9                	test   %ecx,%ecx
    d3da:	74 4b                	je     d427 <bithenge_partial_transform+0x97>
    d3dc:	8b 56 04             	mov    0x4(%esi),%edx
    d3df:	85 d2                	test   %edx,%edx
    d3e1:	74 56                	je     d439 <bithenge_partial_transform+0xa9>
    d3e3:	4a                   	dec    %edx
    d3e4:	89 56 04             	mov    %edx,0x4(%esi)
    d3e7:	85 d2                	test   %edx,%edx
    d3e9:	74 0d                	je     d3f8 <bithenge_partial_transform+0x68>
    d3eb:	8d 65 f8             	lea    -0x8(%ebp),%esp
    d3ee:	5b                   	pop    %ebx
    d3ef:	5e                   	pop    %esi
    d3f0:	5d                   	pop    %ebp
    d3f1:	c3                   	ret    
    d3f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    d3f8:	83 ec 0c             	sub    $0xc,%esp
    d3fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    d3fe:	56                   	push   %esi
    d3ff:	ff 51 0c             	call   *0xc(%ecx)
    d402:	8b 45 f4             	mov    -0xc(%ebp),%eax
    d405:	83 c4 10             	add    $0x10,%esp
    d408:	8d 65 f8             	lea    -0x8(%ebp),%esp
    d40b:	5b                   	pop    %ebx
    d40c:	5e                   	pop    %esi
    d40d:	5d                   	pop    %ebp
    d40e:	c3                   	ret    
    d40f:	90                   	nop
    d410:	8b 55 08             	mov    0x8(%ebp),%edx
    d413:	89 73 0c             	mov    %esi,0xc(%ebx)
    d416:	89 1a                	mov    %ebx,(%edx)
    d418:	8d 65 f8             	lea    -0x8(%ebp),%esp
    d41b:	5b                   	pop    %ebx
    d41c:	5e                   	pop    %esi
    d41d:	5d                   	pop    %ebp
    d41e:	c3                   	ret    
    d41f:	90                   	nop
    d420:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d425:	eb 99                	jmp    d3c0 <bithenge_partial_transform+0x30>
    d427:	52                   	push   %edx
    d428:	6a 74                	push   $0x74
    d42a:	68 18 13 01 00       	push   $0x11318
    d42f:	68 61 11 01 00       	push   $0x11161
    d434:	e8 d7 4a 00 00       	call   11f10 <assert_abort@plt>
    d439:	50                   	push   %eax
    d43a:	6a 75                	push   $0x75
    d43c:	68 18 13 01 00       	push   $0x11318
    d441:	68 6b 11 01 00       	push   $0x1116b
    d446:	e8 c5 4a 00 00       	call   11f10 <assert_abort@plt>
    d44b:	66 90                	xchg   %ax,%ax
    d44d:	66 90                	xchg   %ax,%ax
    d44f:	90                   	nop

0000d450 <inputless_transform_prefix_length>:
    d450:	55                   	push   %ebp
    d451:	89 e5                	mov    %esp,%ebp
    d453:	8b 45 14             	mov    0x14(%ebp),%eax
    d456:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    d45c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    d463:	5d                   	pop    %ebp
    d464:	31 c0                	xor    %eax,%eax
    d466:	c3                   	ret    
    d467:	89 f6                	mov    %esi,%esi
    d469:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000d470 <expression_indestructible>:
    d470:	55                   	push   %ebp
    d471:	89 e5                	mov    %esp,%ebp
    d473:	83 ec 0c             	sub    $0xc,%esp
    d476:	6a 41                	push   $0x41
    d478:	68 a8 18 01 00       	push   $0x118a8
    d47d:	68 48 12 01 00       	push   $0x11248
    d482:	e8 89 4a 00 00       	call   11f10 <assert_abort@plt>
    d487:	89 f6                	mov    %esi,%esi
    d489:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000d490 <param_expression_destroy>:
    d490:	55                   	push   %ebp
    d491:	89 e5                	mov    %esp,%ebp
    d493:	5d                   	pop    %ebp
    d494:	e9 57 4c 00 00       	jmp    120f0 <free@plt>
    d499:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000d4a0 <const_expression_destroy>:
    d4a0:	55                   	push   %ebp
    d4a1:	89 e5                	mov    %esp,%ebp
    d4a3:	53                   	push   %ebx
    d4a4:	83 ec 10             	sub    $0x10,%esp
    d4a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
    d4aa:	8b 43 08             	mov    0x8(%ebx),%eax
    d4ad:	50                   	push   %eax
    d4ae:	e8 6d e1 ff ff       	call   b620 <bithenge_node_dec_ref>
    d4b3:	89 5d 08             	mov    %ebx,0x8(%ebp)
    d4b6:	83 c4 10             	add    $0x10,%esp
    d4b9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    d4bc:	c9                   	leave  
    d4bd:	e9 2e 4c 00 00       	jmp    120f0 <free@plt>
    d4c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    d4c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000d4d0 <scope_member_expression_destroy>:
    d4d0:	55                   	push   %ebp
    d4d1:	89 e5                	mov    %esp,%ebp
    d4d3:	53                   	push   %ebx
    d4d4:	83 ec 10             	sub    $0x10,%esp
    d4d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
    d4da:	8b 43 08             	mov    0x8(%ebx),%eax
    d4dd:	50                   	push   %eax
    d4de:	e8 3d e1 ff ff       	call   b620 <bithenge_node_dec_ref>
    d4e3:	89 5d 08             	mov    %ebx,0x8(%ebp)
    d4e6:	83 c4 10             	add    $0x10,%esp
    d4e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    d4ec:	c9                   	leave  
    d4ed:	e9 fe 4b 00 00       	jmp    120f0 <free@plt>
    d4f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    d4f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000d500 <in_node_evaluate>:
    d500:	55                   	push   %ebp
    d501:	89 e5                	mov    %esp,%ebp
    d503:	56                   	push   %esi
    d504:	53                   	push   %ebx
    d505:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    d508:	8b 75 10             	mov    0x10(%ebp),%esi
    d50b:	85 db                	test   %ebx,%ebx
    d50d:	75 1b                	jne    d52a <in_node_evaluate+0x2a>
    d50f:	eb 37                	jmp    d548 <in_node_evaluate+0x48>
    d511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    d518:	83 ec 0c             	sub    $0xc,%esp
    d51b:	53                   	push   %ebx
    d51c:	e8 3f d8 ff ff       	call   ad60 <bithenge_scope_outer>
    d521:	83 c4 10             	add    $0x10,%esp
    d524:	89 c3                	mov    %eax,%ebx
    d526:	85 c0                	test   %eax,%eax
    d528:	74 1e                	je     d548 <in_node_evaluate+0x48>
    d52a:	83 ec 0c             	sub    $0xc,%esp
    d52d:	53                   	push   %ebx
    d52e:	e8 cd d9 ff ff       	call   af00 <bithenge_scope_in_node>
    d533:	83 c4 10             	add    $0x10,%esp
    d536:	89 06                	mov    %eax,(%esi)
    d538:	85 c0                	test   %eax,%eax
    d53a:	74 dc                	je     d518 <in_node_evaluate+0x18>
    d53c:	8d 65 f8             	lea    -0x8(%ebp),%esp
    d53f:	31 c0                	xor    %eax,%eax
    d541:	5b                   	pop    %ebx
    d542:	5e                   	pop    %esi
    d543:	5d                   	pop    %ebp
    d544:	c3                   	ret    
    d545:	8d 76 00             	lea    0x0(%esi),%esi
    d548:	8d 65 f8             	lea    -0x8(%ebp),%esp
    d54b:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    d550:	5b                   	pop    %ebx
    d551:	5e                   	pop    %esi
    d552:	5d                   	pop    %ebp
    d553:	c3                   	ret    
    d554:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    d55a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0000d560 <current_node_evaluate>:
    d560:	55                   	push   %ebp
    d561:	89 e5                	mov    %esp,%ebp
    d563:	83 ec 14             	sub    $0x14,%esp
    d566:	8b 45 0c             	mov    0xc(%ebp),%eax
    d569:	50                   	push   %eax
    d56a:	e8 41 d9 ff ff       	call   aeb0 <bithenge_scope_get_current_node>
    d56f:	8b 55 10             	mov    0x10(%ebp),%edx
    d572:	83 c4 10             	add    $0x10,%esp
    d575:	83 f8 01             	cmp    $0x1,%eax
    d578:	89 02                	mov    %eax,(%edx)
    d57a:	19 c0                	sbb    %eax,%eax
    d57c:	c9                   	leave  
    d57d:	83 e0 f2             	and    $0xfffffff2,%eax
    d580:	c3                   	ret    
    d581:	eb 0d                	jmp    d590 <param_expression_evaluate>
    d583:	90                   	nop
    d584:	90                   	nop
    d585:	90                   	nop
    d586:	90                   	nop
    d587:	90                   	nop
    d588:	90                   	nop
    d589:	90                   	nop
    d58a:	90                   	nop
    d58b:	90                   	nop
    d58c:	90                   	nop
    d58d:	90                   	nop
    d58e:	90                   	nop
    d58f:	90                   	nop

0000d590 <param_expression_evaluate>:
    d590:	55                   	push   %ebp
    d591:	89 e5                	mov    %esp,%ebp
    d593:	8b 55 08             	mov    0x8(%ebp),%edx
    d596:	8b 45 0c             	mov    0xc(%ebp),%eax
    d599:	8b 52 08             	mov    0x8(%edx),%edx
    d59c:	89 45 08             	mov    %eax,0x8(%ebp)
    d59f:	89 55 0c             	mov    %edx,0xc(%ebp)
    d5a2:	5d                   	pop    %ebp
    d5a3:	e9 68 da ff ff       	jmp    b010 <bithenge_scope_get_param>
    d5a8:	90                   	nop
    d5a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000d5b0 <const_expression_evaluate>:
    d5b0:	55                   	push   %ebp
    d5b1:	89 e5                	mov    %esp,%ebp
    d5b3:	83 ec 08             	sub    $0x8,%esp
    d5b6:	8b 45 08             	mov    0x8(%ebp),%eax
    d5b9:	8b 40 08             	mov    0x8(%eax),%eax
    d5bc:	85 c0                	test   %eax,%eax
    d5be:	74 10                	je     d5d0 <const_expression_evaluate+0x20>
    d5c0:	8b 50 04             	mov    0x4(%eax),%edx
    d5c3:	42                   	inc    %edx
    d5c4:	89 50 04             	mov    %edx,0x4(%eax)
    d5c7:	8b 55 10             	mov    0x10(%ebp),%edx
    d5ca:	89 02                	mov    %eax,(%edx)
    d5cc:	31 c0                	xor    %eax,%eax
    d5ce:	c9                   	leave  
    d5cf:	c3                   	ret    
    d5d0:	51                   	push   %ecx
    d5d1:	6a 70                	push   $0x70
    d5d3:	68 50 12 01 00       	push   $0x11250
    d5d8:	68 98 14 01 00       	push   $0x11498
    d5dd:	e8 2e 49 00 00       	call   11f10 <assert_abort@plt>
    d5e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    d5e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000d5f0 <scope_member_expression_evaluate>:
    d5f0:	55                   	push   %ebp
    d5f1:	89 e5                	mov    %esp,%ebp
    d5f3:	57                   	push   %edi
    d5f4:	56                   	push   %esi
    d5f5:	53                   	push   %ebx
    d5f6:	83 ec 1c             	sub    $0x1c,%esp
    d5f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    d5fc:	8b 45 10             	mov    0x10(%ebp),%eax
    d5ff:	8b 75 08             	mov    0x8(%ebp),%esi
    d602:	89 45 e0             	mov    %eax,-0x20(%ebp)
    d605:	85 db                	test   %ebx,%ebx
    d607:	75 5b                	jne    d664 <scope_member_expression_evaluate+0x74>
    d609:	e9 82 00 00 00       	jmp    d690 <scope_member_expression_evaluate+0xa0>
    d60e:	66 90                	xchg   %ax,%ax
    d610:	83 ec 0c             	sub    $0xc,%esp
    d613:	53                   	push   %ebx
    d614:	e8 97 d8 ff ff       	call   aeb0 <bithenge_scope_get_current_node>
    d619:	83 c4 10             	add    $0x10,%esp
    d61c:	89 c7                	mov    %eax,%edi
    d61e:	85 c0                	test   %eax,%eax
    d620:	74 30                	je     d652 <scope_member_expression_evaluate+0x62>
    d622:	8b 46 08             	mov    0x8(%esi),%eax
    d625:	85 c0                	test   %eax,%eax
    d627:	74 77                	je     d6a0 <scope_member_expression_evaluate+0xb0>
    d629:	8b 50 04             	mov    0x4(%eax),%edx
    d62c:	42                   	inc    %edx
    d62d:	89 50 04             	mov    %edx,0x4(%eax)
    d630:	8b 55 e0             	mov    -0x20(%ebp),%edx
    d633:	51                   	push   %ecx
    d634:	52                   	push   %edx
    d635:	50                   	push   %eax
    d636:	57                   	push   %edi
    d637:	e8 94 e0 ff ff       	call   b6d0 <bithenge_node_get>
    d63c:	89 3c 24             	mov    %edi,(%esp)
    d63f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    d642:	e8 d9 df ff ff       	call   b620 <bithenge_node_dec_ref>
    d647:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    d64a:	83 c4 10             	add    $0x10,%esp
    d64d:	83 f8 ff             	cmp    $0xffffffff,%eax
    d650:	75 46                	jne    d698 <scope_member_expression_evaluate+0xa8>
    d652:	83 ec 0c             	sub    $0xc,%esp
    d655:	53                   	push   %ebx
    d656:	e8 05 d7 ff ff       	call   ad60 <bithenge_scope_outer>
    d65b:	83 c4 10             	add    $0x10,%esp
    d65e:	89 c3                	mov    %eax,%ebx
    d660:	85 c0                	test   %eax,%eax
    d662:	74 2c                	je     d690 <scope_member_expression_evaluate+0xa0>
    d664:	83 ec 0c             	sub    $0xc,%esp
    d667:	53                   	push   %ebx
    d668:	e8 f3 d8 ff ff       	call   af60 <bithenge_scope_is_barrier>
    d66d:	83 c4 10             	add    $0x10,%esp
    d670:	84 c0                	test   %al,%al
    d672:	74 9c                	je     d610 <scope_member_expression_evaluate+0x20>
    d674:	8b 46 08             	mov    0x8(%esi),%eax
    d677:	89 5d 08             	mov    %ebx,0x8(%ebp)
    d67a:	89 45 10             	mov    %eax,0x10(%ebp)
    d67d:	c7 45 0c b9 18 01 00 	movl   $0x118b9,0xc(%ebp)
    d684:	8d 65 f4             	lea    -0xc(%ebp),%esp
    d687:	5b                   	pop    %ebx
    d688:	5e                   	pop    %esi
    d689:	5f                   	pop    %edi
    d68a:	5d                   	pop    %ebp
    d68b:	e9 f0 d6 ff ff       	jmp    ad80 <bithenge_scope_error>
    d690:	31 db                	xor    %ebx,%ebx
    d692:	eb e0                	jmp    d674 <scope_member_expression_evaluate+0x84>
    d694:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    d698:	8d 65 f4             	lea    -0xc(%ebp),%esp
    d69b:	5b                   	pop    %ebx
    d69c:	5e                   	pop    %esi
    d69d:	5f                   	pop    %edi
    d69e:	5d                   	pop    %ebp
    d69f:	c3                   	ret    
    d6a0:	51                   	push   %ecx
    d6a1:	6a 70                	push   $0x70
    d6a3:	68 50 12 01 00       	push   $0x11250
    d6a8:	68 98 14 01 00       	push   $0x11498
    d6ad:	e8 5e 48 00 00       	call   11f10 <assert_abort@plt>
    d6b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    d6b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000d6c0 <param_wrapper_fill_scope.isra.16>:
    d6c0:	55                   	push   %ebp
    d6c1:	89 e5                	mov    %esp,%ebp
    d6c3:	57                   	push   %edi
    d6c4:	56                   	push   %esi
    d6c5:	53                   	push   %ebx
    d6c6:	83 ec 2c             	sub    $0x2c,%esp
    d6c9:	85 c0                	test   %eax,%eax
    d6cb:	0f 84 ae 00 00 00    	je     d77f <param_wrapper_fill_scope.isra.16+0xbf>
    d6d1:	8b 40 08             	mov    0x8(%eax),%eax
    d6d4:	89 d7                	mov    %edx,%edi
    d6d6:	89 c3                	mov    %eax,%ebx
    d6d8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    d6db:	89 ce                	mov    %ecx,%esi
    d6dd:	50                   	push   %eax
    d6de:	50                   	push   %eax
    d6df:	53                   	push   %ebx
    d6e0:	51                   	push   %ecx
    d6e1:	e8 8a d8 ff ff       	call   af70 <bithenge_scope_alloc_params>
    d6e6:	83 c4 10             	add    $0x10,%esp
    d6e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
    d6ec:	85 c0                	test   %eax,%eax
    d6ee:	75 56                	jne    d746 <param_wrapper_fill_scope.isra.16+0x86>
    d6f0:	85 db                	test   %ebx,%ebx
    d6f2:	7e 5c                	jle    d750 <param_wrapper_fill_scope.isra.16+0x90>
    d6f4:	8b 07                	mov    (%edi),%eax
    d6f6:	8b 00                	mov    (%eax),%eax
    d6f8:	85 c0                	test   %eax,%eax
    d6fa:	74 71                	je     d76d <param_wrapper_fill_scope.isra.16+0xad>
    d6fc:	8b 10                	mov    (%eax),%edx
    d6fe:	85 d2                	test   %edx,%edx
    d700:	74 59                	je     d75b <param_wrapper_fill_scope.isra.16+0x9b>
    d702:	31 db                	xor    %ebx,%ebx
    d704:	eb 2a                	jmp    d730 <param_wrapper_fill_scope.isra.16+0x70>
    d706:	66 90                	xchg   %ax,%ax
    d708:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    d70b:	50                   	push   %eax
    d70c:	52                   	push   %edx
    d70d:	53                   	push   %ebx
    d70e:	56                   	push   %esi
    d70f:	e8 ac d8 ff ff       	call   afc0 <bithenge_scope_set_param>
    d714:	83 c4 10             	add    $0x10,%esp
    d717:	85 c0                	test   %eax,%eax
    d719:	75 28                	jne    d743 <param_wrapper_fill_scope.isra.16+0x83>
    d71b:	43                   	inc    %ebx
    d71c:	39 5d d4             	cmp    %ebx,-0x2c(%ebp)
    d71f:	74 2f                	je     d750 <param_wrapper_fill_scope.isra.16+0x90>
    d721:	8b 07                	mov    (%edi),%eax
    d723:	8b 04 98             	mov    (%eax,%ebx,4),%eax
    d726:	85 c0                	test   %eax,%eax
    d728:	74 43                	je     d76d <param_wrapper_fill_scope.isra.16+0xad>
    d72a:	8b 10                	mov    (%eax),%edx
    d72c:	85 d2                	test   %edx,%edx
    d72e:	74 2b                	je     d75b <param_wrapper_fill_scope.isra.16+0x9b>
    d730:	51                   	push   %ecx
    d731:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
    d734:	51                   	push   %ecx
    d735:	8b 4d 08             	mov    0x8(%ebp),%ecx
    d738:	51                   	push   %ecx
    d739:	50                   	push   %eax
    d73a:	ff 12                	call   *(%edx)
    d73c:	83 c4 10             	add    $0x10,%esp
    d73f:	85 c0                	test   %eax,%eax
    d741:	74 c5                	je     d708 <param_wrapper_fill_scope.isra.16+0x48>
    d743:	89 45 d0             	mov    %eax,-0x30(%ebp)
    d746:	8d 65 f4             	lea    -0xc(%ebp),%esp
    d749:	5b                   	pop    %ebx
    d74a:	5e                   	pop    %esi
    d74b:	5f                   	pop    %edi
    d74c:	5d                   	pop    %ebp
    d74d:	c3                   	ret    
    d74e:	66 90                	xchg   %ax,%ax
    d750:	8b 45 d0             	mov    -0x30(%ebp),%eax
    d753:	8d 65 f4             	lea    -0xc(%ebp),%esp
    d756:	5b                   	pop    %ebx
    d757:	5e                   	pop    %esi
    d758:	5f                   	pop    %edi
    d759:	5d                   	pop    %ebp
    d75a:	c3                   	ret    
    d75b:	53                   	push   %ebx
    d75c:	6a 5b                	push   $0x5b
    d75e:	68 a3 13 01 00       	push   $0x113a3
    d763:	68 61 11 01 00       	push   $0x11161
    d768:	e8 a3 47 00 00       	call   11f10 <assert_abort@plt>
    d76d:	56                   	push   %esi
    d76e:	6a 5a                	push   $0x5a
    d770:	68 a3 13 01 00       	push   $0x113a3
    d775:	68 35 13 01 00       	push   $0x11335
    d77a:	e8 91 47 00 00       	call   11f10 <assert_abort@plt>
    d77f:	e8 a6 1c 00 00       	call   f42a <bithenge_transform_num_params.part.9>
    d784:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    d78a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0000d790 <param_wrapper_prefix_apply>:
    d790:	55                   	push   %ebp
    d791:	89 e5                	mov    %esp,%ebp
    d793:	56                   	push   %esi
    d794:	53                   	push   %ebx
    d795:	83 ec 28             	sub    $0x28,%esp
    d798:	8d 45 f4             	lea    -0xc(%ebp),%eax
    d79b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    d79e:	8b 75 08             	mov    0x8(%ebp),%esi
    d7a1:	53                   	push   %ebx
    d7a2:	50                   	push   %eax
    d7a3:	e8 c8 d3 ff ff       	call   ab70 <bithenge_scope_new>
    d7a8:	83 c4 10             	add    $0x10,%esp
    d7ab:	85 c0                	test   %eax,%eax
    d7ad:	74 09                	je     d7b8 <param_wrapper_prefix_apply+0x28>
    d7af:	8d 65 f8             	lea    -0x8(%ebp),%esp
    d7b2:	5b                   	pop    %ebx
    d7b3:	5e                   	pop    %esi
    d7b4:	5d                   	pop    %ebp
    d7b5:	c3                   	ret    
    d7b6:	66 90                	xchg   %ax,%ax
    d7b8:	83 ec 0c             	sub    $0xc,%esp
    d7bb:	8b 46 0c             	mov    0xc(%esi),%eax
    d7be:	8d 56 10             	lea    0x10(%esi),%edx
    d7c1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    d7c4:	53                   	push   %ebx
    d7c5:	e8 f6 fe ff ff       	call   d6c0 <param_wrapper_fill_scope.isra.16>
    d7ca:	83 c4 10             	add    $0x10,%esp
    d7cd:	85 c0                	test   %eax,%eax
    d7cf:	74 1f                	je     d7f0 <param_wrapper_prefix_apply+0x60>
    d7d1:	83 ec 0c             	sub    $0xc,%esp
    d7d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    d7d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
    d7da:	50                   	push   %eax
    d7db:	e8 00 d4 ff ff       	call   abe0 <bithenge_scope_dec_ref>
    d7e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    d7e3:	83 c4 10             	add    $0x10,%esp
    d7e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
    d7e9:	5b                   	pop    %ebx
    d7ea:	5e                   	pop    %esi
    d7eb:	5d                   	pop    %ebp
    d7ec:	c3                   	ret    
    d7ed:	8d 76 00             	lea    0x0(%esi),%esi
    d7f0:	83 ec 0c             	sub    $0xc,%esp
    d7f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    d7f6:	8b 55 18             	mov    0x18(%ebp),%edx
    d7f9:	8b 4d 14             	mov    0x14(%ebp),%ecx
    d7fc:	8b 5d 10             	mov    0x10(%ebp),%ebx
    d7ff:	52                   	push   %edx
    d800:	51                   	push   %ecx
    d801:	53                   	push   %ebx
    d802:	50                   	push   %eax
    d803:	8b 46 0c             	mov    0xc(%esi),%eax
    d806:	50                   	push   %eax
    d807:	e8 c4 c9 ff ff       	call   a1d0 <bithenge_transform_prefix_apply>
    d80c:	83 c4 20             	add    $0x20,%esp
    d80f:	eb c0                	jmp    d7d1 <param_wrapper_prefix_apply+0x41>
    d811:	eb 0d                	jmp    d820 <param_wrapper_prefix_length>
    d813:	90                   	nop
    d814:	90                   	nop
    d815:	90                   	nop
    d816:	90                   	nop
    d817:	90                   	nop
    d818:	90                   	nop
    d819:	90                   	nop
    d81a:	90                   	nop
    d81b:	90                   	nop
    d81c:	90                   	nop
    d81d:	90                   	nop
    d81e:	90                   	nop
    d81f:	90                   	nop

0000d820 <param_wrapper_prefix_length>:
    d820:	55                   	push   %ebp
    d821:	89 e5                	mov    %esp,%ebp
    d823:	56                   	push   %esi
    d824:	53                   	push   %ebx
    d825:	83 ec 28             	sub    $0x28,%esp
    d828:	8d 45 f4             	lea    -0xc(%ebp),%eax
    d82b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    d82e:	8b 75 08             	mov    0x8(%ebp),%esi
    d831:	53                   	push   %ebx
    d832:	50                   	push   %eax
    d833:	e8 38 d3 ff ff       	call   ab70 <bithenge_scope_new>
    d838:	83 c4 10             	add    $0x10,%esp
    d83b:	85 c0                	test   %eax,%eax
    d83d:	74 09                	je     d848 <param_wrapper_prefix_length+0x28>
    d83f:	8d 65 f8             	lea    -0x8(%ebp),%esp
    d842:	5b                   	pop    %ebx
    d843:	5e                   	pop    %esi
    d844:	5d                   	pop    %ebp
    d845:	c3                   	ret    
    d846:	66 90                	xchg   %ax,%ax
    d848:	83 ec 0c             	sub    $0xc,%esp
    d84b:	8b 46 0c             	mov    0xc(%esi),%eax
    d84e:	8d 56 10             	lea    0x10(%esi),%edx
    d851:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    d854:	53                   	push   %ebx
    d855:	e8 66 fe ff ff       	call   d6c0 <param_wrapper_fill_scope.isra.16>
    d85a:	83 c4 10             	add    $0x10,%esp
    d85d:	85 c0                	test   %eax,%eax
    d85f:	74 1f                	je     d880 <param_wrapper_prefix_length+0x60>
    d861:	83 ec 0c             	sub    $0xc,%esp
    d864:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    d867:	8b 45 f4             	mov    -0xc(%ebp),%eax
    d86a:	50                   	push   %eax
    d86b:	e8 70 d3 ff ff       	call   abe0 <bithenge_scope_dec_ref>
    d870:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    d873:	83 c4 10             	add    $0x10,%esp
    d876:	8d 65 f8             	lea    -0x8(%ebp),%esp
    d879:	5b                   	pop    %ebx
    d87a:	5e                   	pop    %esi
    d87b:	5d                   	pop    %ebp
    d87c:	c3                   	ret    
    d87d:	8d 76 00             	lea    0x0(%esi),%esi
    d880:	8b 55 14             	mov    0x14(%ebp),%edx
    d883:	8b 4d 10             	mov    0x10(%ebp),%ecx
    d886:	8b 5d f4             	mov    -0xc(%ebp),%ebx
    d889:	8b 76 0c             	mov    0xc(%esi),%esi
    d88c:	52                   	push   %edx
    d88d:	51                   	push   %ecx
    d88e:	53                   	push   %ebx
    d88f:	56                   	push   %esi
    d890:	e8 3b d2 ff ff       	call   aad0 <bithenge_transform_prefix_length>
    d895:	83 c4 10             	add    $0x10,%esp
    d898:	eb c7                	jmp    d861 <param_wrapper_prefix_length+0x41>
    d89a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0000d8a0 <param_wrapper_apply>:
    d8a0:	55                   	push   %ebp
    d8a1:	89 e5                	mov    %esp,%ebp
    d8a3:	56                   	push   %esi
    d8a4:	53                   	push   %ebx
    d8a5:	83 ec 28             	sub    $0x28,%esp
    d8a8:	8d 45 f4             	lea    -0xc(%ebp),%eax
    d8ab:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    d8ae:	8b 75 08             	mov    0x8(%ebp),%esi
    d8b1:	53                   	push   %ebx
    d8b2:	50                   	push   %eax
    d8b3:	e8 b8 d2 ff ff       	call   ab70 <bithenge_scope_new>
    d8b8:	83 c4 10             	add    $0x10,%esp
    d8bb:	85 c0                	test   %eax,%eax
    d8bd:	74 09                	je     d8c8 <param_wrapper_apply+0x28>
    d8bf:	8d 65 f8             	lea    -0x8(%ebp),%esp
    d8c2:	5b                   	pop    %ebx
    d8c3:	5e                   	pop    %esi
    d8c4:	5d                   	pop    %ebp
    d8c5:	c3                   	ret    
    d8c6:	66 90                	xchg   %ax,%ax
    d8c8:	83 ec 0c             	sub    $0xc,%esp
    d8cb:	8b 46 0c             	mov    0xc(%esi),%eax
    d8ce:	8d 56 10             	lea    0x10(%esi),%edx
    d8d1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    d8d4:	53                   	push   %ebx
    d8d5:	e8 e6 fd ff ff       	call   d6c0 <param_wrapper_fill_scope.isra.16>
    d8da:	83 c4 10             	add    $0x10,%esp
    d8dd:	85 c0                	test   %eax,%eax
    d8df:	74 1f                	je     d900 <param_wrapper_apply+0x60>
    d8e1:	83 ec 0c             	sub    $0xc,%esp
    d8e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    d8e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
    d8ea:	50                   	push   %eax
    d8eb:	e8 f0 d2 ff ff       	call   abe0 <bithenge_scope_dec_ref>
    d8f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    d8f3:	83 c4 10             	add    $0x10,%esp
    d8f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
    d8f9:	5b                   	pop    %ebx
    d8fa:	5e                   	pop    %esi
    d8fb:	5d                   	pop    %ebp
    d8fc:	c3                   	ret    
    d8fd:	8d 76 00             	lea    0x0(%esi),%esi
    d900:	8b 55 14             	mov    0x14(%ebp),%edx
    d903:	8b 4d 10             	mov    0x10(%ebp),%ecx
    d906:	8b 5d f4             	mov    -0xc(%ebp),%ebx
    d909:	8b 76 0c             	mov    0xc(%esi),%esi
    d90c:	52                   	push   %edx
    d90d:	51                   	push   %ecx
    d90e:	53                   	push   %ebx
    d90f:	56                   	push   %esi
    d910:	e8 db cb ff ff       	call   a4f0 <bithenge_transform_apply>
    d915:	83 c4 10             	add    $0x10,%esp
    d918:	eb c7                	jmp    d8e1 <param_wrapper_apply+0x41>
    d91a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0000d920 <inputless_transform_prefix_apply>:
    d920:	55                   	push   %ebp
    d921:	89 e5                	mov    %esp,%ebp
    d923:	53                   	push   %ebx
    d924:	51                   	push   %ecx
    d925:	8b 45 18             	mov    0x18(%ebp),%eax
    d928:	8b 55 08             	mov    0x8(%ebp),%edx
    d92b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    d92e:	8b 5d 14             	mov    0x14(%ebp),%ebx
    d931:	85 c0                	test   %eax,%eax
    d933:	74 0d                	je     d942 <inputless_transform_prefix_apply+0x22>
    d935:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    d93b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    d942:	8b 42 0c             	mov    0xc(%edx),%eax
    d945:	85 c0                	test   %eax,%eax
    d947:	74 17                	je     d960 <inputless_transform_prefix_apply+0x40>
    d949:	8b 10                	mov    (%eax),%edx
    d94b:	85 d2                	test   %edx,%edx
    d94d:	74 23                	je     d972 <inputless_transform_prefix_apply+0x52>
    d94f:	89 5d 10             	mov    %ebx,0x10(%ebp)
    d952:	89 4d 0c             	mov    %ecx,0xc(%ebp)
    d955:	89 45 08             	mov    %eax,0x8(%ebp)
    d958:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    d95b:	8b 02                	mov    (%edx),%eax
    d95d:	c9                   	leave  
    d95e:	ff e0                	jmp    *%eax
    d960:	52                   	push   %edx
    d961:	6a 5a                	push   $0x5a
    d963:	68 a3 13 01 00       	push   $0x113a3
    d968:	68 35 13 01 00       	push   $0x11335
    d96d:	e8 9e 45 00 00       	call   11f10 <assert_abort@plt>
    d972:	50                   	push   %eax
    d973:	6a 5b                	push   $0x5b
    d975:	68 a3 13 01 00       	push   $0x113a3
    d97a:	68 61 11 01 00       	push   $0x11161
    d97f:	e8 8c 45 00 00       	call   11f10 <assert_abort@plt>
    d984:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    d98a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0000d990 <param_wrapper_destroy>:
    d990:	55                   	push   %ebp
    d991:	89 e5                	mov    %esp,%ebp
    d993:	57                   	push   %edi
    d994:	56                   	push   %esi
    d995:	53                   	push   %ebx
    d996:	83 ec 1c             	sub    $0x1c,%esp
    d999:	8b 5d 08             	mov    0x8(%ebp),%ebx
    d99c:	8b 43 0c             	mov    0xc(%ebx),%eax
    d99f:	85 c0                	test   %eax,%eax
    d9a1:	0f 84 cb 00 00 00    	je     da72 <param_wrapper_destroy+0xe2>
    d9a7:	8b 78 08             	mov    0x8(%eax),%edi
    d9aa:	8b 08                	mov    (%eax),%ecx
    d9ac:	89 7d e4             	mov    %edi,-0x1c(%ebp)
    d9af:	85 c9                	test   %ecx,%ecx
    d9b1:	0f 84 a9 00 00 00    	je     da60 <param_wrapper_destroy+0xd0>
    d9b7:	8b 50 04             	mov    0x4(%eax),%edx
    d9ba:	85 d2                	test   %edx,%edx
    d9bc:	0f 84 8c 00 00 00    	je     da4e <param_wrapper_destroy+0xbe>
    d9c2:	4a                   	dec    %edx
    d9c3:	89 50 04             	mov    %edx,0x4(%eax)
    d9c6:	85 d2                	test   %edx,%edx
    d9c8:	75 0a                	jne    d9d4 <param_wrapper_destroy+0x44>
    d9ca:	83 ec 0c             	sub    $0xc,%esp
    d9cd:	50                   	push   %eax
    d9ce:	ff 51 0c             	call   *0xc(%ecx)
    d9d1:	83 c4 10             	add    $0x10,%esp
    d9d4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    d9d7:	8b 7b 10             	mov    0x10(%ebx),%edi
    d9da:	85 c9                	test   %ecx,%ecx
    d9dc:	7e 31                	jle    da0f <param_wrapper_destroy+0x7f>
    d9de:	31 f6                	xor    %esi,%esi
    d9e0:	8b 14 b7             	mov    (%edi,%esi,4),%edx
    d9e3:	85 d2                	test   %edx,%edx
    d9e5:	74 22                	je     da09 <param_wrapper_destroy+0x79>
    d9e7:	8b 0a                	mov    (%edx),%ecx
    d9e9:	85 c9                	test   %ecx,%ecx
    d9eb:	74 3d                	je     da2a <param_wrapper_destroy+0x9a>
    d9ed:	8b 42 04             	mov    0x4(%edx),%eax
    d9f0:	85 c0                	test   %eax,%eax
    d9f2:	74 48                	je     da3c <param_wrapper_destroy+0xac>
    d9f4:	48                   	dec    %eax
    d9f5:	89 42 04             	mov    %eax,0x4(%edx)
    d9f8:	85 c0                	test   %eax,%eax
    d9fa:	75 0d                	jne    da09 <param_wrapper_destroy+0x79>
    d9fc:	83 ec 0c             	sub    $0xc,%esp
    d9ff:	52                   	push   %edx
    da00:	ff 51 04             	call   *0x4(%ecx)
    da03:	8b 7b 10             	mov    0x10(%ebx),%edi
    da06:	83 c4 10             	add    $0x10,%esp
    da09:	46                   	inc    %esi
    da0a:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
    da0d:	75 d1                	jne    d9e0 <param_wrapper_destroy+0x50>
    da0f:	83 ec 0c             	sub    $0xc,%esp
    da12:	57                   	push   %edi
    da13:	e8 d8 46 00 00       	call   120f0 <free@plt>
    da18:	89 5d 08             	mov    %ebx,0x8(%ebp)
    da1b:	83 c4 10             	add    $0x10,%esp
    da1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    da21:	5b                   	pop    %ebx
    da22:	5e                   	pop    %esi
    da23:	5f                   	pop    %edi
    da24:	5d                   	pop    %ebp
    da25:	e9 c6 46 00 00       	jmp    120f0 <free@plt>
    da2a:	52                   	push   %edx
    da2b:	6a 4b                	push   $0x4b
    da2d:	68 a3 13 01 00       	push   $0x113a3
    da32:	68 61 11 01 00       	push   $0x11161
    da37:	e8 d4 44 00 00       	call   11f10 <assert_abort@plt>
    da3c:	50                   	push   %eax
    da3d:	6a 4c                	push   $0x4c
    da3f:	68 a3 13 01 00       	push   $0x113a3
    da44:	68 6b 11 01 00       	push   $0x1116b
    da49:	e8 c2 44 00 00       	call   11f10 <assert_abort@plt>
    da4e:	53                   	push   %ebx
    da4f:	6a 75                	push   $0x75
    da51:	68 18 13 01 00       	push   $0x11318
    da56:	68 6b 11 01 00       	push   $0x1116b
    da5b:	e8 b0 44 00 00       	call   11f10 <assert_abort@plt>
    da60:	56                   	push   %esi
    da61:	6a 74                	push   $0x74
    da63:	68 18 13 01 00       	push   $0x11318
    da68:	68 61 11 01 00       	push   $0x11161
    da6d:	e8 9e 44 00 00       	call   11f10 <assert_abort@plt>
    da72:	e8 b3 19 00 00       	call   f42a <bithenge_transform_num_params.part.9>
    da77:	89 f6                	mov    %esi,%esi
    da79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000da80 <expression_transform_apply>:
    da80:	55                   	push   %ebp
    da81:	89 e5                	mov    %esp,%ebp
    da83:	83 ec 30             	sub    $0x30,%esp
    da86:	8b 45 0c             	mov    0xc(%ebp),%eax
    da89:	50                   	push   %eax
    da8a:	8d 45 f4             	lea    -0xc(%ebp),%eax
    da8d:	50                   	push   %eax
    da8e:	e8 dd d0 ff ff       	call   ab70 <bithenge_scope_new>
    da93:	83 c4 10             	add    $0x10,%esp
    da96:	85 c0                	test   %eax,%eax
    da98:	74 06                	je     daa0 <expression_transform_apply+0x20>
    da9a:	c9                   	leave  
    da9b:	c3                   	ret    
    da9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    daa0:	50                   	push   %eax
    daa1:	50                   	push   %eax
    daa2:	8b 45 10             	mov    0x10(%ebp),%eax
    daa5:	50                   	push   %eax
    daa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
    daa9:	50                   	push   %eax
    daaa:	e8 71 d4 ff ff       	call   af20 <bithenge_scope_set_in_node>
    daaf:	8b 45 08             	mov    0x8(%ebp),%eax
    dab2:	83 c4 10             	add    $0x10,%esp
    dab5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    dab8:	8b 40 0c             	mov    0xc(%eax),%eax
    dabb:	85 c0                	test   %eax,%eax
    dabd:	74 25                	je     dae4 <expression_transform_apply+0x64>
    dabf:	8b 10                	mov    (%eax),%edx
    dac1:	85 d2                	test   %edx,%edx
    dac3:	74 31                	je     daf6 <expression_transform_apply+0x76>
    dac5:	83 ec 04             	sub    $0x4,%esp
    dac8:	ff 75 14             	pushl  0x14(%ebp)
    dacb:	51                   	push   %ecx
    dacc:	50                   	push   %eax
    dacd:	ff 12                	call   *(%edx)
    dacf:	8b 55 f4             	mov    -0xc(%ebp),%edx
    dad2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    dad5:	58                   	pop    %eax
    dad6:	52                   	push   %edx
    dad7:	e8 04 d1 ff ff       	call   abe0 <bithenge_scope_dec_ref>
    dadc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    dadf:	83 c4 10             	add    $0x10,%esp
    dae2:	c9                   	leave  
    dae3:	c3                   	ret    
    dae4:	50                   	push   %eax
    dae5:	6a 5a                	push   $0x5a
    dae7:	68 a3 13 01 00       	push   $0x113a3
    daec:	68 35 13 01 00       	push   $0x11335
    daf1:	e8 1a 44 00 00       	call   11f10 <assert_abort@plt>
    daf6:	51                   	push   %ecx
    daf7:	6a 5b                	push   $0x5b
    daf9:	68 a3 13 01 00       	push   $0x113a3
    dafe:	68 61 11 01 00       	push   $0x11161
    db03:	e8 08 44 00 00       	call   11f10 <assert_abort@plt>
    db08:	90                   	nop
    db09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000db10 <expression_transform_destroy>:
    db10:	55                   	push   %ebp
    db11:	89 e5                	mov    %esp,%ebp
    db13:	53                   	push   %ebx
    db14:	51                   	push   %ecx
    db15:	8b 5d 08             	mov    0x8(%ebp),%ebx
    db18:	8b 53 0c             	mov    0xc(%ebx),%edx
    db1b:	85 d2                	test   %edx,%edx
    db1d:	74 1f                	je     db3e <expression_transform_destroy+0x2e>
    db1f:	8b 0a                	mov    (%edx),%ecx
    db21:	85 c9                	test   %ecx,%ecx
    db23:	74 37                	je     db5c <expression_transform_destroy+0x4c>
    db25:	8b 42 04             	mov    0x4(%edx),%eax
    db28:	85 c0                	test   %eax,%eax
    db2a:	74 1e                	je     db4a <expression_transform_destroy+0x3a>
    db2c:	48                   	dec    %eax
    db2d:	89 42 04             	mov    %eax,0x4(%edx)
    db30:	85 c0                	test   %eax,%eax
    db32:	75 0a                	jne    db3e <expression_transform_destroy+0x2e>
    db34:	83 ec 0c             	sub    $0xc,%esp
    db37:	52                   	push   %edx
    db38:	ff 51 04             	call   *0x4(%ecx)
    db3b:	83 c4 10             	add    $0x10,%esp
    db3e:	89 5d 08             	mov    %ebx,0x8(%ebp)
    db41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    db44:	c9                   	leave  
    db45:	e9 a6 45 00 00       	jmp    120f0 <free@plt>
    db4a:	50                   	push   %eax
    db4b:	6a 4c                	push   $0x4c
    db4d:	68 a3 13 01 00       	push   $0x113a3
    db52:	68 6b 11 01 00       	push   $0x1116b
    db57:	e8 b4 43 00 00       	call   11f10 <assert_abort@plt>
    db5c:	52                   	push   %edx
    db5d:	6a 4b                	push   $0x4b
    db5f:	68 a3 13 01 00       	push   $0x113a3
    db64:	68 61 11 01 00       	push   $0x11161
    db69:	e8 a2 43 00 00       	call   11f10 <assert_abort@plt>
    db6e:	66 90                	xchg   %ax,%ax

0000db70 <binary_expression_destroy>:
    db70:	55                   	push   %ebp
    db71:	89 e5                	mov    %esp,%ebp
    db73:	53                   	push   %ebx
    db74:	51                   	push   %ecx
    db75:	8b 5d 08             	mov    0x8(%ebp),%ebx
    db78:	8b 53 0c             	mov    0xc(%ebx),%edx
    db7b:	85 d2                	test   %edx,%edx
    db7d:	74 1f                	je     db9e <binary_expression_destroy+0x2e>
    db7f:	8b 0a                	mov    (%edx),%ecx
    db81:	85 c9                	test   %ecx,%ecx
    db83:	74 5d                	je     dbe2 <binary_expression_destroy+0x72>
    db85:	8b 42 04             	mov    0x4(%edx),%eax
    db88:	85 c0                	test   %eax,%eax
    db8a:	74 44                	je     dbd0 <binary_expression_destroy+0x60>
    db8c:	48                   	dec    %eax
    db8d:	89 42 04             	mov    %eax,0x4(%edx)
    db90:	85 c0                	test   %eax,%eax
    db92:	75 0a                	jne    db9e <binary_expression_destroy+0x2e>
    db94:	83 ec 0c             	sub    $0xc,%esp
    db97:	52                   	push   %edx
    db98:	ff 51 04             	call   *0x4(%ecx)
    db9b:	83 c4 10             	add    $0x10,%esp
    db9e:	8b 53 10             	mov    0x10(%ebx),%edx
    dba1:	85 d2                	test   %edx,%edx
    dba3:	74 1f                	je     dbc4 <binary_expression_destroy+0x54>
    dba5:	8b 0a                	mov    (%edx),%ecx
    dba7:	85 c9                	test   %ecx,%ecx
    dba9:	74 37                	je     dbe2 <binary_expression_destroy+0x72>
    dbab:	8b 42 04             	mov    0x4(%edx),%eax
    dbae:	85 c0                	test   %eax,%eax
    dbb0:	74 1e                	je     dbd0 <binary_expression_destroy+0x60>
    dbb2:	48                   	dec    %eax
    dbb3:	89 42 04             	mov    %eax,0x4(%edx)
    dbb6:	85 c0                	test   %eax,%eax
    dbb8:	75 0a                	jne    dbc4 <binary_expression_destroy+0x54>
    dbba:	83 ec 0c             	sub    $0xc,%esp
    dbbd:	52                   	push   %edx
    dbbe:	ff 51 04             	call   *0x4(%ecx)
    dbc1:	83 c4 10             	add    $0x10,%esp
    dbc4:	89 5d 08             	mov    %ebx,0x8(%ebp)
    dbc7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    dbca:	c9                   	leave  
    dbcb:	e9 20 45 00 00       	jmp    120f0 <free@plt>
    dbd0:	50                   	push   %eax
    dbd1:	6a 4c                	push   $0x4c
    dbd3:	68 a3 13 01 00       	push   $0x113a3
    dbd8:	68 6b 11 01 00       	push   $0x1116b
    dbdd:	e8 2e 43 00 00       	call   11f10 <assert_abort@plt>
    dbe2:	52                   	push   %edx
    dbe3:	6a 4b                	push   $0x4b
    dbe5:	68 a3 13 01 00       	push   $0x113a3
    dbea:	68 61 11 01 00       	push   $0x11161
    dbef:	e8 1c 43 00 00       	call   11f10 <assert_abort@plt>
    dbf4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    dbfa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0000dc00 <subblob_expression_destroy>:
    dc00:	55                   	push   %ebp
    dc01:	89 e5                	mov    %esp,%ebp
    dc03:	53                   	push   %ebx
    dc04:	51                   	push   %ecx
    dc05:	8b 5d 08             	mov    0x8(%ebp),%ebx
    dc08:	8b 53 08             	mov    0x8(%ebx),%edx
    dc0b:	85 d2                	test   %edx,%edx
    dc0d:	74 23                	je     dc32 <subblob_expression_destroy+0x32>
    dc0f:	8b 0a                	mov    (%edx),%ecx
    dc11:	85 c9                	test   %ecx,%ecx
    dc13:	0f 84 83 00 00 00    	je     dc9c <subblob_expression_destroy+0x9c>
    dc19:	8b 42 04             	mov    0x4(%edx),%eax
    dc1c:	85 c0                	test   %eax,%eax
    dc1e:	74 6a                	je     dc8a <subblob_expression_destroy+0x8a>
    dc20:	48                   	dec    %eax
    dc21:	89 42 04             	mov    %eax,0x4(%edx)
    dc24:	85 c0                	test   %eax,%eax
    dc26:	75 0a                	jne    dc32 <subblob_expression_destroy+0x32>
    dc28:	83 ec 0c             	sub    $0xc,%esp
    dc2b:	52                   	push   %edx
    dc2c:	ff 51 04             	call   *0x4(%ecx)
    dc2f:	83 c4 10             	add    $0x10,%esp
    dc32:	8b 53 0c             	mov    0xc(%ebx),%edx
    dc35:	85 d2                	test   %edx,%edx
    dc37:	74 1f                	je     dc58 <subblob_expression_destroy+0x58>
    dc39:	8b 0a                	mov    (%edx),%ecx
    dc3b:	85 c9                	test   %ecx,%ecx
    dc3d:	74 5d                	je     dc9c <subblob_expression_destroy+0x9c>
    dc3f:	8b 42 04             	mov    0x4(%edx),%eax
    dc42:	85 c0                	test   %eax,%eax
    dc44:	74 44                	je     dc8a <subblob_expression_destroy+0x8a>
    dc46:	48                   	dec    %eax
    dc47:	89 42 04             	mov    %eax,0x4(%edx)
    dc4a:	85 c0                	test   %eax,%eax
    dc4c:	75 0a                	jne    dc58 <subblob_expression_destroy+0x58>
    dc4e:	83 ec 0c             	sub    $0xc,%esp
    dc51:	52                   	push   %edx
    dc52:	ff 51 04             	call   *0x4(%ecx)
    dc55:	83 c4 10             	add    $0x10,%esp
    dc58:	8b 53 10             	mov    0x10(%ebx),%edx
    dc5b:	85 d2                	test   %edx,%edx
    dc5d:	74 1f                	je     dc7e <subblob_expression_destroy+0x7e>
    dc5f:	8b 0a                	mov    (%edx),%ecx
    dc61:	85 c9                	test   %ecx,%ecx
    dc63:	74 37                	je     dc9c <subblob_expression_destroy+0x9c>
    dc65:	8b 42 04             	mov    0x4(%edx),%eax
    dc68:	85 c0                	test   %eax,%eax
    dc6a:	74 1e                	je     dc8a <subblob_expression_destroy+0x8a>
    dc6c:	48                   	dec    %eax
    dc6d:	89 42 04             	mov    %eax,0x4(%edx)
    dc70:	85 c0                	test   %eax,%eax
    dc72:	75 0a                	jne    dc7e <subblob_expression_destroy+0x7e>
    dc74:	83 ec 0c             	sub    $0xc,%esp
    dc77:	52                   	push   %edx
    dc78:	ff 51 04             	call   *0x4(%ecx)
    dc7b:	83 c4 10             	add    $0x10,%esp
    dc7e:	89 5d 08             	mov    %ebx,0x8(%ebp)
    dc81:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    dc84:	c9                   	leave  
    dc85:	e9 66 44 00 00       	jmp    120f0 <free@plt>
    dc8a:	50                   	push   %eax
    dc8b:	6a 4c                	push   $0x4c
    dc8d:	68 a3 13 01 00       	push   $0x113a3
    dc92:	68 6b 11 01 00       	push   $0x1116b
    dc97:	e8 74 42 00 00       	call   11f10 <assert_abort@plt>
    dc9c:	52                   	push   %edx
    dc9d:	6a 4b                	push   $0x4b
    dc9f:	68 a3 13 01 00       	push   $0x113a3
    dca4:	68 61 11 01 00       	push   $0x11161
    dca9:	e8 62 42 00 00       	call   11f10 <assert_abort@plt>
    dcae:	66 90                	xchg   %ax,%ax

0000dcb0 <subblob_expression_evaluate>:
    dcb0:	55                   	push   %ebp
    dcb1:	89 e5                	mov    %esp,%ebp
    dcb3:	57                   	push   %edi
    dcb4:	56                   	push   %esi
    dcb5:	53                   	push   %ebx
    dcb6:	83 ec 2c             	sub    $0x2c,%esp
    dcb9:	8b 5d 08             	mov    0x8(%ebp),%ebx
    dcbc:	8b 43 0c             	mov    0xc(%ebx),%eax
    dcbf:	85 c0                	test   %eax,%eax
    dcc1:	0f 84 67 01 00 00    	je     de2e <subblob_expression_evaluate+0x17e>
    dcc7:	8b 10                	mov    (%eax),%edx
    dcc9:	85 d2                	test   %edx,%edx
    dccb:	0f 84 4b 01 00 00    	je     de1c <subblob_expression_evaluate+0x16c>
    dcd1:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    dcd4:	8b 7d 0c             	mov    0xc(%ebp),%edi
    dcd7:	56                   	push   %esi
    dcd8:	51                   	push   %ecx
    dcd9:	57                   	push   %edi
    dcda:	50                   	push   %eax
    dcdb:	ff 12                	call   *(%edx)
    dcdd:	83 c4 10             	add    $0x10,%esp
    dce0:	85 c0                	test   %eax,%eax
    dce2:	75 5b                	jne    dd3f <subblob_expression_evaluate+0x8f>
    dce4:	8b 45 e0             	mov    -0x20(%ebp),%eax
    dce7:	83 38 03             	cmpl   $0x3,(%eax)
    dcea:	75 42                	jne    dd2e <subblob_expression_evaluate+0x7e>
    dcec:	83 ec 0c             	sub    $0xc,%esp
    dcef:	8b 70 08             	mov    0x8(%eax),%esi
    dcf2:	8b 78 0c             	mov    0xc(%eax),%edi
    dcf5:	50                   	push   %eax
    dcf6:	e8 25 d9 ff ff       	call   b620 <bithenge_node_dec_ref>
    dcfb:	8b 43 10             	mov    0x10(%ebx),%eax
    dcfe:	83 c4 10             	add    $0x10,%esp
    dd01:	85 c0                	test   %eax,%eax
    dd03:	74 43                	je     dd48 <subblob_expression_evaluate+0x98>
    dd05:	8b 10                	mov    (%eax),%edx
    dd07:	85 d2                	test   %edx,%edx
    dd09:	0f 84 0d 01 00 00    	je     de1c <subblob_expression_evaluate+0x16c>
    dd0f:	51                   	push   %ecx
    dd10:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
    dd13:	51                   	push   %ecx
    dd14:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    dd17:	51                   	push   %ecx
    dd18:	50                   	push   %eax
    dd19:	ff 12                	call   *(%edx)
    dd1b:	83 c4 10             	add    $0x10,%esp
    dd1e:	85 c0                	test   %eax,%eax
    dd20:	75 1d                	jne    dd3f <subblob_expression_evaluate+0x8f>
    dd22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    dd25:	83 38 03             	cmpl   $0x3,(%eax)
    dd28:	0f 84 8a 00 00 00    	je     ddb8 <subblob_expression_evaluate+0x108>
    dd2e:	83 ec 0c             	sub    $0xc,%esp
    dd31:	50                   	push   %eax
    dd32:	e8 e9 d8 ff ff       	call   b620 <bithenge_node_dec_ref>
    dd37:	83 c4 10             	add    $0x10,%esp
    dd3a:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    dd3f:	8d 65 f4             	lea    -0xc(%ebp),%esp
    dd42:	5b                   	pop    %ebx
    dd43:	5e                   	pop    %esi
    dd44:	5f                   	pop    %edi
    dd45:	5d                   	pop    %ebp
    dd46:	c3                   	ret    
    dd47:	90                   	nop
    dd48:	85 ff                	test   %edi,%edi
    dd4a:	78 ee                	js     dd3a <subblob_expression_evaluate+0x8a>
    dd4c:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)
    dd53:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
    dd5a:	8b 43 08             	mov    0x8(%ebx),%eax
    dd5d:	85 c0                	test   %eax,%eax
    dd5f:	0f 84 c9 00 00 00    	je     de2e <subblob_expression_evaluate+0x17e>
    dd65:	8b 10                	mov    (%eax),%edx
    dd67:	85 d2                	test   %edx,%edx
    dd69:	0f 84 ad 00 00 00    	je     de1c <subblob_expression_evaluate+0x16c>
    dd6f:	51                   	push   %ecx
    dd70:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
    dd73:	51                   	push   %ecx
    dd74:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    dd77:	51                   	push   %ecx
    dd78:	50                   	push   %eax
    dd79:	ff 12                	call   *(%edx)
    dd7b:	83 c4 10             	add    $0x10,%esp
    dd7e:	85 c0                	test   %eax,%eax
    dd80:	75 bd                	jne    dd3f <subblob_expression_evaluate+0x8f>
    dd82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    dd85:	83 38 05             	cmpl   $0x5,(%eax)
    dd88:	75 a4                	jne    dd2e <subblob_expression_evaluate+0x7e>
    dd8a:	8b 53 10             	mov    0x10(%ebx),%edx
    dd8d:	85 d2                	test   %edx,%edx
    dd8f:	74 77                	je     de08 <subblob_expression_evaluate+0x158>
    dd91:	8b 5d d0             	mov    -0x30(%ebp),%ebx
    dd94:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    dd97:	52                   	push   %edx
    dd98:	52                   	push   %edx
    dd99:	51                   	push   %ecx
    dd9a:	53                   	push   %ebx
    dd9b:	57                   	push   %edi
    dd9c:	56                   	push   %esi
    dd9d:	8b 75 10             	mov    0x10(%ebp),%esi
    dda0:	50                   	push   %eax
    dda1:	56                   	push   %esi
    dda2:	e8 69 eb ff ff       	call   c910 <bithenge_new_subblob>
    dda7:	83 c4 20             	add    $0x20,%esp
    ddaa:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ddad:	5b                   	pop    %ebx
    ddae:	5e                   	pop    %esi
    ddaf:	5f                   	pop    %edi
    ddb0:	5d                   	pop    %ebp
    ddb1:	c3                   	ret    
    ddb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    ddb8:	83 ec 0c             	sub    $0xc,%esp
    ddbb:	8b 50 08             	mov    0x8(%eax),%edx
    ddbe:	8b 48 0c             	mov    0xc(%eax),%ecx
    ddc1:	89 55 d0             	mov    %edx,-0x30(%ebp)
    ddc4:	50                   	push   %eax
    ddc5:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    ddc8:	e8 53 d8 ff ff       	call   b620 <bithenge_node_dec_ref>
    ddcd:	83 c4 10             	add    $0x10,%esp
    ddd0:	80 7b 14 00          	cmpb   $0x0,0x14(%ebx)
    ddd4:	75 2a                	jne    de00 <subblob_expression_evaluate+0x150>
    ddd6:	85 ff                	test   %edi,%edi
    ddd8:	0f 88 5c ff ff ff    	js     dd3a <subblob_expression_evaluate+0x8a>
    ddde:	8b 43 10             	mov    0x10(%ebx),%eax
    dde1:	85 c0                	test   %eax,%eax
    dde3:	0f 84 71 ff ff ff    	je     dd5a <subblob_expression_evaluate+0xaa>
    dde9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    ddec:	c1 e8 1f             	shr    $0x1f,%eax
    ddef:	0f 84 65 ff ff ff    	je     dd5a <subblob_expression_evaluate+0xaa>
    ddf5:	e9 40 ff ff ff       	jmp    dd3a <subblob_expression_evaluate+0x8a>
    ddfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    de00:	29 75 d0             	sub    %esi,-0x30(%ebp)
    de03:	19 7d d4             	sbb    %edi,-0x2c(%ebp)
    de06:	eb ce                	jmp    ddd6 <subblob_expression_evaluate+0x126>
    de08:	57                   	push   %edi
    de09:	56                   	push   %esi
    de0a:	50                   	push   %eax
    de0b:	8b 45 10             	mov    0x10(%ebp),%eax
    de0e:	50                   	push   %eax
    de0f:	e8 3c e9 ff ff       	call   c750 <bithenge_new_offset_blob>
    de14:	83 c4 10             	add    $0x10,%esp
    de17:	e9 23 ff ff ff       	jmp    dd3f <subblob_expression_evaluate+0x8f>
    de1c:	50                   	push   %eax
    de1d:	6a 5b                	push   $0x5b
    de1f:	68 a3 13 01 00       	push   $0x113a3
    de24:	68 61 11 01 00       	push   $0x11161
    de29:	e8 e2 40 00 00       	call   11f10 <assert_abort@plt>
    de2e:	50                   	push   %eax
    de2f:	6a 5a                	push   $0x5a
    de31:	68 a3 13 01 00       	push   $0x113a3
    de36:	68 35 13 01 00       	push   $0x11335
    de3b:	e8 d0 40 00 00       	call   11f10 <assert_abort@plt>

0000de40 <concat_blob_destroy>:
    de40:	55                   	push   %ebp
    de41:	89 e5                	mov    %esp,%ebp
    de43:	53                   	push   %ebx
    de44:	53                   	push   %ebx
    de45:	8b 5d 08             	mov    0x8(%ebp),%ebx
    de48:	8b 43 10             	mov    0x10(%ebx),%eax
    de4b:	85 c0                	test   %eax,%eax
    de4d:	74 0c                	je     de5b <concat_blob_destroy+0x1b>
    de4f:	83 ec 0c             	sub    $0xc,%esp
    de52:	50                   	push   %eax
    de53:	e8 c8 d7 ff ff       	call   b620 <bithenge_node_dec_ref>
    de58:	83 c4 10             	add    $0x10,%esp
    de5b:	8b 43 14             	mov    0x14(%ebx),%eax
    de5e:	85 c0                	test   %eax,%eax
    de60:	74 0c                	je     de6e <concat_blob_destroy+0x2e>
    de62:	83 ec 0c             	sub    $0xc,%esp
    de65:	50                   	push   %eax
    de66:	e8 b5 d7 ff ff       	call   b620 <bithenge_node_dec_ref>
    de6b:	83 c4 10             	add    $0x10,%esp
    de6e:	8b 53 20             	mov    0x20(%ebx),%edx
    de71:	85 d2                	test   %edx,%edx
    de73:	74 1f                	je     de94 <concat_blob_destroy+0x54>
    de75:	8b 0a                	mov    (%edx),%ecx
    de77:	85 c9                	test   %ecx,%ecx
    de79:	74 46                	je     dec1 <concat_blob_destroy+0x81>
    de7b:	8b 42 04             	mov    0x4(%edx),%eax
    de7e:	85 c0                	test   %eax,%eax
    de80:	74 2d                	je     deaf <concat_blob_destroy+0x6f>
    de82:	48                   	dec    %eax
    de83:	89 42 04             	mov    %eax,0x4(%edx)
    de86:	85 c0                	test   %eax,%eax
    de88:	75 0a                	jne    de94 <concat_blob_destroy+0x54>
    de8a:	83 ec 0c             	sub    $0xc,%esp
    de8d:	52                   	push   %edx
    de8e:	ff 51 04             	call   *0x4(%ecx)
    de91:	83 c4 10             	add    $0x10,%esp
    de94:	83 ec 0c             	sub    $0xc,%esp
    de97:	8b 43 24             	mov    0x24(%ebx),%eax
    de9a:	50                   	push   %eax
    de9b:	e8 40 cd ff ff       	call   abe0 <bithenge_scope_dec_ref>
    dea0:	89 5d 08             	mov    %ebx,0x8(%ebp)
    dea3:	83 c4 10             	add    $0x10,%esp
    dea6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    dea9:	c9                   	leave  
    deaa:	e9 41 42 00 00       	jmp    120f0 <free@plt>
    deaf:	52                   	push   %edx
    deb0:	6a 4c                	push   $0x4c
    deb2:	68 a3 13 01 00       	push   $0x113a3
    deb7:	68 6b 11 01 00       	push   $0x1116b
    debc:	e8 4f 40 00 00       	call   11f10 <assert_abort@plt>
    dec1:	51                   	push   %ecx
    dec2:	6a 4b                	push   $0x4b
    dec4:	68 a3 13 01 00       	push   $0x113a3
    dec9:	68 61 11 01 00       	push   $0x11161
    dece:	e8 3d 40 00 00       	call   11f10 <assert_abort@plt>
    ded3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    ded9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000dee0 <concat_blob_size>:
    dee0:	55                   	push   %ebp
    dee1:	89 e5                	mov    %esp,%ebp
    dee3:	57                   	push   %edi
    dee4:	56                   	push   %esi
    dee5:	53                   	push   %ebx
    dee6:	83 ec 1c             	sub    $0x1c,%esp
    dee9:	8b 5d 08             	mov    0x8(%ebp),%ebx
    deec:	8b 75 0c             	mov    0xc(%ebp),%esi
    deef:	8b 43 14             	mov    0x14(%ebx),%eax
    def2:	85 c0                	test   %eax,%eax
    def4:	74 2a                	je     df20 <concat_blob_size+0x40>
    def6:	8b 50 08             	mov    0x8(%eax),%edx
    def9:	85 d2                	test   %edx,%edx
    defb:	0f 84 8c 00 00 00    	je     df8d <concat_blob_size+0xad>
    df01:	51                   	push   %ecx
    df02:	51                   	push   %ecx
    df03:	56                   	push   %esi
    df04:	50                   	push   %eax
    df05:	ff 12                	call   *(%edx)
    df07:	8b 4b 18             	mov    0x18(%ebx),%ecx
    df0a:	8b 5b 1c             	mov    0x1c(%ebx),%ebx
    df0d:	01 0e                	add    %ecx,(%esi)
    df0f:	11 5e 04             	adc    %ebx,0x4(%esi)
    df12:	83 c4 10             	add    $0x10,%esp
    df15:	8d 65 f4             	lea    -0xc(%ebp),%esp
    df18:	5b                   	pop    %ebx
    df19:	5e                   	pop    %esi
    df1a:	5f                   	pop    %edi
    df1b:	5d                   	pop    %ebp
    df1c:	c3                   	ret    
    df1d:	8d 76 00             	lea    0x0(%esi),%esi
    df20:	8b 43 20             	mov    0x20(%ebx),%eax
    df23:	8b 4b 24             	mov    0x24(%ebx),%ecx
    df26:	85 c0                	test   %eax,%eax
    df28:	0f 84 f8 00 00 00    	je     e026 <concat_blob_size+0x146>
    df2e:	8b 10                	mov    (%eax),%edx
    df30:	85 d2                	test   %edx,%edx
    df32:	0f 84 dc 00 00 00    	je     e014 <concat_blob_size+0x134>
    df38:	57                   	push   %edi
    df39:	8d 7d e4             	lea    -0x1c(%ebp),%edi
    df3c:	57                   	push   %edi
    df3d:	51                   	push   %ecx
    df3e:	50                   	push   %eax
    df3f:	ff 12                	call   *(%edx)
    df41:	83 c4 10             	add    $0x10,%esp
    df44:	85 c0                	test   %eax,%eax
    df46:	75 cd                	jne    df15 <concat_blob_size+0x35>
    df48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    df4b:	83 38 05             	cmpl   $0x5,(%eax)
    df4e:	74 58                	je     dfa8 <concat_blob_size+0xc8>
    df50:	83 ec 0c             	sub    $0xc,%esp
    df53:	50                   	push   %eax
    df54:	e8 c7 d6 ff ff       	call   b620 <bithenge_node_dec_ref>
    df59:	8b 4b 24             	mov    0x24(%ebx),%ecx
    df5c:	58                   	pop    %eax
    df5d:	5a                   	pop    %edx
    df5e:	68 0c 19 01 00       	push   $0x1190c
    df63:	51                   	push   %ecx
    df64:	e8 17 ce ff ff       	call   ad80 <bithenge_scope_error>
    df69:	83 c4 10             	add    $0x10,%esp
    df6c:	85 c0                	test   %eax,%eax
    df6e:	75 a5                	jne    df15 <concat_blob_size+0x35>
    df70:	8b 43 14             	mov    0x14(%ebx),%eax
    df73:	85 c0                	test   %eax,%eax
    df75:	0f 85 7b ff ff ff    	jne    def6 <concat_blob_size+0x16>
    df7b:	56                   	push   %esi
    df7c:	6a 7f                	push   $0x7f
    df7e:	68 05 12 01 00       	push   $0x11205
    df83:	68 35 13 01 00       	push   $0x11335
    df88:	e8 83 3f 00 00       	call   11f10 <assert_abort@plt>
    df8d:	53                   	push   %ebx
    df8e:	68 80 00 00 00       	push   $0x80
    df93:	68 05 12 01 00       	push   $0x11205
    df98:	68 1d 12 01 00       	push   $0x1121d
    df9d:	e8 6e 3f 00 00       	call   11f10 <assert_abort@plt>
    dfa2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    dfa8:	8b 53 20             	mov    0x20(%ebx),%edx
    dfab:	89 43 14             	mov    %eax,0x14(%ebx)
    dfae:	85 d2                	test   %edx,%edx
    dfb0:	74 1f                	je     dfd1 <concat_blob_size+0xf1>
    dfb2:	8b 0a                	mov    (%edx),%ecx
    dfb4:	85 c9                	test   %ecx,%ecx
    dfb6:	74 4a                	je     e002 <concat_blob_size+0x122>
    dfb8:	8b 42 04             	mov    0x4(%edx),%eax
    dfbb:	85 c0                	test   %eax,%eax
    dfbd:	74 31                	je     dff0 <concat_blob_size+0x110>
    dfbf:	48                   	dec    %eax
    dfc0:	89 42 04             	mov    %eax,0x4(%edx)
    dfc3:	85 c0                	test   %eax,%eax
    dfc5:	75 0a                	jne    dfd1 <concat_blob_size+0xf1>
    dfc7:	83 ec 0c             	sub    $0xc,%esp
    dfca:	52                   	push   %edx
    dfcb:	ff 51 04             	call   *0x4(%ecx)
    dfce:	83 c4 10             	add    $0x10,%esp
    dfd1:	83 ec 0c             	sub    $0xc,%esp
    dfd4:	8b 7b 24             	mov    0x24(%ebx),%edi
    dfd7:	57                   	push   %edi
    dfd8:	e8 03 cc ff ff       	call   abe0 <bithenge_scope_dec_ref>
    dfdd:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
    dfe4:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
    dfeb:	83 c4 10             	add    $0x10,%esp
    dfee:	eb 80                	jmp    df70 <concat_blob_size+0x90>
    dff0:	50                   	push   %eax
    dff1:	6a 4c                	push   $0x4c
    dff3:	68 a3 13 01 00       	push   $0x113a3
    dff8:	68 6b 11 01 00       	push   $0x1116b
    dffd:	e8 0e 3f 00 00       	call   11f10 <assert_abort@plt>
    e002:	50                   	push   %eax
    e003:	6a 4b                	push   $0x4b
    e005:	68 a3 13 01 00       	push   $0x113a3
    e00a:	68 61 11 01 00       	push   $0x11161
    e00f:	e8 fc 3e 00 00       	call   11f10 <assert_abort@plt>
    e014:	50                   	push   %eax
    e015:	6a 5b                	push   $0x5b
    e017:	68 a3 13 01 00       	push   $0x113a3
    e01c:	68 61 11 01 00       	push   $0x11161
    e021:	e8 ea 3e 00 00       	call   11f10 <assert_abort@plt>
    e026:	50                   	push   %eax
    e027:	6a 5a                	push   $0x5a
    e029:	68 a3 13 01 00       	push   $0x113a3
    e02e:	68 35 13 01 00       	push   $0x11335
    e033:	e8 d8 3e 00 00       	call   11f10 <assert_abort@plt>
    e038:	90                   	nop
    e039:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000e040 <concat_blob_evaluate_b.part.14>:
    e040:	55                   	push   %ebp
    e041:	89 e5                	mov    %esp,%ebp
    e043:	56                   	push   %esi
    e044:	53                   	push   %ebx
    e045:	89 c3                	mov    %eax,%ebx
    e047:	83 ec 20             	sub    $0x20,%esp
    e04a:	8b 48 24             	mov    0x24(%eax),%ecx
    e04d:	8b 40 20             	mov    0x20(%eax),%eax
    e050:	85 c0                	test   %eax,%eax
    e052:	0f 84 aa 00 00 00    	je     e102 <concat_blob_evaluate_b.part.14+0xc2>
    e058:	8b 10                	mov    (%eax),%edx
    e05a:	85 d2                	test   %edx,%edx
    e05c:	0f 84 b2 00 00 00    	je     e114 <concat_blob_evaluate_b.part.14+0xd4>
    e062:	56                   	push   %esi
    e063:	8d 75 f4             	lea    -0xc(%ebp),%esi
    e066:	56                   	push   %esi
    e067:	51                   	push   %ecx
    e068:	50                   	push   %eax
    e069:	ff 12                	call   *(%edx)
    e06b:	83 c4 10             	add    $0x10,%esp
    e06e:	85 c0                	test   %eax,%eax
    e070:	75 24                	jne    e096 <concat_blob_evaluate_b.part.14+0x56>
    e072:	8b 55 f4             	mov    -0xc(%ebp),%edx
    e075:	83 3a 05             	cmpl   $0x5,(%edx)
    e078:	74 26                	je     e0a0 <concat_blob_evaluate_b.part.14+0x60>
    e07a:	83 ec 0c             	sub    $0xc,%esp
    e07d:	52                   	push   %edx
    e07e:	e8 9d d5 ff ff       	call   b620 <bithenge_node_dec_ref>
    e083:	5e                   	pop    %esi
    e084:	58                   	pop    %eax
    e085:	8b 43 24             	mov    0x24(%ebx),%eax
    e088:	68 0c 19 01 00       	push   $0x1190c
    e08d:	50                   	push   %eax
    e08e:	e8 ed cc ff ff       	call   ad80 <bithenge_scope_error>
    e093:	83 c4 10             	add    $0x10,%esp
    e096:	8d 65 f8             	lea    -0x8(%ebp),%esp
    e099:	5b                   	pop    %ebx
    e09a:	5e                   	pop    %esi
    e09b:	5d                   	pop    %ebp
    e09c:	c3                   	ret    
    e09d:	8d 76 00             	lea    0x0(%esi),%esi
    e0a0:	8b 4b 20             	mov    0x20(%ebx),%ecx
    e0a3:	89 53 14             	mov    %edx,0x14(%ebx)
    e0a6:	85 c9                	test   %ecx,%ecx
    e0a8:	74 19                	je     e0c3 <concat_blob_evaluate_b.part.14+0x83>
    e0aa:	8b 31                	mov    (%ecx),%esi
    e0ac:	85 f6                	test   %esi,%esi
    e0ae:	74 76                	je     e126 <concat_blob_evaluate_b.part.14+0xe6>
    e0b0:	8b 51 04             	mov    0x4(%ecx),%edx
    e0b3:	85 d2                	test   %edx,%edx
    e0b5:	0f 84 7d 00 00 00    	je     e138 <concat_blob_evaluate_b.part.14+0xf8>
    e0bb:	4a                   	dec    %edx
    e0bc:	89 51 04             	mov    %edx,0x4(%ecx)
    e0bf:	85 d2                	test   %edx,%edx
    e0c1:	74 2d                	je     e0f0 <concat_blob_evaluate_b.part.14+0xb0>
    e0c3:	83 ec 0c             	sub    $0xc,%esp
    e0c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    e0c9:	8b 43 24             	mov    0x24(%ebx),%eax
    e0cc:	50                   	push   %eax
    e0cd:	e8 0e cb ff ff       	call   abe0 <bithenge_scope_dec_ref>
    e0d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    e0d5:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
    e0dc:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
    e0e3:	83 c4 10             	add    $0x10,%esp
    e0e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
    e0e9:	5b                   	pop    %ebx
    e0ea:	5e                   	pop    %esi
    e0eb:	5d                   	pop    %ebp
    e0ec:	c3                   	ret    
    e0ed:	8d 76 00             	lea    0x0(%esi),%esi
    e0f0:	83 ec 0c             	sub    $0xc,%esp
    e0f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    e0f6:	51                   	push   %ecx
    e0f7:	ff 56 04             	call   *0x4(%esi)
    e0fa:	83 c4 10             	add    $0x10,%esp
    e0fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    e100:	eb c1                	jmp    e0c3 <concat_blob_evaluate_b.part.14+0x83>
    e102:	50                   	push   %eax
    e103:	6a 5a                	push   $0x5a
    e105:	68 a3 13 01 00       	push   $0x113a3
    e10a:	68 35 13 01 00       	push   $0x11335
    e10f:	e8 fc 3d 00 00       	call   11f10 <assert_abort@plt>
    e114:	50                   	push   %eax
    e115:	6a 5b                	push   $0x5b
    e117:	68 a3 13 01 00       	push   $0x113a3
    e11c:	68 61 11 01 00       	push   $0x11161
    e121:	e8 ea 3d 00 00       	call   11f10 <assert_abort@plt>
    e126:	51                   	push   %ecx
    e127:	6a 4b                	push   $0x4b
    e129:	68 a3 13 01 00       	push   $0x113a3
    e12e:	68 61 11 01 00       	push   $0x11161
    e133:	e8 d8 3d 00 00       	call   11f10 <assert_abort@plt>
    e138:	52                   	push   %edx
    e139:	6a 4c                	push   $0x4c
    e13b:	68 a3 13 01 00       	push   $0x113a3
    e140:	68 6b 11 01 00       	push   $0x1116b
    e145:	e8 c6 3d 00 00       	call   11f10 <assert_abort@plt>
    e14a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0000e150 <concat_blob_read_bits>:
    e150:	55                   	push   %ebp
    e151:	89 e5                	mov    %esp,%ebp
    e153:	57                   	push   %edi
    e154:	56                   	push   %esi
    e155:	53                   	push   %ebx
    e156:	83 ec 2c             	sub    $0x2c,%esp
    e159:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
    e160:	8b 5d 08             	mov    0x8(%ebp),%ebx
    e163:	8b 55 10             	mov    0x10(%ebp),%edx
    e166:	8b 7d 1c             	mov    0x1c(%ebp),%edi
    e169:	8b 45 0c             	mov    0xc(%ebp),%eax
    e16c:	8b 73 1c             	mov    0x1c(%ebx),%esi
    e16f:	89 7d cc             	mov    %edi,-0x34(%ebp)
    e172:	89 45 d0             	mov    %eax,-0x30(%ebp)
    e175:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    e178:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    e17f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    e186:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    e18d:	8b 7b 18             	mov    0x18(%ebx),%edi
    e190:	39 d6                	cmp    %edx,%esi
    e192:	0f 82 c8 00 00 00    	jb     e260 <concat_blob_read_bits+0x110>
    e198:	0f 86 ba 00 00 00    	jbe    e258 <concat_blob_read_bits+0x108>
    e19e:	8b 45 18             	mov    0x18(%ebp),%eax
    e1a1:	31 c9                	xor    %ecx,%ecx
    e1a3:	8a 4d cc             	mov    -0x34(%ebp),%cl
    e1a6:	8b 50 04             	mov    0x4(%eax),%edx
    e1a9:	8b 00                	mov    (%eax),%eax
    e1ab:	89 45 d8             	mov    %eax,-0x28(%ebp)
    e1ae:	8b 45 08             	mov    0x8(%ebp),%eax
    e1b1:	89 55 dc             	mov    %edx,-0x24(%ebp)
    e1b4:	8b 40 10             	mov    0x10(%eax),%eax
    e1b7:	85 c0                	test   %eax,%eax
    e1b9:	0f 84 d7 01 00 00    	je     e396 <concat_blob_read_bits+0x246>
    e1bf:	8b 50 08             	mov    0x8(%eax),%edx
    e1c2:	85 d2                	test   %edx,%edx
    e1c4:	0f 84 b7 01 00 00    	je     e381 <concat_blob_read_bits+0x231>
    e1ca:	8b 52 08             	mov    0x8(%edx),%edx
    e1cd:	85 d2                	test   %edx,%edx
    e1cf:	0f 84 a5 01 00 00    	je     e37a <concat_blob_read_bits+0x22a>
    e1d5:	8b 75 14             	mov    0x14(%ebp),%esi
    e1d8:	53                   	push   %ebx
    e1d9:	53                   	push   %ebx
    e1da:	51                   	push   %ecx
    e1db:	8d 4d d8             	lea    -0x28(%ebp),%ecx
    e1de:	8b 7d d4             	mov    -0x2c(%ebp),%edi
    e1e1:	51                   	push   %ecx
    e1e2:	56                   	push   %esi
    e1e3:	8b 75 d0             	mov    -0x30(%ebp),%esi
    e1e6:	57                   	push   %edi
    e1e7:	56                   	push   %esi
    e1e8:	50                   	push   %eax
    e1e9:	ff d2                	call   *%edx
    e1eb:	83 c4 20             	add    $0x20,%esp
    e1ee:	85 c0                	test   %eax,%eax
    e1f0:	0f 85 42 01 00 00    	jne    e338 <concat_blob_read_bits+0x1e8>
    e1f6:	8b 45 18             	mov    0x18(%ebp),%eax
    e1f9:	89 fa                	mov    %edi,%edx
    e1fb:	8b 08                	mov    (%eax),%ecx
    e1fd:	8b 58 04             	mov    0x4(%eax),%ebx
    e200:	89 f0                	mov    %esi,%eax
    e202:	8b 75 08             	mov    0x8(%ebp),%esi
    e205:	01 c8                	add    %ecx,%eax
    e207:	11 da                	adc    %ebx,%edx
    e209:	3b 56 1c             	cmp    0x1c(%esi),%edx
    e20c:	0f 82 e9 00 00 00    	jb     e2fb <concat_blob_read_bits+0x1ab>
    e212:	0f 86 58 01 00 00    	jbe    e370 <concat_blob_read_bits+0x220>
    e218:	8b 45 08             	mov    0x8(%ebp),%eax
    e21b:	8b 50 14             	mov    0x14(%eax),%edx
    e21e:	85 d2                	test   %edx,%edx
    e220:	0f 84 2c 01 00 00    	je     e352 <concat_blob_read_bits+0x202>
    e226:	8b 75 d8             	mov    -0x28(%ebp),%esi
    e229:	8b 7d dc             	mov    -0x24(%ebp),%edi
    e22c:	29 f1                	sub    %esi,%ecx
    e22e:	89 f0                	mov    %esi,%eax
    e230:	19 fb                	sbb    %edi,%ebx
    e232:	83 e0 07             	and    $0x7,%eax
    e235:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    e238:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    e23b:	85 c0                	test   %eax,%eax
    e23d:	74 59                	je     e298 <concat_blob_read_bits+0x148>
    e23f:	50                   	push   %eax
    e240:	68 3e 04 00 00       	push   $0x43e
    e245:	68 a8 18 01 00       	push   $0x118a8
    e24a:	68 cc 18 01 00       	push   $0x118cc
    e24f:	e8 bc 3c 00 00       	call   11f10 <assert_abort@plt>
    e254:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    e258:	39 c7                	cmp    %eax,%edi
    e25a:	0f 87 3e ff ff ff    	ja     e19e <concat_blob_read_bits+0x4e>
    e260:	8b 45 18             	mov    0x18(%ebp),%eax
    e263:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    e266:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
    e269:	8b 50 04             	mov    0x4(%eax),%edx
    e26c:	8b 00                	mov    (%eax),%eax
    e26e:	01 c1                	add    %eax,%ecx
    e270:	11 d3                	adc    %edx,%ebx
    e272:	39 de                	cmp    %ebx,%esi
    e274:	0f 83 ae 00 00 00    	jae    e328 <concat_blob_read_bits+0x1d8>
    e27a:	8b 5d 08             	mov    0x8(%ebp),%ebx
    e27d:	8b 4b 14             	mov    0x14(%ebx),%ecx
    e280:	85 c9                	test   %ecx,%ecx
    e282:	0f 84 c8 00 00 00    	je     e350 <concat_blob_read_bits+0x200>
    e288:	8b 75 d8             	mov    -0x28(%ebp),%esi
    e28b:	8b 7d dc             	mov    -0x24(%ebp),%edi
    e28e:	29 f0                	sub    %esi,%eax
    e290:	19 fa                	sbb    %edi,%edx
    e292:	89 45 e0             	mov    %eax,-0x20(%ebp)
    e295:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    e298:	89 fb                	mov    %edi,%ebx
    e29a:	89 f1                	mov    %esi,%ecx
    e29c:	0f ac d9 03          	shrd   $0x3,%ebx,%ecx
    e2a0:	8b 45 14             	mov    0x14(%ebp),%eax
    e2a3:	31 d2                	xor    %edx,%edx
    e2a5:	01 c8                	add    %ecx,%eax
    e2a7:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    e2aa:	01 f1                	add    %esi,%ecx
    e2ac:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
    e2af:	11 fb                	adc    %edi,%ebx
    e2b1:	8b 7d 08             	mov    0x8(%ebp),%edi
    e2b4:	8a 55 cc             	mov    -0x34(%ebp),%dl
    e2b7:	2b 4f 18             	sub    0x18(%edi),%ecx
    e2ba:	8b 77 14             	mov    0x14(%edi),%esi
    e2bd:	1b 5f 1c             	sbb    0x1c(%edi),%ebx
    e2c0:	85 f6                	test   %esi,%esi
    e2c2:	0f 84 ce 00 00 00    	je     e396 <concat_blob_read_bits+0x246>
    e2c8:	8b 7e 08             	mov    0x8(%esi),%edi
    e2cb:	85 ff                	test   %edi,%edi
    e2cd:	0f 84 ae 00 00 00    	je     e381 <concat_blob_read_bits+0x231>
    e2d3:	8b 7f 08             	mov    0x8(%edi),%edi
    e2d6:	85 ff                	test   %edi,%edi
    e2d8:	0f 84 9c 00 00 00    	je     e37a <concat_blob_read_bits+0x22a>
    e2de:	83 ec 08             	sub    $0x8,%esp
    e2e1:	52                   	push   %edx
    e2e2:	8d 55 e0             	lea    -0x20(%ebp),%edx
    e2e5:	52                   	push   %edx
    e2e6:	50                   	push   %eax
    e2e7:	53                   	push   %ebx
    e2e8:	51                   	push   %ecx
    e2e9:	56                   	push   %esi
    e2ea:	ff d7                	call   *%edi
    e2ec:	83 c4 20             	add    $0x20,%esp
    e2ef:	85 c0                	test   %eax,%eax
    e2f1:	75 45                	jne    e338 <concat_blob_read_bits+0x1e8>
    e2f3:	8b 45 18             	mov    0x18(%ebp),%eax
    e2f6:	8b 08                	mov    (%eax),%ecx
    e2f8:	8b 58 04             	mov    0x4(%eax),%ebx
    e2fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
    e2fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    e301:	03 45 d8             	add    -0x28(%ebp),%eax
    e304:	13 55 dc             	adc    -0x24(%ebp),%edx
    e307:	39 da                	cmp    %ebx,%edx
    e309:	72 23                	jb     e32e <concat_blob_read_bits+0x1de>
    e30b:	76 5b                	jbe    e368 <concat_blob_read_bits+0x218>
    e30d:	53                   	push   %ebx
    e30e:	68 45 04 00 00       	push   $0x445
    e313:	68 a8 18 01 00       	push   $0x118a8
    e318:	68 dc 18 01 00       	push   $0x118dc
    e31d:	e8 ee 3b 00 00       	call   11f10 <assert_abort@plt>
    e322:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    e328:	76 16                	jbe    e340 <concat_blob_read_bits+0x1f0>
    e32a:	31 c0                	xor    %eax,%eax
    e32c:	31 d2                	xor    %edx,%edx
    e32e:	8b 7d 18             	mov    0x18(%ebp),%edi
    e331:	89 07                	mov    %eax,(%edi)
    e333:	89 57 04             	mov    %edx,0x4(%edi)
    e336:	31 c0                	xor    %eax,%eax
    e338:	8d 65 f4             	lea    -0xc(%ebp),%esp
    e33b:	5b                   	pop    %ebx
    e33c:	5e                   	pop    %esi
    e33d:	5f                   	pop    %edi
    e33e:	5d                   	pop    %ebp
    e33f:	c3                   	ret    
    e340:	39 cf                	cmp    %ecx,%edi
    e342:	0f 82 32 ff ff ff    	jb     e27a <concat_blob_read_bits+0x12a>
    e348:	eb e0                	jmp    e32a <concat_blob_read_bits+0x1da>
    e34a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    e350:	89 d8                	mov    %ebx,%eax
    e352:	e8 e9 fc ff ff       	call   e040 <concat_blob_evaluate_b.part.14>
    e357:	85 c0                	test   %eax,%eax
    e359:	75 dd                	jne    e338 <concat_blob_read_bits+0x1e8>
    e35b:	8b 45 18             	mov    0x18(%ebp),%eax
    e35e:	8b 08                	mov    (%eax),%ecx
    e360:	8b 58 04             	mov    0x4(%eax),%ebx
    e363:	e9 be fe ff ff       	jmp    e226 <concat_blob_read_bits+0xd6>
    e368:	39 c8                	cmp    %ecx,%eax
    e36a:	76 c2                	jbe    e32e <concat_blob_read_bits+0x1de>
    e36c:	eb 9f                	jmp    e30d <concat_blob_read_bits+0x1bd>
    e36e:	66 90                	xchg   %ax,%ax
    e370:	3b 46 18             	cmp    0x18(%esi),%eax
    e373:	76 86                	jbe    e2fb <concat_blob_read_bits+0x1ab>
    e375:	e9 9e fe ff ff       	jmp    e218 <concat_blob_read_bits+0xc8>
    e37a:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    e37f:	eb b7                	jmp    e338 <concat_blob_read_bits+0x1e8>
    e381:	57                   	push   %edi
    e382:	68 b3 00 00 00       	push   $0xb3
    e387:	68 05 12 01 00       	push   $0x11205
    e38c:	68 1d 12 01 00       	push   $0x1121d
    e391:	e8 7a 3b 00 00       	call   11f10 <assert_abort@plt>
    e396:	50                   	push   %eax
    e397:	68 b2 00 00 00       	push   $0xb2
    e39c:	68 05 12 01 00       	push   $0x11205
    e3a1:	68 35 13 01 00       	push   $0x11335
    e3a6:	e8 65 3b 00 00       	call   11f10 <assert_abort@plt>
    e3ab:	90                   	nop
    e3ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000e3b0 <concat_blob_read>:
    e3b0:	55                   	push   %ebp
    e3b1:	89 e5                	mov    %esp,%ebp
    e3b3:	57                   	push   %edi
    e3b4:	56                   	push   %esi
    e3b5:	53                   	push   %ebx
    e3b6:	83 ec 2c             	sub    $0x2c,%esp
    e3b9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
    e3c0:	8b 45 08             	mov    0x8(%ebp),%eax
    e3c3:	8b 7d 10             	mov    0x10(%ebp),%edi
    e3c6:	8b 75 0c             	mov    0xc(%ebp),%esi
    e3c9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    e3d0:	8b 50 1c             	mov    0x1c(%eax),%edx
    e3d3:	8b 40 18             	mov    0x18(%eax),%eax
    e3d6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    e3dd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    e3e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
    e3e7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    e3ea:	39 fa                	cmp    %edi,%edx
    e3ec:	0f 82 1e 01 00 00    	jb     e510 <concat_blob_read+0x160>
    e3f2:	0f 86 10 01 00 00    	jbe    e508 <concat_blob_read+0x158>
    e3f8:	8b 45 18             	mov    0x18(%ebp),%eax
    e3fb:	8b 50 04             	mov    0x4(%eax),%edx
    e3fe:	8b 00                	mov    (%eax),%eax
    e400:	89 45 d8             	mov    %eax,-0x28(%ebp)
    e403:	8b 45 08             	mov    0x8(%ebp),%eax
    e406:	89 55 dc             	mov    %edx,-0x24(%ebp)
    e409:	8b 40 10             	mov    0x10(%eax),%eax
    e40c:	85 c0                	test   %eax,%eax
    e40e:	0f 84 bb 01 00 00    	je     e5cf <concat_blob_read+0x21f>
    e414:	8b 50 08             	mov    0x8(%eax),%edx
    e417:	85 d2                	test   %edx,%edx
    e419:	0f 84 47 01 00 00    	je     e566 <concat_blob_read+0x1b6>
    e41f:	8b 52 04             	mov    0x4(%edx),%edx
    e422:	85 d2                	test   %edx,%edx
    e424:	0f 84 be 01 00 00    	je     e5e8 <concat_blob_read+0x238>
    e42a:	83 ec 0c             	sub    $0xc,%esp
    e42d:	8d 4d d8             	lea    -0x28(%ebp),%ecx
    e430:	8b 5d 14             	mov    0x14(%ebp),%ebx
    e433:	51                   	push   %ecx
    e434:	53                   	push   %ebx
    e435:	57                   	push   %edi
    e436:	56                   	push   %esi
    e437:	50                   	push   %eax
    e438:	ff d2                	call   *%edx
    e43a:	83 c4 20             	add    $0x20,%esp
    e43d:	85 c0                	test   %eax,%eax
    e43f:	0f 85 f4 00 00 00    	jne    e539 <concat_blob_read+0x189>
    e445:	8b 5d 08             	mov    0x8(%ebp),%ebx
    e448:	8b 45 18             	mov    0x18(%ebp),%eax
    e44b:	8b 4b 18             	mov    0x18(%ebx),%ecx
    e44e:	8b 50 04             	mov    0x4(%eax),%edx
    e451:	8b 5b 1c             	mov    0x1c(%ebx),%ebx
    e454:	8b 00                	mov    (%eax),%eax
    e456:	89 4d d0             	mov    %ecx,-0x30(%ebp)
    e459:	89 f1                	mov    %esi,%ecx
    e45b:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
    e45e:	01 c1                	add    %eax,%ecx
    e460:	89 fb                	mov    %edi,%ebx
    e462:	11 d3                	adc    %edx,%ebx
    e464:	3b 5d d4             	cmp    -0x2c(%ebp),%ebx
    e467:	72 6d                	jb     e4d6 <concat_blob_read+0x126>
    e469:	0f 86 e9 00 00 00    	jbe    e558 <concat_blob_read+0x1a8>
    e46f:	90                   	nop
    e470:	8b 5d 08             	mov    0x8(%ebp),%ebx
    e473:	8b 5b 14             	mov    0x14(%ebx),%ebx
    e476:	89 5d cc             	mov    %ebx,-0x34(%ebp)
    e479:	85 db                	test   %ebx,%ebx
    e47b:	0f 84 ff 00 00 00    	je     e580 <concat_blob_read+0x1d0>
    e481:	2b 45 d8             	sub    -0x28(%ebp),%eax
    e484:	1b 55 dc             	sbb    -0x24(%ebp),%edx
    e487:	89 45 e0             	mov    %eax,-0x20(%ebp)
    e48a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    e48d:	8b 45 14             	mov    0x14(%ebp),%eax
    e490:	8b 55 d8             	mov    -0x28(%ebp),%edx
    e493:	01 d0                	add    %edx,%eax
    e495:	03 75 d8             	add    -0x28(%ebp),%esi
    e498:	13 7d dc             	adc    -0x24(%ebp),%edi
    e49b:	2b 75 d0             	sub    -0x30(%ebp),%esi
    e49e:	1b 7d d4             	sbb    -0x2c(%ebp),%edi
    e4a1:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    e4a4:	8b 51 08             	mov    0x8(%ecx),%edx
    e4a7:	85 d2                	test   %edx,%edx
    e4a9:	0f 84 b7 00 00 00    	je     e566 <concat_blob_read+0x1b6>
    e4af:	8b 52 04             	mov    0x4(%edx),%edx
    e4b2:	85 d2                	test   %edx,%edx
    e4b4:	0f 84 2e 01 00 00    	je     e5e8 <concat_blob_read+0x238>
    e4ba:	83 ec 0c             	sub    $0xc,%esp
    e4bd:	8d 5d e0             	lea    -0x20(%ebp),%ebx
    e4c0:	53                   	push   %ebx
    e4c1:	50                   	push   %eax
    e4c2:	57                   	push   %edi
    e4c3:	56                   	push   %esi
    e4c4:	51                   	push   %ecx
    e4c5:	ff d2                	call   *%edx
    e4c7:	83 c4 20             	add    $0x20,%esp
    e4ca:	85 c0                	test   %eax,%eax
    e4cc:	75 6b                	jne    e539 <concat_blob_read+0x189>
    e4ce:	8b 45 18             	mov    0x18(%ebp),%eax
    e4d1:	8b 50 04             	mov    0x4(%eax),%edx
    e4d4:	8b 00                	mov    (%eax),%eax
    e4d6:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    e4d9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    e4dc:	03 4d d8             	add    -0x28(%ebp),%ecx
    e4df:	13 5d dc             	adc    -0x24(%ebp),%ebx
    e4e2:	39 d3                	cmp    %edx,%ebx
    e4e4:	72 49                	jb     e52f <concat_blob_read+0x17f>
    e4e6:	77 04                	ja     e4ec <concat_blob_read+0x13c>
    e4e8:	39 c1                	cmp    %eax,%ecx
    e4ea:	76 43                	jbe    e52f <concat_blob_read+0x17f>
    e4ec:	51                   	push   %ecx
    e4ed:	68 26 04 00 00       	push   $0x426
    e4f2:	68 a8 18 01 00       	push   $0x118a8
    e4f7:	68 dc 18 01 00       	push   $0x118dc
    e4fc:	e8 0f 3a 00 00       	call   11f10 <assert_abort@plt>
    e501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    e508:	39 f0                	cmp    %esi,%eax
    e50a:	0f 87 e8 fe ff ff    	ja     e3f8 <concat_blob_read+0x48>
    e510:	8b 45 18             	mov    0x18(%ebp),%eax
    e513:	89 f1                	mov    %esi,%ecx
    e515:	89 fb                	mov    %edi,%ebx
    e517:	8b 50 04             	mov    0x4(%eax),%edx
    e51a:	8b 00                	mov    (%eax),%eax
    e51c:	01 c1                	add    %eax,%ecx
    e51e:	11 d3                	adc    %edx,%ebx
    e520:	39 5d d4             	cmp    %ebx,-0x2c(%ebp)
    e523:	0f 82 47 ff ff ff    	jb     e470 <concat_blob_read+0xc0>
    e529:	76 1d                	jbe    e548 <concat_blob_read+0x198>
    e52b:	31 c9                	xor    %ecx,%ecx
    e52d:	31 db                	xor    %ebx,%ebx
    e52f:	8b 45 18             	mov    0x18(%ebp),%eax
    e532:	89 08                	mov    %ecx,(%eax)
    e534:	89 58 04             	mov    %ebx,0x4(%eax)
    e537:	31 c0                	xor    %eax,%eax
    e539:	8d 65 f4             	lea    -0xc(%ebp),%esp
    e53c:	5b                   	pop    %ebx
    e53d:	5e                   	pop    %esi
    e53e:	5f                   	pop    %edi
    e53f:	5d                   	pop    %ebp
    e540:	c3                   	ret    
    e541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    e548:	39 4d d0             	cmp    %ecx,-0x30(%ebp)
    e54b:	0f 82 1f ff ff ff    	jb     e470 <concat_blob_read+0xc0>
    e551:	eb d8                	jmp    e52b <concat_blob_read+0x17b>
    e553:	90                   	nop
    e554:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    e558:	3b 4d d0             	cmp    -0x30(%ebp),%ecx
    e55b:	0f 86 75 ff ff ff    	jbe    e4d6 <concat_blob_read+0x126>
    e561:	e9 0a ff ff ff       	jmp    e470 <concat_blob_read+0xc0>
    e566:	56                   	push   %esi
    e567:	68 97 00 00 00       	push   $0x97
    e56c:	68 05 12 01 00       	push   $0x11205
    e571:	68 1d 12 01 00       	push   $0x1121d
    e576:	e8 95 39 00 00       	call   11f10 <assert_abort@plt>
    e57b:	90                   	nop
    e57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    e580:	8b 45 08             	mov    0x8(%ebp),%eax
    e583:	e8 b8 fa ff ff       	call   e040 <concat_blob_evaluate_b.part.14>
    e588:	85 c0                	test   %eax,%eax
    e58a:	75 ad                	jne    e539 <concat_blob_read+0x189>
    e58c:	8b 45 08             	mov    0x8(%ebp),%eax
    e58f:	8b 48 18             	mov    0x18(%eax),%ecx
    e592:	8b 58 1c             	mov    0x1c(%eax),%ebx
    e595:	8b 40 14             	mov    0x14(%eax),%eax
    e598:	89 45 cc             	mov    %eax,-0x34(%ebp)
    e59b:	8b 45 18             	mov    0x18(%ebp),%eax
    e59e:	8b 50 04             	mov    0x4(%eax),%edx
    e5a1:	8b 00                	mov    (%eax),%eax
    e5a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
    e5a6:	2b 45 d8             	sub    -0x28(%ebp),%eax
    e5a9:	89 45 e0             	mov    %eax,-0x20(%ebp)
    e5ac:	8b 45 14             	mov    0x14(%ebp),%eax
    e5af:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    e5b2:	1b 55 dc             	sbb    -0x24(%ebp),%edx
    e5b5:	03 45 d8             	add    -0x28(%ebp),%eax
    e5b8:	03 75 d8             	add    -0x28(%ebp),%esi
    e5bb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    e5be:	13 7d dc             	adc    -0x24(%ebp),%edi
    e5c1:	29 ce                	sub    %ecx,%esi
    e5c3:	19 df                	sbb    %ebx,%edi
    e5c5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
    e5c9:	0f 85 d2 fe ff ff    	jne    e4a1 <concat_blob_read+0xf1>
    e5cf:	57                   	push   %edi
    e5d0:	68 96 00 00 00       	push   $0x96
    e5d5:	68 05 12 01 00       	push   $0x11205
    e5da:	68 35 13 01 00       	push   $0x11335
    e5df:	e8 2c 39 00 00       	call   11f10 <assert_abort@plt>
    e5e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    e5e8:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    e5ed:	e9 47 ff ff ff       	jmp    e539 <concat_blob_read+0x189>
    e5f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    e5f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000e600 <bithenge_init_expression>:
    e600:	55                   	push   %ebp
    e601:	89 e5                	mov    %esp,%ebp
    e603:	83 ec 08             	sub    $0x8,%esp
    e606:	8b 45 0c             	mov    0xc(%ebp),%eax
    e609:	8b 55 08             	mov    0x8(%ebp),%edx
    e60c:	85 c0                	test   %eax,%eax
    e60e:	74 1a                	je     e62a <bithenge_init_expression+0x2a>
    e610:	8b 08                	mov    (%eax),%ecx
    e612:	85 c9                	test   %ecx,%ecx
    e614:	74 38                	je     e64e <bithenge_init_expression+0x4e>
    e616:	8b 48 04             	mov    0x4(%eax),%ecx
    e619:	85 c9                	test   %ecx,%ecx
    e61b:	74 1f                	je     e63c <bithenge_init_expression+0x3c>
    e61d:	89 02                	mov    %eax,(%edx)
    e61f:	c7 42 04 01 00 00 00 	movl   $0x1,0x4(%edx)
    e626:	31 c0                	xor    %eax,%eax
    e628:	c9                   	leave  
    e629:	c3                   	ret    
    e62a:	50                   	push   %eax
    e62b:	6a 35                	push   $0x35
    e62d:	68 a8 18 01 00       	push   $0x118a8
    e632:	68 67 11 01 00       	push   $0x11167
    e637:	e8 d4 38 00 00       	call   11f10 <assert_abort@plt>
    e63c:	50                   	push   %eax
    e63d:	6a 37                	push   $0x37
    e63f:	68 a8 18 01 00       	push   $0x118a8
    e644:	68 18 15 01 00       	push   $0x11518
    e649:	e8 c2 38 00 00       	call   11f10 <assert_abort@plt>
    e64e:	50                   	push   %eax
    e64f:	6a 36                	push   $0x36
    e651:	68 a8 18 01 00       	push   $0x118a8
    e656:	68 f5 18 01 00       	push   $0x118f5
    e65b:	e8 b0 38 00 00       	call   11f10 <assert_abort@plt>

0000e660 <bithenge_binary_expression>:
    e660:	55                   	push   %ebp
    e661:	89 e5                	mov    %esp,%ebp
    e663:	56                   	push   %esi
    e664:	53                   	push   %ebx
    e665:	83 ec 0c             	sub    $0xc,%esp
    e668:	8b 5d 10             	mov    0x10(%ebp),%ebx
    e66b:	8b 75 14             	mov    0x14(%ebp),%esi
    e66e:	6a 14                	push   $0x14
    e670:	e8 eb 37 00 00       	call   11e60 <malloc@plt>
    e675:	83 c4 10             	add    $0x10,%esp
    e678:	85 c0                	test   %eax,%eax
    e67a:	74 2c                	je     e6a8 <bithenge_binary_expression+0x48>
    e67c:	8b 55 0c             	mov    0xc(%ebp),%edx
    e67f:	c7 00 24 1a 01 00    	movl   $0x11a24,(%eax)
    e685:	89 50 08             	mov    %edx,0x8(%eax)
    e688:	8b 55 08             	mov    0x8(%ebp),%edx
    e68b:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    e692:	89 58 0c             	mov    %ebx,0xc(%eax)
    e695:	89 70 10             	mov    %esi,0x10(%eax)
    e698:	89 02                	mov    %eax,(%edx)
    e69a:	8d 65 f8             	lea    -0x8(%ebp),%esp
    e69d:	31 c0                	xor    %eax,%eax
    e69f:	5b                   	pop    %ebx
    e6a0:	5e                   	pop    %esi
    e6a1:	5d                   	pop    %ebp
    e6a2:	c3                   	ret    
    e6a3:	90                   	nop
    e6a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    e6a8:	85 db                	test   %ebx,%ebx
    e6aa:	74 15                	je     e6c1 <bithenge_binary_expression+0x61>
    e6ac:	8b 13                	mov    (%ebx),%edx
    e6ae:	85 d2                	test   %edx,%edx
    e6b0:	74 74                	je     e726 <bithenge_binary_expression+0xc6>
    e6b2:	8b 43 04             	mov    0x4(%ebx),%eax
    e6b5:	85 c0                	test   %eax,%eax
    e6b7:	74 5b                	je     e714 <bithenge_binary_expression+0xb4>
    e6b9:	48                   	dec    %eax
    e6ba:	89 43 04             	mov    %eax,0x4(%ebx)
    e6bd:	85 c0                	test   %eax,%eax
    e6bf:	74 37                	je     e6f8 <bithenge_binary_expression+0x98>
    e6c1:	85 f6                	test   %esi,%esi
    e6c3:	74 15                	je     e6da <bithenge_binary_expression+0x7a>
    e6c5:	8b 16                	mov    (%esi),%edx
    e6c7:	85 d2                	test   %edx,%edx
    e6c9:	74 5b                	je     e726 <bithenge_binary_expression+0xc6>
    e6cb:	8b 46 04             	mov    0x4(%esi),%eax
    e6ce:	85 c0                	test   %eax,%eax
    e6d0:	74 42                	je     e714 <bithenge_binary_expression+0xb4>
    e6d2:	48                   	dec    %eax
    e6d3:	89 46 04             	mov    %eax,0x4(%esi)
    e6d6:	85 c0                	test   %eax,%eax
    e6d8:	74 2e                	je     e708 <bithenge_binary_expression+0xa8>
    e6da:	83 ec 0c             	sub    $0xc,%esp
    e6dd:	6a 00                	push   $0x0
    e6df:	e8 0c 3a 00 00       	call   120f0 <free@plt>
    e6e4:	83 c4 10             	add    $0x10,%esp
    e6e7:	8d 65 f8             	lea    -0x8(%ebp),%esp
    e6ea:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    e6ef:	5b                   	pop    %ebx
    e6f0:	5e                   	pop    %esi
    e6f1:	5d                   	pop    %ebp
    e6f2:	c3                   	ret    
    e6f3:	90                   	nop
    e6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    e6f8:	83 ec 0c             	sub    $0xc,%esp
    e6fb:	53                   	push   %ebx
    e6fc:	ff 52 04             	call   *0x4(%edx)
    e6ff:	83 c4 10             	add    $0x10,%esp
    e702:	eb bd                	jmp    e6c1 <bithenge_binary_expression+0x61>
    e704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    e708:	83 ec 0c             	sub    $0xc,%esp
    e70b:	56                   	push   %esi
    e70c:	ff 52 04             	call   *0x4(%edx)
    e70f:	83 c4 10             	add    $0x10,%esp
    e712:	eb c6                	jmp    e6da <bithenge_binary_expression+0x7a>
    e714:	50                   	push   %eax
    e715:	6a 4c                	push   $0x4c
    e717:	68 a3 13 01 00       	push   $0x113a3
    e71c:	68 6b 11 01 00       	push   $0x1116b
    e721:	e8 ea 37 00 00       	call   11f10 <assert_abort@plt>
    e726:	52                   	push   %edx
    e727:	6a 4b                	push   $0x4b
    e729:	68 a3 13 01 00       	push   $0x113a3
    e72e:	68 61 11 01 00       	push   $0x11161
    e733:	e8 d8 37 00 00       	call   11f10 <assert_abort@plt>
    e738:	90                   	nop
    e739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000e740 <bithenge_in_node_expression>:
    e740:	55                   	push   %ebp
    e741:	a1 fc 3b 01 00       	mov    0x13bfc,%eax
    e746:	89 e5                	mov    %esp,%ebp
    e748:	40                   	inc    %eax
    e749:	a3 fc 3b 01 00       	mov    %eax,0x13bfc
    e74e:	8b 45 08             	mov    0x8(%ebp),%eax
    e751:	c7 00 f8 3b 01 00    	movl   $0x13bf8,(%eax)
    e757:	31 c0                	xor    %eax,%eax
    e759:	5d                   	pop    %ebp
    e75a:	c3                   	ret    
    e75b:	90                   	nop
    e75c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000e760 <bithenge_current_node_expression>:
    e760:	55                   	push   %ebp
    e761:	a1 f4 3b 01 00       	mov    0x13bf4,%eax
    e766:	89 e5                	mov    %esp,%ebp
    e768:	40                   	inc    %eax
    e769:	a3 f4 3b 01 00       	mov    %eax,0x13bf4
    e76e:	8b 45 08             	mov    0x8(%ebp),%eax
    e771:	c7 00 f0 3b 01 00    	movl   $0x13bf0,(%eax)
    e777:	31 c0                	xor    %eax,%eax
    e779:	5d                   	pop    %ebp
    e77a:	c3                   	ret    
    e77b:	90                   	nop
    e77c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000e780 <bithenge_param_expression>:
    e780:	55                   	push   %ebp
    e781:	89 e5                	mov    %esp,%ebp
    e783:	83 ec 14             	sub    $0x14,%esp
    e786:	6a 0c                	push   $0xc
    e788:	e8 d3 36 00 00       	call   11e60 <malloc@plt>
    e78d:	83 c4 10             	add    $0x10,%esp
    e790:	85 c0                	test   %eax,%eax
    e792:	74 1c                	je     e7b0 <bithenge_param_expression+0x30>
    e794:	8b 55 0c             	mov    0xc(%ebp),%edx
    e797:	c7 00 0c 1a 01 00    	movl   $0x11a0c,(%eax)
    e79d:	89 50 08             	mov    %edx,0x8(%eax)
    e7a0:	8b 55 08             	mov    0x8(%ebp),%edx
    e7a3:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    e7aa:	89 02                	mov    %eax,(%edx)
    e7ac:	31 c0                	xor    %eax,%eax
    e7ae:	c9                   	leave  
    e7af:	c3                   	ret    
    e7b0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    e7b5:	c9                   	leave  
    e7b6:	c3                   	ret    
    e7b7:	89 f6                	mov    %esi,%esi
    e7b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000e7c0 <bithenge_const_expression>:
    e7c0:	55                   	push   %ebp
    e7c1:	89 e5                	mov    %esp,%ebp
    e7c3:	53                   	push   %ebx
    e7c4:	83 ec 10             	sub    $0x10,%esp
    e7c7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    e7ca:	6a 0c                	push   $0xc
    e7cc:	e8 8f 36 00 00       	call   11e60 <malloc@plt>
    e7d1:	83 c4 10             	add    $0x10,%esp
    e7d4:	85 c0                	test   %eax,%eax
    e7d6:	74 20                	je     e7f8 <bithenge_const_expression+0x38>
    e7d8:	8b 55 08             	mov    0x8(%ebp),%edx
    e7db:	89 58 08             	mov    %ebx,0x8(%eax)
    e7de:	c7 00 04 1a 01 00    	movl   $0x11a04,(%eax)
    e7e4:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    e7eb:	89 02                	mov    %eax,(%edx)
    e7ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    e7f0:	31 c0                	xor    %eax,%eax
    e7f2:	c9                   	leave  
    e7f3:	c3                   	ret    
    e7f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    e7f8:	83 ec 0c             	sub    $0xc,%esp
    e7fb:	6a 00                	push   $0x0
    e7fd:	e8 ee 38 00 00       	call   120f0 <free@plt>
    e802:	89 1c 24             	mov    %ebx,(%esp)
    e805:	e8 16 ce ff ff       	call   b620 <bithenge_node_dec_ref>
    e80a:	83 c4 10             	add    $0x10,%esp
    e80d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    e812:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    e815:	c9                   	leave  
    e816:	c3                   	ret    
    e817:	89 f6                	mov    %esi,%esi
    e819:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000e820 <bithenge_scope_member_expression>:
    e820:	55                   	push   %ebp
    e821:	89 e5                	mov    %esp,%ebp
    e823:	53                   	push   %ebx
    e824:	83 ec 10             	sub    $0x10,%esp
    e827:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    e82a:	6a 0c                	push   $0xc
    e82c:	e8 2f 36 00 00       	call   11e60 <malloc@plt>
    e831:	83 c4 10             	add    $0x10,%esp
    e834:	85 c0                	test   %eax,%eax
    e836:	74 20                	je     e858 <bithenge_scope_member_expression+0x38>
    e838:	8b 55 08             	mov    0x8(%ebp),%edx
    e83b:	89 58 08             	mov    %ebx,0x8(%eax)
    e83e:	c7 00 fc 19 01 00    	movl   $0x119fc,(%eax)
    e844:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    e84b:	89 02                	mov    %eax,(%edx)
    e84d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    e850:	31 c0                	xor    %eax,%eax
    e852:	c9                   	leave  
    e853:	c3                   	ret    
    e854:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    e858:	83 ec 0c             	sub    $0xc,%esp
    e85b:	53                   	push   %ebx
    e85c:	e8 bf cd ff ff       	call   b620 <bithenge_node_dec_ref>
    e861:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
    e868:	e8 83 38 00 00       	call   120f0 <free@plt>
    e86d:	83 c4 10             	add    $0x10,%esp
    e870:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    e875:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    e878:	c9                   	leave  
    e879:	c3                   	ret    
    e87a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0000e880 <bithenge_subblob_expression>:
    e880:	55                   	push   %ebp
    e881:	89 e5                	mov    %esp,%ebp
    e883:	57                   	push   %edi
    e884:	56                   	push   %esi
    e885:	53                   	push   %ebx
    e886:	83 ec 28             	sub    $0x28,%esp
    e889:	8b 45 18             	mov    0x18(%ebp),%eax
    e88c:	8b 7d 0c             	mov    0xc(%ebp),%edi
    e88f:	6a 18                	push   $0x18
    e891:	8b 75 10             	mov    0x10(%ebp),%esi
    e894:	8b 5d 14             	mov    0x14(%ebp),%ebx
    e897:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    e89a:	e8 c1 35 00 00       	call   11e60 <malloc@plt>
    e89f:	83 c4 10             	add    $0x10,%esp
    e8a2:	85 c0                	test   %eax,%eax
    e8a4:	74 32                	je     e8d8 <bithenge_subblob_expression+0x58>
    e8a6:	8b 55 08             	mov    0x8(%ebp),%edx
    e8a9:	8a 4d e4             	mov    -0x1c(%ebp),%cl
    e8ac:	c7 00 f4 19 01 00    	movl   $0x119f4,(%eax)
    e8b2:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    e8b9:	89 78 08             	mov    %edi,0x8(%eax)
    e8bc:	89 70 0c             	mov    %esi,0xc(%eax)
    e8bf:	89 58 10             	mov    %ebx,0x10(%eax)
    e8c2:	88 48 14             	mov    %cl,0x14(%eax)
    e8c5:	89 02                	mov    %eax,(%edx)
    e8c7:	8d 65 f4             	lea    -0xc(%ebp),%esp
    e8ca:	31 c0                	xor    %eax,%eax
    e8cc:	5b                   	pop    %ebx
    e8cd:	5e                   	pop    %esi
    e8ce:	5f                   	pop    %edi
    e8cf:	5d                   	pop    %ebp
    e8d0:	c3                   	ret    
    e8d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    e8d8:	85 ff                	test   %edi,%edi
    e8da:	74 1d                	je     e8f9 <bithenge_subblob_expression+0x79>
    e8dc:	8b 0f                	mov    (%edi),%ecx
    e8de:	85 c9                	test   %ecx,%ecx
    e8e0:	0f 84 a8 00 00 00    	je     e98e <bithenge_subblob_expression+0x10e>
    e8e6:	8b 47 04             	mov    0x4(%edi),%eax
    e8e9:	85 c0                	test   %eax,%eax
    e8eb:	0f 84 8b 00 00 00    	je     e97c <bithenge_subblob_expression+0xfc>
    e8f1:	48                   	dec    %eax
    e8f2:	89 47 04             	mov    %eax,0x4(%edi)
    e8f5:	85 c0                	test   %eax,%eax
    e8f7:	74 57                	je     e950 <bithenge_subblob_expression+0xd0>
    e8f9:	85 f6                	test   %esi,%esi
    e8fb:	74 19                	je     e916 <bithenge_subblob_expression+0x96>
    e8fd:	8b 0e                	mov    (%esi),%ecx
    e8ff:	85 c9                	test   %ecx,%ecx
    e901:	0f 84 87 00 00 00    	je     e98e <bithenge_subblob_expression+0x10e>
    e907:	8b 46 04             	mov    0x4(%esi),%eax
    e90a:	85 c0                	test   %eax,%eax
    e90c:	74 6e                	je     e97c <bithenge_subblob_expression+0xfc>
    e90e:	48                   	dec    %eax
    e90f:	89 46 04             	mov    %eax,0x4(%esi)
    e912:	85 c0                	test   %eax,%eax
    e914:	74 4a                	je     e960 <bithenge_subblob_expression+0xe0>
    e916:	85 db                	test   %ebx,%ebx
    e918:	74 15                	je     e92f <bithenge_subblob_expression+0xaf>
    e91a:	8b 13                	mov    (%ebx),%edx
    e91c:	85 d2                	test   %edx,%edx
    e91e:	74 6e                	je     e98e <bithenge_subblob_expression+0x10e>
    e920:	8b 43 04             	mov    0x4(%ebx),%eax
    e923:	85 c0                	test   %eax,%eax
    e925:	74 55                	je     e97c <bithenge_subblob_expression+0xfc>
    e927:	48                   	dec    %eax
    e928:	89 43 04             	mov    %eax,0x4(%ebx)
    e92b:	85 c0                	test   %eax,%eax
    e92d:	74 41                	je     e970 <bithenge_subblob_expression+0xf0>
    e92f:	83 ec 0c             	sub    $0xc,%esp
    e932:	6a 00                	push   $0x0
    e934:	e8 b7 37 00 00       	call   120f0 <free@plt>
    e939:	83 c4 10             	add    $0x10,%esp
    e93c:	8d 65 f4             	lea    -0xc(%ebp),%esp
    e93f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    e944:	5b                   	pop    %ebx
    e945:	5e                   	pop    %esi
    e946:	5f                   	pop    %edi
    e947:	5d                   	pop    %ebp
    e948:	c3                   	ret    
    e949:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    e950:	83 ec 0c             	sub    $0xc,%esp
    e953:	57                   	push   %edi
    e954:	ff 51 04             	call   *0x4(%ecx)
    e957:	83 c4 10             	add    $0x10,%esp
    e95a:	eb 9d                	jmp    e8f9 <bithenge_subblob_expression+0x79>
    e95c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    e960:	83 ec 0c             	sub    $0xc,%esp
    e963:	56                   	push   %esi
    e964:	ff 51 04             	call   *0x4(%ecx)
    e967:	83 c4 10             	add    $0x10,%esp
    e96a:	eb aa                	jmp    e916 <bithenge_subblob_expression+0x96>
    e96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    e970:	83 ec 0c             	sub    $0xc,%esp
    e973:	53                   	push   %ebx
    e974:	ff 52 04             	call   *0x4(%edx)
    e977:	83 c4 10             	add    $0x10,%esp
    e97a:	eb b3                	jmp    e92f <bithenge_subblob_expression+0xaf>
    e97c:	50                   	push   %eax
    e97d:	6a 4c                	push   $0x4c
    e97f:	68 a3 13 01 00       	push   $0x113a3
    e984:	68 6b 11 01 00       	push   $0x1116b
    e989:	e8 82 35 00 00       	call   11f10 <assert_abort@plt>
    e98e:	52                   	push   %edx
    e98f:	6a 4b                	push   $0x4b
    e991:	68 a3 13 01 00       	push   $0x113a3
    e996:	68 61 11 01 00       	push   $0x11161
    e99b:	e8 70 35 00 00       	call   11f10 <assert_abort@plt>

0000e9a0 <bithenge_param_wrapper>:
    e9a0:	55                   	push   %ebp
    e9a1:	89 e5                	mov    %esp,%ebp
    e9a3:	57                   	push   %edi
    e9a4:	56                   	push   %esi
    e9a5:	53                   	push   %ebx
    e9a6:	83 ec 1c             	sub    $0x1c,%esp
    e9a9:	8b 45 0c             	mov    0xc(%ebp),%eax
    e9ac:	8b 5d 10             	mov    0x10(%ebp),%ebx
    e9af:	85 c0                	test   %eax,%eax
    e9b1:	0f 84 29 01 00 00    	je     eae0 <bithenge_param_wrapper+0x140>
    e9b7:	83 ec 0c             	sub    $0xc,%esp
    e9ba:	8b 45 0c             	mov    0xc(%ebp),%eax
    e9bd:	8b 70 08             	mov    0x8(%eax),%esi
    e9c0:	6a 14                	push   $0x14
    e9c2:	e8 99 34 00 00       	call   11e60 <malloc@plt>
    e9c7:	83 c4 10             	add    $0x10,%esp
    e9ca:	89 c7                	mov    %eax,%edi
    e9cc:	85 c0                	test   %eax,%eax
    e9ce:	0f 84 dc 00 00 00    	je     eab0 <bithenge_param_wrapper+0x110>
    e9d4:	50                   	push   %eax
    e9d5:	6a 00                	push   $0x0
    e9d7:	68 e4 19 01 00       	push   $0x119e4
    e9dc:	57                   	push   %edi
    e9dd:	e8 7e b7 ff ff       	call   a160 <bithenge_init_transform>
    e9e2:	83 c4 10             	add    $0x10,%esp
    e9e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    e9e8:	85 c0                	test   %eax,%eax
    e9ea:	0f 84 a0 00 00 00    	je     ea90 <bithenge_param_wrapper+0xf0>
    e9f0:	83 ec 0c             	sub    $0xc,%esp
    e9f3:	57                   	push   %edi
    e9f4:	31 ff                	xor    %edi,%edi
    e9f6:	e8 f5 36 00 00       	call   120f0 <free@plt>
    e9fb:	83 c4 10             	add    $0x10,%esp
    e9fe:	85 f6                	test   %esi,%esi
    ea00:	7e 39                	jle    ea3b <bithenge_param_wrapper+0x9b>
    ea02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    ea08:	8b 14 bb             	mov    (%ebx,%edi,4),%edx
    ea0b:	85 d2                	test   %edx,%edx
    ea0d:	74 27                	je     ea36 <bithenge_param_wrapper+0x96>
    ea0f:	8b 0a                	mov    (%edx),%ecx
    ea11:	85 c9                	test   %ecx,%ecx
    ea13:	0f 84 a3 00 00 00    	je     eabc <bithenge_param_wrapper+0x11c>
    ea19:	8b 42 04             	mov    0x4(%edx),%eax
    ea1c:	85 c0                	test   %eax,%eax
    ea1e:	0f 84 aa 00 00 00    	je     eace <bithenge_param_wrapper+0x12e>
    ea24:	48                   	dec    %eax
    ea25:	89 42 04             	mov    %eax,0x4(%edx)
    ea28:	85 c0                	test   %eax,%eax
    ea2a:	75 0a                	jne    ea36 <bithenge_param_wrapper+0x96>
    ea2c:	83 ec 0c             	sub    $0xc,%esp
    ea2f:	52                   	push   %edx
    ea30:	ff 51 04             	call   *0x4(%ecx)
    ea33:	83 c4 10             	add    $0x10,%esp
    ea36:	47                   	inc    %edi
    ea37:	39 fe                	cmp    %edi,%esi
    ea39:	75 cd                	jne    ea08 <bithenge_param_wrapper+0x68>
    ea3b:	83 ec 0c             	sub    $0xc,%esp
    ea3e:	53                   	push   %ebx
    ea3f:	e8 ac 36 00 00       	call   120f0 <free@plt>
    ea44:	8b 45 0c             	mov    0xc(%ebp),%eax
    ea47:	83 c4 10             	add    $0x10,%esp
    ea4a:	8b 10                	mov    (%eax),%edx
    ea4c:	85 d2                	test   %edx,%edx
    ea4e:	0f 84 a3 00 00 00    	je     eaf7 <bithenge_param_wrapper+0x157>
    ea54:	8b 40 04             	mov    0x4(%eax),%eax
    ea57:	85 c0                	test   %eax,%eax
    ea59:	0f 84 86 00 00 00    	je     eae5 <bithenge_param_wrapper+0x145>
    ea5f:	8b 75 0c             	mov    0xc(%ebp),%esi
    ea62:	48                   	dec    %eax
    ea63:	85 c0                	test   %eax,%eax
    ea65:	89 46 04             	mov    %eax,0x4(%esi)
    ea68:	74 0e                	je     ea78 <bithenge_param_wrapper+0xd8>
    ea6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    ea6d:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ea70:	5b                   	pop    %ebx
    ea71:	5e                   	pop    %esi
    ea72:	5f                   	pop    %edi
    ea73:	5d                   	pop    %ebp
    ea74:	c3                   	ret    
    ea75:	8d 76 00             	lea    0x0(%esi),%esi
    ea78:	83 ec 0c             	sub    $0xc,%esp
    ea7b:	56                   	push   %esi
    ea7c:	ff 52 0c             	call   *0xc(%edx)
    ea7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    ea82:	83 c4 10             	add    $0x10,%esp
    ea85:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ea88:	5b                   	pop    %ebx
    ea89:	5e                   	pop    %esi
    ea8a:	5f                   	pop    %edi
    ea8b:	5d                   	pop    %ebp
    ea8c:	c3                   	ret    
    ea8d:	8d 76 00             	lea    0x0(%esi),%esi
    ea90:	8b 45 0c             	mov    0xc(%ebp),%eax
    ea93:	89 5f 10             	mov    %ebx,0x10(%edi)
    ea96:	89 47 0c             	mov    %eax,0xc(%edi)
    ea99:	8b 45 08             	mov    0x8(%ebp),%eax
    ea9c:	89 38                	mov    %edi,(%eax)
    ea9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    eaa1:	8d 65 f4             	lea    -0xc(%ebp),%esp
    eaa4:	5b                   	pop    %ebx
    eaa5:	5e                   	pop    %esi
    eaa6:	5f                   	pop    %edi
    eaa7:	5d                   	pop    %ebp
    eaa8:	c3                   	ret    
    eaa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    eab0:	c7 45 e4 fe ff ff ff 	movl   $0xfffffffe,-0x1c(%ebp)
    eab7:	e9 34 ff ff ff       	jmp    e9f0 <bithenge_param_wrapper+0x50>
    eabc:	53                   	push   %ebx
    eabd:	6a 4b                	push   $0x4b
    eabf:	68 a3 13 01 00       	push   $0x113a3
    eac4:	68 61 11 01 00       	push   $0x11161
    eac9:	e8 42 34 00 00       	call   11f10 <assert_abort@plt>
    eace:	51                   	push   %ecx
    eacf:	6a 4c                	push   $0x4c
    ead1:	68 a3 13 01 00       	push   $0x113a3
    ead6:	68 6b 11 01 00       	push   $0x1116b
    eadb:	e8 30 34 00 00       	call   11f10 <assert_abort@plt>
    eae0:	e8 45 09 00 00       	call   f42a <bithenge_transform_num_params.part.9>
    eae5:	50                   	push   %eax
    eae6:	6a 75                	push   $0x75
    eae8:	68 18 13 01 00       	push   $0x11318
    eaed:	68 6b 11 01 00       	push   $0x1116b
    eaf2:	e8 19 34 00 00       	call   11f10 <assert_abort@plt>
    eaf7:	52                   	push   %edx
    eaf8:	6a 74                	push   $0x74
    eafa:	68 18 13 01 00       	push   $0x11318
    eaff:	68 61 11 01 00       	push   $0x11161
    eb04:	e8 07 34 00 00       	call   11f10 <assert_abort@plt>
    eb09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000eb10 <bithenge_expression_transform>:
    eb10:	55                   	push   %ebp
    eb11:	89 e5                	mov    %esp,%ebp
    eb13:	56                   	push   %esi
    eb14:	53                   	push   %ebx
    eb15:	83 ec 1c             	sub    $0x1c,%esp
    eb18:	8b 75 0c             	mov    0xc(%ebp),%esi
    eb1b:	6a 10                	push   $0x10
    eb1d:	e8 3e 33 00 00       	call   11e60 <malloc@plt>
    eb22:	83 c4 10             	add    $0x10,%esp
    eb25:	89 c3                	mov    %eax,%ebx
    eb27:	85 c0                	test   %eax,%eax
    eb29:	74 75                	je     eba0 <bithenge_expression_transform+0x90>
    eb2b:	51                   	push   %ecx
    eb2c:	6a 00                	push   $0x0
    eb2e:	68 d4 19 01 00       	push   $0x119d4
    eb33:	50                   	push   %eax
    eb34:	e8 27 b6 ff ff       	call   a160 <bithenge_init_transform>
    eb39:	83 c4 10             	add    $0x10,%esp
    eb3c:	85 c0                	test   %eax,%eax
    eb3e:	74 50                	je     eb90 <bithenge_expression_transform+0x80>
    eb40:	83 ec 0c             	sub    $0xc,%esp
    eb43:	89 45 f4             	mov    %eax,-0xc(%ebp)
    eb46:	53                   	push   %ebx
    eb47:	e8 a4 35 00 00       	call   120f0 <free@plt>
    eb4c:	83 c4 10             	add    $0x10,%esp
    eb4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    eb52:	85 f6                	test   %esi,%esi
    eb54:	74 15                	je     eb6b <bithenge_expression_transform+0x5b>
    eb56:	8b 0e                	mov    (%esi),%ecx
    eb58:	85 c9                	test   %ecx,%ecx
    eb5a:	74 4b                	je     eba7 <bithenge_expression_transform+0x97>
    eb5c:	8b 56 04             	mov    0x4(%esi),%edx
    eb5f:	85 d2                	test   %edx,%edx
    eb61:	74 56                	je     ebb9 <bithenge_expression_transform+0xa9>
    eb63:	4a                   	dec    %edx
    eb64:	89 56 04             	mov    %edx,0x4(%esi)
    eb67:	85 d2                	test   %edx,%edx
    eb69:	74 0d                	je     eb78 <bithenge_expression_transform+0x68>
    eb6b:	8d 65 f8             	lea    -0x8(%ebp),%esp
    eb6e:	5b                   	pop    %ebx
    eb6f:	5e                   	pop    %esi
    eb70:	5d                   	pop    %ebp
    eb71:	c3                   	ret    
    eb72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    eb78:	83 ec 0c             	sub    $0xc,%esp
    eb7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    eb7e:	56                   	push   %esi
    eb7f:	ff 51 04             	call   *0x4(%ecx)
    eb82:	8b 45 f4             	mov    -0xc(%ebp),%eax
    eb85:	83 c4 10             	add    $0x10,%esp
    eb88:	8d 65 f8             	lea    -0x8(%ebp),%esp
    eb8b:	5b                   	pop    %ebx
    eb8c:	5e                   	pop    %esi
    eb8d:	5d                   	pop    %ebp
    eb8e:	c3                   	ret    
    eb8f:	90                   	nop
    eb90:	8b 55 08             	mov    0x8(%ebp),%edx
    eb93:	89 73 0c             	mov    %esi,0xc(%ebx)
    eb96:	89 1a                	mov    %ebx,(%edx)
    eb98:	8d 65 f8             	lea    -0x8(%ebp),%esp
    eb9b:	5b                   	pop    %ebx
    eb9c:	5e                   	pop    %esi
    eb9d:	5d                   	pop    %ebp
    eb9e:	c3                   	ret    
    eb9f:	90                   	nop
    eba0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    eba5:	eb 99                	jmp    eb40 <bithenge_expression_transform+0x30>
    eba7:	52                   	push   %edx
    eba8:	6a 4b                	push   $0x4b
    ebaa:	68 a3 13 01 00       	push   $0x113a3
    ebaf:	68 61 11 01 00       	push   $0x11161
    ebb4:	e8 57 33 00 00       	call   11f10 <assert_abort@plt>
    ebb9:	50                   	push   %eax
    ebba:	6a 4c                	push   $0x4c
    ebbc:	68 a3 13 01 00       	push   $0x113a3
    ebc1:	68 6b 11 01 00       	push   $0x1116b
    ebc6:	e8 45 33 00 00       	call   11f10 <assert_abort@plt>
    ebcb:	90                   	nop
    ebcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000ebd0 <bithenge_inputless_transform>:
    ebd0:	55                   	push   %ebp
    ebd1:	89 e5                	mov    %esp,%ebp
    ebd3:	56                   	push   %esi
    ebd4:	53                   	push   %ebx
    ebd5:	83 ec 1c             	sub    $0x1c,%esp
    ebd8:	8b 75 0c             	mov    0xc(%ebp),%esi
    ebdb:	6a 10                	push   $0x10
    ebdd:	e8 7e 32 00 00       	call   11e60 <malloc@plt>
    ebe2:	83 c4 10             	add    $0x10,%esp
    ebe5:	89 c3                	mov    %eax,%ebx
    ebe7:	85 c0                	test   %eax,%eax
    ebe9:	74 75                	je     ec60 <bithenge_inputless_transform+0x90>
    ebeb:	51                   	push   %ecx
    ebec:	6a 00                	push   $0x0
    ebee:	68 c4 19 01 00       	push   $0x119c4
    ebf3:	50                   	push   %eax
    ebf4:	e8 67 b5 ff ff       	call   a160 <bithenge_init_transform>
    ebf9:	83 c4 10             	add    $0x10,%esp
    ebfc:	85 c0                	test   %eax,%eax
    ebfe:	74 50                	je     ec50 <bithenge_inputless_transform+0x80>
    ec00:	83 ec 0c             	sub    $0xc,%esp
    ec03:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ec06:	53                   	push   %ebx
    ec07:	e8 e4 34 00 00       	call   120f0 <free@plt>
    ec0c:	83 c4 10             	add    $0x10,%esp
    ec0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    ec12:	85 f6                	test   %esi,%esi
    ec14:	74 15                	je     ec2b <bithenge_inputless_transform+0x5b>
    ec16:	8b 0e                	mov    (%esi),%ecx
    ec18:	85 c9                	test   %ecx,%ecx
    ec1a:	74 4b                	je     ec67 <bithenge_inputless_transform+0x97>
    ec1c:	8b 56 04             	mov    0x4(%esi),%edx
    ec1f:	85 d2                	test   %edx,%edx
    ec21:	74 56                	je     ec79 <bithenge_inputless_transform+0xa9>
    ec23:	4a                   	dec    %edx
    ec24:	89 56 04             	mov    %edx,0x4(%esi)
    ec27:	85 d2                	test   %edx,%edx
    ec29:	74 0d                	je     ec38 <bithenge_inputless_transform+0x68>
    ec2b:	8d 65 f8             	lea    -0x8(%ebp),%esp
    ec2e:	5b                   	pop    %ebx
    ec2f:	5e                   	pop    %esi
    ec30:	5d                   	pop    %ebp
    ec31:	c3                   	ret    
    ec32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    ec38:	83 ec 0c             	sub    $0xc,%esp
    ec3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ec3e:	56                   	push   %esi
    ec3f:	ff 51 04             	call   *0x4(%ecx)
    ec42:	8b 45 f4             	mov    -0xc(%ebp),%eax
    ec45:	83 c4 10             	add    $0x10,%esp
    ec48:	8d 65 f8             	lea    -0x8(%ebp),%esp
    ec4b:	5b                   	pop    %ebx
    ec4c:	5e                   	pop    %esi
    ec4d:	5d                   	pop    %ebp
    ec4e:	c3                   	ret    
    ec4f:	90                   	nop
    ec50:	8b 55 08             	mov    0x8(%ebp),%edx
    ec53:	89 73 0c             	mov    %esi,0xc(%ebx)
    ec56:	89 1a                	mov    %ebx,(%edx)
    ec58:	8d 65 f8             	lea    -0x8(%ebp),%esp
    ec5b:	5b                   	pop    %ebx
    ec5c:	5e                   	pop    %esi
    ec5d:	5d                   	pop    %ebp
    ec5e:	c3                   	ret    
    ec5f:	90                   	nop
    ec60:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    ec65:	eb 99                	jmp    ec00 <bithenge_inputless_transform+0x30>
    ec67:	52                   	push   %edx
    ec68:	6a 4b                	push   $0x4b
    ec6a:	68 a3 13 01 00       	push   $0x113a3
    ec6f:	68 61 11 01 00       	push   $0x11161
    ec74:	e8 97 32 00 00       	call   11f10 <assert_abort@plt>
    ec79:	50                   	push   %eax
    ec7a:	6a 4c                	push   $0x4c
    ec7c:	68 a3 13 01 00       	push   $0x113a3
    ec81:	68 6b 11 01 00       	push   $0x1116b
    ec86:	e8 85 32 00 00       	call   11f10 <assert_abort@plt>
    ec8b:	90                   	nop
    ec8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000ec90 <bithenge_concat_blob>:
    ec90:	55                   	push   %ebp
    ec91:	89 e5                	mov    %esp,%ebp
    ec93:	57                   	push   %edi
    ec94:	56                   	push   %esi
    ec95:	53                   	push   %ebx
    ec96:	83 ec 1c             	sub    $0x1c,%esp
    ec99:	8b 45 08             	mov    0x8(%ebp),%eax
    ec9c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    ec9f:	8b 75 10             	mov    0x10(%ebp),%esi
    eca2:	85 c0                	test   %eax,%eax
    eca4:	0f 84 cf 00 00 00    	je     ed79 <bithenge_concat_blob+0xe9>
    ecaa:	85 db                	test   %ebx,%ebx
    ecac:	0f 84 b2 00 00 00    	je     ed64 <bithenge_concat_blob+0xd4>
    ecb2:	85 f6                	test   %esi,%esi
    ecb4:	0f 84 95 00 00 00    	je     ed4f <bithenge_concat_blob+0xbf>
    ecba:	83 ec 0c             	sub    $0xc,%esp
    ecbd:	6a 28                	push   $0x28
    ecbf:	e8 9c 31 00 00       	call   11e60 <malloc@plt>
    ecc4:	83 c4 10             	add    $0x10,%esp
    ecc7:	89 c7                	mov    %eax,%edi
    ecc9:	85 c0                	test   %eax,%eax
    eccb:	74 7b                	je     ed48 <bithenge_concat_blob+0xb8>
    eccd:	8d 48 18             	lea    0x18(%eax),%ecx
    ecd0:	8b 43 08             	mov    0x8(%ebx),%eax
    ecd3:	85 c0                	test   %eax,%eax
    ecd5:	0f 84 b3 00 00 00    	je     ed8e <bithenge_concat_blob+0xfe>
    ecdb:	52                   	push   %edx
    ecdc:	52                   	push   %edx
    ecdd:	51                   	push   %ecx
    ecde:	53                   	push   %ebx
    ecdf:	ff 10                	call   *(%eax)
    ece1:	83 c4 10             	add    $0x10,%esp
    ece4:	85 c0                	test   %eax,%eax
    ece6:	74 30                	je     ed18 <bithenge_concat_blob+0x88>
    ece8:	83 ec 0c             	sub    $0xc,%esp
    eceb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    ecee:	53                   	push   %ebx
    ecef:	e8 2c c9 ff ff       	call   b620 <bithenge_node_dec_ref>
    ecf4:	89 34 24             	mov    %esi,(%esp)
    ecf7:	e8 24 c9 ff ff       	call   b620 <bithenge_node_dec_ref>
    ecfc:	89 3c 24             	mov    %edi,(%esp)
    ecff:	e8 ec 33 00 00       	call   120f0 <free@plt>
    ed04:	83 c4 10             	add    $0x10,%esp
    ed07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    ed0a:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ed0d:	5b                   	pop    %ebx
    ed0e:	5e                   	pop    %esi
    ed0f:	5f                   	pop    %edi
    ed10:	5d                   	pop    %ebp
    ed11:	c3                   	ret    
    ed12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    ed18:	50                   	push   %eax
    ed19:	50                   	push   %eax
    ed1a:	68 b4 19 01 00       	push   $0x119b4
    ed1f:	57                   	push   %edi
    ed20:	e8 7b d7 ff ff       	call   c4a0 <bithenge_init_random_access_blob>
    ed25:	83 c4 10             	add    $0x10,%esp
    ed28:	85 c0                	test   %eax,%eax
    ed2a:	75 bc                	jne    ece8 <bithenge_concat_blob+0x58>
    ed2c:	8b 55 08             	mov    0x8(%ebp),%edx
    ed2f:	89 5f 10             	mov    %ebx,0x10(%edi)
    ed32:	89 77 14             	mov    %esi,0x14(%edi)
    ed35:	c7 47 20 00 00 00 00 	movl   $0x0,0x20(%edi)
    ed3c:	c7 47 24 00 00 00 00 	movl   $0x0,0x24(%edi)
    ed43:	89 3a                	mov    %edi,(%edx)
    ed45:	eb c3                	jmp    ed0a <bithenge_concat_blob+0x7a>
    ed47:	90                   	nop
    ed48:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    ed4d:	eb 99                	jmp    ece8 <bithenge_concat_blob+0x58>
    ed4f:	53                   	push   %ebx
    ed50:	68 65 04 00 00       	push   $0x465
    ed55:	68 a8 18 01 00       	push   $0x118a8
    ed5a:	68 da 17 01 00       	push   $0x117da
    ed5f:	e8 ac 31 00 00       	call   11f10 <assert_abort@plt>
    ed64:	56                   	push   %esi
    ed65:	68 64 04 00 00       	push   $0x464
    ed6a:	68 a8 18 01 00       	push   $0x118a8
    ed6f:	68 22 18 01 00       	push   $0x11822
    ed74:	e8 97 31 00 00       	call   11f10 <assert_abort@plt>
    ed79:	57                   	push   %edi
    ed7a:	68 63 04 00 00       	push   $0x463
    ed7f:	68 a8 18 01 00       	push   $0x118a8
    ed84:	68 66 17 01 00       	push   $0x11766
    ed89:	e8 82 31 00 00       	call   11f10 <assert_abort@plt>
    ed8e:	51                   	push   %ecx
    ed8f:	68 80 00 00 00       	push   $0x80
    ed94:	68 05 12 01 00       	push   $0x11205
    ed99:	68 1d 12 01 00       	push   $0x1121d
    ed9e:	e8 6d 31 00 00       	call   11f10 <assert_abort@plt>
    eda3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    eda9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000edb0 <bithenge_concat_blob_lazy>:
    edb0:	55                   	push   %ebp
    edb1:	89 e5                	mov    %esp,%ebp
    edb3:	57                   	push   %edi
    edb4:	56                   	push   %esi
    edb5:	53                   	push   %ebx
    edb6:	83 ec 1c             	sub    $0x1c,%esp
    edb9:	8b 45 08             	mov    0x8(%ebp),%eax
    edbc:	8b 75 0c             	mov    0xc(%ebp),%esi
    edbf:	8b 5d 10             	mov    0x10(%ebp),%ebx
    edc2:	85 c0                	test   %eax,%eax
    edc4:	0f 84 15 01 00 00    	je     eedf <bithenge_concat_blob_lazy+0x12f>
    edca:	85 f6                	test   %esi,%esi
    edcc:	0f 84 37 01 00 00    	je     ef09 <bithenge_concat_blob_lazy+0x159>
    edd2:	85 db                	test   %ebx,%ebx
    edd4:	0f 84 1a 01 00 00    	je     eef4 <bithenge_concat_blob_lazy+0x144>
    edda:	8b 7d 14             	mov    0x14(%ebp),%edi
    eddd:	85 ff                	test   %edi,%edi
    eddf:	0f 84 e5 00 00 00    	je     eeca <bithenge_concat_blob_lazy+0x11a>
    ede5:	83 ec 0c             	sub    $0xc,%esp
    ede8:	6a 28                	push   $0x28
    edea:	e8 71 30 00 00       	call   11e60 <malloc@plt>
    edef:	83 c4 10             	add    $0x10,%esp
    edf2:	89 c7                	mov    %eax,%edi
    edf4:	85 c0                	test   %eax,%eax
    edf6:	0f 84 c4 00 00 00    	je     eec0 <bithenge_concat_blob_lazy+0x110>
    edfc:	8d 50 18             	lea    0x18(%eax),%edx
    edff:	8b 46 08             	mov    0x8(%esi),%eax
    ee02:	85 c0                	test   %eax,%eax
    ee04:	0f 84 14 01 00 00    	je     ef1e <bithenge_concat_blob_lazy+0x16e>
    ee0a:	51                   	push   %ecx
    ee0b:	51                   	push   %ecx
    ee0c:	52                   	push   %edx
    ee0d:	56                   	push   %esi
    ee0e:	ff 10                	call   *(%eax)
    ee10:	83 c4 10             	add    $0x10,%esp
    ee13:	85 c0                	test   %eax,%eax
    ee15:	74 71                	je     ee88 <bithenge_concat_blob_lazy+0xd8>
    ee17:	83 ec 0c             	sub    $0xc,%esp
    ee1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    ee1d:	56                   	push   %esi
    ee1e:	e8 fd c7 ff ff       	call   b620 <bithenge_node_dec_ref>
    ee23:	8b 0b                	mov    (%ebx),%ecx
    ee25:	83 c4 10             	add    $0x10,%esp
    ee28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    ee2b:	85 c9                	test   %ecx,%ecx
    ee2d:	0f 84 12 01 00 00    	je     ef45 <bithenge_concat_blob_lazy+0x195>
    ee33:	8b 53 04             	mov    0x4(%ebx),%edx
    ee36:	85 d2                	test   %edx,%edx
    ee38:	0f 84 f5 00 00 00    	je     ef33 <bithenge_concat_blob_lazy+0x183>
    ee3e:	4a                   	dec    %edx
    ee3f:	89 53 04             	mov    %edx,0x4(%ebx)
    ee42:	85 d2                	test   %edx,%edx
    ee44:	74 2a                	je     ee70 <bithenge_concat_blob_lazy+0xc0>
    ee46:	83 ec 0c             	sub    $0xc,%esp
    ee49:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    ee4c:	8b 45 14             	mov    0x14(%ebp),%eax
    ee4f:	50                   	push   %eax
    ee50:	e8 8b bd ff ff       	call   abe0 <bithenge_scope_dec_ref>
    ee55:	89 3c 24             	mov    %edi,(%esp)
    ee58:	e8 93 32 00 00       	call   120f0 <free@plt>
    ee5d:	83 c4 10             	add    $0x10,%esp
    ee60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    ee63:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ee66:	5b                   	pop    %ebx
    ee67:	5e                   	pop    %esi
    ee68:	5f                   	pop    %edi
    ee69:	5d                   	pop    %ebp
    ee6a:	c3                   	ret    
    ee6b:	90                   	nop
    ee6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    ee70:	83 ec 0c             	sub    $0xc,%esp
    ee73:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    ee76:	53                   	push   %ebx
    ee77:	ff 51 04             	call   *0x4(%ecx)
    ee7a:	83 c4 10             	add    $0x10,%esp
    ee7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    ee80:	eb c4                	jmp    ee46 <bithenge_concat_blob_lazy+0x96>
    ee82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    ee88:	50                   	push   %eax
    ee89:	50                   	push   %eax
    ee8a:	68 b4 19 01 00       	push   $0x119b4
    ee8f:	57                   	push   %edi
    ee90:	e8 0b d6 ff ff       	call   c4a0 <bithenge_init_random_access_blob>
    ee95:	83 c4 10             	add    $0x10,%esp
    ee98:	85 c0                	test   %eax,%eax
    ee9a:	0f 85 77 ff ff ff    	jne    ee17 <bithenge_concat_blob_lazy+0x67>
    eea0:	8b 4d 14             	mov    0x14(%ebp),%ecx
    eea3:	89 77 10             	mov    %esi,0x10(%edi)
    eea6:	89 4f 24             	mov    %ecx,0x24(%edi)
    eea9:	8b 4d 08             	mov    0x8(%ebp),%ecx
    eeac:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
    eeb3:	89 5f 20             	mov    %ebx,0x20(%edi)
    eeb6:	89 39                	mov    %edi,(%ecx)
    eeb8:	eb a9                	jmp    ee63 <bithenge_concat_blob_lazy+0xb3>
    eeba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    eec0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    eec5:	e9 4d ff ff ff       	jmp    ee17 <bithenge_concat_blob_lazy+0x67>
    eeca:	56                   	push   %esi
    eecb:	68 90 04 00 00       	push   $0x490
    eed0:	68 a8 18 01 00       	push   $0x118a8
    eed5:	68 12 15 01 00       	push   $0x11512
    eeda:	e8 31 30 00 00       	call   11f10 <assert_abort@plt>
    eedf:	50                   	push   %eax
    eee0:	68 8d 04 00 00       	push   $0x48d
    eee5:	68 a8 18 01 00       	push   $0x118a8
    eeea:	68 66 17 01 00       	push   $0x11766
    eeef:	e8 1c 30 00 00       	call   11f10 <assert_abort@plt>
    eef4:	50                   	push   %eax
    eef5:	68 8f 04 00 00       	push   $0x48f
    eefa:	68 a8 18 01 00       	push   $0x118a8
    eeff:	68 03 19 01 00       	push   $0x11903
    ef04:	e8 07 30 00 00       	call   11f10 <assert_abort@plt>
    ef09:	50                   	push   %eax
    ef0a:	68 8e 04 00 00       	push   $0x48e
    ef0f:	68 a8 18 01 00       	push   $0x118a8
    ef14:	68 22 18 01 00       	push   $0x11822
    ef19:	e8 f2 2f 00 00       	call   11f10 <assert_abort@plt>
    ef1e:	53                   	push   %ebx
    ef1f:	68 80 00 00 00       	push   $0x80
    ef24:	68 05 12 01 00       	push   $0x11205
    ef29:	68 1d 12 01 00       	push   $0x1121d
    ef2e:	e8 dd 2f 00 00       	call   11f10 <assert_abort@plt>
    ef33:	52                   	push   %edx
    ef34:	6a 4c                	push   $0x4c
    ef36:	68 a3 13 01 00       	push   $0x113a3
    ef3b:	68 6b 11 01 00       	push   $0x1116b
    ef40:	e8 cb 2f 00 00       	call   11f10 <assert_abort@plt>
    ef45:	51                   	push   %ecx
    ef46:	6a 4b                	push   $0x4b
    ef48:	68 a3 13 01 00       	push   $0x113a3
    ef4d:	68 61 11 01 00       	push   $0x11161
    ef52:	e8 b9 2f 00 00       	call   11f10 <assert_abort@plt>
    ef57:	89 f6                	mov    %esi,%esi
    ef59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000ef60 <binary_expression_evaluate>:
    ef60:	55                   	push   %ebp
    ef61:	89 e5                	mov    %esp,%ebp
    ef63:	57                   	push   %edi
    ef64:	56                   	push   %esi
    ef65:	53                   	push   %ebx
    ef66:	83 ec 2c             	sub    $0x2c,%esp
    ef69:	8b 75 08             	mov    0x8(%ebp),%esi
    ef6c:	8b 7d 0c             	mov    0xc(%ebp),%edi
    ef6f:	8b 46 0c             	mov    0xc(%esi),%eax
    ef72:	85 c0                	test   %eax,%eax
    ef74:	0f 84 53 04 00 00    	je     f3cd <binary_expression_evaluate+0x46d>
    ef7a:	8b 10                	mov    (%eax),%edx
    ef7c:	85 d2                	test   %edx,%edx
    ef7e:	0f 84 5b 04 00 00    	je     f3df <binary_expression_evaluate+0x47f>
    ef84:	8d 4d e0             	lea    -0x20(%ebp),%ecx
    ef87:	53                   	push   %ebx
    ef88:	51                   	push   %ecx
    ef89:	57                   	push   %edi
    ef8a:	50                   	push   %eax
    ef8b:	ff 12                	call   *(%edx)
    ef8d:	83 c4 10             	add    $0x10,%esp
    ef90:	89 c3                	mov    %eax,%ebx
    ef92:	85 c0                	test   %eax,%eax
    ef94:	75 59                	jne    efef <binary_expression_evaluate+0x8f>
    ef96:	83 7e 08 0f          	cmpl   $0xf,0x8(%esi)
    ef9a:	74 64                	je     f000 <binary_expression_evaluate+0xa0>
    ef9c:	8b 46 10             	mov    0x10(%esi),%eax
    ef9f:	85 c0                	test   %eax,%eax
    efa1:	0f 84 26 04 00 00    	je     f3cd <binary_expression_evaluate+0x46d>
    efa7:	8b 10                	mov    (%eax),%edx
    efa9:	85 d2                	test   %edx,%edx
    efab:	0f 84 2e 04 00 00    	je     f3df <binary_expression_evaluate+0x47f>
    efb1:	51                   	push   %ecx
    efb2:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
    efb5:	51                   	push   %ecx
    efb6:	57                   	push   %edi
    efb7:	50                   	push   %eax
    efb8:	ff 12                	call   *(%edx)
    efba:	83 c4 10             	add    $0x10,%esp
    efbd:	85 c0                	test   %eax,%eax
    efbf:	75 17                	jne    efd8 <binary_expression_evaluate+0x78>
    efc1:	8b 4e 08             	mov    0x8(%esi),%ecx
    efc4:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
    efc8:	83 f9 0f             	cmp    $0xf,%ecx
    efcb:	0f 87 df 00 00 00    	ja     f0b0 <binary_expression_evaluate+0x150>
    efd1:	ff 24 8d 34 19 01 00 	jmp    *0x11934(,%ecx,4)
    efd8:	83 ec 0c             	sub    $0xc,%esp
    efdb:	89 45 d0             	mov    %eax,-0x30(%ebp)
    efde:	8b 45 e0             	mov    -0x20(%ebp),%eax
    efe1:	50                   	push   %eax
    efe2:	e8 39 c6 ff ff       	call   b620 <bithenge_node_dec_ref>
    efe7:	8b 45 d0             	mov    -0x30(%ebp),%eax
    efea:	83 c4 10             	add    $0x10,%esp
    efed:	89 c3                	mov    %eax,%ebx
    efef:	8d 65 f4             	lea    -0xc(%ebp),%esp
    eff2:	89 d8                	mov    %ebx,%eax
    eff4:	5b                   	pop    %ebx
    eff5:	5e                   	pop    %esi
    eff6:	5f                   	pop    %edi
    eff7:	5d                   	pop    %ebp
    eff8:	c3                   	ret    
    eff9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    f000:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
    f004:	8b 55 e0             	mov    -0x20(%ebp),%edx
    f007:	83 3a 05             	cmpl   $0x5,(%edx)
    f00a:	0f 84 d0 00 00 00    	je     f0e0 <binary_expression_evaluate+0x180>
    f010:	83 ec 0c             	sub    $0xc,%esp
    f013:	52                   	push   %edx
    f014:	e8 07 c6 ff ff       	call   b620 <bithenge_node_dec_ref>
    f019:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    f01c:	58                   	pop    %eax
    f01d:	52                   	push   %edx
    f01e:	e8 fd c5 ff ff       	call   b620 <bithenge_node_dec_ref>
    f023:	83 c4 10             	add    $0x10,%esp
    f026:	8d 65 f4             	lea    -0xc(%ebp),%esp
    f029:	89 d8                	mov    %ebx,%eax
    f02b:	5b                   	pop    %ebx
    f02c:	5e                   	pop    %esi
    f02d:	5f                   	pop    %edi
    f02e:	5d                   	pop    %ebp
    f02f:	c3                   	ret    
    f030:	8b 55 e0             	mov    -0x20(%ebp),%edx
    f033:	bb f2 ff ff ff       	mov    $0xfffffff2,%ebx
    f038:	83 3a 02             	cmpl   $0x2,(%edx)
    f03b:	75 d3                	jne    f010 <binary_expression_evaluate+0xb0>
    f03d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    f040:	83 38 02             	cmpl   $0x2,(%eax)
    f043:	75 cb                	jne    f010 <binary_expression_evaluate+0xb0>
    f045:	8a 58 08             	mov    0x8(%eax),%bl
    f048:	8a 52 08             	mov    0x8(%edx),%dl
    f04b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    f052:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    f059:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
    f060:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    f067:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    f06c:	eb 62                	jmp    f0d0 <binary_expression_evaluate+0x170>
    f06e:	66 90                	xchg   %ax,%ax
    f070:	8b 55 e0             	mov    -0x20(%ebp),%edx
    f073:	bb f2 ff ff ff       	mov    $0xfffffff2,%ebx
    f078:	83 3a 03             	cmpl   $0x3,(%edx)
    f07b:	75 93                	jne    f010 <binary_expression_evaluate+0xb0>
    f07d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    f080:	89 45 d0             	mov    %eax,-0x30(%ebp)
    f083:	83 38 03             	cmpl   $0x3,(%eax)
    f086:	75 88                	jne    f010 <binary_expression_evaluate+0xb0>
    f088:	8b 42 08             	mov    0x8(%edx),%eax
    f08b:	8b 52 0c             	mov    0xc(%edx),%edx
    f08e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    f091:	8b 45 d0             	mov    -0x30(%ebp),%eax
    f094:	89 55 cc             	mov    %edx,-0x34(%ebp)
    f097:	31 db                	xor    %ebx,%ebx
    f099:	8b 50 0c             	mov    0xc(%eax),%edx
    f09c:	8b 40 08             	mov    0x8(%eax),%eax
    f09f:	89 45 d0             	mov    %eax,-0x30(%ebp)
    f0a2:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    f0a5:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
    f0aa:	31 d2                	xor    %edx,%edx
    f0ac:	eb 22                	jmp    f0d0 <binary_expression_evaluate+0x170>
    f0ae:	66 90                	xchg   %ax,%ax
    f0b0:	31 db                	xor    %ebx,%ebx
    f0b2:	31 d2                	xor    %edx,%edx
    f0b4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    f0bb:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    f0c2:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
    f0c9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    f0d0:	83 f9 0f             	cmp    $0xf,%ecx
    f0d3:	0f 87 b4 02 00 00    	ja     f38d <binary_expression_evaluate+0x42d>
    f0d9:	ff 24 8d 74 19 01 00 	jmp    *0x11974(,%ecx,4)
    f0e0:	8b 46 10             	mov    0x10(%esi),%eax
    f0e3:	85 c0                	test   %eax,%eax
    f0e5:	0f 84 2d 03 00 00    	je     f418 <binary_expression_evaluate+0x4b8>
    f0eb:	8b 58 04             	mov    0x4(%eax),%ebx
    f0ee:	43                   	inc    %ebx
    f0ef:	85 ff                	test   %edi,%edi
    f0f1:	89 58 04             	mov    %ebx,0x4(%eax)
    f0f4:	0f 84 0c 03 00 00    	je     f406 <binary_expression_evaluate+0x4a6>
    f0fa:	8b 17                	mov    (%edi),%edx
    f0fc:	42                   	inc    %edx
    f0fd:	89 17                	mov    %edx,(%edi)
    f0ff:	8b 55 e0             	mov    -0x20(%ebp),%edx
    f102:	83 3a 05             	cmpl   $0x5,(%edx)
    f105:	0f 85 e6 02 00 00    	jne    f3f1 <binary_expression_evaluate+0x491>
    f10b:	8b 5d 10             	mov    0x10(%ebp),%ebx
    f10e:	57                   	push   %edi
    f10f:	50                   	push   %eax
    f110:	52                   	push   %edx
    f111:	53                   	push   %ebx
    f112:	e8 99 fc ff ff       	call   edb0 <bithenge_concat_blob_lazy>
    f117:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    f11e:	89 c3                	mov    %eax,%ebx
    f120:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    f127:	83 c4 10             	add    $0x10,%esp
    f12a:	31 d2                	xor    %edx,%edx
    f12c:	e9 df fe ff ff       	jmp    f010 <binary_expression_evaluate+0xb0>
    f131:	8b 45 10             	mov    0x10(%ebp),%eax
    f134:	57                   	push   %edi
    f135:	50                   	push   %eax
    f136:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    f139:	50                   	push   %eax
    f13a:	8b 45 e0             	mov    -0x20(%ebp),%eax
    f13d:	50                   	push   %eax
    f13e:	e8 8d c5 ff ff       	call   b6d0 <bithenge_node_get>
    f143:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    f14a:	89 c3                	mov    %eax,%ebx
    f14c:	8b 55 e0             	mov    -0x20(%ebp),%edx
    f14f:	83 c4 10             	add    $0x10,%esp
    f152:	e9 b9 fe ff ff       	jmp    f010 <binary_expression_evaluate+0xb0>
    f157:	21 da                	and    %ebx,%edx
    f159:	50                   	push   %eax
    f15a:	50                   	push   %eax
    f15b:	31 c0                	xor    %eax,%eax
    f15d:	88 d0                	mov    %dl,%al
    f15f:	50                   	push   %eax
    f160:	8b 45 10             	mov    0x10(%ebp),%eax
    f163:	50                   	push   %eax
    f164:	e8 87 c8 ff ff       	call   b9f0 <bithenge_new_boolean_node>
    f169:	8b 55 e0             	mov    -0x20(%ebp),%edx
    f16c:	89 c3                	mov    %eax,%ebx
    f16e:	83 c4 10             	add    $0x10,%esp
    f171:	e9 9a fe ff ff       	jmp    f010 <binary_expression_evaluate+0xb0>
    f176:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    f179:	8b 75 e0             	mov    -0x20(%ebp),%esi
    f17c:	8d 45 df             	lea    -0x21(%ebp),%eax
    f17f:	51                   	push   %ecx
    f180:	53                   	push   %ebx
    f181:	56                   	push   %esi
    f182:	50                   	push   %eax
    f183:	e8 98 c9 ff ff       	call   bb20 <bithenge_node_equal>
    f188:	83 c4 10             	add    $0x10,%esp
    f18b:	89 c3                	mov    %eax,%ebx
    f18d:	85 c0                	test   %eax,%eax
    f18f:	0f 84 1b 02 00 00    	je     f3b0 <binary_expression_evaluate+0x450>
    f195:	8b 55 e0             	mov    -0x20(%ebp),%edx
    f198:	e9 73 fe ff ff       	jmp    f010 <binary_expression_evaluate+0xb0>
    f19d:	50                   	push   %eax
    f19e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    f1a1:	50                   	push   %eax
    f1a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
    f1a5:	50                   	push   %eax
    f1a6:	8d 45 df             	lea    -0x21(%ebp),%eax
    f1a9:	50                   	push   %eax
    f1aa:	e8 71 c9 ff ff       	call   bb20 <bithenge_node_equal>
    f1af:	83 c4 10             	add    $0x10,%esp
    f1b2:	89 c3                	mov    %eax,%ebx
    f1b4:	85 c0                	test   %eax,%eax
    f1b6:	75 dd                	jne    f195 <binary_expression_evaluate+0x235>
    f1b8:	31 c0                	xor    %eax,%eax
    f1ba:	57                   	push   %edi
    f1bb:	8a 45 df             	mov    -0x21(%ebp),%al
    f1be:	57                   	push   %edi
    f1bf:	eb 9e                	jmp    f15f <binary_expression_evaluate+0x1ff>
    f1c1:	50                   	push   %eax
    f1c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
    f1c5:	2b 45 d0             	sub    -0x30(%ebp),%eax
    f1c8:	8b 55 cc             	mov    -0x34(%ebp),%edx
    f1cb:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
    f1ce:	52                   	push   %edx
    f1cf:	50                   	push   %eax
    f1d0:	8b 7d 10             	mov    0x10(%ebp),%edi
    f1d3:	57                   	push   %edi
    f1d4:	e8 57 c8 ff ff       	call   ba30 <bithenge_new_integer_node>
    f1d9:	8b 55 e0             	mov    -0x20(%ebp),%edx
    f1dc:	89 c3                	mov    %eax,%ebx
    f1de:	83 c4 10             	add    $0x10,%esp
    f1e1:	e9 2a fe ff ff       	jmp    f010 <binary_expression_evaluate+0xb0>
    f1e6:	50                   	push   %eax
    f1e7:	8b 45 c8             	mov    -0x38(%ebp),%eax
    f1ea:	03 45 d0             	add    -0x30(%ebp),%eax
    f1ed:	8b 55 cc             	mov    -0x34(%ebp),%edx
    f1f0:	13 55 d4             	adc    -0x2c(%ebp),%edx
    f1f3:	eb d9                	jmp    f1ce <binary_expression_evaluate+0x26e>
    f1f5:	51                   	push   %ecx
    f1f6:	68 df 00 00 00       	push   $0xdf
    f1fb:	68 a8 18 01 00       	push   $0x118a8
    f200:	68 48 12 01 00       	push   $0x11248
    f205:	e8 06 2d 00 00       	call   11f10 <assert_abort@plt>
    f20a:	09 da                	or     %ebx,%edx
    f20c:	50                   	push   %eax
    f20d:	50                   	push   %eax
    f20e:	e9 48 ff ff ff       	jmp    f15b <binary_expression_evaluate+0x1fb>
    f213:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
    f216:	8b 7d cc             	mov    -0x34(%ebp),%edi
    f219:	b8 01 00 00 00       	mov    $0x1,%eax
    f21e:	52                   	push   %edx
    f21f:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    f222:	52                   	push   %edx
    f223:	8b 75 c8             	mov    -0x38(%ebp),%esi
    f226:	39 df                	cmp    %ebx,%edi
    f228:	0f 8c 31 ff ff ff    	jl     f15f <binary_expression_evaluate+0x1ff>
    f22e:	7f 08                	jg     f238 <binary_expression_evaluate+0x2d8>
    f230:	39 ce                	cmp    %ecx,%esi
    f232:	0f 82 27 ff ff ff    	jb     f15f <binary_expression_evaluate+0x1ff>
    f238:	31 c0                	xor    %eax,%eax
    f23a:	e9 20 ff ff ff       	jmp    f15f <binary_expression_evaluate+0x1ff>
    f23f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
    f243:	0f 8c 5a 01 00 00    	jl     f3a3 <binary_expression_evaluate+0x443>
    f249:	0f 8e 73 01 00 00    	jle    f3c2 <binary_expression_evaluate+0x462>
    f24f:	8b 45 c8             	mov    -0x38(%ebp),%eax
    f252:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
    f255:	8b 75 d0             	mov    -0x30(%ebp),%esi
    f258:	8b 7d cc             	mov    -0x34(%ebp),%edi
    f25b:	53                   	push   %ebx
    f25c:	56                   	push   %esi
    f25d:	57                   	push   %edi
    f25e:	50                   	push   %eax
    f25f:	e8 3c 2e 00 00       	call   120a0 <__moddi3@plt>
    f264:	83 c4 10             	add    $0x10,%esp
    f267:	85 d2                	test   %edx,%edx
    f269:	78 0e                	js     f279 <binary_expression_evaluate+0x319>
    f26b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    f272:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    f279:	03 45 d0             	add    -0x30(%ebp),%eax
    f27c:	51                   	push   %ecx
    f27d:	13 55 d4             	adc    -0x2c(%ebp),%edx
    f280:	e9 49 ff ff ff       	jmp    f1ce <binary_expression_evaluate+0x26e>
    f285:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
    f289:	0f 8e 08 01 00 00    	jle    f397 <binary_expression_evaluate+0x437>
    f28f:	83 ec 10             	sub    $0x10,%esp
    f292:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    f295:	50                   	push   %eax
    f296:	8b 45 d0             	mov    -0x30(%ebp),%eax
    f299:	50                   	push   %eax
    f29a:	8b 45 cc             	mov    -0x34(%ebp),%eax
    f29d:	50                   	push   %eax
    f29e:	8b 45 c8             	mov    -0x38(%ebp),%eax
    f2a1:	50                   	push   %eax
    f2a2:	e8 d9 2a 00 00       	call   11d80 <__divdi3@plt>
    f2a7:	83 c4 10             	add    $0x10,%esp
    f2aa:	89 c6                	mov    %eax,%esi
    f2ac:	89 d7                	mov    %edx,%edi
    f2ae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    f2b1:	8b 55 d0             	mov    -0x30(%ebp),%edx
    f2b4:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    f2b7:	8b 5d c8             	mov    -0x38(%ebp),%ebx
    f2ba:	50                   	push   %eax
    f2bb:	52                   	push   %edx
    f2bc:	51                   	push   %ecx
    f2bd:	53                   	push   %ebx
    f2be:	e8 dd 2d 00 00       	call   120a0 <__moddi3@plt>
    f2c3:	89 d0                	mov    %edx,%eax
    f2c5:	83 c4 1c             	add    $0x1c,%esp
    f2c8:	c1 e8 1f             	shr    $0x1f,%eax
    f2cb:	31 d2                	xor    %edx,%edx
    f2cd:	29 c6                	sub    %eax,%esi
    f2cf:	19 d7                	sbb    %edx,%edi
    f2d1:	57                   	push   %edi
    f2d2:	56                   	push   %esi
    f2d3:	e9 f8 fe ff ff       	jmp    f1d0 <binary_expression_evaluate+0x270>
    f2d8:	8b 7d cc             	mov    -0x34(%ebp),%edi
    f2db:	8b 45 d0             	mov    -0x30(%ebp),%eax
    f2de:	8b 55 d4             	mov    -0x2c(%ebp),%edx
    f2e1:	89 f9                	mov    %edi,%ecx
    f2e3:	0f af c8             	imul   %eax,%ecx
    f2e6:	56                   	push   %esi
    f2e7:	89 d0                	mov    %edx,%eax
    f2e9:	8b 75 c8             	mov    -0x38(%ebp),%esi
    f2ec:	0f af c6             	imul   %esi,%eax
    f2ef:	01 c1                	add    %eax,%ecx
    f2f1:	89 f0                	mov    %esi,%eax
    f2f3:	f7 65 d0             	mull   -0x30(%ebp)
    f2f6:	01 ca                	add    %ecx,%edx
    f2f8:	e9 d1 fe ff ff       	jmp    f1ce <binary_expression_evaluate+0x26e>
    f2fd:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
    f300:	8b 7d cc             	mov    -0x34(%ebp),%edi
    f303:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    f306:	50                   	push   %eax
    f307:	8b 75 c8             	mov    -0x38(%ebp),%esi
    f30a:	50                   	push   %eax
    f30b:	39 df                	cmp    %ebx,%edi
    f30d:	b8 01 00 00 00       	mov    $0x1,%eax
    f312:	0f 8c 47 fe ff ff    	jl     f15f <binary_expression_evaluate+0x1ff>
    f318:	0f 8f 1a ff ff ff    	jg     f238 <binary_expression_evaluate+0x2d8>
    f31e:	39 ce                	cmp    %ecx,%esi
    f320:	0f 86 39 fe ff ff    	jbe    f15f <binary_expression_evaluate+0x1ff>
    f326:	31 c0                	xor    %eax,%eax
    f328:	e9 32 fe ff ff       	jmp    f15f <binary_expression_evaluate+0x1ff>
    f32d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
    f330:	8b 7d cc             	mov    -0x34(%ebp),%edi
    f333:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    f336:	50                   	push   %eax
    f337:	8b 75 c8             	mov    -0x38(%ebp),%esi
    f33a:	50                   	push   %eax
    f33b:	39 df                	cmp    %ebx,%edi
    f33d:	b8 01 00 00 00       	mov    $0x1,%eax
    f342:	0f 8f 17 fe ff ff    	jg     f15f <binary_expression_evaluate+0x1ff>
    f348:	0f 8c ea fe ff ff    	jl     f238 <binary_expression_evaluate+0x2d8>
    f34e:	39 ce                	cmp    %ecx,%esi
    f350:	0f 87 09 fe ff ff    	ja     f15f <binary_expression_evaluate+0x1ff>
    f356:	31 c0                	xor    %eax,%eax
    f358:	e9 02 fe ff ff       	jmp    f15f <binary_expression_evaluate+0x1ff>
    f35d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
    f360:	8b 7d cc             	mov    -0x34(%ebp),%edi
    f363:	8b 4d d0             	mov    -0x30(%ebp),%ecx
    f366:	50                   	push   %eax
    f367:	8b 75 c8             	mov    -0x38(%ebp),%esi
    f36a:	50                   	push   %eax
    f36b:	39 df                	cmp    %ebx,%edi
    f36d:	b8 01 00 00 00       	mov    $0x1,%eax
    f372:	0f 8f e7 fd ff ff    	jg     f15f <binary_expression_evaluate+0x1ff>
    f378:	0f 8c ba fe ff ff    	jl     f238 <binary_expression_evaluate+0x2d8>
    f37e:	39 ce                	cmp    %ecx,%esi
    f380:	0f 83 d9 fd ff ff    	jae    f15f <binary_expression_evaluate+0x1ff>
    f386:	31 c0                	xor    %eax,%eax
    f388:	e9 d2 fd ff ff       	jmp    f15f <binary_expression_evaluate+0x1ff>
    f38d:	8b 55 e0             	mov    -0x20(%ebp),%edx
    f390:	89 c3                	mov    %eax,%ebx
    f392:	e9 79 fc ff ff       	jmp    f010 <binary_expression_evaluate+0xb0>
    f397:	7c 0a                	jl     f3a3 <binary_expression_evaluate+0x443>
    f399:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
    f39d:	0f 87 ec fe ff ff    	ja     f28f <binary_expression_evaluate+0x32f>
    f3a3:	8b 55 e0             	mov    -0x20(%ebp),%edx
    f3a6:	bb f2 ff ff ff       	mov    $0xfffffff2,%ebx
    f3ab:	e9 60 fc ff ff       	jmp    f010 <binary_expression_evaluate+0xb0>
    f3b0:	8a 45 df             	mov    -0x21(%ebp),%al
    f3b3:	52                   	push   %edx
    f3b4:	83 f0 01             	xor    $0x1,%eax
    f3b7:	52                   	push   %edx
    f3b8:	25 ff 00 00 00       	and    $0xff,%eax
    f3bd:	e9 9d fd ff ff       	jmp    f15f <binary_expression_evaluate+0x1ff>
    f3c2:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
    f3c6:	76 db                	jbe    f3a3 <binary_expression_evaluate+0x443>
    f3c8:	e9 82 fe ff ff       	jmp    f24f <binary_expression_evaluate+0x2ef>
    f3cd:	57                   	push   %edi
    f3ce:	6a 5a                	push   $0x5a
    f3d0:	68 a3 13 01 00       	push   $0x113a3
    f3d5:	68 35 13 01 00       	push   $0x11335
    f3da:	e8 31 2b 00 00       	call   11f10 <assert_abort@plt>
    f3df:	56                   	push   %esi
    f3e0:	6a 5b                	push   $0x5b
    f3e2:	68 a3 13 01 00       	push   $0x113a3
    f3e7:	68 61 11 01 00       	push   $0x11161
    f3ec:	e8 1f 2b 00 00       	call   11f10 <assert_abort@plt>
    f3f1:	56                   	push   %esi
    f3f2:	68 d9 00 00 00       	push   $0xd9
    f3f7:	68 05 12 01 00       	push   $0x11205
    f3fc:	68 84 12 01 00       	push   $0x11284
    f401:	e8 0a 2b 00 00       	call   11f10 <assert_abort@plt>
    f406:	51                   	push   %ecx
    f407:	6a 45                	push   $0x45
    f409:	68 18 13 01 00       	push   $0x11318
    f40e:	68 35 13 01 00       	push   $0x11335
    f413:	e8 f8 2a 00 00       	call   11f10 <assert_abort@plt>
    f418:	56                   	push   %esi
    f419:	6a 41                	push   $0x41
    f41b:	68 a3 13 01 00       	push   $0x113a3
    f420:	68 35 13 01 00       	push   $0x11335
    f425:	e8 e6 2a 00 00       	call   11f10 <assert_abort@plt>

0000f42a <bithenge_transform_num_params.part.9>:
    f42a:	55                   	push   %ebp
    f42b:	89 e5                	mov    %esp,%ebp
    f42d:	83 ec 0c             	sub    $0xc,%esp
    f430:	6a 62                	push   $0x62
    f432:	68 18 13 01 00       	push   $0x11318
    f437:	68 35 13 01 00       	push   $0x11335
    f43c:	e8 cf 2a 00 00       	call   11f10 <assert_abort@plt>
    f441:	66 90                	xchg   %ax,%ax
    f443:	66 90                	xchg   %ax,%ax
    f445:	66 90                	xchg   %ax,%ax
    f447:	66 90                	xchg   %ax,%ax
    f449:	66 90                	xchg   %ax,%ax
    f44b:	66 90                	xchg   %ax,%ax
    f44d:	66 90                	xchg   %ax,%ax
    f44f:	90                   	nop

0000f450 <file_size>:
    f450:	55                   	push   %ebp
    f451:	89 e5                	mov    %esp,%ebp
    f453:	53                   	push   %ebx
    f454:	8b 45 08             	mov    0x8(%ebp),%eax
    f457:	8b 58 18             	mov    0x18(%eax),%ebx
    f45a:	8b 48 14             	mov    0x14(%eax),%ecx
    f45d:	8b 45 0c             	mov    0xc(%ebp),%eax
    f460:	89 08                	mov    %ecx,(%eax)
    f462:	89 58 04             	mov    %ebx,0x4(%eax)
    f465:	5b                   	pop    %ebx
    f466:	31 c0                	xor    %eax,%eax
    f468:	5d                   	pop    %ebp
    f469:	c3                   	ret    
    f46a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0000f470 <file_destroy>:
    f470:	55                   	push   %ebp
    f471:	89 e5                	mov    %esp,%ebp
    f473:	53                   	push   %ebx
    f474:	83 ec 10             	sub    $0x10,%esp
    f477:	8b 5d 08             	mov    0x8(%ebp),%ebx
    f47a:	8b 43 10             	mov    0x10(%ebx),%eax
    f47d:	50                   	push   %eax
    f47e:	e8 5d 2c 00 00       	call   120e0 <close@plt>
    f483:	89 5d 08             	mov    %ebx,0x8(%ebp)
    f486:	83 c4 10             	add    $0x10,%esp
    f489:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    f48c:	c9                   	leave  
    f48d:	e9 5e 2c 00 00       	jmp    120f0 <free@plt>
    f492:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    f499:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000f4a0 <file_read>:
    f4a0:	55                   	push   %ebp
    f4a1:	89 e5                	mov    %esp,%ebp
    f4a3:	57                   	push   %edi
    f4a4:	56                   	push   %esi
    f4a5:	53                   	push   %ebx
    f4a6:	83 ec 0c             	sub    $0xc,%esp
    f4a9:	8b 7d 08             	mov    0x8(%ebp),%edi
    f4ac:	8b 55 10             	mov    0x10(%ebp),%edx
    f4af:	8b 45 0c             	mov    0xc(%ebp),%eax
    f4b2:	8b 5d 14             	mov    0x14(%ebp),%ebx
    f4b5:	39 57 18             	cmp    %edx,0x18(%edi)
    f4b8:	73 0e                	jae    f4c8 <file_read+0x28>
    f4ba:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
    f4bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
    f4c2:	5b                   	pop    %ebx
    f4c3:	5e                   	pop    %esi
    f4c4:	5f                   	pop    %edi
    f4c5:	5d                   	pop    %ebp
    f4c6:	c3                   	ret    
    f4c7:	90                   	nop
    f4c8:	0f 86 8a 00 00 00    	jbe    f558 <file_read+0xb8>
    f4ce:	6a 00                	push   $0x0
    f4d0:	52                   	push   %edx
    f4d1:	50                   	push   %eax
    f4d2:	8b 45 08             	mov    0x8(%ebp),%eax
    f4d5:	8b 40 10             	mov    0x10(%eax),%eax
    f4d8:	50                   	push   %eax
    f4d9:	e8 e2 29 00 00       	call   11ec0 <lseek@plt>
    f4de:	83 c4 10             	add    $0x10,%esp
    f4e1:	85 d2                	test   %edx,%edx
    f4e3:	0f 88 8f 00 00 00    	js     f578 <file_read+0xd8>
    f4e9:	8b 45 18             	mov    0x18(%ebp),%eax
    f4ec:	89 5d 14             	mov    %ebx,0x14(%ebp)
    f4ef:	8b 30                	mov    (%eax),%esi
    f4f1:	8b 78 04             	mov    0x4(%eax),%edi
    f4f4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    f4fa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    f501:	eb 28                	jmp    f52b <file_read+0x8b>
    f503:	90                   	nop
    f504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    f508:	8b 55 14             	mov    0x14(%ebp),%edx
    f50b:	89 c3                	mov    %eax,%ebx
    f50d:	c1 fb 1f             	sar    $0x1f,%ebx
    f510:	01 c2                	add    %eax,%edx
    f512:	89 55 14             	mov    %edx,0x14(%ebp)
    f515:	8b 55 18             	mov    0x18(%ebp),%edx
    f518:	01 02                	add    %eax,(%edx)
    f51a:	11 5a 04             	adc    %ebx,0x4(%edx)
    f51d:	29 c6                	sub    %eax,%esi
    f51f:	19 df                	sbb    %ebx,%edi
    f521:	89 f3                	mov    %esi,%ebx
    f523:	09 fb                	or     %edi,%ebx
    f525:	74 41                	je     f568 <file_read+0xc8>
    f527:	85 c0                	test   %eax,%eax
    f529:	74 3d                	je     f568 <file_read+0xc8>
    f52b:	8b 45 08             	mov    0x8(%ebp),%eax
    f52e:	51                   	push   %ecx
    f52f:	56                   	push   %esi
    f530:	8b 5d 14             	mov    0x14(%ebp),%ebx
    f533:	8b 40 10             	mov    0x10(%eax),%eax
    f536:	53                   	push   %ebx
    f537:	50                   	push   %eax
    f538:	e8 53 2a 00 00       	call   11f90 <read@plt>
    f53d:	83 c4 10             	add    $0x10,%esp
    f540:	85 c0                	test   %eax,%eax
    f542:	79 c4                	jns    f508 <file_read+0x68>
    f544:	e8 a7 28 00 00       	call   11df0 <__errno@plt>
    f549:	8b 00                	mov    (%eax),%eax
    f54b:	8d 65 f4             	lea    -0xc(%ebp),%esp
    f54e:	5b                   	pop    %ebx
    f54f:	5e                   	pop    %esi
    f550:	5f                   	pop    %edi
    f551:	5d                   	pop    %ebp
    f552:	c3                   	ret    
    f553:	90                   	nop
    f554:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    f558:	39 47 14             	cmp    %eax,0x14(%edi)
    f55b:	0f 82 59 ff ff ff    	jb     f4ba <file_read+0x1a>
    f561:	e9 68 ff ff ff       	jmp    f4ce <file_read+0x2e>
    f566:	66 90                	xchg   %ax,%ax
    f568:	8d 65 f4             	lea    -0xc(%ebp),%esp
    f56b:	31 c0                	xor    %eax,%eax
    f56d:	5b                   	pop    %ebx
    f56e:	5e                   	pop    %esi
    f56f:	5f                   	pop    %edi
    f570:	5d                   	pop    %ebp
    f571:	c3                   	ret    
    f572:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    f578:	e8 73 28 00 00       	call   11df0 <__errno@plt>
    f57d:	8b 00                	mov    (%eax),%eax
    f57f:	83 f8 f2             	cmp    $0xfffffff2,%eax
    f582:	0f 85 37 ff ff ff    	jne    f4bf <file_read+0x1f>
    f588:	b8 f6 fe ff ff       	mov    $0xfffffef6,%eax
    f58d:	e9 2d ff ff ff       	jmp    f4bf <file_read+0x1f>
    f592:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    f599:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000f5a0 <bithenge_new_file_blob>:
    f5a0:	55                   	push   %ebp
    f5a1:	89 e5                	mov    %esp,%ebp
    f5a3:	57                   	push   %edi
    f5a4:	56                   	push   %esi
    f5a5:	53                   	push   %ebx
    f5a6:	83 ec 2c             	sub    $0x2c,%esp
    f5a9:	8b 45 0c             	mov    0xc(%ebp),%eax
    f5ac:	85 c0                	test   %eax,%eax
    f5ae:	0f 84 dd 00 00 00    	je     f691 <bithenge_new_file_blob+0xf1>
    f5b4:	57                   	push   %edi
    f5b5:	57                   	push   %edi
    f5b6:	6a 10                	push   $0x10
    f5b8:	50                   	push   %eax
    f5b9:	e8 02 2b 00 00       	call   120c0 <open@plt>
    f5be:	83 c4 10             	add    $0x10,%esp
    f5c1:	89 c3                	mov    %eax,%ebx
    f5c3:	85 c0                	test   %eax,%eax
    f5c5:	78 39                	js     f600 <bithenge_new_file_blob+0x60>
    f5c7:	8b 75 08             	mov    0x8(%ebp),%esi
    f5ca:	85 f6                	test   %esi,%esi
    f5cc:	0f 84 d4 00 00 00    	je     f6a6 <bithenge_new_file_blob+0x106>
    f5d2:	8d 45 c8             	lea    -0x38(%ebp),%eax
    f5d5:	52                   	push   %edx
    f5d6:	52                   	push   %edx
    f5d7:	50                   	push   %eax
    f5d8:	53                   	push   %ebx
    f5d9:	e8 42 29 00 00       	call   11f20 <fstat@plt>
    f5de:	83 c4 10             	add    $0x10,%esp
    f5e1:	89 c6                	mov    %eax,%esi
    f5e3:	85 c0                	test   %eax,%eax
    f5e5:	74 31                	je     f618 <bithenge_new_file_blob+0x78>
    f5e7:	83 ec 0c             	sub    $0xc,%esp
    f5ea:	53                   	push   %ebx
    f5eb:	e8 f0 2a 00 00       	call   120e0 <close@plt>
    f5f0:	83 c4 10             	add    $0x10,%esp
    f5f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
    f5f6:	89 f0                	mov    %esi,%eax
    f5f8:	5b                   	pop    %ebx
    f5f9:	5e                   	pop    %esi
    f5fa:	5f                   	pop    %edi
    f5fb:	5d                   	pop    %ebp
    f5fc:	c3                   	ret    
    f5fd:	8d 76 00             	lea    0x0(%esi),%esi
    f600:	e8 eb 27 00 00       	call   11df0 <__errno@plt>
    f605:	8b 30                	mov    (%eax),%esi
    f607:	8d 65 f4             	lea    -0xc(%ebp),%esp
    f60a:	89 f0                	mov    %esi,%eax
    f60c:	5b                   	pop    %ebx
    f60d:	5e                   	pop    %esi
    f60e:	5f                   	pop    %edi
    f60f:	5d                   	pop    %ebp
    f610:	c3                   	ret    
    f611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    f618:	83 ec 0c             	sub    $0xc,%esp
    f61b:	6a 20                	push   $0x20
    f61d:	e8 3e 28 00 00       	call   11e60 <malloc@plt>
    f622:	83 c4 10             	add    $0x10,%esp
    f625:	89 c7                	mov    %eax,%edi
    f627:	85 c0                	test   %eax,%eax
    f629:	74 35                	je     f660 <bithenge_new_file_blob+0xc0>
    f62b:	50                   	push   %eax
    f62c:	50                   	push   %eax
    f62d:	68 40 1a 01 00       	push   $0x11a40
    f632:	57                   	push   %edi
    f633:	e8 68 ce ff ff       	call   c4a0 <bithenge_init_random_access_blob>
    f638:	83 c4 10             	add    $0x10,%esp
    f63b:	89 c6                	mov    %eax,%esi
    f63d:	85 c0                	test   %eax,%eax
    f63f:	75 37                	jne    f678 <bithenge_new_file_blob+0xd8>
    f641:	8b 45 dc             	mov    -0x24(%ebp),%eax
    f644:	8b 55 e0             	mov    -0x20(%ebp),%edx
    f647:	89 47 14             	mov    %eax,0x14(%edi)
    f64a:	8b 45 08             	mov    0x8(%ebp),%eax
    f64d:	89 5f 10             	mov    %ebx,0x10(%edi)
    f650:	89 57 18             	mov    %edx,0x18(%edi)
    f653:	c6 47 1c 01          	movb   $0x1,0x1c(%edi)
    f657:	89 38                	mov    %edi,(%eax)
    f659:	eb 98                	jmp    f5f3 <bithenge_new_file_blob+0x53>
    f65b:	90                   	nop
    f65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    f660:	83 ec 0c             	sub    $0xc,%esp
    f663:	be fe ff ff ff       	mov    $0xfffffffe,%esi
    f668:	53                   	push   %ebx
    f669:	e8 72 2a 00 00       	call   120e0 <close@plt>
    f66e:	83 c4 10             	add    $0x10,%esp
    f671:	eb 80                	jmp    f5f3 <bithenge_new_file_blob+0x53>
    f673:	90                   	nop
    f674:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    f678:	83 ec 0c             	sub    $0xc,%esp
    f67b:	57                   	push   %edi
    f67c:	e8 6f 2a 00 00       	call   120f0 <free@plt>
    f681:	89 1c 24             	mov    %ebx,(%esp)
    f684:	e8 57 2a 00 00       	call   120e0 <close@plt>
    f689:	83 c4 10             	add    $0x10,%esp
    f68c:	e9 62 ff ff ff       	jmp    f5f3 <bithenge_new_file_blob+0x53>
    f691:	50                   	push   %eax
    f692:	68 9b 00 00 00       	push   $0x9b
    f697:	68 2c 1a 01 00       	push   $0x11a2c
    f69c:	68 37 1a 01 00       	push   $0x11a37
    f6a1:	e8 6a 28 00 00       	call   11f10 <assert_abort@plt>
    f6a6:	51                   	push   %ecx
    f6a7:	6a 70                	push   $0x70
    f6a9:	68 2c 1a 01 00       	push   $0x11a2c
    f6ae:	68 66 17 01 00       	push   $0x11766
    f6b3:	e8 58 28 00 00       	call   11f10 <assert_abort@plt>
    f6b8:	90                   	nop
    f6b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0000f6c0 <bithenge_new_file_blob_from_fd>:
    f6c0:	55                   	push   %ebp
    f6c1:	89 e5                	mov    %esp,%ebp
    f6c3:	57                   	push   %edi
    f6c4:	56                   	push   %esi
    f6c5:	53                   	push   %ebx
    f6c6:	83 ec 3c             	sub    $0x3c,%esp
    f6c9:	8b 5d 08             	mov    0x8(%ebp),%ebx
    f6cc:	8b 75 0c             	mov    0xc(%ebp),%esi
    f6cf:	85 db                	test   %ebx,%ebx
    f6d1:	0f 84 88 00 00 00    	je     f75f <bithenge_new_file_blob_from_fd+0x9f>
    f6d7:	8d 45 c8             	lea    -0x38(%ebp),%eax
    f6da:	52                   	push   %edx
    f6db:	52                   	push   %edx
    f6dc:	50                   	push   %eax
    f6dd:	56                   	push   %esi
    f6de:	e8 3d 28 00 00       	call   11f20 <fstat@plt>
    f6e3:	83 c4 10             	add    $0x10,%esp
    f6e6:	85 c0                	test   %eax,%eax
    f6e8:	74 0e                	je     f6f8 <bithenge_new_file_blob_from_fd+0x38>
    f6ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
    f6ed:	5b                   	pop    %ebx
    f6ee:	5e                   	pop    %esi
    f6ef:	5f                   	pop    %edi
    f6f0:	5d                   	pop    %ebp
    f6f1:	c3                   	ret    
    f6f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    f6f8:	83 ec 0c             	sub    $0xc,%esp
    f6fb:	6a 20                	push   $0x20
    f6fd:	e8 5e 27 00 00       	call   11e60 <malloc@plt>
    f702:	83 c4 10             	add    $0x10,%esp
    f705:	89 c7                	mov    %eax,%edi
    f707:	85 c0                	test   %eax,%eax
    f709:	74 4d                	je     f758 <bithenge_new_file_blob_from_fd+0x98>
    f70b:	50                   	push   %eax
    f70c:	50                   	push   %eax
    f70d:	68 40 1a 01 00       	push   $0x11a40
    f712:	57                   	push   %edi
    f713:	e8 88 cd ff ff       	call   c4a0 <bithenge_init_random_access_blob>
    f718:	83 c4 10             	add    $0x10,%esp
    f71b:	85 c0                	test   %eax,%eax
    f71d:	75 21                	jne    f740 <bithenge_new_file_blob_from_fd+0x80>
    f71f:	8b 55 dc             	mov    -0x24(%ebp),%edx
    f722:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    f725:	89 3b                	mov    %edi,(%ebx)
    f727:	89 77 10             	mov    %esi,0x10(%edi)
    f72a:	89 57 14             	mov    %edx,0x14(%edi)
    f72d:	89 4f 18             	mov    %ecx,0x18(%edi)
    f730:	c6 47 1c 00          	movb   $0x0,0x1c(%edi)
    f734:	8d 65 f4             	lea    -0xc(%ebp),%esp
    f737:	5b                   	pop    %ebx
    f738:	5e                   	pop    %esi
    f739:	5f                   	pop    %edi
    f73a:	5d                   	pop    %ebp
    f73b:	c3                   	ret    
    f73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    f740:	83 ec 0c             	sub    $0xc,%esp
    f743:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    f746:	57                   	push   %edi
    f747:	e8 a4 29 00 00       	call   120f0 <free@plt>
    f74c:	83 c4 10             	add    $0x10,%esp
    f74f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
    f752:	eb 96                	jmp    f6ea <bithenge_new_file_blob_from_fd+0x2a>
    f754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    f758:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    f75d:	eb 8b                	jmp    f6ea <bithenge_new_file_blob_from_fd+0x2a>
    f75f:	51                   	push   %ecx
    f760:	6a 70                	push   $0x70
    f762:	68 2c 1a 01 00       	push   $0x11a2c
    f767:	68 66 17 01 00       	push   $0x11766
    f76c:	e8 9f 27 00 00       	call   11f10 <assert_abort@plt>
    f771:	eb 0d                	jmp    f780 <bithenge_new_file_blob_from_file>
    f773:	90                   	nop
    f774:	90                   	nop
    f775:	90                   	nop
    f776:	90                   	nop
    f777:	90                   	nop
    f778:	90                   	nop
    f779:	90                   	nop
    f77a:	90                   	nop
    f77b:	90                   	nop
    f77c:	90                   	nop
    f77d:	90                   	nop
    f77e:	90                   	nop
    f77f:	90                   	nop

0000f780 <bithenge_new_file_blob_from_file>:
    f780:	55                   	push   %ebp
    f781:	89 e5                	mov    %esp,%ebp
    f783:	56                   	push   %esi
    f784:	53                   	push   %ebx
    f785:	83 ec 3c             	sub    $0x3c,%esp
    f788:	8b 75 0c             	mov    0xc(%ebp),%esi
    f78b:	56                   	push   %esi
    f78c:	e8 ff 28 00 00       	call   12090 <fileno@plt>
    f791:	83 c4 10             	add    $0x10,%esp
    f794:	85 c0                	test   %eax,%eax
    f796:	78 28                	js     f7c0 <bithenge_new_file_blob_from_file+0x40>
    f798:	8b 5d 08             	mov    0x8(%ebp),%ebx
    f79b:	85 db                	test   %ebx,%ebx
    f79d:	0f 84 91 00 00 00    	je     f834 <bithenge_new_file_blob_from_file+0xb4>
    f7a3:	89 c3                	mov    %eax,%ebx
    f7a5:	8d 45 d8             	lea    -0x28(%ebp),%eax
    f7a8:	52                   	push   %edx
    f7a9:	52                   	push   %edx
    f7aa:	50                   	push   %eax
    f7ab:	53                   	push   %ebx
    f7ac:	e8 6f 27 00 00       	call   11f20 <fstat@plt>
    f7b1:	83 c4 10             	add    $0x10,%esp
    f7b4:	85 c0                	test   %eax,%eax
    f7b6:	74 18                	je     f7d0 <bithenge_new_file_blob_from_file+0x50>
    f7b8:	8d 65 f8             	lea    -0x8(%ebp),%esp
    f7bb:	5b                   	pop    %ebx
    f7bc:	5e                   	pop    %esi
    f7bd:	5d                   	pop    %ebp
    f7be:	c3                   	ret    
    f7bf:	90                   	nop
    f7c0:	e8 2b 26 00 00       	call   11df0 <__errno@plt>
    f7c5:	8b 00                	mov    (%eax),%eax
    f7c7:	8d 65 f8             	lea    -0x8(%ebp),%esp
    f7ca:	5b                   	pop    %ebx
    f7cb:	5e                   	pop    %esi
    f7cc:	5d                   	pop    %ebp
    f7cd:	c3                   	ret    
    f7ce:	66 90                	xchg   %ax,%ax
    f7d0:	83 ec 0c             	sub    $0xc,%esp
    f7d3:	6a 20                	push   $0x20
    f7d5:	e8 86 26 00 00       	call   11e60 <malloc@plt>
    f7da:	83 c4 10             	add    $0x10,%esp
    f7dd:	89 c6                	mov    %eax,%esi
    f7df:	85 c0                	test   %eax,%eax
    f7e1:	74 35                	je     f818 <bithenge_new_file_blob_from_file+0x98>
    f7e3:	50                   	push   %eax
    f7e4:	50                   	push   %eax
    f7e5:	68 40 1a 01 00       	push   $0x11a40
    f7ea:	56                   	push   %esi
    f7eb:	e8 b0 cc ff ff       	call   c4a0 <bithenge_init_random_access_blob>
    f7f0:	83 c4 10             	add    $0x10,%esp
    f7f3:	85 c0                	test   %eax,%eax
    f7f5:	75 29                	jne    f820 <bithenge_new_file_blob_from_file+0xa0>
    f7f7:	8b 55 ec             	mov    -0x14(%ebp),%edx
    f7fa:	8b 4d f0             	mov    -0x10(%ebp),%ecx
    f7fd:	89 56 14             	mov    %edx,0x14(%esi)
    f800:	8b 55 08             	mov    0x8(%ebp),%edx
    f803:	89 5e 10             	mov    %ebx,0x10(%esi)
    f806:	89 4e 18             	mov    %ecx,0x18(%esi)
    f809:	c6 46 1c 00          	movb   $0x0,0x1c(%esi)
    f80d:	89 32                	mov    %esi,(%edx)
    f80f:	eb a7                	jmp    f7b8 <bithenge_new_file_blob_from_file+0x38>
    f811:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    f818:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    f81d:	eb 99                	jmp    f7b8 <bithenge_new_file_blob_from_file+0x38>
    f81f:	90                   	nop
    f820:	83 ec 0c             	sub    $0xc,%esp
    f823:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    f826:	56                   	push   %esi
    f827:	e8 c4 28 00 00       	call   120f0 <free@plt>
    f82c:	83 c4 10             	add    $0x10,%esp
    f82f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
    f832:	eb 84                	jmp    f7b8 <bithenge_new_file_blob_from_file+0x38>
    f834:	51                   	push   %ecx
    f835:	6a 70                	push   $0x70
    f837:	68 2c 1a 01 00       	push   $0x11a2c
    f83c:	68 66 17 01 00       	push   $0x11766
    f841:	e8 ca 26 00 00       	call   11f10 <assert_abort@plt>
    f846:	66 90                	xchg   %ax,%ax
    f848:	66 90                	xchg   %ax,%ax
    f84a:	66 90                	xchg   %ax,%ax
    f84c:	66 90                	xchg   %ax,%ax
    f84e:	66 90                	xchg   %ax,%ax

0000f850 <cache_key_hash>:
    f850:	55                   	push   %ebp
    f851:	89 e5                	mov    %esp,%ebp
    f853:	8b 45 08             	mov    0x8(%ebp),%eax
    f856:	5d                   	pop    %ebp
    f857:	8b 00                	mov    (%eax),%eax
    f859:	c3                   	ret    
    f85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0000f860 <cache_hash>:
    f860:	55                   	push   %ebp
    f861:	89 e5                	mov    %esp,%ebp
    f863:	8b 45 08             	mov    0x8(%ebp),%eax
    f866:	5d                   	pop    %ebp
    f867:	8b 40 e0             	mov    -0x20(%eax),%eax
    f86a:	c3                   	ret    
    f86b:	90                   	nop
    f86c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000f870 <cache_key_equal>:
    f870:	55                   	push   %ebp
    f871:	89 e5                	mov    %esp,%ebp
    f873:	8b 45 0c             	mov    0xc(%ebp),%eax
    f876:	8b 4d 08             	mov    0x8(%ebp),%ecx
    f879:	5d                   	pop    %ebp
    f87a:	8b 50 e0             	mov    -0x20(%eax),%edx
    f87d:	8b 40 e4             	mov    -0x1c(%eax),%eax
    f880:	33 41 04             	xor    0x4(%ecx),%eax
    f883:	33 11                	xor    (%ecx),%edx
    f885:	09 c2                	or     %eax,%edx
    f887:	0f 94 c0             	sete   %al
    f88a:	c3                   	ret    
    f88b:	90                   	nop
    f88c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0000f890 <block_init>:
    f890:	55                   	push   %ebp
    f891:	89 e5                	mov    %esp,%ebp
    f893:	57                   	push   %edi
    f894:	56                   	push   %esi
    f895:	53                   	push   %ebx
    f896:	83 ec 30             	sub    $0x30,%esp
    f899:	8b 5d 08             	mov    0x8(%ebp),%ebx
    f89c:	6a 01                	push   $0x1
    f89e:	68 21 66 93 ed       	push   $0xed936621
    f8a3:	53                   	push   %ebx
    f8a4:	e8 e7 24 00 00       	call   11d90 <loc_service_connect@plt>
    f8a9:	83 c4 10             	add    $0x10,%esp
    f8ac:	85 c0                	test   %eax,%eax
    f8ae:	0f 84 95 01 00 00    	je     fa49 <block_init+0x1b9>
    f8b4:	89 c7                	mov    %eax,%edi
    f8b6:	50                   	push   %eax
    f8b7:	50                   	push   %eax
    f8b8:	8d 45 d8             	lea    -0x28(%ebp),%eax
    f8bb:	50                   	push   %eax
    f8bc:	57                   	push   %edi
    f8bd:	e8 ae 25 00 00       	call   11e70 <bd_open@plt>
    f8c2:	83 c4 10             	add    $0x10,%esp
    f8c5:	89 c6                	mov    %eax,%esi
    f8c7:	85 c0                	test   %eax,%eax
    f8c9:	0f 85 31 01 00 00    	jne    fa00 <block_init+0x170>
    f8cf:	8d 45 dc             	lea    -0x24(%ebp),%eax
    f8d2:	56                   	push   %esi
    f8d3:	56                   	push   %esi
    f8d4:	50                   	push   %eax
    f8d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
    f8d8:	50                   	push   %eax
    f8d9:	e8 32 27 00 00       	call   12010 <bd_get_block_size@plt>
    f8de:	83 c4 10             	add    $0x10,%esp
    f8e1:	89 c6                	mov    %eax,%esi
    f8e3:	85 c0                	test   %eax,%eax
    f8e5:	0f 85 f0 00 00 00    	jne    f9db <block_init+0x14b>
    f8eb:	8d 45 e0             	lea    -0x20(%ebp),%eax
    f8ee:	8b 4d d8             	mov    -0x28(%ebp),%ecx
    f8f1:	52                   	push   %edx
    f8f2:	52                   	push   %edx
    f8f3:	50                   	push   %eax
    f8f4:	51                   	push   %ecx
    f8f5:	e8 26 25 00 00       	call   11e20 <bd_get_num_blocks@plt>
    f8fa:	83 c4 10             	add    $0x10,%esp
    f8fd:	89 c6                	mov    %eax,%esi
    f8ff:	85 c0                	test   %eax,%eax
    f901:	0f 85 d4 00 00 00    	jne    f9db <block_init+0x14b>
    f907:	83 ec 0c             	sub    $0xc,%esp
    f90a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    f90d:	8b 4d d8             	mov    -0x28(%ebp),%ecx
    f910:	8b 45 e0             	mov    -0x20(%ebp),%eax
    f913:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    f916:	8b 55 dc             	mov    -0x24(%ebp),%edx
    f919:	6a 30                	push   $0x30
    f91b:	89 4d c8             	mov    %ecx,-0x38(%ebp)
    f91e:	89 45 d0             	mov    %eax,-0x30(%ebp)
    f921:	89 55 cc             	mov    %edx,-0x34(%ebp)
    f924:	e8 37 25 00 00       	call   11e60 <malloc@plt>
    f929:	83 c4 10             	add    $0x10,%esp
    f92c:	85 c0                	test   %eax,%eax
    f92e:	0f 84 1a 01 00 00    	je     fa4e <block_init+0x1be>
    f934:	8b 4d c8             	mov    -0x38(%ebp),%ecx
    f937:	8b 55 cc             	mov    -0x34(%ebp),%edx
    f93a:	89 48 10             	mov    %ecx,0x10(%eax)
    f93d:	89 50 28             	mov    %edx,0x28(%eax)
    f940:	83 ec 0c             	sub    $0xc,%esp
    f943:	8b 55 d0             	mov    -0x30(%ebp),%edx
    f946:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    f949:	89 50 20             	mov    %edx,0x20(%eax)
    f94c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    f952:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    f959:	89 58 08             	mov    %ebx,0x8(%eax)
    f95c:	89 78 0c             	mov    %edi,0xc(%eax)
    f95f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    f966:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    f96d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    f974:	89 48 24             	mov    %ecx,0x24(%eax)
    f977:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    f97e:	89 45 d0             	mov    %eax,-0x30(%ebp)
    f981:	68 1c 3c 01 00       	push   $0x13c1c
    f986:	e8 75 27 00 00       	call   12100 <fibril_mutex_lock@plt>
    f98b:	8b 15 18 3c 01 00    	mov    0x13c18,%edx
    f991:	83 c4 10             	add    $0x10,%esp
    f994:	8b 45 d0             	mov    -0x30(%ebp),%eax
    f997:	81 fa 14 3c 01 00    	cmp    $0x13c14,%edx
    f99d:	75 14                	jne    f9b3 <block_init+0x123>
    f99f:	eb 77                	jmp    fa18 <block_init+0x188>
    f9a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    f9a8:	8b 52 04             	mov    0x4(%edx),%edx
    f9ab:	81 fa 14 3c 01 00    	cmp    $0x13c14,%edx
    f9b1:	74 65                	je     fa18 <block_init+0x188>
    f9b3:	3b 5a 08             	cmp    0x8(%edx),%ebx
    f9b6:	75 f0                	jne    f9a8 <block_init+0x118>
    f9b8:	83 ec 0c             	sub    $0xc,%esp
    f9bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
    f9be:	be f7 ff ff ff       	mov    $0xfffffff7,%esi
    f9c3:	68 1c 3c 01 00       	push   $0x13c1c
    f9c8:	e8 93 25 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    f9cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
    f9d0:	89 04 24             	mov    %eax,(%esp)
    f9d3:	e8 18 27 00 00       	call   120f0 <free@plt>
    f9d8:	83 c4 10             	add    $0x10,%esp
    f9db:	83 ec 0c             	sub    $0xc,%esp
    f9de:	8b 45 d8             	mov    -0x28(%ebp),%eax
    f9e1:	50                   	push   %eax
    f9e2:	e8 59 24 00 00       	call   11e40 <bd_close@plt>
    f9e7:	89 3c 24             	mov    %edi,(%esp)
    f9ea:	e8 c1 23 00 00       	call   11db0 <async_hangup@plt>
    f9ef:	83 c4 10             	add    $0x10,%esp
    f9f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
    f9f5:	89 f0                	mov    %esi,%eax
    f9f7:	5b                   	pop    %ebx
    f9f8:	5e                   	pop    %esi
    f9f9:	5f                   	pop    %edi
    f9fa:	5d                   	pop    %ebp
    f9fb:	c3                   	ret    
    f9fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    fa00:	83 ec 0c             	sub    $0xc,%esp
    fa03:	57                   	push   %edi
    fa04:	e8 a7 23 00 00       	call   11db0 <async_hangup@plt>
    fa09:	83 c4 10             	add    $0x10,%esp
    fa0c:	8d 65 f4             	lea    -0xc(%ebp),%esp
    fa0f:	89 f0                	mov    %esi,%eax
    fa11:	5b                   	pop    %ebx
    fa12:	5e                   	pop    %esi
    fa13:	5f                   	pop    %edi
    fa14:	5d                   	pop    %ebp
    fa15:	c3                   	ret    
    fa16:	66 90                	xchg   %ax,%ax
    fa18:	8b 15 14 3c 01 00    	mov    0x13c14,%edx
    fa1e:	83 ec 0c             	sub    $0xc,%esp
    fa21:	c7 40 04 14 3c 01 00 	movl   $0x13c14,0x4(%eax)
    fa28:	89 10                	mov    %edx,(%eax)
    fa2a:	89 42 04             	mov    %eax,0x4(%edx)
    fa2d:	68 1c 3c 01 00       	push   $0x13c1c
    fa32:	a3 14 3c 01 00       	mov    %eax,0x13c14
    fa37:	e8 24 25 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    fa3c:	83 c4 10             	add    $0x10,%esp
    fa3f:	8d 65 f4             	lea    -0xc(%ebp),%esp
    fa42:	89 f0                	mov    %esi,%eax
    fa44:	5b                   	pop    %ebx
    fa45:	5e                   	pop    %esi
    fa46:	5f                   	pop    %edi
    fa47:	5d                   	pop    %ebp
    fa48:	c3                   	ret    
    fa49:	83 ce ff             	or     $0xffffffff,%esi
    fa4c:	eb a4                	jmp    f9f2 <block_init+0x162>
    fa4e:	be fe ff ff ff       	mov    $0xfffffffe,%esi
    fa53:	eb 86                	jmp    f9db <block_init+0x14b>
    fa55:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    fa59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0000fa60 <block_bb_read>:
    fa60:	55                   	push   %ebp
    fa61:	89 e5                	mov    %esp,%ebp
    fa63:	57                   	push   %edi
    fa64:	56                   	push   %esi
    fa65:	53                   	push   %ebx
    fa66:	83 ec 28             	sub    $0x28,%esp
    fa69:	8b 45 08             	mov    0x8(%ebp),%eax
    fa6c:	8b 75 0c             	mov    0xc(%ebp),%esi
    fa6f:	68 1c 3c 01 00       	push   $0x13c1c
    fa74:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    fa77:	8b 7d 10             	mov    0x10(%ebp),%edi
    fa7a:	e8 81 26 00 00       	call   12100 <fibril_mutex_lock@plt>
    fa7f:	8b 1d 18 3c 01 00    	mov    0x13c18,%ebx
    fa85:	83 c4 10             	add    $0x10,%esp
    fa88:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
    fa8e:	74 20                	je     fab0 <block_bb_read+0x50>
    fa90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    fa93:	3b 43 08             	cmp    0x8(%ebx),%eax
    fa96:	75 0d                	jne    faa5 <block_bb_read+0x45>
    fa98:	eb 36                	jmp    fad0 <block_bb_read+0x70>
    fa9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    faa0:	3b 43 08             	cmp    0x8(%ebx),%eax
    faa3:	74 2b                	je     fad0 <block_bb_read+0x70>
    faa5:	8b 5b 04             	mov    0x4(%ebx),%ebx
    faa8:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
    faae:	75 f0                	jne    faa0 <block_bb_read+0x40>
    fab0:	83 ec 0c             	sub    $0xc,%esp
    fab3:	68 1c 3c 01 00       	push   $0x13c1c
    fab8:	e8 a3 24 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    fabd:	83 c4 10             	add    $0x10,%esp
    fac0:	83 ca ff             	or     $0xffffffff,%edx
    fac3:	8d 65 f4             	lea    -0xc(%ebp),%esp
    fac6:	89 d0                	mov    %edx,%eax
    fac8:	5b                   	pop    %ebx
    fac9:	5e                   	pop    %esi
    faca:	5f                   	pop    %edi
    facb:	5d                   	pop    %ebp
    facc:	c3                   	ret    
    facd:	8d 76 00             	lea    0x0(%esi),%esi
    fad0:	83 ec 0c             	sub    $0xc,%esp
    fad3:	68 1c 3c 01 00       	push   $0x13c1c
    fad8:	e8 83 24 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    fadd:	8b 43 14             	mov    0x14(%ebx),%eax
    fae0:	83 c4 10             	add    $0x10,%esp
    fae3:	85 c0                	test   %eax,%eax
    fae5:	0f 85 9d 00 00 00    	jne    fb88 <block_bb_read+0x128>
    faeb:	83 ec 0c             	sub    $0xc,%esp
    faee:	8b 43 28             	mov    0x28(%ebx),%eax
    faf1:	50                   	push   %eax
    faf2:	e8 69 23 00 00       	call   11e60 <malloc@plt>
    faf7:	83 c4 10             	add    $0x10,%esp
    fafa:	89 c1                	mov    %eax,%ecx
    fafc:	85 c0                	test   %eax,%eax
    fafe:	0f 84 93 00 00 00    	je     fb97 <block_bb_read+0x137>
    fb04:	50                   	push   %eax
    fb05:	50                   	push   %eax
    fb06:	8b 43 28             	mov    0x28(%ebx),%eax
    fb09:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    fb0c:	50                   	push   %eax
    fb0d:	51                   	push   %ecx
    fb0e:	8b 43 10             	mov    0x10(%ebx),%eax
    fb11:	6a 01                	push   $0x1
    fb13:	6a 00                	push   $0x0
    fb15:	6a 00                	push   $0x0
    fb17:	50                   	push   %eax
    fb18:	e8 c3 23 00 00       	call   11ee0 <bd_read_blocks@plt>
    fb1d:	83 c4 20             	add    $0x20,%esp
    fb20:	89 c2                	mov    %eax,%edx
    fb22:	85 c0                	test   %eax,%eax
    fb24:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    fb27:	75 17                	jne    fb40 <block_bb_read+0xe0>
    fb29:	89 4b 14             	mov    %ecx,0x14(%ebx)
    fb2c:	89 73 18             	mov    %esi,0x18(%ebx)
    fb2f:	89 7b 1c             	mov    %edi,0x1c(%ebx)
    fb32:	8d 65 f4             	lea    -0xc(%ebp),%esp
    fb35:	89 d0                	mov    %edx,%eax
    fb37:	5b                   	pop    %ebx
    fb38:	5e                   	pop    %esi
    fb39:	5f                   	pop    %edi
    fb3a:	5d                   	pop    %ebp
    fb3b:	c3                   	ret    
    fb3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    fb40:	50                   	push   %eax
    fb41:	50                   	push   %eax
    fb42:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    fb45:	8b 4b 08             	mov    0x8(%ebx),%ecx
    fb48:	51                   	push   %ecx
    fb49:	6a 00                	push   $0x0
    fb4b:	6a 00                	push   $0x0
    fb4d:	6a 01                	push   $0x1
    fb4f:	52                   	push   %edx
    fb50:	68 98 1a 01 00       	push   $0x11a98
    fb55:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    fb58:	e8 43 22 00 00       	call   11da0 <printf@plt>
    fb5d:	83 c4 20             	add    $0x20,%esp
    fb60:	e8 3b 23 00 00       	call   11ea0 <stacktrace_print@plt>
    fb65:	83 ec 0c             	sub    $0xc,%esp
    fb68:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    fb6b:	51                   	push   %ecx
    fb6c:	e8 7f 25 00 00       	call   120f0 <free@plt>
    fb71:	8b 55 e4             	mov    -0x1c(%ebp),%edx
    fb74:	83 c4 10             	add    $0x10,%esp
    fb77:	8d 65 f4             	lea    -0xc(%ebp),%esp
    fb7a:	89 d0                	mov    %edx,%eax
    fb7c:	5b                   	pop    %ebx
    fb7d:	5e                   	pop    %esi
    fb7e:	5f                   	pop    %edi
    fb7f:	5d                   	pop    %ebp
    fb80:	c3                   	ret    
    fb81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    fb88:	8d 65 f4             	lea    -0xc(%ebp),%esp
    fb8b:	ba f7 ff ff ff       	mov    $0xfffffff7,%edx
    fb90:	89 d0                	mov    %edx,%eax
    fb92:	5b                   	pop    %ebx
    fb93:	5e                   	pop    %esi
    fb94:	5f                   	pop    %edi
    fb95:	5d                   	pop    %ebp
    fb96:	c3                   	ret    
    fb97:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
    fb9c:	e9 22 ff ff ff       	jmp    fac3 <block_bb_read+0x63>
    fba1:	eb 0d                	jmp    fbb0 <block_bb_get>
    fba3:	90                   	nop
    fba4:	90                   	nop
    fba5:	90                   	nop
    fba6:	90                   	nop
    fba7:	90                   	nop
    fba8:	90                   	nop
    fba9:	90                   	nop
    fbaa:	90                   	nop
    fbab:	90                   	nop
    fbac:	90                   	nop
    fbad:	90                   	nop
    fbae:	90                   	nop
    fbaf:	90                   	nop

0000fbb0 <block_bb_get>:
    fbb0:	55                   	push   %ebp
    fbb1:	89 e5                	mov    %esp,%ebp
    fbb3:	56                   	push   %esi
    fbb4:	53                   	push   %ebx
    fbb5:	83 ec 0c             	sub    $0xc,%esp
    fbb8:	8b 75 08             	mov    0x8(%ebp),%esi
    fbbb:	68 1c 3c 01 00       	push   $0x13c1c
    fbc0:	e8 3b 25 00 00       	call   12100 <fibril_mutex_lock@plt>
    fbc5:	8b 1d 18 3c 01 00    	mov    0x13c18,%ebx
    fbcb:	83 c4 10             	add    $0x10,%esp
    fbce:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
    fbd4:	75 0d                	jne    fbe3 <block_bb_get+0x33>
    fbd6:	eb 28                	jmp    fc00 <block_bb_get+0x50>
    fbd8:	8b 5b 04             	mov    0x4(%ebx),%ebx
    fbdb:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
    fbe1:	74 1d                	je     fc00 <block_bb_get+0x50>
    fbe3:	3b 73 08             	cmp    0x8(%ebx),%esi
    fbe6:	75 f0                	jne    fbd8 <block_bb_get+0x28>
    fbe8:	83 ec 0c             	sub    $0xc,%esp
    fbeb:	68 1c 3c 01 00       	push   $0x13c1c
    fbf0:	e8 6b 23 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    fbf5:	8b 43 14             	mov    0x14(%ebx),%eax
    fbf8:	8d 65 f8             	lea    -0x8(%ebp),%esp
    fbfb:	5b                   	pop    %ebx
    fbfc:	5e                   	pop    %esi
    fbfd:	5d                   	pop    %ebp
    fbfe:	c3                   	ret    
    fbff:	90                   	nop
    fc00:	83 ec 0c             	sub    $0xc,%esp
    fc03:	68 1c 3c 01 00       	push   $0x13c1c
    fc08:	e8 53 23 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    fc0d:	83 c4 0c             	add    $0xc,%esp
    fc10:	68 ee 00 00 00       	push   $0xee
    fc15:	68 b4 17 01 00       	push   $0x117b4
    fc1a:	68 50 1a 01 00       	push   $0x11a50
    fc1f:	e8 ec 22 00 00       	call   11f10 <assert_abort@plt>
    fc24:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    fc2a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0000fc30 <block_cache_init>:
    fc30:	55                   	push   %ebp
    fc31:	89 e5                	mov    %esp,%ebp
    fc33:	56                   	push   %esi
    fc34:	53                   	push   %ebx
    fc35:	83 ec 0c             	sub    $0xc,%esp
    fc38:	8b 75 08             	mov    0x8(%ebp),%esi
    fc3b:	68 1c 3c 01 00       	push   $0x13c1c
    fc40:	e8 bb 24 00 00       	call   12100 <fibril_mutex_lock@plt>
    fc45:	8b 1d 18 3c 01 00    	mov    0x13c18,%ebx
    fc4b:	83 c4 10             	add    $0x10,%esp
    fc4e:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
    fc54:	75 19                	jne    fc6f <block_cache_init+0x3f>
    fc56:	e9 ad 00 00 00       	jmp    fd08 <block_cache_init+0xd8>
    fc5b:	90                   	nop
    fc5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    fc60:	8b 5b 04             	mov    0x4(%ebx),%ebx
    fc63:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
    fc69:	0f 84 99 00 00 00    	je     fd08 <block_cache_init+0xd8>
    fc6f:	3b 73 08             	cmp    0x8(%ebx),%esi
    fc72:	75 ec                	jne    fc60 <block_cache_init+0x30>
    fc74:	83 ec 0c             	sub    $0xc,%esp
    fc77:	68 1c 3c 01 00       	push   $0x13c1c
    fc7c:	e8 df 22 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    fc81:	8b 43 2c             	mov    0x2c(%ebx),%eax
    fc84:	83 c4 10             	add    $0x10,%esp
    fc87:	85 c0                	test   %eax,%eax
    fc89:	0f 85 99 00 00 00    	jne    fd28 <block_cache_init+0xf8>
    fc8f:	83 ec 0c             	sub    $0xc,%esp
    fc92:	6a 48                	push   $0x48
    fc94:	e8 c7 21 00 00       	call   11e60 <malloc@plt>
    fc99:	83 c4 10             	add    $0x10,%esp
    fc9c:	89 c6                	mov    %eax,%esi
    fc9e:	85 c0                	test   %eax,%eax
    fca0:	0f 84 b4 00 00 00    	je     fd5a <block_cache_init+0x12a>
    fca6:	83 ec 0c             	sub    $0xc,%esp
    fca9:	50                   	push   %eax
    fcaa:	e8 c1 22 00 00       	call   11f70 <fibril_mutex_initialize@plt>
    fcaf:	8d 46 3c             	lea    0x3c(%esi),%eax
    fcb2:	31 d2                	xor    %edx,%edx
    fcb4:	89 46 3c             	mov    %eax,0x3c(%esi)
    fcb7:	89 46 40             	mov    %eax,0x40(%esi)
    fcba:	8b 45 0c             	mov    0xc(%ebp),%eax
    fcbd:	83 c4 10             	add    $0x10,%esp
    fcc0:	89 46 10             	mov    %eax,0x10(%esi)
    fcc3:	8b 45 10             	mov    0x10(%ebp),%eax
    fcc6:	89 46 18             	mov    %eax,0x18(%esi)
    fcc9:	8b 45 14             	mov    0x14(%ebp),%eax
    fccc:	89 46 44             	mov    %eax,0x44(%esi)
    fccf:	8b 45 0c             	mov    0xc(%ebp),%eax
    fcd2:	f7 73 28             	divl   0x28(%ebx)
    fcd5:	c7 46 1c 00 00 00 00 	movl   $0x0,0x1c(%esi)
    fcdc:	85 d2                	test   %edx,%edx
    fcde:	75 54                	jne    fd34 <block_cache_init+0x104>
    fce0:	89 46 14             	mov    %eax,0x14(%esi)
    fce3:	8d 46 20             	lea    0x20(%esi),%eax
    fce6:	68 00 3c 01 00       	push   $0x13c00
    fceb:	6a 00                	push   $0x0
    fced:	6a 00                	push   $0x0
    fcef:	50                   	push   %eax
    fcf0:	e8 db 20 00 00       	call   11dd0 <hash_table_create@plt>
    fcf5:	83 c4 10             	add    $0x10,%esp
    fcf8:	84 c0                	test   %al,%al
    fcfa:	74 4b                	je     fd47 <block_cache_init+0x117>
    fcfc:	89 73 2c             	mov    %esi,0x2c(%ebx)
    fcff:	31 c0                	xor    %eax,%eax
    fd01:	8d 65 f8             	lea    -0x8(%ebp),%esp
    fd04:	5b                   	pop    %ebx
    fd05:	5e                   	pop    %esi
    fd06:	5d                   	pop    %ebp
    fd07:	c3                   	ret    
    fd08:	83 ec 0c             	sub    $0xc,%esp
    fd0b:	68 1c 3c 01 00       	push   $0x13c1c
    fd10:	e8 4b 22 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    fd15:	83 c4 10             	add    $0x10,%esp
    fd18:	8d 65 f8             	lea    -0x8(%ebp),%esp
    fd1b:	83 c8 ff             	or     $0xffffffff,%eax
    fd1e:	5b                   	pop    %ebx
    fd1f:	5e                   	pop    %esi
    fd20:	5d                   	pop    %ebp
    fd21:	c3                   	ret    
    fd22:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    fd28:	8d 65 f8             	lea    -0x8(%ebp),%esp
    fd2b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
    fd30:	5b                   	pop    %ebx
    fd31:	5e                   	pop    %esi
    fd32:	5d                   	pop    %ebp
    fd33:	c3                   	ret    
    fd34:	83 ec 0c             	sub    $0xc,%esp
    fd37:	56                   	push   %esi
    fd38:	e8 b3 23 00 00       	call   120f0 <free@plt>
    fd3d:	83 c4 10             	add    $0x10,%esp
    fd40:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    fd45:	eb ba                	jmp    fd01 <block_cache_init+0xd1>
    fd47:	83 ec 0c             	sub    $0xc,%esp
    fd4a:	56                   	push   %esi
    fd4b:	e8 a0 23 00 00       	call   120f0 <free@plt>
    fd50:	83 c4 10             	add    $0x10,%esp
    fd53:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    fd58:	eb a7                	jmp    fd01 <block_cache_init+0xd1>
    fd5a:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    fd5f:	eb a0                	jmp    fd01 <block_cache_init+0xd1>
    fd61:	eb 0d                	jmp    fd70 <block_cache_fini>
    fd63:	90                   	nop
    fd64:	90                   	nop
    fd65:	90                   	nop
    fd66:	90                   	nop
    fd67:	90                   	nop
    fd68:	90                   	nop
    fd69:	90                   	nop
    fd6a:	90                   	nop
    fd6b:	90                   	nop
    fd6c:	90                   	nop
    fd6d:	90                   	nop
    fd6e:	90                   	nop
    fd6f:	90                   	nop

0000fd70 <block_cache_fini>:
    fd70:	55                   	push   %ebp
    fd71:	89 e5                	mov    %esp,%ebp
    fd73:	57                   	push   %edi
    fd74:	56                   	push   %esi
    fd75:	53                   	push   %ebx
    fd76:	83 ec 38             	sub    $0x38,%esp
    fd79:	8b 5d 08             	mov    0x8(%ebp),%ebx
    fd7c:	68 1c 3c 01 00       	push   $0x13c1c
    fd81:	e8 7a 23 00 00       	call   12100 <fibril_mutex_lock@plt>
    fd86:	8b 3d 18 3c 01 00    	mov    0x13c18,%edi
    fd8c:	83 c4 10             	add    $0x10,%esp
    fd8f:	81 ff 14 3c 01 00    	cmp    $0x13c14,%edi
    fd95:	75 18                	jne    fdaf <block_cache_fini+0x3f>
    fd97:	e9 2c 01 00 00       	jmp    fec8 <block_cache_fini+0x158>
    fd9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    fda0:	8b 7f 04             	mov    0x4(%edi),%edi
    fda3:	81 ff 14 3c 01 00    	cmp    $0x13c14,%edi
    fda9:	0f 84 19 01 00 00    	je     fec8 <block_cache_fini+0x158>
    fdaf:	3b 5f 08             	cmp    0x8(%edi),%ebx
    fdb2:	75 ec                	jne    fda0 <block_cache_fini+0x30>
    fdb4:	83 ec 0c             	sub    $0xc,%esp
    fdb7:	68 1c 3c 01 00       	push   $0x13c1c
    fdbc:	e8 9f 21 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    fdc1:	8b 47 2c             	mov    0x2c(%edi),%eax
    fdc4:	83 c4 10             	add    $0x10,%esp
    fdc7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    fdca:	85 c0                	test   %eax,%eax
    fdcc:	0f 84 42 01 00 00    	je     ff14 <block_cache_fini+0x1a4>
    fdd2:	8b 58 40             	mov    0x40(%eax),%ebx
    fdd5:	8d 70 3c             	lea    0x3c(%eax),%esi
    fdd8:	83 c0 20             	add    $0x20,%eax
    fddb:	89 75 dc             	mov    %esi,-0x24(%ebp)
    fdde:	89 45 d8             	mov    %eax,-0x28(%ebp)
    fde1:	39 de                	cmp    %ebx,%esi
    fde3:	0f 84 2f 01 00 00    	je     ff18 <block_cache_fini+0x1a8>
    fde9:	89 da                	mov    %ebx,%edx
    fdeb:	89 7d d0             	mov    %edi,-0x30(%ebp)
    fdee:	eb 35                	jmp    fe25 <block_cache_fini+0xb5>
    fdf0:	8b 55 d8             	mov    -0x28(%ebp),%edx
    fdf3:	8d 43 50             	lea    0x50(%ebx),%eax
    fdf6:	89 d6                	mov    %edx,%esi
    fdf8:	51                   	push   %ecx
    fdf9:	51                   	push   %ecx
    fdfa:	50                   	push   %eax
    fdfb:	52                   	push   %edx
    fdfc:	e8 df 21 00 00       	call   11fe0 <hash_table_remove_item@plt>
    fe01:	8b 43 58             	mov    0x58(%ebx),%eax
    fe04:	5f                   	pop    %edi
    fe05:	50                   	push   %eax
    fe06:	e8 e5 22 00 00       	call   120f0 <free@plt>
    fe0b:	89 1c 24             	mov    %ebx,(%esp)
    fe0e:	e8 dd 22 00 00       	call   120f0 <free@plt>
    fe13:	8b 45 e0             	mov    -0x20(%ebp),%eax
    fe16:	83 c4 10             	add    $0x10,%esp
    fe19:	8b 50 40             	mov    0x40(%eax),%edx
    fe1c:	3b 55 dc             	cmp    -0x24(%ebp),%edx
    fe1f:	0f 84 c3 00 00 00    	je     fee8 <block_cache_fini+0x178>
    fe25:	8d 5a b8             	lea    -0x48(%edx),%ebx
    fe28:	8b 4b 48             	mov    0x48(%ebx),%ecx
    fe2b:	85 c9                	test   %ecx,%ecx
    fe2d:	74 0f                	je     fe3e <block_cache_fini+0xce>
    fe2f:	8b 43 4c             	mov    0x4c(%ebx),%eax
    fe32:	85 c0                	test   %eax,%eax
    fe34:	74 08                	je     fe3e <block_cache_fini+0xce>
    fe36:	89 08                	mov    %ecx,(%eax)
    fe38:	8b 4b 48             	mov    0x48(%ebx),%ecx
    fe3b:	89 41 04             	mov    %eax,0x4(%ecx)
    fe3e:	c7 43 48 00 00 00 00 	movl   $0x0,0x48(%ebx)
    fe45:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
    fe4c:	80 7b 14 00          	cmpb   $0x0,0x14(%ebx)
    fe50:	74 9e                	je     fdf0 <block_cache_fini+0x80>
    fe52:	8b 45 e0             	mov    -0x20(%ebp),%eax
    fe55:	8b 73 38             	mov    0x38(%ebx),%esi
    fe58:	8b 7b 3c             	mov    0x3c(%ebx),%edi
    fe5b:	8b 48 14             	mov    0x14(%eax),%ecx
    fe5e:	50                   	push   %eax
    fe5f:	50                   	push   %eax
    fe60:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    fe63:	8b 53 40             	mov    0x40(%ebx),%edx
    fe66:	8b 43 58             	mov    0x58(%ebx),%eax
    fe69:	52                   	push   %edx
    fe6a:	50                   	push   %eax
    fe6b:	8b 45 d0             	mov    -0x30(%ebp),%eax
    fe6e:	51                   	push   %ecx
    fe6f:	57                   	push   %edi
    fe70:	56                   	push   %esi
    fe71:	8b 40 10             	mov    0x10(%eax),%eax
    fe74:	50                   	push   %eax
    fe75:	e8 96 1f 00 00       	call   11e10 <bd_write_blocks@plt>
    fe7a:	83 c4 20             	add    $0x20,%esp
    fe7d:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
    fe80:	85 c0                	test   %eax,%eax
    fe82:	0f 84 68 ff ff ff    	je     fdf0 <block_cache_fini+0x80>
    fe88:	89 7d e4             	mov    %edi,-0x1c(%ebp)
    fe8b:	8b 7d d0             	mov    -0x30(%ebp),%edi
    fe8e:	89 75 e0             	mov    %esi,-0x20(%ebp)
    fe91:	89 ce                	mov    %ecx,%esi
    fe93:	89 c1                	mov    %eax,%ecx
    fe95:	50                   	push   %eax
    fe96:	50                   	push   %eax
    fe97:	8b 47 08             	mov    0x8(%edi),%eax
    fe9a:	50                   	push   %eax
    fe9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    fe9e:	50                   	push   %eax
    fe9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
    fea2:	50                   	push   %eax
    fea3:	56                   	push   %esi
    fea4:	51                   	push   %ecx
    fea5:	68 e4 1a 01 00       	push   $0x11ae4
    feaa:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    fead:	e8 ee 1e 00 00       	call   11da0 <printf@plt>
    feb2:	83 c4 20             	add    $0x20,%esp
    feb5:	e8 e6 1f 00 00       	call   11ea0 <stacktrace_print@plt>
    feba:	8b 4d e0             	mov    -0x20(%ebp),%ecx
    febd:	8d 65 f4             	lea    -0xc(%ebp),%esp
    fec0:	89 c8                	mov    %ecx,%eax
    fec2:	5b                   	pop    %ebx
    fec3:	5e                   	pop    %esi
    fec4:	5f                   	pop    %edi
    fec5:	5d                   	pop    %ebp
    fec6:	c3                   	ret    
    fec7:	90                   	nop
    fec8:	83 ec 0c             	sub    $0xc,%esp
    fecb:	68 1c 3c 01 00       	push   $0x13c1c
    fed0:	e8 8b 20 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    fed5:	83 c4 10             	add    $0x10,%esp
    fed8:	8d 65 f4             	lea    -0xc(%ebp),%esp
    fedb:	83 c9 ff             	or     $0xffffffff,%ecx
    fede:	5b                   	pop    %ebx
    fedf:	89 c8                	mov    %ecx,%eax
    fee1:	5e                   	pop    %esi
    fee2:	5f                   	pop    %edi
    fee3:	5d                   	pop    %ebp
    fee4:	c3                   	ret    
    fee5:	8d 76 00             	lea    0x0(%esi),%esi
    fee8:	8b 7d d0             	mov    -0x30(%ebp),%edi
    feeb:	83 ec 0c             	sub    $0xc,%esp
    feee:	56                   	push   %esi
    feef:	e8 dc 21 00 00       	call   120d0 <hash_table_destroy@plt>
    fef4:	c7 47 2c 00 00 00 00 	movl   $0x0,0x2c(%edi)
    fefb:	8b 55 e0             	mov    -0x20(%ebp),%edx
    fefe:	58                   	pop    %eax
    feff:	52                   	push   %edx
    ff00:	e8 eb 21 00 00       	call   120f0 <free@plt>
    ff05:	83 c4 10             	add    $0x10,%esp
    ff08:	8d 65 f4             	lea    -0xc(%ebp),%esp
    ff0b:	31 c9                	xor    %ecx,%ecx
    ff0d:	89 c8                	mov    %ecx,%eax
    ff0f:	5b                   	pop    %ebx
    ff10:	5e                   	pop    %esi
    ff11:	5f                   	pop    %edi
    ff12:	5d                   	pop    %ebp
    ff13:	c3                   	ret    
    ff14:	31 c9                	xor    %ecx,%ecx
    ff16:	eb a5                	jmp    febd <block_cache_fini+0x14d>
    ff18:	8b 45 e0             	mov    -0x20(%ebp),%eax
    ff1b:	8d 70 20             	lea    0x20(%eax),%esi
    ff1e:	eb cb                	jmp    feeb <block_cache_fini+0x17b>

0000ff20 <block_fini>:
    ff20:	55                   	push   %ebp
    ff21:	89 e5                	mov    %esp,%ebp
    ff23:	56                   	push   %esi
    ff24:	53                   	push   %ebx
    ff25:	83 ec 0c             	sub    $0xc,%esp
    ff28:	8b 75 08             	mov    0x8(%ebp),%esi
    ff2b:	68 1c 3c 01 00       	push   $0x13c1c
    ff30:	e8 cb 21 00 00       	call   12100 <fibril_mutex_lock@plt>
    ff35:	8b 1d 18 3c 01 00    	mov    0x13c18,%ebx
    ff3b:	83 c4 10             	add    $0x10,%esp
    ff3e:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
    ff44:	75 19                	jne    ff5f <block_fini+0x3f>
    ff46:	e9 c5 00 00 00       	jmp    10010 <block_fini+0xf0>
    ff4b:	90                   	nop
    ff4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    ff50:	8b 5b 04             	mov    0x4(%ebx),%ebx
    ff53:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
    ff59:	0f 84 b1 00 00 00    	je     10010 <block_fini+0xf0>
    ff5f:	3b 73 08             	cmp    0x8(%ebx),%esi
    ff62:	75 ec                	jne    ff50 <block_fini+0x30>
    ff64:	83 ec 0c             	sub    $0xc,%esp
    ff67:	68 1c 3c 01 00       	push   $0x13c1c
    ff6c:	e8 ef 1f 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    ff71:	8b 43 2c             	mov    0x2c(%ebx),%eax
    ff74:	83 c4 10             	add    $0x10,%esp
    ff77:	85 c0                	test   %eax,%eax
    ff79:	74 0c                	je     ff87 <block_fini+0x67>
    ff7b:	83 ec 0c             	sub    $0xc,%esp
    ff7e:	56                   	push   %esi
    ff7f:	e8 ec fd ff ff       	call   fd70 <block_cache_fini>
    ff84:	83 c4 10             	add    $0x10,%esp
    ff87:	6a 00                	push   $0x0
    ff89:	6a 00                	push   $0x0
    ff8b:	6a 00                	push   $0x0
    ff8d:	8b 73 10             	mov    0x10(%ebx),%esi
    ff90:	56                   	push   %esi
    ff91:	e8 ba 20 00 00       	call   12050 <bd_sync_cache@plt>
    ff96:	c7 04 24 1c 3c 01 00 	movl   $0x13c1c,(%esp)
    ff9d:	e8 5e 21 00 00       	call   12100 <fibril_mutex_lock@plt>
    ffa2:	8b 13                	mov    (%ebx),%edx
    ffa4:	83 c4 10             	add    $0x10,%esp
    ffa7:	85 d2                	test   %edx,%edx
    ffa9:	74 0e                	je     ffb9 <block_fini+0x99>
    ffab:	8b 43 04             	mov    0x4(%ebx),%eax
    ffae:	85 c0                	test   %eax,%eax
    ffb0:	74 07                	je     ffb9 <block_fini+0x99>
    ffb2:	89 10                	mov    %edx,(%eax)
    ffb4:	8b 13                	mov    (%ebx),%edx
    ffb6:	89 42 04             	mov    %eax,0x4(%edx)
    ffb9:	83 ec 0c             	sub    $0xc,%esp
    ffbc:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
    ffc2:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
    ffc9:	68 1c 3c 01 00       	push   $0x13c1c
    ffce:	e8 8d 1f 00 00       	call   11f60 <fibril_mutex_unlock@plt>
    ffd3:	8b 43 14             	mov    0x14(%ebx),%eax
    ffd6:	83 c4 10             	add    $0x10,%esp
    ffd9:	85 c0                	test   %eax,%eax
    ffdb:	74 0c                	je     ffe9 <block_fini+0xc9>
    ffdd:	83 ec 0c             	sub    $0xc,%esp
    ffe0:	50                   	push   %eax
    ffe1:	e8 0a 21 00 00       	call   120f0 <free@plt>
    ffe6:	83 c4 10             	add    $0x10,%esp
    ffe9:	83 ec 0c             	sub    $0xc,%esp
    ffec:	8b 43 10             	mov    0x10(%ebx),%eax
    ffef:	50                   	push   %eax
    fff0:	e8 4b 1e 00 00       	call   11e40 <bd_close@plt>
    fff5:	8b 4b 0c             	mov    0xc(%ebx),%ecx
    fff8:	5a                   	pop    %edx
    fff9:	51                   	push   %ecx
    fffa:	e8 b1 1d 00 00       	call   11db0 <async_hangup@plt>
    ffff:	89 5d 08             	mov    %ebx,0x8(%ebp)
   10002:	83 c4 10             	add    $0x10,%esp
   10005:	8d 65 f8             	lea    -0x8(%ebp),%esp
   10008:	5b                   	pop    %ebx
   10009:	5e                   	pop    %esi
   1000a:	5d                   	pop    %ebp
   1000b:	e9 e0 20 00 00       	jmp    120f0 <free@plt>
   10010:	83 ec 0c             	sub    $0xc,%esp
   10013:	68 1c 3c 01 00       	push   $0x13c1c
   10018:	e8 43 1f 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   1001d:	83 c4 0c             	add    $0xc,%esp
   10020:	68 bf 00 00 00       	push   $0xbf
   10025:	68 b4 17 01 00       	push   $0x117b4
   1002a:	68 50 1a 01 00       	push   $0x11a50
   1002f:	e8 dc 1e 00 00       	call   11f10 <assert_abort@plt>
   10034:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   1003a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

00010040 <block_put>:
   10040:	55                   	push   %ebp
   10041:	89 e5                	mov    %esp,%ebp
   10043:	57                   	push   %edi
   10044:	56                   	push   %esi
   10045:	53                   	push   %ebx
   10046:	83 ec 28             	sub    $0x28,%esp
   10049:	8b 7d 08             	mov    0x8(%ebp),%edi
   1004c:	8b 5f 2c             	mov    0x2c(%edi),%ebx
   1004f:	68 1c 3c 01 00       	push   $0x13c1c
   10054:	e8 a7 20 00 00       	call   12100 <fibril_mutex_lock@plt>
   10059:	8b 35 18 3c 01 00    	mov    0x13c18,%esi
   1005f:	83 c4 10             	add    $0x10,%esp
   10062:	81 fe 14 3c 01 00    	cmp    $0x13c14,%esi
   10068:	75 15                	jne    1007f <block_put+0x3f>
   1006a:	e9 c1 01 00 00       	jmp    10230 <block_put+0x1f0>
   1006f:	90                   	nop
   10070:	8b 76 04             	mov    0x4(%esi),%esi
   10073:	81 fe 14 3c 01 00    	cmp    $0x13c14,%esi
   10079:	0f 84 b1 01 00 00    	je     10230 <block_put+0x1f0>
   1007f:	3b 5e 08             	cmp    0x8(%esi),%ebx
   10082:	75 ec                	jne    10070 <block_put+0x30>
   10084:	83 ec 0c             	sub    $0xc,%esp
   10087:	68 1c 3c 01 00       	push   $0x13c1c
   1008c:	e8 cf 1e 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10091:	8b 5e 2c             	mov    0x2c(%esi),%ebx
   10094:	83 c4 10             	add    $0x10,%esp
   10097:	85 db                	test   %ebx,%ebx
   10099:	0f 84 6b 02 00 00    	je     1030a <block_put+0x2ca>
   1009f:	8b 47 10             	mov    0x10(%edi),%eax
   100a2:	85 c0                	test   %eax,%eax
   100a4:	0f 84 75 02 00 00    	je     1031f <block_put+0x2df>
   100aa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   100b1:	89 75 e0             	mov    %esi,-0x20(%ebp)
   100b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   100b8:	83 ec 0c             	sub    $0xc,%esp
   100bb:	53                   	push   %ebx
   100bc:	e8 3f 20 00 00       	call   12100 <fibril_mutex_lock@plt>
   100c1:	8b 43 44             	mov    0x44(%ebx),%eax
   100c4:	8b 73 1c             	mov    0x1c(%ebx),%esi
   100c7:	89 45 d8             	mov    %eax,-0x28(%ebp)
   100ca:	89 1c 24             	mov    %ebx,(%esp)
   100cd:	e8 8e 1e 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   100d2:	89 3c 24             	mov    %edi,(%esp)
   100d5:	e8 26 20 00 00       	call   12100 <fibril_mutex_lock@plt>
   100da:	83 c4 10             	add    $0x10,%esp
   100dd:	80 7f 15 00          	cmpb   $0x0,0x15(%edi)
   100e1:	0f 85 39 01 00 00    	jne    10220 <block_put+0x1e0>
   100e7:	80 7f 14 00          	cmpb   $0x0,0x14(%edi)
   100eb:	74 0a                	je     100f7 <block_put+0xb7>
   100ed:	83 7f 10 01          	cmpl   $0x1,0x10(%edi)
   100f1:	0f 84 b9 00 00 00    	je     101b0 <block_put+0x170>
   100f7:	83 ec 0c             	sub    $0xc,%esp
   100fa:	57                   	push   %edi
   100fb:	e8 60 1e 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10100:	89 1c 24             	mov    %ebx,(%esp)
   10103:	e8 f8 1f 00 00       	call   12100 <fibril_mutex_lock@plt>
   10108:	89 3c 24             	mov    %edi,(%esp)
   1010b:	e8 f0 1f 00 00       	call   12100 <fibril_mutex_lock@plt>
   10110:	8b 47 10             	mov    0x10(%edi),%eax
   10113:	83 c4 10             	add    $0x10,%esp
   10116:	48                   	dec    %eax
   10117:	89 47 10             	mov    %eax,0x10(%edi)
   1011a:	85 c0                	test   %eax,%eax
   1011c:	0f 85 51 01 00 00    	jne    10273 <block_put+0x233>
   10122:	83 7b 1c 14          	cmpl   $0x14,0x1c(%ebx)
   10126:	77 48                	ja     10170 <block_put+0x130>
   10128:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1012b:	85 c0                	test   %eax,%eax
   1012d:	75 41                	jne    10170 <block_put+0x130>
   1012f:	83 7b 44 01          	cmpl   $0x1,0x44(%ebx)
   10133:	0f 84 1b 01 00 00    	je     10254 <block_put+0x214>
   10139:	80 7f 14 00          	cmpb   $0x0,0x14(%edi)
   1013d:	0f 84 11 01 00 00    	je     10254 <block_put+0x214>
   10143:	83 ec 0c             	sub    $0xc,%esp
   10146:	c7 47 10 01 00 00 00 	movl   $0x1,0x10(%edi)
   1014d:	57                   	push   %edi
   1014e:	e8 0d 1e 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10153:	89 1c 24             	mov    %ebx,(%esp)
   10156:	e8 05 1e 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   1015b:	83 c4 10             	add    $0x10,%esp
   1015e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   10165:	e9 4e ff ff ff       	jmp    100b8 <block_put+0x78>
   1016a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   10170:	80 7f 14 00          	cmpb   $0x0,0x14(%edi)
   10174:	0f 84 4a 01 00 00    	je     102c4 <block_put+0x284>
   1017a:	8b 47 44             	mov    0x44(%edi),%eax
   1017d:	c7 47 10 01 00 00 00 	movl   $0x1,0x10(%edi)
   10184:	83 f8 09             	cmp    $0x9,%eax
   10187:	0f 8f 1b 01 00 00    	jg     102a8 <block_put+0x268>
   1018d:	83 ec 0c             	sub    $0xc,%esp
   10190:	40                   	inc    %eax
   10191:	89 47 44             	mov    %eax,0x44(%edi)
   10194:	57                   	push   %edi
   10195:	e8 c6 1d 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   1019a:	89 1c 24             	mov    %ebx,(%esp)
   1019d:	e8 be 1d 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   101a2:	83 c4 10             	add    $0x10,%esp
   101a5:	e9 0e ff ff ff       	jmp    100b8 <block_put+0x78>
   101aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   101b0:	83 fe 14             	cmp    $0x14,%esi
   101b3:	77 0a                	ja     101bf <block_put+0x17f>
   101b5:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
   101b9:	0f 84 38 ff ff ff    	je     100f7 <block_put+0xb7>
   101bf:	8b 47 38             	mov    0x38(%edi),%eax
   101c2:	8b 57 3c             	mov    0x3c(%edi),%edx
   101c5:	8b 73 14             	mov    0x14(%ebx),%esi
   101c8:	51                   	push   %ecx
   101c9:	51                   	push   %ecx
   101ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
   101cd:	8b 4f 40             	mov    0x40(%edi),%ecx
   101d0:	89 55 dc             	mov    %edx,-0x24(%ebp)
   101d3:	51                   	push   %ecx
   101d4:	8b 4f 58             	mov    0x58(%edi),%ecx
   101d7:	51                   	push   %ecx
   101d8:	56                   	push   %esi
   101d9:	52                   	push   %edx
   101da:	50                   	push   %eax
   101db:	8b 45 e0             	mov    -0x20(%ebp),%eax
   101de:	8b 40 10             	mov    0x10(%eax),%eax
   101e1:	50                   	push   %eax
   101e2:	e8 29 1c 00 00       	call   11e10 <bd_write_blocks@plt>
   101e7:	83 c4 20             	add    $0x20,%esp
   101ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   101ed:	85 c0                	test   %eax,%eax
   101ef:	0f 84 a3 00 00 00    	je     10298 <block_put+0x258>
   101f5:	50                   	push   %eax
   101f6:	50                   	push   %eax
   101f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
   101fa:	8b 55 dc             	mov    -0x24(%ebp),%edx
   101fd:	8b 4d d8             	mov    -0x28(%ebp),%ecx
   10200:	8b 40 08             	mov    0x8(%eax),%eax
   10203:	50                   	push   %eax
   10204:	52                   	push   %edx
   10205:	51                   	push   %ecx
   10206:	56                   	push   %esi
   10207:	8b 75 e4             	mov    -0x1c(%ebp),%esi
   1020a:	56                   	push   %esi
   1020b:	68 e4 1a 01 00       	push   $0x11ae4
   10210:	e8 8b 1b 00 00       	call   11da0 <printf@plt>
   10215:	83 c4 20             	add    $0x20,%esp
   10218:	e8 83 1c 00 00       	call   11ea0 <stacktrace_print@plt>
   1021d:	8d 76 00             	lea    0x0(%esi),%esi
   10220:	c6 47 14 00          	movb   $0x0,0x14(%edi)
   10224:	e9 ce fe ff ff       	jmp    100f7 <block_put+0xb7>
   10229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   10230:	83 ec 0c             	sub    $0xc,%esp
   10233:	68 1c 3c 01 00       	push   $0x13c1c
   10238:	e8 23 1d 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   1023d:	83 c4 0c             	add    $0xc,%esp
   10240:	68 4c 02 00 00       	push   $0x24c
   10245:	68 b4 17 01 00       	push   $0x117b4
   1024a:	68 50 1a 01 00       	push   $0x11a50
   1024f:	e8 bc 1c 00 00       	call   11f10 <assert_abort@plt>
   10254:	8d 4b 3c             	lea    0x3c(%ebx),%ecx
   10257:	8d 47 48             	lea    0x48(%edi),%eax
   1025a:	89 4f 4c             	mov    %ecx,0x4c(%edi)
   1025d:	8b 4b 3c             	mov    0x3c(%ebx),%ecx
   10260:	89 4f 48             	mov    %ecx,0x48(%edi)
   10263:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   1026a:	8b 4b 3c             	mov    0x3c(%ebx),%ecx
   1026d:	89 41 04             	mov    %eax,0x4(%ecx)
   10270:	89 43 3c             	mov    %eax,0x3c(%ebx)
   10273:	83 ec 0c             	sub    $0xc,%esp
   10276:	57                   	push   %edi
   10277:	e8 e4 1c 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   1027c:	89 1c 24             	mov    %ebx,(%esp)
   1027f:	e8 dc 1c 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10284:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10287:	83 c4 10             	add    $0x10,%esp
   1028a:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1028d:	5b                   	pop    %ebx
   1028e:	5e                   	pop    %esi
   1028f:	5f                   	pop    %edi
   10290:	5d                   	pop    %ebp
   10291:	c3                   	ret    
   10292:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   10298:	c7 47 44 00 00 00 00 	movl   $0x0,0x44(%edi)
   1029f:	c6 47 14 00          	movb   $0x0,0x14(%edi)
   102a3:	e9 4f fe ff ff       	jmp    100f7 <block_put+0xb7>
   102a8:	8b 75 e0             	mov    -0x20(%ebp),%esi
   102ab:	8b 46 08             	mov    0x8(%esi),%eax
   102ae:	50                   	push   %eax
   102af:	8b 47 34             	mov    0x34(%edi),%eax
   102b2:	50                   	push   %eax
   102b3:	8b 47 30             	mov    0x30(%edi),%eax
   102b6:	50                   	push   %eax
   102b7:	68 2c 1b 01 00       	push   $0x11b2c
   102bc:	e8 df 1a 00 00       	call   11da0 <printf@plt>
   102c1:	83 c4 10             	add    $0x10,%esp
   102c4:	50                   	push   %eax
   102c5:	50                   	push   %eax
   102c6:	8d 47 50             	lea    0x50(%edi),%eax
   102c9:	50                   	push   %eax
   102ca:	8d 43 20             	lea    0x20(%ebx),%eax
   102cd:	50                   	push   %eax
   102ce:	e8 0d 1d 00 00       	call   11fe0 <hash_table_remove_item@plt>
   102d3:	89 3c 24             	mov    %edi,(%esp)
   102d6:	e8 85 1c 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   102db:	8b 4f 58             	mov    0x58(%edi),%ecx
   102de:	5a                   	pop    %edx
   102df:	51                   	push   %ecx
   102e0:	e8 0b 1e 00 00       	call   120f0 <free@plt>
   102e5:	89 3c 24             	mov    %edi,(%esp)
   102e8:	e8 03 1e 00 00       	call   120f0 <free@plt>
   102ed:	8b 73 1c             	mov    0x1c(%ebx),%esi
   102f0:	4e                   	dec    %esi
   102f1:	89 73 1c             	mov    %esi,0x1c(%ebx)
   102f4:	89 1c 24             	mov    %ebx,(%esp)
   102f7:	e8 64 1c 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   102fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   102ff:	83 c4 10             	add    $0x10,%esp
   10302:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10305:	5b                   	pop    %ebx
   10306:	5e                   	pop    %esi
   10307:	5f                   	pop    %edi
   10308:	5d                   	pop    %ebp
   10309:	c3                   	ret    
   1030a:	50                   	push   %eax
   1030b:	68 4d 02 00 00       	push   $0x24d
   10310:	68 b4 17 01 00       	push   $0x117b4
   10315:	68 57 1a 01 00       	push   $0x11a57
   1031a:	e8 f1 1b 00 00       	call   11f10 <assert_abort@plt>
   1031f:	50                   	push   %eax
   10320:	68 4e 02 00 00       	push   $0x24e
   10325:	68 b4 17 01 00       	push   $0x117b4
   1032a:	68 65 1a 01 00       	push   $0x11a65
   1032f:	e8 dc 1b 00 00       	call   11f10 <assert_abort@plt>
   10334:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   1033a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

00010340 <block_get>:
   10340:	55                   	push   %ebp
   10341:	89 e5                	mov    %esp,%ebp
   10343:	57                   	push   %edi
   10344:	56                   	push   %esi
   10345:	53                   	push   %ebx
   10346:	83 ec 48             	sub    $0x48,%esp
   10349:	8b 45 10             	mov    0x10(%ebp),%eax
   1034c:	89 45 e0             	mov    %eax,-0x20(%ebp)
   1034f:	8b 45 14             	mov    0x14(%ebp),%eax
   10352:	68 1c 3c 01 00       	push   $0x13c1c
   10357:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1035a:	e8 a1 1d 00 00       	call   12100 <fibril_mutex_lock@plt>
   1035f:	8b 35 18 3c 01 00    	mov    0x13c18,%esi
   10365:	83 c4 10             	add    $0x10,%esp
   10368:	81 fe 14 3c 01 00    	cmp    $0x13c14,%esi
   1036e:	74 20                	je     10390 <block_get+0x50>
   10370:	8b 46 08             	mov    0x8(%esi),%eax
   10373:	39 45 0c             	cmp    %eax,0xc(%ebp)
   10376:	74 40                	je     103b8 <block_get+0x78>
   10378:	8b 45 0c             	mov    0xc(%ebp),%eax
   1037b:	eb 08                	jmp    10385 <block_get+0x45>
   1037d:	8d 76 00             	lea    0x0(%esi),%esi
   10380:	3b 46 08             	cmp    0x8(%esi),%eax
   10383:	74 33                	je     103b8 <block_get+0x78>
   10385:	8b 76 04             	mov    0x4(%esi),%esi
   10388:	81 fe 14 3c 01 00    	cmp    $0x13c14,%esi
   1038e:	75 f0                	jne    10380 <block_get+0x40>
   10390:	83 ec 0c             	sub    $0xc,%esp
   10393:	68 1c 3c 01 00       	push   $0x13c1c
   10398:	e8 c3 1b 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   1039d:	83 c4 0c             	add    $0xc,%esp
   103a0:	68 8a 01 00 00       	push   $0x18a
   103a5:	68 b4 17 01 00       	push   $0x117b4
   103aa:	68 50 1a 01 00       	push   $0x11a50
   103af:	e8 5c 1b 00 00       	call   11f10 <assert_abort@plt>
   103b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   103b8:	83 ec 0c             	sub    $0xc,%esp
   103bb:	68 1c 3c 01 00       	push   $0x13c1c
   103c0:	e8 9b 1b 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   103c5:	8b 5e 2c             	mov    0x2c(%esi),%ebx
   103c8:	83 c4 10             	add    $0x10,%esp
   103cb:	85 db                	test   %ebx,%ebx
   103cd:	0f 84 a5 04 00 00    	je     10878 <block_get+0x538>
   103d3:	8b 43 14             	mov    0x14(%ebx),%eax
   103d6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   103d9:	89 45 d8             	mov    %eax,-0x28(%ebp)
   103dc:	31 d2                	xor    %edx,%edx
   103de:	0f af c8             	imul   %eax,%ecx
   103e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   103e4:	89 55 dc             	mov    %edx,-0x24(%ebp)
   103e7:	f7 65 e0             	mull   -0x20(%ebp)
   103ea:	01 ca                	add    %ecx,%edx
   103ec:	03 45 d8             	add    -0x28(%ebp),%eax
   103ef:	13 55 dc             	adc    -0x24(%ebp),%edx
   103f2:	3b 56 24             	cmp    0x24(%esi),%edx
   103f5:	76 19                	jbe    10410 <block_get+0xd0>
   103f7:	c7 45 d8 f6 fe ff ff 	movl   $0xfffffef6,-0x28(%ebp)
   103fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
   10401:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10404:	5b                   	pop    %ebx
   10405:	5e                   	pop    %esi
   10406:	5f                   	pop    %edi
   10407:	5d                   	pop    %ebp
   10408:	c3                   	ret    
   10409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   10410:	0f 83 f2 01 00 00    	jae    10608 <block_get+0x2c8>
   10416:	8d 43 20             	lea    0x20(%ebx),%eax
   10419:	89 75 c8             	mov    %esi,-0x38(%ebp)
   1041c:	89 45 d0             	mov    %eax,-0x30(%ebp)
   1041f:	8d 43 3c             	lea    0x3c(%ebx),%eax
   10422:	89 45 d8             	mov    %eax,-0x28(%ebp)
   10425:	8d 76 00             	lea    0x0(%esi),%esi
   10428:	83 ec 0c             	sub    $0xc,%esp
   1042b:	53                   	push   %ebx
   1042c:	e8 cf 1c 00 00       	call   12100 <fibril_mutex_lock@plt>
   10431:	58                   	pop    %eax
   10432:	8b 4d d0             	mov    -0x30(%ebp),%ecx
   10435:	8d 45 e0             	lea    -0x20(%ebp),%eax
   10438:	5a                   	pop    %edx
   10439:	50                   	push   %eax
   1043a:	51                   	push   %ecx
   1043b:	e8 30 1c 00 00       	call   12070 <hash_table_find@plt>
   10440:	83 c4 10             	add    $0x10,%esp
   10443:	85 c0                	test   %eax,%eax
   10445:	0f 85 cd 01 00 00    	jne    10618 <block_get+0x2d8>
   1044b:	83 7b 1c 09          	cmpl   $0x9,0x1c(%ebx)
   1044f:	0f 86 d3 00 00 00    	jbe    10528 <block_get+0x1e8>
   10455:	8b 73 40             	mov    0x40(%ebx),%esi
   10458:	3b 75 d8             	cmp    -0x28(%ebp),%esi
   1045b:	0f 84 c7 00 00 00    	je     10528 <block_get+0x1e8>
   10461:	83 ec 0c             	sub    $0xc,%esp
   10464:	8d 7e b8             	lea    -0x48(%esi),%edi
   10467:	57                   	push   %edi
   10468:	e8 93 1c 00 00       	call   12100 <fibril_mutex_lock@plt>
   1046d:	83 c4 10             	add    $0x10,%esp
   10470:	80 7f 14 00          	cmpb   $0x0,0x14(%edi)
   10474:	0f 84 1e 02 00 00    	je     10698 <block_get+0x358>
   1047a:	8b 4f 48             	mov    0x48(%edi),%ecx
   1047d:	85 c9                	test   %ecx,%ecx
   1047f:	74 0f                	je     10490 <block_get+0x150>
   10481:	8b 47 4c             	mov    0x4c(%edi),%eax
   10484:	85 c0                	test   %eax,%eax
   10486:	74 08                	je     10490 <block_get+0x150>
   10488:	89 08                	mov    %ecx,(%eax)
   1048a:	8b 4f 48             	mov    0x48(%edi),%ecx
   1048d:	89 41 04             	mov    %eax,0x4(%ecx)
   10490:	c7 47 48 00 00 00 00 	movl   $0x0,0x48(%edi)
   10497:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1049a:	89 47 4c             	mov    %eax,0x4c(%edi)
   1049d:	8b 43 3c             	mov    0x3c(%ebx),%eax
   104a0:	89 47 48             	mov    %eax,0x48(%edi)
   104a3:	83 ec 0c             	sub    $0xc,%esp
   104a6:	8b 43 3c             	mov    0x3c(%ebx),%eax
   104a9:	89 70 04             	mov    %esi,0x4(%eax)
   104ac:	89 73 3c             	mov    %esi,0x3c(%ebx)
   104af:	53                   	push   %ebx
   104b0:	e8 ab 1a 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   104b5:	83 c4 08             	add    $0x8,%esp
   104b8:	8b 77 40             	mov    0x40(%edi),%esi
   104bb:	8b 4b 14             	mov    0x14(%ebx),%ecx
   104be:	8b 47 38             	mov    0x38(%edi),%eax
   104c1:	8b 57 3c             	mov    0x3c(%edi),%edx
   104c4:	56                   	push   %esi
   104c5:	8b 77 58             	mov    0x58(%edi),%esi
   104c8:	89 45 c0             	mov    %eax,-0x40(%ebp)
   104cb:	56                   	push   %esi
   104cc:	51                   	push   %ecx
   104cd:	52                   	push   %edx
   104ce:	50                   	push   %eax
   104cf:	8b 45 c8             	mov    -0x38(%ebp),%eax
   104d2:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
   104d5:	89 55 c4             	mov    %edx,-0x3c(%ebp)
   104d8:	8b 40 10             	mov    0x10(%eax),%eax
   104db:	50                   	push   %eax
   104dc:	e8 2f 19 00 00       	call   11e10 <bd_write_blocks@plt>
   104e1:	83 c4 20             	add    $0x20,%esp
   104e4:	89 c6                	mov    %eax,%esi
   104e6:	85 c0                	test   %eax,%eax
   104e8:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
   104eb:	0f 85 a7 00 00 00    	jne    10598 <block_get+0x258>
   104f1:	c7 47 44 00 00 00 00 	movl   $0x0,0x44(%edi)
   104f8:	83 ec 0c             	sub    $0xc,%esp
   104fb:	c6 47 14 00          	movb   $0x0,0x14(%edi)
   104ff:	53                   	push   %ebx
   10500:	e8 fb 19 00 00       	call   11f00 <fibril_mutex_trylock@plt>
   10505:	83 c4 10             	add    $0x10,%esp
   10508:	84 c0                	test   %al,%al
   1050a:	0f 85 b7 02 00 00    	jne    107c7 <block_get+0x487>
   10510:	83 ec 0c             	sub    $0xc,%esp
   10513:	57                   	push   %edi
   10514:	e8 47 1a 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10519:	83 c4 10             	add    $0x10,%esp
   1051c:	e9 07 ff ff ff       	jmp    10428 <block_get+0xe8>
   10521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   10528:	83 ec 0c             	sub    $0xc,%esp
   1052b:	6a 5c                	push   $0x5c
   1052d:	e8 2e 19 00 00       	call   11e60 <malloc@plt>
   10532:	83 c4 10             	add    $0x10,%esp
   10535:	89 c7                	mov    %eax,%edi
   10537:	85 c0                	test   %eax,%eax
   10539:	74 26                	je     10561 <block_get+0x221>
   1053b:	83 ec 0c             	sub    $0xc,%esp
   1053e:	8b 43 10             	mov    0x10(%ebx),%eax
   10541:	50                   	push   %eax
   10542:	e8 19 19 00 00       	call   11e60 <malloc@plt>
   10547:	83 c4 10             	add    $0x10,%esp
   1054a:	89 47 58             	mov    %eax,0x58(%edi)
   1054d:	85 c0                	test   %eax,%eax
   1054f:	0f 85 14 03 00 00    	jne    10869 <block_get+0x529>
   10555:	83 ec 0c             	sub    $0xc,%esp
   10558:	57                   	push   %edi
   10559:	e8 92 1b 00 00       	call   120f0 <free@plt>
   1055e:	83 c4 10             	add    $0x10,%esp
   10561:	8b 73 40             	mov    0x40(%ebx),%esi
   10564:	3b 75 d8             	cmp    -0x28(%ebp),%esi
   10567:	0f 85 f4 fe ff ff    	jne    10461 <block_get+0x121>
   1056d:	83 ec 0c             	sub    $0xc,%esp
   10570:	31 ff                	xor    %edi,%edi
   10572:	53                   	push   %ebx
   10573:	e8 e8 19 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10578:	83 c4 10             	add    $0x10,%esp
   1057b:	c7 45 d8 fe ff ff ff 	movl   $0xfffffffe,-0x28(%ebp)
   10582:	8b 45 08             	mov    0x8(%ebp),%eax
   10585:	89 38                	mov    %edi,(%eax)
   10587:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1058a:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1058d:	5b                   	pop    %ebx
   1058e:	5e                   	pop    %esi
   1058f:	5f                   	pop    %edi
   10590:	5d                   	pop    %ebp
   10591:	c3                   	ret    
   10592:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   10598:	50                   	push   %eax
   10599:	50                   	push   %eax
   1059a:	8b 45 c8             	mov    -0x38(%ebp),%eax
   1059d:	8b 55 c0             	mov    -0x40(%ebp),%edx
   105a0:	8b 40 08             	mov    0x8(%eax),%eax
   105a3:	50                   	push   %eax
   105a4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
   105a7:	50                   	push   %eax
   105a8:	52                   	push   %edx
   105a9:	51                   	push   %ecx
   105aa:	56                   	push   %esi
   105ab:	68 e4 1a 01 00       	push   $0x11ae4
   105b0:	e8 eb 17 00 00       	call   11da0 <printf@plt>
   105b5:	83 c4 20             	add    $0x20,%esp
   105b8:	e8 e3 18 00 00       	call   11ea0 <stacktrace_print@plt>
   105bd:	8b 47 44             	mov    0x44(%edi),%eax
   105c0:	83 f8 09             	cmp    $0x9,%eax
   105c3:	7f 1b                	jg     105e0 <block_get+0x2a0>
   105c5:	83 ec 0c             	sub    $0xc,%esp
   105c8:	40                   	inc    %eax
   105c9:	89 47 44             	mov    %eax,0x44(%edi)
   105cc:	57                   	push   %edi
   105cd:	e8 8e 19 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   105d2:	83 c4 10             	add    $0x10,%esp
   105d5:	e9 4e fe ff ff       	jmp    10428 <block_get+0xe8>
   105da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   105e0:	8b 45 c8             	mov    -0x38(%ebp),%eax
   105e3:	8b 40 08             	mov    0x8(%eax),%eax
   105e6:	50                   	push   %eax
   105e7:	8b 47 34             	mov    0x34(%edi),%eax
   105ea:	50                   	push   %eax
   105eb:	8b 47 30             	mov    0x30(%edi),%eax
   105ee:	50                   	push   %eax
   105ef:	68 2c 1b 01 00       	push   $0x11b2c
   105f4:	e8 a7 17 00 00       	call   11da0 <printf@plt>
   105f9:	83 c4 10             	add    $0x10,%esp
   105fc:	e9 f7 fe ff ff       	jmp    104f8 <block_get+0x1b8>
   10601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   10608:	3b 46 20             	cmp    0x20(%esi),%eax
   1060b:	0f 83 e6 fd ff ff    	jae    103f7 <block_get+0xb7>
   10611:	e9 00 fe ff ff       	jmp    10416 <block_get+0xd6>
   10616:	66 90                	xchg   %ax,%ax
   10618:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
   1061f:	8d 78 b0             	lea    -0x50(%eax),%edi
   10622:	83 ec 0c             	sub    $0xc,%esp
   10625:	57                   	push   %edi
   10626:	e8 d5 1a 00 00       	call   12100 <fibril_mutex_lock@plt>
   1062b:	8b 47 10             	mov    0x10(%edi),%eax
   1062e:	83 c4 10             	add    $0x10,%esp
   10631:	85 c0                	test   %eax,%eax
   10633:	8d 50 01             	lea    0x1(%eax),%edx
   10636:	89 57 10             	mov    %edx,0x10(%edi)
   10639:	75 24                	jne    1065f <block_get+0x31f>
   1063b:	8b 57 48             	mov    0x48(%edi),%edx
   1063e:	85 d2                	test   %edx,%edx
   10640:	74 0f                	je     10651 <block_get+0x311>
   10642:	8b 47 4c             	mov    0x4c(%edi),%eax
   10645:	85 c0                	test   %eax,%eax
   10647:	74 08                	je     10651 <block_get+0x311>
   10649:	89 10                	mov    %edx,(%eax)
   1064b:	8b 57 48             	mov    0x48(%edi),%edx
   1064e:	89 42 04             	mov    %eax,0x4(%edx)
   10651:	c7 47 48 00 00 00 00 	movl   $0x0,0x48(%edi)
   10658:	c7 47 4c 00 00 00 00 	movl   $0x0,0x4c(%edi)
   1065f:	8a 47 15             	mov    0x15(%edi),%al
   10662:	84 c0                	test   %al,%al
   10664:	0f 85 51 01 00 00    	jne    107bb <block_get+0x47b>
   1066a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1066d:	85 c0                	test   %eax,%eax
   1066f:	0f 95 c0             	setne  %al
   10672:	83 ec 0c             	sub    $0xc,%esp
   10675:	88 45 d4             	mov    %al,-0x2c(%ebp)
   10678:	57                   	push   %edi
   10679:	e8 e2 18 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   1067e:	89 1c 24             	mov    %ebx,(%esp)
   10681:	e8 da 18 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10686:	83 c4 10             	add    $0x10,%esp
   10689:	8a 45 d4             	mov    -0x2c(%ebp),%al
   1068c:	e9 05 01 00 00       	jmp    10796 <block_get+0x456>
   10691:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   10698:	8b 75 c8             	mov    -0x38(%ebp),%esi
   1069b:	83 ec 0c             	sub    $0xc,%esp
   1069e:	57                   	push   %edi
   1069f:	e8 bc 18 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   106a4:	8b 57 48             	mov    0x48(%edi),%edx
   106a7:	83 c4 10             	add    $0x10,%esp
   106aa:	85 d2                	test   %edx,%edx
   106ac:	74 0f                	je     106bd <block_get+0x37d>
   106ae:	8b 47 4c             	mov    0x4c(%edi),%eax
   106b1:	85 c0                	test   %eax,%eax
   106b3:	74 08                	je     106bd <block_get+0x37d>
   106b5:	89 10                	mov    %edx,(%eax)
   106b7:	8b 57 48             	mov    0x48(%edi),%edx
   106ba:	89 42 04             	mov    %eax,0x4(%edx)
   106bd:	c7 47 48 00 00 00 00 	movl   $0x0,0x48(%edi)
   106c4:	c7 47 4c 00 00 00 00 	movl   $0x0,0x4c(%edi)
   106cb:	50                   	push   %eax
   106cc:	50                   	push   %eax
   106cd:	8d 47 50             	lea    0x50(%edi),%eax
   106d0:	50                   	push   %eax
   106d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
   106d4:	50                   	push   %eax
   106d5:	e8 06 19 00 00       	call   11fe0 <hash_table_remove_item@plt>
   106da:	83 c4 10             	add    $0x10,%esp
   106dd:	83 ec 0c             	sub    $0xc,%esp
   106e0:	57                   	push   %edi
   106e1:	e8 8a 18 00 00       	call   11f70 <fibril_mutex_initialize@plt>
   106e6:	8d 47 18             	lea    0x18(%edi),%eax
   106e9:	c7 47 10 01 00 00 00 	movl   $0x1,0x10(%edi)
   106f0:	c7 47 44 00 00 00 00 	movl   $0x0,0x44(%edi)
   106f7:	c6 47 14 00          	movb   $0x0,0x14(%edi)
   106fb:	c6 47 15 00          	movb   $0x0,0x15(%edi)
   106ff:	89 04 24             	mov    %eax,(%esp)
   10702:	e8 79 19 00 00       	call   12080 <fibril_rwlock_initialize@plt>
   10707:	8b 45 0c             	mov    0xc(%ebp),%eax
   1070a:	89 47 2c             	mov    %eax,0x2c(%edi)
   1070d:	8b 43 10             	mov    0x10(%ebx),%eax
   10710:	89 47 40             	mov    %eax,0x40(%edi)
   10713:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10716:	89 45 d8             	mov    %eax,-0x28(%ebp)
   10719:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   1071c:	89 47 30             	mov    %eax,0x30(%edi)
   1071f:	8b 46 2c             	mov    0x2c(%esi),%eax
   10722:	83 c4 10             	add    $0x10,%esp
   10725:	c7 47 48 00 00 00 00 	movl   $0x0,0x48(%edi)
   1072c:	c7 47 4c 00 00 00 00 	movl   $0x0,0x4c(%edi)
   10733:	89 4f 34             	mov    %ecx,0x34(%edi)
   10736:	85 c0                	test   %eax,%eax
   10738:	0f 84 4f 01 00 00    	je     1088d <block_get+0x54d>
   1073e:	8b 40 14             	mov    0x14(%eax),%eax
   10741:	0f af c8             	imul   %eax,%ecx
   10744:	f7 65 d8             	mull   -0x28(%ebp)
   10747:	01 ca                	add    %ecx,%edx
   10749:	89 47 38             	mov    %eax,0x38(%edi)
   1074c:	89 57 3c             	mov    %edx,0x3c(%edi)
   1074f:	50                   	push   %eax
   10750:	50                   	push   %eax
   10751:	8d 47 50             	lea    0x50(%edi),%eax
   10754:	50                   	push   %eax
   10755:	8b 45 d0             	mov    -0x30(%ebp),%eax
   10758:	50                   	push   %eax
   10759:	e8 82 16 00 00       	call   11de0 <hash_table_insert@plt>
   1075e:	89 3c 24             	mov    %edi,(%esp)
   10761:	e8 9a 19 00 00       	call   12100 <fibril_mutex_lock@plt>
   10766:	89 1c 24             	mov    %ebx,(%esp)
   10769:	e8 f2 17 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   1076e:	83 c4 10             	add    $0x10,%esp
   10771:	f6 45 18 01          	testb  $0x1,0x18(%ebp)
   10775:	0f 84 83 00 00 00    	je     107fe <block_get+0x4be>
   1077b:	31 c0                	xor    %eax,%eax
   1077d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
   10784:	83 ec 0c             	sub    $0xc,%esp
   10787:	88 45 d4             	mov    %al,-0x2c(%ebp)
   1078a:	57                   	push   %edi
   1078b:	e8 d0 17 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10790:	83 c4 10             	add    $0x10,%esp
   10793:	8a 45 d4             	mov    -0x2c(%ebp),%al
   10796:	84 c0                	test   %al,%al
   10798:	0f 84 e4 fd ff ff    	je     10582 <block_get+0x242>
   1079e:	80 7f 15 00          	cmpb   $0x0,0x15(%edi)
   107a2:	0f 84 fa 00 00 00    	je     108a2 <block_get+0x562>
   107a8:	83 ec 0c             	sub    $0xc,%esp
   107ab:	57                   	push   %edi
   107ac:	31 ff                	xor    %edi,%edi
   107ae:	e8 8d f8 ff ff       	call   10040 <block_put>
   107b3:	83 c4 10             	add    $0x10,%esp
   107b6:	e9 c7 fd ff ff       	jmp    10582 <block_get+0x242>
   107bb:	c7 45 d8 f6 fe ff ff 	movl   $0xfffffef6,-0x28(%ebp)
   107c2:	e9 ab fe ff ff       	jmp    10672 <block_get+0x332>
   107c7:	8d 45 e0             	lea    -0x20(%ebp),%eax
   107ca:	8b 4d d0             	mov    -0x30(%ebp),%ecx
   107cd:	89 75 d8             	mov    %esi,-0x28(%ebp)
   107d0:	8b 75 c8             	mov    -0x38(%ebp),%esi
   107d3:	52                   	push   %edx
   107d4:	52                   	push   %edx
   107d5:	50                   	push   %eax
   107d6:	51                   	push   %ecx
   107d7:	e8 94 18 00 00       	call   12070 <hash_table_find@plt>
   107dc:	83 c4 10             	add    $0x10,%esp
   107df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   107e2:	85 c0                	test   %eax,%eax
   107e4:	0f 84 b1 fe ff ff    	je     1069b <block_get+0x35b>
   107ea:	83 ec 0c             	sub    $0xc,%esp
   107ed:	57                   	push   %edi
   107ee:	e8 6d 17 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   107f3:	83 c4 10             	add    $0x10,%esp
   107f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   107f9:	e9 21 fe ff ff       	jmp    1061f <block_get+0x2df>
   107fe:	83 ec 08             	sub    $0x8,%esp
   10801:	8b 4b 14             	mov    0x14(%ebx),%ecx
   10804:	8b 5b 10             	mov    0x10(%ebx),%ebx
   10807:	8b 47 38             	mov    0x38(%edi),%eax
   1080a:	8b 57 3c             	mov    0x3c(%edi),%edx
   1080d:	53                   	push   %ebx
   1080e:	8b 5f 58             	mov    0x58(%edi),%ebx
   10811:	89 45 c8             	mov    %eax,-0x38(%ebp)
   10814:	53                   	push   %ebx
   10815:	51                   	push   %ecx
   10816:	52                   	push   %edx
   10817:	50                   	push   %eax
   10818:	8b 46 10             	mov    0x10(%esi),%eax
   1081b:	89 55 cc             	mov    %edx,-0x34(%ebp)
   1081e:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
   10821:	50                   	push   %eax
   10822:	e8 b9 16 00 00       	call   11ee0 <bd_read_blocks@plt>
   10827:	83 c4 20             	add    $0x20,%esp
   1082a:	89 c2                	mov    %eax,%edx
   1082c:	89 45 d8             	mov    %eax,-0x28(%ebp)
   1082f:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
   10832:	31 c0                	xor    %eax,%eax
   10834:	85 d2                	test   %edx,%edx
   10836:	0f 84 48 ff ff ff    	je     10784 <block_get+0x444>
   1083c:	53                   	push   %ebx
   1083d:	53                   	push   %ebx
   1083e:	8b 76 08             	mov    0x8(%esi),%esi
   10841:	8b 45 cc             	mov    -0x34(%ebp),%eax
   10844:	56                   	push   %esi
   10845:	50                   	push   %eax
   10846:	8b 45 c8             	mov    -0x38(%ebp),%eax
   10849:	50                   	push   %eax
   1084a:	51                   	push   %ecx
   1084b:	52                   	push   %edx
   1084c:	68 98 1a 01 00       	push   $0x11a98
   10851:	e8 4a 15 00 00       	call   11da0 <printf@plt>
   10856:	83 c4 20             	add    $0x20,%esp
   10859:	e8 42 16 00 00       	call   11ea0 <stacktrace_print@plt>
   1085e:	c6 47 15 01          	movb   $0x1,0x15(%edi)
   10862:	b0 01                	mov    $0x1,%al
   10864:	e9 1b ff ff ff       	jmp    10784 <block_get+0x444>
   10869:	8b 43 1c             	mov    0x1c(%ebx),%eax
   1086c:	8b 75 c8             	mov    -0x38(%ebp),%esi
   1086f:	40                   	inc    %eax
   10870:	89 43 1c             	mov    %eax,0x1c(%ebx)
   10873:	e9 65 fe ff ff       	jmp    106dd <block_get+0x39d>
   10878:	53                   	push   %ebx
   10879:	68 8b 01 00 00       	push   $0x18b
   1087e:	68 b4 17 01 00       	push   $0x117b4
   10883:	68 57 1a 01 00       	push   $0x11a57
   10888:	e8 83 16 00 00       	call   11f10 <assert_abort@plt>
   1088d:	50                   	push   %eax
   1088e:	68 c6 03 00 00       	push   $0x3c6
   10893:	68 b4 17 01 00       	push   $0x117b4
   10898:	68 78 1a 01 00       	push   $0x11a78
   1089d:	e8 6e 16 00 00       	call   11f10 <assert_abort@plt>
   108a2:	50                   	push   %eax
   108a3:	68 34 02 00 00       	push   $0x234
   108a8:	68 b4 17 01 00       	push   $0x117b4
   108ad:	68 8e 1a 01 00       	push   $0x11a8e
   108b2:	e8 59 16 00 00       	call   11f10 <assert_abort@plt>
   108b7:	89 f6                	mov    %esi,%esi
   108b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

000108c0 <block_seqread>:
   108c0:	55                   	push   %ebp
   108c1:	89 e5                	mov    %esp,%ebp
   108c3:	57                   	push   %edi
   108c4:	56                   	push   %esi
   108c5:	53                   	push   %ebx
   108c6:	83 ec 38             	sub    $0x38,%esp
   108c9:	8b 4d 20             	mov    0x20(%ebp),%ecx
   108cc:	8b 75 08             	mov    0x8(%ebp),%esi
   108cf:	68 1c 3c 01 00       	push   $0x13c1c
   108d4:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
   108d7:	e8 24 18 00 00       	call   12100 <fibril_mutex_lock@plt>
   108dc:	8b 1d 18 3c 01 00    	mov    0x13c18,%ebx
   108e2:	83 c4 10             	add    $0x10,%esp
   108e5:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
   108eb:	74 1b                	je     10908 <block_seqread+0x48>
   108ed:	3b 73 08             	cmp    0x8(%ebx),%esi
   108f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   108f3:	75 08                	jne    108fd <block_seqread+0x3d>
   108f5:	eb 39                	jmp    10930 <block_seqread+0x70>
   108f7:	90                   	nop
   108f8:	3b 73 08             	cmp    0x8(%ebx),%esi
   108fb:	74 33                	je     10930 <block_seqread+0x70>
   108fd:	8b 5b 04             	mov    0x4(%ebx),%ebx
   10900:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
   10906:	75 f0                	jne    108f8 <block_seqread+0x38>
   10908:	83 ec 0c             	sub    $0xc,%esp
   1090b:	68 1c 3c 01 00       	push   $0x13c1c
   10910:	e8 4b 16 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10915:	83 c4 0c             	add    $0xc,%esp
   10918:	68 c6 02 00 00       	push   $0x2c6
   1091d:	68 b4 17 01 00       	push   $0x117b4
   10922:	68 50 1a 01 00       	push   $0x11a50
   10927:	e8 e4 15 00 00       	call   11f10 <assert_abort@plt>
   1092c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   10930:	83 ec 0c             	sub    $0xc,%esp
   10933:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
   10936:	68 1c 3c 01 00       	push   $0x13c1c
   1093b:	e8 20 16 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10940:	8b 43 28             	mov    0x28(%ebx),%eax
   10943:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   10946:	83 c4 10             	add    $0x10,%esp
   10949:	89 45 d8             	mov    %eax,-0x28(%ebp)
   1094c:	85 c9                	test   %ecx,%ecx
   1094e:	0f 84 e0 00 00 00    	je     10a34 <block_seqread+0x174>
   10954:	89 c6                	mov    %eax,%esi
   10956:	8b 45 14             	mov    0x14(%ebp),%eax
   10959:	89 5d dc             	mov    %ebx,-0x24(%ebp)
   1095c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   10963:	8b 00                	mov    (%eax),%eax
   10965:	89 75 d0             	mov    %esi,-0x30(%ebp)
   10968:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
   1096f:	8b 5d 10             	mov    0x10(%ebp),%ebx
   10972:	eb 1a                	jmp    1098e <block_seqread+0xce>
   10974:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   10978:	89 c2                	mov    %eax,%edx
   1097a:	29 fa                	sub    %edi,%edx
   1097c:	0f 85 f0 00 00 00    	jne    10a72 <block_seqread+0x1b2>
   10982:	39 c7                	cmp    %eax,%edi
   10984:	74 56                	je     109dc <block_seqread+0x11c>
   10986:	85 c9                	test   %ecx,%ecx
   10988:	0f 84 a6 00 00 00    	je     10a34 <block_seqread+0x174>
   1098e:	8b 3b                	mov    (%ebx),%edi
   10990:	8d 14 0f             	lea    (%edi,%ecx,1),%edx
   10993:	39 c2                	cmp    %eax,%edx
   10995:	73 e1                	jae    10978 <block_seqread+0xb8>
   10997:	31 f6                	xor    %esi,%esi
   10999:	50                   	push   %eax
   1099a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1099d:	01 c7                	add    %eax,%edi
   1099f:	51                   	push   %ecx
   109a0:	8b 45 1c             	mov    0x1c(%ebp),%eax
   109a3:	57                   	push   %edi
   109a4:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   109a7:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   109aa:	01 f8                	add    %edi,%eax
   109ac:	50                   	push   %eax
   109ad:	e8 9e 14 00 00       	call   11e50 <memcpy@plt>
   109b2:	8b 4d e0             	mov    -0x20(%ebp),%ecx
   109b5:	89 f8                	mov    %edi,%eax
   109b7:	01 c8                	add    %ecx,%eax
   109b9:	8b 3b                	mov    (%ebx),%edi
   109bb:	01 cf                	add    %ecx,%edi
   109bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   109c0:	89 c8                	mov    %ecx,%eax
   109c2:	8b 4d 18             	mov    0x18(%ebp),%ecx
   109c5:	89 3b                	mov    %edi,(%ebx)
   109c7:	31 d2                	xor    %edx,%edx
   109c9:	01 01                	add    %eax,(%ecx)
   109cb:	8b 45 14             	mov    0x14(%ebp),%eax
   109ce:	11 51 04             	adc    %edx,0x4(%ecx)
   109d1:	8b 00                	mov    (%eax),%eax
   109d3:	83 c4 10             	add    $0x10,%esp
   109d6:	89 f1                	mov    %esi,%ecx
   109d8:	39 c7                	cmp    %eax,%edi
   109da:	75 aa                	jne    10986 <block_seqread+0xc6>
   109dc:	8b 45 18             	mov    0x18(%ebp),%eax
   109df:	8b 75 d4             	mov    -0x2c(%ebp),%esi
   109e2:	8b 7d d0             	mov    -0x30(%ebp),%edi
   109e5:	56                   	push   %esi
   109e6:	57                   	push   %edi
   109e7:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   109ea:	8b 50 04             	mov    0x4(%eax),%edx
   109ed:	52                   	push   %edx
   109ee:	8b 08                	mov    (%eax),%ecx
   109f0:	51                   	push   %ecx
   109f1:	e8 da 14 00 00       	call   11ed0 <__udivdi3@plt>
   109f6:	5e                   	pop    %esi
   109f7:	89 c6                	mov    %eax,%esi
   109f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
   109fc:	5f                   	pop    %edi
   109fd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   10a00:	89 d7                	mov    %edx,%edi
   10a02:	8b 50 28             	mov    0x28(%eax),%edx
   10a05:	52                   	push   %edx
   10a06:	51                   	push   %ecx
   10a07:	8b 40 10             	mov    0x10(%eax),%eax
   10a0a:	6a 01                	push   $0x1
   10a0c:	57                   	push   %edi
   10a0d:	56                   	push   %esi
   10a0e:	50                   	push   %eax
   10a0f:	e8 cc 14 00 00       	call   11ee0 <bd_read_blocks@plt>
   10a14:	83 c4 20             	add    $0x20,%esp
   10a17:	8b 4d e0             	mov    -0x20(%ebp),%ecx
   10a1a:	85 c0                	test   %eax,%eax
   10a1c:	75 22                	jne    10a40 <block_seqread+0x180>
   10a1e:	8b 75 14             	mov    0x14(%ebp),%esi
   10a21:	8b 45 d8             	mov    -0x28(%ebp),%eax
   10a24:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   10a2a:	85 c9                	test   %ecx,%ecx
   10a2c:	89 06                	mov    %eax,(%esi)
   10a2e:	0f 85 5a ff ff ff    	jne    1098e <block_seqread+0xce>
   10a34:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10a37:	31 d2                	xor    %edx,%edx
   10a39:	89 d0                	mov    %edx,%eax
   10a3b:	5b                   	pop    %ebx
   10a3c:	5e                   	pop    %esi
   10a3d:	5f                   	pop    %edi
   10a3e:	5d                   	pop    %ebp
   10a3f:	c3                   	ret    
   10a40:	8b 5d dc             	mov    -0x24(%ebp),%ebx
   10a43:	89 c2                	mov    %eax,%edx
   10a45:	50                   	push   %eax
   10a46:	50                   	push   %eax
   10a47:	8b 4b 08             	mov    0x8(%ebx),%ecx
   10a4a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   10a4d:	51                   	push   %ecx
   10a4e:	57                   	push   %edi
   10a4f:	56                   	push   %esi
   10a50:	6a 01                	push   $0x1
   10a52:	52                   	push   %edx
   10a53:	68 98 1a 01 00       	push   $0x11a98
   10a58:	e8 43 13 00 00       	call   11da0 <printf@plt>
   10a5d:	83 c4 20             	add    $0x20,%esp
   10a60:	e8 3b 14 00 00       	call   11ea0 <stacktrace_print@plt>
   10a65:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10a68:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10a6b:	89 d0                	mov    %edx,%eax
   10a6d:	5b                   	pop    %ebx
   10a6e:	5e                   	pop    %esi
   10a6f:	5f                   	pop    %edi
   10a70:	5d                   	pop    %ebp
   10a71:	c3                   	ret    
   10a72:	89 ce                	mov    %ecx,%esi
   10a74:	89 d1                	mov    %edx,%ecx
   10a76:	29 d6                	sub    %edx,%esi
   10a78:	e9 1c ff ff ff       	jmp    10999 <block_seqread+0xd9>
   10a7d:	8d 76 00             	lea    0x0(%esi),%esi

00010a80 <block_read_direct>:
   10a80:	55                   	push   %ebp
   10a81:	89 e5                	mov    %esp,%ebp
   10a83:	57                   	push   %edi
   10a84:	56                   	push   %esi
   10a85:	53                   	push   %ebx
   10a86:	83 ec 28             	sub    $0x28,%esp
   10a89:	8b 45 08             	mov    0x8(%ebp),%eax
   10a8c:	8b 75 0c             	mov    0xc(%ebp),%esi
   10a8f:	68 1c 3c 01 00       	push   $0x13c1c
   10a94:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10a97:	8b 7d 10             	mov    0x10(%ebp),%edi
   10a9a:	e8 61 16 00 00       	call   12100 <fibril_mutex_lock@plt>
   10a9f:	8b 1d 18 3c 01 00    	mov    0x13c18,%ebx
   10aa5:	83 c4 10             	add    $0x10,%esp
   10aa8:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
   10aae:	74 20                	je     10ad0 <block_read_direct+0x50>
   10ab0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ab3:	3b 43 08             	cmp    0x8(%ebx),%eax
   10ab6:	75 0d                	jne    10ac5 <block_read_direct+0x45>
   10ab8:	eb 3e                	jmp    10af8 <block_read_direct+0x78>
   10aba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   10ac0:	3b 43 08             	cmp    0x8(%ebx),%eax
   10ac3:	74 33                	je     10af8 <block_read_direct+0x78>
   10ac5:	8b 5b 04             	mov    0x4(%ebx),%ebx
   10ac8:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
   10ace:	75 f0                	jne    10ac0 <block_read_direct+0x40>
   10ad0:	83 ec 0c             	sub    $0xc,%esp
   10ad3:	68 1c 3c 01 00       	push   $0x13c1c
   10ad8:	e8 83 14 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10add:	83 c4 0c             	add    $0xc,%esp
   10ae0:	68 fd 02 00 00       	push   $0x2fd
   10ae5:	68 b4 17 01 00       	push   $0x117b4
   10aea:	68 50 1a 01 00       	push   $0x11a50
   10aef:	e8 1c 14 00 00       	call   11f10 <assert_abort@plt>
   10af4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   10af8:	83 ec 0c             	sub    $0xc,%esp
   10afb:	68 1c 3c 01 00       	push   $0x13c1c
   10b00:	e8 5b 14 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10b05:	58                   	pop    %eax
   10b06:	8b 4b 28             	mov    0x28(%ebx),%ecx
   10b09:	8b 45 14             	mov    0x14(%ebp),%eax
   10b0c:	5a                   	pop    %edx
   10b0d:	0f af c1             	imul   %ecx,%eax
   10b10:	50                   	push   %eax
   10b11:	8b 45 18             	mov    0x18(%ebp),%eax
   10b14:	50                   	push   %eax
   10b15:	8b 45 14             	mov    0x14(%ebp),%eax
   10b18:	50                   	push   %eax
   10b19:	8b 43 10             	mov    0x10(%ebx),%eax
   10b1c:	57                   	push   %edi
   10b1d:	56                   	push   %esi
   10b1e:	50                   	push   %eax
   10b1f:	e8 bc 13 00 00       	call   11ee0 <bd_read_blocks@plt>
   10b24:	83 c4 20             	add    $0x20,%esp
   10b27:	89 c1                	mov    %eax,%ecx
   10b29:	85 c0                	test   %eax,%eax
   10b2b:	74 25                	je     10b52 <block_read_direct+0xd2>
   10b2d:	50                   	push   %eax
   10b2e:	50                   	push   %eax
   10b2f:	8b 53 08             	mov    0x8(%ebx),%edx
   10b32:	8b 5d 14             	mov    0x14(%ebp),%ebx
   10b35:	52                   	push   %edx
   10b36:	57                   	push   %edi
   10b37:	56                   	push   %esi
   10b38:	53                   	push   %ebx
   10b39:	51                   	push   %ecx
   10b3a:	68 98 1a 01 00       	push   $0x11a98
   10b3f:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
   10b42:	e8 59 12 00 00       	call   11da0 <printf@plt>
   10b47:	83 c4 20             	add    $0x20,%esp
   10b4a:	e8 51 13 00 00       	call   11ea0 <stacktrace_print@plt>
   10b4f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   10b52:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10b55:	89 c8                	mov    %ecx,%eax
   10b57:	5b                   	pop    %ebx
   10b58:	5e                   	pop    %esi
   10b59:	5f                   	pop    %edi
   10b5a:	5d                   	pop    %ebp
   10b5b:	c3                   	ret    
   10b5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00010b60 <block_write_direct>:
   10b60:	55                   	push   %ebp
   10b61:	89 e5                	mov    %esp,%ebp
   10b63:	57                   	push   %edi
   10b64:	56                   	push   %esi
   10b65:	53                   	push   %ebx
   10b66:	83 ec 28             	sub    $0x28,%esp
   10b69:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6c:	8b 75 0c             	mov    0xc(%ebp),%esi
   10b6f:	68 1c 3c 01 00       	push   $0x13c1c
   10b74:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10b77:	8b 7d 10             	mov    0x10(%ebp),%edi
   10b7a:	e8 81 15 00 00       	call   12100 <fibril_mutex_lock@plt>
   10b7f:	8b 1d 18 3c 01 00    	mov    0x13c18,%ebx
   10b85:	83 c4 10             	add    $0x10,%esp
   10b88:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
   10b8e:	74 20                	je     10bb0 <block_write_direct+0x50>
   10b90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b93:	3b 43 08             	cmp    0x8(%ebx),%eax
   10b96:	75 0d                	jne    10ba5 <block_write_direct+0x45>
   10b98:	eb 3e                	jmp    10bd8 <block_write_direct+0x78>
   10b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   10ba0:	3b 43 08             	cmp    0x8(%ebx),%eax
   10ba3:	74 33                	je     10bd8 <block_write_direct+0x78>
   10ba5:	8b 5b 04             	mov    0x4(%ebx),%ebx
   10ba8:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
   10bae:	75 f0                	jne    10ba0 <block_write_direct+0x40>
   10bb0:	83 ec 0c             	sub    $0xc,%esp
   10bb3:	68 1c 3c 01 00       	push   $0x13c1c
   10bb8:	e8 a3 13 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10bbd:	83 c4 0c             	add    $0xc,%esp
   10bc0:	68 11 03 00 00       	push   $0x311
   10bc5:	68 b4 17 01 00       	push   $0x117b4
   10bca:	68 50 1a 01 00       	push   $0x11a50
   10bcf:	e8 3c 13 00 00       	call   11f10 <assert_abort@plt>
   10bd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   10bd8:	83 ec 0c             	sub    $0xc,%esp
   10bdb:	68 1c 3c 01 00       	push   $0x13c1c
   10be0:	e8 7b 13 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10be5:	58                   	pop    %eax
   10be6:	8b 4b 28             	mov    0x28(%ebx),%ecx
   10be9:	8b 45 14             	mov    0x14(%ebp),%eax
   10bec:	5a                   	pop    %edx
   10bed:	0f af c1             	imul   %ecx,%eax
   10bf0:	50                   	push   %eax
   10bf1:	8b 45 18             	mov    0x18(%ebp),%eax
   10bf4:	50                   	push   %eax
   10bf5:	8b 45 14             	mov    0x14(%ebp),%eax
   10bf8:	50                   	push   %eax
   10bf9:	8b 43 10             	mov    0x10(%ebx),%eax
   10bfc:	57                   	push   %edi
   10bfd:	56                   	push   %esi
   10bfe:	50                   	push   %eax
   10bff:	e8 0c 12 00 00       	call   11e10 <bd_write_blocks@plt>
   10c04:	83 c4 20             	add    $0x20,%esp
   10c07:	89 c1                	mov    %eax,%ecx
   10c09:	85 c0                	test   %eax,%eax
   10c0b:	74 25                	je     10c32 <block_write_direct+0xd2>
   10c0d:	50                   	push   %eax
   10c0e:	50                   	push   %eax
   10c0f:	8b 53 08             	mov    0x8(%ebx),%edx
   10c12:	8b 5d 14             	mov    0x14(%ebp),%ebx
   10c15:	52                   	push   %edx
   10c16:	57                   	push   %edi
   10c17:	56                   	push   %esi
   10c18:	53                   	push   %ebx
   10c19:	51                   	push   %ecx
   10c1a:	68 e4 1a 01 00       	push   $0x11ae4
   10c1f:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
   10c22:	e8 79 11 00 00       	call   11da0 <printf@plt>
   10c27:	83 c4 20             	add    $0x20,%esp
   10c2a:	e8 71 12 00 00       	call   11ea0 <stacktrace_print@plt>
   10c2f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   10c32:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10c35:	89 c8                	mov    %ecx,%eax
   10c37:	5b                   	pop    %ebx
   10c38:	5e                   	pop    %esi
   10c39:	5f                   	pop    %edi
   10c3a:	5d                   	pop    %ebp
   10c3b:	c3                   	ret    
   10c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00010c40 <block_sync_cache>:
   10c40:	55                   	push   %ebp
   10c41:	89 e5                	mov    %esp,%ebp
   10c43:	57                   	push   %edi
   10c44:	56                   	push   %esi
   10c45:	53                   	push   %ebx
   10c46:	83 ec 28             	sub    $0x28,%esp
   10c49:	8b 55 08             	mov    0x8(%ebp),%edx
   10c4c:	8b 75 0c             	mov    0xc(%ebp),%esi
   10c4f:	68 1c 3c 01 00       	push   $0x13c1c
   10c54:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   10c57:	8b 7d 10             	mov    0x10(%ebp),%edi
   10c5a:	8b 5d 14             	mov    0x14(%ebp),%ebx
   10c5d:	e8 9e 14 00 00       	call   12100 <fibril_mutex_lock@plt>
   10c62:	a1 18 3c 01 00       	mov    0x13c18,%eax
   10c67:	83 c4 10             	add    $0x10,%esp
   10c6a:	3d 14 3c 01 00       	cmp    $0x13c14,%eax
   10c6f:	74 1e                	je     10c8f <block_sync_cache+0x4f>
   10c71:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10c74:	3b 50 08             	cmp    0x8(%eax),%edx
   10c77:	75 0c                	jne    10c85 <block_sync_cache+0x45>
   10c79:	eb 3d                	jmp    10cb8 <block_sync_cache+0x78>
   10c7b:	90                   	nop
   10c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   10c80:	3b 50 08             	cmp    0x8(%eax),%edx
   10c83:	74 33                	je     10cb8 <block_sync_cache+0x78>
   10c85:	8b 40 04             	mov    0x4(%eax),%eax
   10c88:	3d 14 3c 01 00       	cmp    $0x13c14,%eax
   10c8d:	75 f1                	jne    10c80 <block_sync_cache+0x40>
   10c8f:	83 ec 0c             	sub    $0xc,%esp
   10c92:	68 1c 3c 01 00       	push   $0x13c1c
   10c97:	e8 c4 12 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10c9c:	83 c4 0c             	add    $0xc,%esp
   10c9f:	68 23 03 00 00       	push   $0x323
   10ca4:	68 b4 17 01 00       	push   $0x117b4
   10ca9:	68 50 1a 01 00       	push   $0x11a50
   10cae:	e8 5d 12 00 00       	call   11f10 <assert_abort@plt>
   10cb3:	90                   	nop
   10cb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   10cb8:	83 ec 0c             	sub    $0xc,%esp
   10cbb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10cbe:	68 1c 3c 01 00       	push   $0x13c1c
   10cc3:	e8 98 12 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10cc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ccb:	89 5d 14             	mov    %ebx,0x14(%ebp)
   10cce:	89 75 0c             	mov    %esi,0xc(%ebp)
   10cd1:	89 7d 10             	mov    %edi,0x10(%ebp)
   10cd4:	8b 40 10             	mov    0x10(%eax),%eax
   10cd7:	83 c4 10             	add    $0x10,%esp
   10cda:	89 45 08             	mov    %eax,0x8(%ebp)
   10cdd:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10ce0:	5b                   	pop    %ebx
   10ce1:	5e                   	pop    %esi
   10ce2:	5f                   	pop    %edi
   10ce3:	5d                   	pop    %ebp
   10ce4:	e9 67 13 00 00       	jmp    12050 <bd_sync_cache@plt>
   10ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

00010cf0 <block_get_bsize>:
   10cf0:	55                   	push   %ebp
   10cf1:	89 e5                	mov    %esp,%ebp
   10cf3:	57                   	push   %edi
   10cf4:	56                   	push   %esi
   10cf5:	53                   	push   %ebx
   10cf6:	83 ec 18             	sub    $0x18,%esp
   10cf9:	8b 75 08             	mov    0x8(%ebp),%esi
   10cfc:	8b 7d 0c             	mov    0xc(%ebp),%edi
   10cff:	68 1c 3c 01 00       	push   $0x13c1c
   10d04:	e8 f7 13 00 00       	call   12100 <fibril_mutex_lock@plt>
   10d09:	8b 1d 18 3c 01 00    	mov    0x13c18,%ebx
   10d0f:	83 c4 10             	add    $0x10,%esp
   10d12:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
   10d18:	75 11                	jne    10d2b <block_get_bsize+0x3b>
   10d1a:	eb 3c                	jmp    10d58 <block_get_bsize+0x68>
   10d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   10d20:	8b 5b 04             	mov    0x4(%ebx),%ebx
   10d23:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
   10d29:	74 2d                	je     10d58 <block_get_bsize+0x68>
   10d2b:	3b 73 08             	cmp    0x8(%ebx),%esi
   10d2e:	75 f0                	jne    10d20 <block_get_bsize+0x30>
   10d30:	83 ec 0c             	sub    $0xc,%esp
   10d33:	68 1c 3c 01 00       	push   $0x13c1c
   10d38:	e8 23 12 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10d3d:	89 7d 0c             	mov    %edi,0xc(%ebp)
   10d40:	83 c4 10             	add    $0x10,%esp
   10d43:	8b 43 10             	mov    0x10(%ebx),%eax
   10d46:	89 45 08             	mov    %eax,0x8(%ebp)
   10d49:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10d4c:	5b                   	pop    %ebx
   10d4d:	5e                   	pop    %esi
   10d4e:	5f                   	pop    %edi
   10d4f:	5d                   	pop    %ebp
   10d50:	e9 bb 12 00 00       	jmp    12010 <bd_get_block_size@plt>
   10d55:	8d 76 00             	lea    0x0(%esi),%esi
   10d58:	83 ec 0c             	sub    $0xc,%esp
   10d5b:	68 1c 3c 01 00       	push   $0x13c1c
   10d60:	e8 fb 11 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10d65:	83 c4 0c             	add    $0xc,%esp
   10d68:	68 34 03 00 00       	push   $0x334
   10d6d:	68 b4 17 01 00       	push   $0x117b4
   10d72:	68 50 1a 01 00       	push   $0x11a50
   10d77:	e8 94 11 00 00       	call   11f10 <assert_abort@plt>
   10d7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00010d80 <block_get_nblocks>:
   10d80:	55                   	push   %ebp
   10d81:	89 e5                	mov    %esp,%ebp
   10d83:	57                   	push   %edi
   10d84:	56                   	push   %esi
   10d85:	53                   	push   %ebx
   10d86:	83 ec 18             	sub    $0x18,%esp
   10d89:	8b 75 08             	mov    0x8(%ebp),%esi
   10d8c:	8b 7d 0c             	mov    0xc(%ebp),%edi
   10d8f:	68 1c 3c 01 00       	push   $0x13c1c
   10d94:	e8 67 13 00 00       	call   12100 <fibril_mutex_lock@plt>
   10d99:	8b 1d 18 3c 01 00    	mov    0x13c18,%ebx
   10d9f:	83 c4 10             	add    $0x10,%esp
   10da2:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
   10da8:	75 11                	jne    10dbb <block_get_nblocks+0x3b>
   10daa:	eb 3c                	jmp    10de8 <block_get_nblocks+0x68>
   10dac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   10db0:	8b 5b 04             	mov    0x4(%ebx),%ebx
   10db3:	81 fb 14 3c 01 00    	cmp    $0x13c14,%ebx
   10db9:	74 2d                	je     10de8 <block_get_nblocks+0x68>
   10dbb:	3b 73 08             	cmp    0x8(%ebx),%esi
   10dbe:	75 f0                	jne    10db0 <block_get_nblocks+0x30>
   10dc0:	83 ec 0c             	sub    $0xc,%esp
   10dc3:	68 1c 3c 01 00       	push   $0x13c1c
   10dc8:	e8 93 11 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10dcd:	89 7d 0c             	mov    %edi,0xc(%ebp)
   10dd0:	83 c4 10             	add    $0x10,%esp
   10dd3:	8b 43 10             	mov    0x10(%ebx),%eax
   10dd6:	89 45 08             	mov    %eax,0x8(%ebp)
   10dd9:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10ddc:	5b                   	pop    %ebx
   10ddd:	5e                   	pop    %esi
   10dde:	5f                   	pop    %edi
   10ddf:	5d                   	pop    %ebp
   10de0:	e9 3b 10 00 00       	jmp    11e20 <bd_get_num_blocks@plt>
   10de5:	8d 76 00             	lea    0x0(%esi),%esi
   10de8:	83 ec 0c             	sub    $0xc,%esp
   10deb:	68 1c 3c 01 00       	push   $0x13c1c
   10df0:	e8 6b 11 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10df5:	83 c4 0c             	add    $0xc,%esp
   10df8:	68 43 03 00 00       	push   $0x343
   10dfd:	68 b4 17 01 00       	push   $0x117b4
   10e02:	68 50 1a 01 00       	push   $0x11a50
   10e07:	e8 04 11 00 00       	call   11f10 <assert_abort@plt>
   10e0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00010e10 <block_read_bytes_direct>:
   10e10:	55                   	push   %ebp
   10e11:	89 e5                	mov    %esp,%ebp
   10e13:	57                   	push   %edi
   10e14:	56                   	push   %esi
   10e15:	53                   	push   %ebx
   10e16:	83 ec 48             	sub    $0x48,%esp
   10e19:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e1c:	8b 55 10             	mov    0x10(%ebp),%edx
   10e1f:	68 1c 3c 01 00       	push   $0x13c1c
   10e24:	8b 5d 08             	mov    0x8(%ebp),%ebx
   10e27:	89 45 d0             	mov    %eax,-0x30(%ebp)
   10e2a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
   10e2d:	e8 ce 12 00 00       	call   12100 <fibril_mutex_lock@plt>
   10e32:	8b 35 18 3c 01 00    	mov    0x13c18,%esi
   10e38:	83 c4 10             	add    $0x10,%esp
   10e3b:	81 fe 14 3c 01 00    	cmp    $0x13c14,%esi
   10e41:	75 10                	jne    10e53 <block_read_bytes_direct+0x43>
   10e43:	eb 43                	jmp    10e88 <block_read_bytes_direct+0x78>
   10e45:	8d 76 00             	lea    0x0(%esi),%esi
   10e48:	8b 76 04             	mov    0x4(%esi),%esi
   10e4b:	81 fe 14 3c 01 00    	cmp    $0x13c14,%esi
   10e51:	74 35                	je     10e88 <block_read_bytes_direct+0x78>
   10e53:	3b 5e 08             	cmp    0x8(%esi),%ebx
   10e56:	75 f0                	jne    10e48 <block_read_bytes_direct+0x38>
   10e58:	83 ec 0c             	sub    $0xc,%esp
   10e5b:	68 1c 3c 01 00       	push   $0x13c1c
   10e60:	e8 fb 10 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10e65:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   10e68:	59                   	pop    %ecx
   10e69:	5f                   	pop    %edi
   10e6a:	50                   	push   %eax
   10e6b:	8b 46 10             	mov    0x10(%esi),%eax
   10e6e:	50                   	push   %eax
   10e6f:	e8 9c 11 00 00       	call   12010 <bd_get_block_size@plt>
   10e74:	83 c4 10             	add    $0x10,%esp
   10e77:	89 c1                	mov    %eax,%ecx
   10e79:	85 c0                	test   %eax,%eax
   10e7b:	74 33                	je     10eb0 <block_read_bytes_direct+0xa0>
   10e7d:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10e80:	89 c8                	mov    %ecx,%eax
   10e82:	5b                   	pop    %ebx
   10e83:	5e                   	pop    %esi
   10e84:	5f                   	pop    %edi
   10e85:	5d                   	pop    %ebp
   10e86:	c3                   	ret    
   10e87:	90                   	nop
   10e88:	83 ec 0c             	sub    $0xc,%esp
   10e8b:	68 1c 3c 01 00       	push   $0x13c1c
   10e90:	e8 cb 10 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10e95:	83 c4 0c             	add    $0xc,%esp
   10e98:	68 34 03 00 00       	push   $0x334
   10e9d:	68 b4 17 01 00       	push   $0x117b4
   10ea2:	68 50 1a 01 00       	push   $0x11a50
   10ea7:	e8 64 10 00 00       	call   11f10 <assert_abort@plt>
   10eac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   10eb0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
   10eb3:	31 d2                	xor    %edx,%edx
   10eb5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10eb8:	52                   	push   %edx
   10eb9:	56                   	push   %esi
   10eba:	50                   	push   %eax
   10ebb:	8b 45 d0             	mov    -0x30(%ebp),%eax
   10ebe:	89 75 c8             	mov    %esi,-0x38(%ebp)
   10ec1:	50                   	push   %eax
   10ec2:	89 55 cc             	mov    %edx,-0x34(%ebp)
   10ec5:	e8 06 10 00 00       	call   11ed0 <__udivdi3@plt>
   10eca:	83 c4 10             	add    $0x10,%esp
   10ecd:	89 45 c0             	mov    %eax,-0x40(%ebp)
   10ed0:	8b 45 14             	mov    0x14(%ebp),%eax
   10ed3:	89 55 c4             	mov    %edx,-0x3c(%ebp)
   10ed6:	31 d2                	xor    %edx,%edx
   10ed8:	03 45 d0             	add    -0x30(%ebp),%eax
   10edb:	8b 4d cc             	mov    -0x34(%ebp),%ecx
   10ede:	13 55 d4             	adc    -0x2c(%ebp),%edx
   10ee1:	83 c0 ff             	add    $0xffffffff,%eax
   10ee4:	83 d2 ff             	adc    $0xffffffff,%edx
   10ee7:	8b 7d c8             	mov    -0x38(%ebp),%edi
   10eea:	51                   	push   %ecx
   10eeb:	57                   	push   %edi
   10eec:	52                   	push   %edx
   10eed:	50                   	push   %eax
   10eee:	e8 dd 0f 00 00       	call   11ed0 <__udivdi3@plt>
   10ef3:	8b 55 c0             	mov    -0x40(%ebp),%edx
   10ef6:	29 d0                	sub    %edx,%eax
   10ef8:	40                   	inc    %eax
   10ef9:	0f af f0             	imul   %eax,%esi
   10efc:	89 45 bc             	mov    %eax,-0x44(%ebp)
   10eff:	89 34 24             	mov    %esi,(%esp)
   10f02:	e8 59 0f 00 00       	call   11e60 <malloc@plt>
   10f07:	83 c4 10             	add    $0x10,%esp
   10f0a:	89 c6                	mov    %eax,%esi
   10f0c:	85 c0                	test   %eax,%eax
   10f0e:	0f 84 19 01 00 00    	je     1102d <block_read_bytes_direct+0x21d>
   10f14:	83 ec 0c             	sub    $0xc,%esp
   10f17:	68 1c 3c 01 00       	push   $0x13c1c
   10f1c:	e8 df 11 00 00       	call   12100 <fibril_mutex_lock@plt>
   10f21:	8b 3d 18 3c 01 00    	mov    0x13c18,%edi
   10f27:	83 c4 10             	add    $0x10,%esp
   10f2a:	81 ff 14 3c 01 00    	cmp    $0x13c14,%edi
   10f30:	75 15                	jne    10f47 <block_read_bytes_direct+0x137>
   10f32:	e9 91 00 00 00       	jmp    10fc8 <block_read_bytes_direct+0x1b8>
   10f37:	90                   	nop
   10f38:	8b 7f 04             	mov    0x4(%edi),%edi
   10f3b:	81 ff 14 3c 01 00    	cmp    $0x13c14,%edi
   10f41:	0f 84 81 00 00 00    	je     10fc8 <block_read_bytes_direct+0x1b8>
   10f47:	3b 5f 08             	cmp    0x8(%edi),%ebx
   10f4a:	75 ec                	jne    10f38 <block_read_bytes_direct+0x128>
   10f4c:	83 ec 0c             	sub    $0xc,%esp
   10f4f:	68 1c 3c 01 00       	push   $0x13c1c
   10f54:	e8 07 10 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10f59:	58                   	pop    %eax
   10f5a:	8b 47 28             	mov    0x28(%edi),%eax
   10f5d:	5a                   	pop    %edx
   10f5e:	8b 55 bc             	mov    -0x44(%ebp),%edx
   10f61:	0f af c2             	imul   %edx,%eax
   10f64:	50                   	push   %eax
   10f65:	56                   	push   %esi
   10f66:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
   10f69:	8b 5d c0             	mov    -0x40(%ebp),%ebx
   10f6c:	8b 47 10             	mov    0x10(%edi),%eax
   10f6f:	52                   	push   %edx
   10f70:	51                   	push   %ecx
   10f71:	53                   	push   %ebx
   10f72:	50                   	push   %eax
   10f73:	e8 68 0f 00 00       	call   11ee0 <bd_read_blocks@plt>
   10f78:	83 c4 20             	add    $0x20,%esp
   10f7b:	89 c1                	mov    %eax,%ecx
   10f7d:	85 c0                	test   %eax,%eax
   10f7f:	75 6b                	jne    10fec <block_read_bytes_direct+0x1dc>
   10f81:	89 45 c0             	mov    %eax,-0x40(%ebp)
   10f84:	8b 55 14             	mov    0x14(%ebp),%edx
   10f87:	8b 5d cc             	mov    -0x34(%ebp),%ebx
   10f8a:	8b 7d c8             	mov    -0x38(%ebp),%edi
   10f8d:	50                   	push   %eax
   10f8e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10f91:	52                   	push   %edx
   10f92:	51                   	push   %ecx
   10f93:	51                   	push   %ecx
   10f94:	53                   	push   %ebx
   10f95:	57                   	push   %edi
   10f96:	50                   	push   %eax
   10f97:	8b 45 d0             	mov    -0x30(%ebp),%eax
   10f9a:	50                   	push   %eax
   10f9b:	e8 10 0f 00 00       	call   11eb0 <__umoddi3@plt>
   10fa0:	83 c4 18             	add    $0x18,%esp
   10fa3:	01 f0                	add    %esi,%eax
   10fa5:	50                   	push   %eax
   10fa6:	8b 45 18             	mov    0x18(%ebp),%eax
   10fa9:	50                   	push   %eax
   10faa:	e8 a1 0e 00 00       	call   11e50 <memcpy@plt>
   10faf:	89 34 24             	mov    %esi,(%esp)
   10fb2:	e8 39 11 00 00       	call   120f0 <free@plt>
   10fb7:	8b 4d c0             	mov    -0x40(%ebp),%ecx
   10fba:	83 c4 10             	add    $0x10,%esp
   10fbd:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10fc0:	89 c8                	mov    %ecx,%eax
   10fc2:	5b                   	pop    %ebx
   10fc3:	5e                   	pop    %esi
   10fc4:	5f                   	pop    %edi
   10fc5:	5d                   	pop    %ebp
   10fc6:	c3                   	ret    
   10fc7:	90                   	nop
   10fc8:	83 ec 0c             	sub    $0xc,%esp
   10fcb:	68 1c 3c 01 00       	push   $0x13c1c
   10fd0:	e8 8b 0f 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   10fd5:	83 c4 0c             	add    $0xc,%esp
   10fd8:	68 fd 02 00 00       	push   $0x2fd
   10fdd:	68 b4 17 01 00       	push   $0x117b4
   10fe2:	68 50 1a 01 00       	push   $0x11a50
   10fe7:	e8 24 0f 00 00       	call   11f10 <assert_abort@plt>
   10fec:	50                   	push   %eax
   10fed:	50                   	push   %eax
   10fee:	8b 47 08             	mov    0x8(%edi),%eax
   10ff1:	8b 55 c0             	mov    -0x40(%ebp),%edx
   10ff4:	50                   	push   %eax
   10ff5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
   10ff8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
   10ffb:	89 4d d0             	mov    %ecx,-0x30(%ebp)
   10ffe:	50                   	push   %eax
   10fff:	52                   	push   %edx
   11000:	53                   	push   %ebx
   11001:	51                   	push   %ecx
   11002:	68 98 1a 01 00       	push   $0x11a98
   11007:	e8 94 0d 00 00       	call   11da0 <printf@plt>
   1100c:	83 c4 20             	add    $0x20,%esp
   1100f:	e8 8c 0e 00 00       	call   11ea0 <stacktrace_print@plt>
   11014:	83 ec 0c             	sub    $0xc,%esp
   11017:	56                   	push   %esi
   11018:	e8 d3 10 00 00       	call   120f0 <free@plt>
   1101d:	8b 4d d0             	mov    -0x30(%ebp),%ecx
   11020:	83 c4 10             	add    $0x10,%esp
   11023:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11026:	89 c8                	mov    %ecx,%eax
   11028:	5b                   	pop    %ebx
   11029:	5e                   	pop    %esi
   1102a:	5f                   	pop    %edi
   1102b:	5d                   	pop    %ebp
   1102c:	c3                   	ret    
   1102d:	b9 fe ff ff ff       	mov    $0xfffffffe,%ecx
   11032:	e9 46 fe ff ff       	jmp    10e7d <block_read_bytes_direct+0x6d>
   11037:	89 f6                	mov    %esi,%esi
   11039:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00011040 <block_read_toc>:
   11040:	55                   	push   %ebp
   11041:	89 e5                	mov    %esp,%ebp
   11043:	57                   	push   %edi
   11044:	56                   	push   %esi
   11045:	53                   	push   %ebx
   11046:	83 ec 28             	sub    $0x28,%esp
   11049:	8b 55 08             	mov    0x8(%ebp),%edx
   1104c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   1104f:	68 1c 3c 01 00       	push   $0x13c1c
   11054:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   11057:	8b 75 10             	mov    0x10(%ebp),%esi
   1105a:	8b 7d 14             	mov    0x14(%ebp),%edi
   1105d:	e8 9e 10 00 00       	call   12100 <fibril_mutex_lock@plt>
   11062:	a1 18 3c 01 00       	mov    0x13c18,%eax
   11067:	83 c4 10             	add    $0x10,%esp
   1106a:	3d 14 3c 01 00       	cmp    $0x13c14,%eax
   1106f:	74 1e                	je     1108f <block_read_toc+0x4f>
   11071:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11074:	3b 50 08             	cmp    0x8(%eax),%edx
   11077:	75 0c                	jne    11085 <block_read_toc+0x45>
   11079:	eb 3d                	jmp    110b8 <block_read_toc+0x78>
   1107b:	90                   	nop
   1107c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   11080:	3b 50 08             	cmp    0x8(%eax),%edx
   11083:	74 33                	je     110b8 <block_read_toc+0x78>
   11085:	8b 40 04             	mov    0x4(%eax),%eax
   11088:	3d 14 3c 01 00       	cmp    $0x13c14,%eax
   1108d:	75 f1                	jne    11080 <block_read_toc+0x40>
   1108f:	83 ec 0c             	sub    $0xc,%esp
   11092:	68 1c 3c 01 00       	push   $0x13c1c
   11097:	e8 c4 0e 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   1109c:	83 c4 0c             	add    $0xc,%esp
   1109f:	68 8a 03 00 00       	push   $0x38a
   110a4:	68 b4 17 01 00       	push   $0x117b4
   110a9:	68 50 1a 01 00       	push   $0x11a50
   110ae:	e8 5d 0e 00 00       	call   11f10 <assert_abort@plt>
   110b3:	90                   	nop
   110b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   110b8:	83 ec 0c             	sub    $0xc,%esp
   110bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   110be:	81 e3 ff 00 00 00    	and    $0xff,%ebx
   110c4:	68 1c 3c 01 00       	push   $0x13c1c
   110c9:	e8 92 0e 00 00       	call   11f60 <fibril_mutex_unlock@plt>
   110ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110d1:	89 7d 14             	mov    %edi,0x14(%ebp)
   110d4:	89 75 10             	mov    %esi,0x10(%ebp)
   110d7:	89 5d 0c             	mov    %ebx,0xc(%ebp)
   110da:	8b 40 10             	mov    0x10(%eax),%eax
   110dd:	83 c4 10             	add    $0x10,%esp
   110e0:	89 45 08             	mov    %eax,0x8(%ebp)
   110e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
   110e6:	5b                   	pop    %ebx
   110e7:	5e                   	pop    %esi
   110e8:	5f                   	pop    %edi
   110e9:	5d                   	pop    %ebp
   110ea:	e9 61 0e 00 00       	jmp    11f50 <bd_read_toc@plt>

000110ef <write_blocks.part.3>:
   110ef:	55                   	push   %ebp
   110f0:	89 e5                	mov    %esp,%ebp
   110f2:	83 ec 0c             	sub    $0xc,%esp
   110f5:	68 b5 03 00 00       	push   $0x3b5
   110fa:	68 b4 17 01 00       	push   $0x117b4
   110ff:	68 50 1a 01 00       	push   $0x11a50
   11104:	e8 07 0e 00 00       	call   11f10 <assert_abort@plt>
   11109:	66 90                	xchg   %ax,%ax
   1110b:	90                   	nop
   1110c:	2e 2e 2f             	cs cs das 
   1110f:	2e 2e 2f             	cs cs das 
   11112:	6c                   	insb   (%dx),%es:(%edi)
   11113:	69 62 2f 62 69 74 68 	imul   $0x68746962,0x2f(%edx),%esp
   1111a:	65 6e                	outsb  %gs:(%esi),(%dx)
   1111c:	67 65 2f             	addr16 gs das 
   1111f:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%esi),%ebp
   11126:	2f                   	das    
   11127:	62 69 74             	bound  %ebp,0x74(%ecx)
   1112a:	68 65 6e 67 65       	push   $0x65676e65
   1112f:	2f                   	das    
   11130:	74 72                	je     111a4 <write_blocks.part.3+0xb5>
   11132:	61                   	popa   
   11133:	6e                   	outsb  %ds:(%esi),(%dx)
   11134:	73 66                	jae    1119c <write_blocks.part.3+0xad>
   11136:	6f                   	outsl  %ds:(%esi),(%dx)
   11137:	72 6d                	jb     111a6 <write_blocks.part.3+0xb7>
   11139:	2e 68 00 45 72 72    	cs push $0x72724500
   1113f:	6f                   	outsl  %ds:(%esi),(%dx)
   11140:	72 20                	jb     11162 <write_blocks.part.3+0x73>
   11142:	63 72 65             	arpl   %si,0x65(%edx)
   11145:	61                   	popa   
   11146:	74 69                	je     111b1 <write_blocks.part.3+0xc2>
   11148:	6e                   	outsb  %ds:(%esi),(%dx)
   11149:	67 20 6e 6f          	and    %ch,0x6f(%bp)
   1114d:	64 65 20 66 72       	fs and %ah,%gs:0x72(%esi)
   11152:	6f                   	outsl  %ds:(%esi),(%dx)
   11153:	6d                   	insl   (%dx),%es:(%edi)
   11154:	20 73 6f             	and    %dh,0x6f(%ebx)
   11157:	75 72                	jne    111cb <write_blocks.part.3+0xdc>
   11159:	63 65 3a             	arpl   %sp,0x3a(%ebp)
   1115c:	20 25 73 0a 00 73    	and    %ah,0x73000a73
   11162:	65 6c                	gs insb (%dx),%es:(%edi)
   11164:	66 2d 3e 6f          	sub    $0x6f3e,%ax
   11168:	70 73                	jo     111dd <write_blocks.part.3+0xee>
   1116a:	00 73 65             	add    %dh,0x65(%ebx)
   1116d:	6c                   	insb   (%dx),%es:(%edi)
   1116e:	66 2d 3e 72          	sub    $0x723e,%ax
   11172:	65 66 73 20          	gs data16 jae 11196 <write_blocks.part.3+0xa7>
   11176:	3e 20 30             	and    %dh,%ds:(%eax)
   11179:	00 55 73             	add    %dl,0x73(%ebp)
   1117c:	61                   	popa   
   1117d:	67 65 3a 20          	cmp    %gs:(%bx,%si),%ah
   11181:	25 73 20 3c 73       	and    $0x733c2073,%eax
   11186:	63 72 69             	arpl   %si,0x69(%edx)
   11189:	70 74                	jo     111ff <write_blocks.part.3+0x110>
   1118b:	3e 20 3c 73          	and    %bh,%ds:(%ebx,%esi,2)
   1118f:	6f                   	outsl  %ds:(%esi),(%dx)
   11190:	75 72                	jne    11204 <write_blocks.part.3+0x115>
   11192:	63 65 3e             	arpl   %sp,0x3e(%ebp)
   11195:	0a 00                	or     (%eax),%al
   11197:	45                   	inc    %ebp
   11198:	72 72                	jb     1120c <write_blocks.part.3+0x11d>
   1119a:	6f                   	outsl  %ds:(%esi),(%dx)
   1119b:	72 20                	jb     111bd <write_blocks.part.3+0xce>
   1119d:	63 72 65             	arpl   %si,0x65(%edx)
   111a0:	61                   	popa   
   111a1:	74 69                	je     1120c <write_blocks.part.3+0x11d>
   111a3:	6e                   	outsb  %ds:(%esi),(%dx)
   111a4:	67 20 73 63          	and    %dh,0x63(%bp,%di)
   111a8:	6f                   	outsl  %ds:(%esi),(%dx)
   111a9:	70 65                	jo     11210 <write_blocks.part.3+0x121>
   111ab:	3a 20                	cmp    (%eax),%ah
   111ad:	25 73 0a 00 45       	and    $0x45000a73,%eax
   111b2:	72 72                	jb     11226 <write_blocks.part.3+0x137>
   111b4:	6f                   	outsl  %ds:(%esi),(%dx)
   111b5:	72 20                	jb     111d7 <write_blocks.part.3+0xe8>
   111b7:	70 61                	jo     1121a <write_blocks.part.3+0x12b>
   111b9:	72 73                	jb     1122e <write_blocks.part.3+0x13f>
   111bb:	69 6e 67 20 73 63 72 	imul   $0x72637320,0x67(%esi),%ebp
   111c2:	69 70 74 3a 20 25 73 	imul   $0x7325203a,0x74(%eax),%esi
   111c9:	0a 00                	or     (%eax),%al
   111cb:	45                   	inc    %ebp
   111cc:	72 72                	jb     11240 <write_blocks.part.3+0x151>
   111ce:	6f                   	outsl  %ds:(%esi),(%dx)
   111cf:	72 20                	jb     111f1 <write_blocks.part.3+0x102>
   111d1:	61                   	popa   
   111d2:	70 70                	jo     11244 <write_blocks.part.3+0x155>
   111d4:	6c                   	insb   (%dx),%es:(%edi)
   111d5:	79 69                	jns    11240 <write_blocks.part.3+0x151>
   111d7:	6e                   	outsb  %ds:(%esi),(%dx)
   111d8:	67 20 74 72          	and    %dh,0x72(%si)
   111dc:	61                   	popa   
   111dd:	6e                   	outsb  %ds:(%esi),(%dx)
   111de:	73 66                	jae    11246 <write_blocks.part.3+0x157>
   111e0:	6f                   	outsl  %ds:(%esi),(%dx)
   111e1:	72 6d                	jb     11250 <write_blocks.part.3+0x161>
   111e3:	3a 20                	cmp    (%eax),%ah
   111e5:	25 73 0a 00 45       	and    $0x45000a73,%eax
   111ea:	72 72                	jb     1125e <write_blocks.part.3+0x16f>
   111ec:	6f                   	outsl  %ds:(%esi),(%dx)
   111ed:	72 20                	jb     1120f <write_blocks.part.3+0x120>
   111ef:	70 72                	jo     11263 <write_blocks.part.3+0x174>
   111f1:	69 6e 74 69 6e 67 20 	imul   $0x20676e69,0x74(%esi),%ebp
   111f8:	6e                   	outsb  %ds:(%esi),(%dx)
   111f9:	6f                   	outsl  %ds:(%esi),(%dx)
   111fa:	64 65 3a 20          	fs cmp %gs:(%eax),%ah
   111fe:	25 73 0a 00 62       	and    $0x62000a73,%eax
   11203:	22 00                	and    (%eax),%al
   11205:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%esi),%ebp
   1120c:	2f                   	das    
   1120d:	62 69 74             	bound  %ebp,0x74(%ecx)
   11210:	68 65 6e 67 65       	push   $0x65676e65
   11215:	2f                   	das    
   11216:	62 6c 6f 62          	bound  %ebp,0x62(%edi,%ebp,2)
   1121a:	2e 68 00 73 65 6c    	cs push $0x6c657300
   11220:	66 2d 3e 62          	sub    $0x623e,%ax
   11224:	61                   	popa   
   11225:	73 65                	jae    1128c <write_blocks.part.3+0x19d>
   11227:	2e 62 6c 6f 62       	bound  %ebp,%cs:0x62(%edi,%ebp,2)
   1122c:	5f                   	pop    %edi
   1122d:	6f                   	outsl  %ds:(%esi),(%dx)
   1122e:	70 73                	jo     112a3 <write_blocks.part.3+0x1b4>
   11230:	00 5c 78 25          	add    %bl,0x25(%eax,%edi,2)
   11234:	30 32                	xor    %dh,(%edx)
   11236:	78 00                	js     11238 <write_blocks.part.3+0x149>
   11238:	54                   	push   %esp
   11239:	72 75                	jb     112b0 <write_blocks.part.3+0x1c1>
   1123b:	65 00 46 61          	add    %al,%gs:0x61(%esi)
   1123f:	6c                   	insb   (%dx),%es:(%edi)
   11240:	73 65                	jae    112a7 <write_blocks.part.3+0x1b8>
   11242:	00 74 72 75          	add    %dh,0x75(%edx,%esi,2)
   11246:	65 00 66 61          	add    %ah,%gs:0x61(%esi)
   1124a:	6c                   	insb   (%dx),%es:(%edi)
   1124b:	73 65                	jae    112b2 <write_blocks.part.3+0x1c3>
   1124d:	00 7b 00             	add    %bh,0x0(%ebx)
   11250:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%esi),%ebp
   11257:	2f                   	das    
   11258:	62 69 74             	bound  %ebp,0x74(%ecx)
   1125b:	68 65 6e 67 65       	push   $0x65676e65
   11260:	2f                   	das    
   11261:	74 72                	je     112d5 <write_blocks.part.3+0x1e6>
   11263:	65 65 2e 68 00 7d 00 	gs gs cs push $0x20007d00
   1126a:	20 
   1126b:	20 20                	and    %ah,(%eax)
   1126d:	20 00                	and    %al,(%eax)
   1126f:	25 6c 6c 64 00       	and    $0x646c6c,%eax
   11274:	5c                   	pop    %esp
   11275:	25 6c 63 00 5c       	and    $0x5c00636c,%eax
   1127a:	75 25                	jne    112a1 <write_blocks.part.3+0x1b2>
   1127c:	30 34 78             	xor    %dh,(%eax,%edi,2)
   1127f:	00 2c 00             	add    %ch,(%eax,%eax,1)
   11282:	66 90                	xchg   %ax,%ax
   11284:	6e                   	outsb  %ds:(%esi),(%dx)
   11285:	6f                   	outsl  %ds:(%esi),(%dx)
   11286:	64 65 2d 3e 74 79 70 	fs gs sub $0x7079743e,%eax
   1128d:	65 20 3d 3d 20 42 49 	and    %bh,%gs:0x4942203d
   11294:	54                   	push   %esp
   11295:	48                   	dec    %eax
   11296:	45                   	inc    %ebp
   11297:	4e                   	dec    %esi
   11298:	47                   	inc    %edi
   11299:	45                   	inc    %ebp
   1129a:	5f                   	pop    %edi
   1129b:	4e                   	dec    %esi
   1129c:	4f                   	dec    %edi
   1129d:	44                   	inc    %esp
   1129e:	45                   	inc    %ebp
   1129f:	5f                   	pop    %edi
   112a0:	42                   	inc    %edx
   112a1:	4c                   	dec    %esp
   112a2:	4f                   	dec    %edi
   112a3:	42                   	inc    %edx
   112a4:	00 00                	add    %al,(%eax)
   112a6:	00 00                	add    %al,(%eax)
   112a8:	73 65                	jae    1130f <write_blocks.part.3+0x220>
   112aa:	6c                   	insb   (%dx),%es:(%edi)
   112ab:	66 2d 3e 74          	sub    $0x743e,%ax
   112af:	79 70                	jns    11321 <write_blocks.part.3+0x232>
   112b1:	65 20 3d 3d 20 42 49 	and    %bh,%gs:0x4942203d
   112b8:	54                   	push   %esp
   112b9:	48                   	dec    %eax
   112ba:	45                   	inc    %ebp
   112bb:	4e                   	dec    %esi
   112bc:	47                   	inc    %edi
   112bd:	45                   	inc    %ebp
   112be:	5f                   	pop    %edi
   112bf:	4e                   	dec    %esi
   112c0:	4f                   	dec    %edi
   112c1:	44                   	inc    %esp
   112c2:	45                   	inc    %ebp
   112c3:	5f                   	pop    %edi
   112c4:	49                   	dec    %ecx
   112c5:	4e                   	dec    %esi
   112c6:	54                   	push   %esp
   112c7:	45                   	inc    %ebp
   112c8:	52                   	push   %edx
   112c9:	4e                   	dec    %esi
   112ca:	41                   	inc    %ecx
   112cb:	4c                   	dec    %esp
   112cc:	00 66 90             	add    %ah,-0x70(%esi)
   112cf:	90                   	nop
   112d0:	48                   	dec    %eax
   112d1:	17                   	pop    %ss
   112d2:	00 00                	add    %al,(%eax)
   112d4:	10 16                	adc    %dl,(%esi)
   112d6:	00 00                	add    %al,(%eax)
   112d8:	88 16                	mov    %dl,(%esi)
   112da:	00 00                	add    %al,(%eax)
   112dc:	c0 16 00             	rclb   $0x0,(%esi)
   112df:	00 e0                	add    %ah,%al
   112e1:	16                   	push   %ss
   112e2:	00 00                	add    %al,(%eax)
   112e4:	00 16                	add    %dl,(%esi)
   112e6:	00 00                	add    %al,(%eax)
   112e8:	f8                   	clc    
   112e9:	1a 00                	sbb    (%eax),%al
   112eb:	00 c8                	add    %cl,%al
   112ed:	19 00                	sbb    %eax,(%eax)
   112ef:	00 38                	add    %bh,(%eax)
   112f1:	1a 00                	sbb    (%eax),%al
   112f3:	00 70 1a             	add    %dh,0x1a(%eax)
   112f6:	00 00                	add    %al,(%eax)
   112f8:	90                   	nop
   112f9:	1a 00                	sbb    (%eax),%al
   112fb:	00 b0 19 00 00 b8    	add    %dh,-0x47ffffe7(%eax)
   11301:	1d 00 00 78 1c       	sbb    $0x1c780000,%eax
   11306:	00 00                	add    %al,(%eax)
   11308:	f0 1c 00             	lock sbb $0x0,%al
   1130b:	00 28                	add    %ch,(%eax)
   1130d:	1d 00 00 50 1d       	sbb    $0x1d500000,%eax
   11312:	00 00                	add    %al,(%eax)
   11314:	50                   	push   %eax
   11315:	1c 00                	sbb    $0x0,%al
   11317:	00 69 6e             	add    %ch,0x6e(%ecx)
   1131a:	63 6c 75 64          	arpl   %bp,0x64(%ebp,%esi,2)
   1131e:	65 2f                	gs das 
   11320:	62 69 74             	bound  %ebp,0x74(%ecx)
   11323:	68 65 6e 67 65       	push   $0x65676e65
   11328:	2f                   	das    
   11329:	74 72                	je     1139d <write_blocks.part.3+0x2ae>
   1132b:	61                   	popa   
   1132c:	6e                   	outsb  %ds:(%esi),(%dx)
   1132d:	73 66                	jae    11395 <write_blocks.part.3+0x2a6>
   1132f:	6f                   	outsl  %ds:(%esi),(%dx)
   11330:	72 6d                	jb     1139f <write_blocks.part.3+0x2b0>
   11332:	2e 68 00 73 65 6c    	cs push $0x6c657300
   11338:	66 00 25 73 3a 25 64 	data16 add %ah,0x64253a73
   1133f:	3a 00                	cmp    (%eax),%al
   11341:	25 7a 64 2d 25       	and    $0x252d647a,%eax
   11346:	7a 64                	jp     113ac <write_blocks.part.3+0x2bd>
   11348:	3a 20                	cmp    (%eax),%ah
   1134a:	00 25 73 3a 20 22    	add    %ah,0x22203a73
   11350:	25 2e 2a 73 22       	and    $0x22732a2e,%eax
   11355:	0a 00                	or     (%eax),%al
   11357:	64 6f                	outsl  %fs:(%esi),(%dx)
   11359:	00 65 6c             	add    %ah,0x6c(%ebp)
   1135c:	73 65                	jae    113c3 <write_blocks.part.3+0x2d4>
   1135e:	00 69 66             	add    %ch,0x66(%ecx)
   11361:	00 70 61             	add    %dh,0x61(%eax)
   11364:	72 74                	jb     113da <write_blocks.part.3+0x2eb>
   11366:	69 61 6c 00 72 65 70 	imul   $0x70657200,0x6c(%ecx),%esp
   1136d:	65 61                	gs popa 
   1136f:	74 00                	je     11371 <write_blocks.part.3+0x282>
   11371:	73 74                	jae    113e7 <write_blocks.part.3+0x2f8>
   11373:	72 75                	jb     113ea <write_blocks.part.3+0x2fb>
   11375:	63 74 00 73          	arpl   %si,0x73(%eax,%eax,1)
   11379:	77 69                	ja     113e4 <write_blocks.part.3+0x2f5>
   1137b:	74 63                	je     113e0 <write_blocks.part.3+0x2f1>
   1137d:	68 00 77 68 69       	push   $0x69687700
   11382:	6c                   	insb   (%dx),%es:(%edi)
   11383:	65 00 75 6e          	add    %dh,%gs:0x6e(%ebp)
   11387:	65 78 70             	gs js  113fa <write_blocks.part.3+0x30b>
   1138a:	65 63 74 65 64       	arpl   %si,%gs:0x64(%ebp,%eiz,2)
   1138f:	00 75 6e             	add    %dh,0x6e(%ebp)
   11392:	6b 6e 6f 77          	imul   $0x77,0x6f(%esi),%ebp
   11396:	6e                   	outsb  %ds:(%esi),(%dx)
   11397:	20 69 64             	and    %ch,0x64(%ecx)
   1139a:	65 6e                	outsb  %gs:(%esi),(%dx)
   1139c:	74 69                	je     11407 <write_blocks.part.3+0x318>
   1139e:	66 69 65 72 00 69    	imul   $0x6900,0x72(%ebp),%sp
   113a4:	6e                   	outsb  %ds:(%esi),(%dx)
   113a5:	63 6c 75 64          	arpl   %bp,0x64(%ebp,%esi,2)
   113a9:	65 2f                	gs das 
   113ab:	62 69 74             	bound  %ebp,0x74(%ecx)
   113ae:	68 65 6e 67 65       	push   $0x65676e65
   113b3:	2f                   	das    
   113b4:	65 78 70             	gs js  11427 <write_blocks.part.3+0x338>
   113b7:	72 65                	jb     1141e <write_blocks.part.3+0x32f>
   113b9:	73 73                	jae    1142e <write_blocks.part.3+0x33f>
   113bb:	69 6f 6e 2e 68 00 65 	imul   $0x6500682e,0x6e(%edi),%ebp
   113c2:	78 70                	js     11434 <write_blocks.part.3+0x345>
   113c4:	72 65                	jb     1142b <write_blocks.part.3+0x33c>
   113c6:	73 73                	jae    1143b <write_blocks.part.3+0x34c>
   113c8:	69 6f 6e 20 65 78 70 	imul   $0x70786520,0x6e(%edi),%ebp
   113cf:	65 63 74 65 64       	arpl   %si,%gs:0x64(%ebp,%eiz,2)
   113d4:	00 65 78             	add    %ah,0x78(%ebp)
   113d7:	70 65                	jo     1143e <write_blocks.part.3+0x34f>
   113d9:	63 74 65 64          	arpl   %si,0x64(%ebp,%eiz,2)
   113dd:	20 27                	and    %ah,(%edi)
   113df:	2c 27                	sub    $0x27,%al
   113e1:	2c 20                	sub    $0x20,%al
   113e3:	27                   	daa    
   113e4:	3a 27                	cmp    (%edi),%ah
   113e6:	2c 20                	sub    $0x20,%al
   113e8:	6f                   	outsl  %ds:(%esi),(%dx)
   113e9:	72 20                	jb     1140b <write_blocks.part.3+0x31c>
   113eb:	27                   	daa    
   113ec:	5d                   	pop    %ebp
   113ed:	27                   	daa    
   113ee:	00 74 72 61          	add    %dh,0x61(%edx,%esi,2)
   113f2:	6e                   	outsb  %ds:(%esi),(%dx)
   113f3:	73 66                	jae    1145b <write_blocks.part.3+0x36c>
   113f5:	6f                   	outsl  %ds:(%esi),(%dx)
   113f6:	72 6d                	jb     11465 <write_blocks.part.3+0x376>
   113f8:	20 6e 6f             	and    %ch,0x6f(%esi)
   113fb:	74 20                	je     1141d <write_blocks.part.3+0x32e>
   113fd:	66 6f                	outsw  %ds:(%esi),(%dx)
   113ff:	75 6e                	jne    1146f <write_blocks.part.3+0x380>
   11401:	64 00 65 6c          	add    %ah,%fs:0x6c(%ebp)
   11405:	73 65                	jae    1146c <write_blocks.part.3+0x37d>
   11407:	20 65 78             	and    %ah,0x78(%ebp)
   1140a:	70 65                	jo     11471 <write_blocks.part.3+0x382>
   1140c:	63 74 65 64          	arpl   %si,0x64(%ebp,%eiz,2)
   11410:	00 6d 61             	add    %ch,0x61(%ebp)
   11413:	69 6e 00 6e 6f 20 22 	imul   $0x22206f6e,0x0(%esi),%ebp
   1141a:	6d                   	insl   (%dx),%es:(%edi)
   1141b:	61                   	popa   
   1141c:	69 6e 22 20 74 72 61 	imul   $0x61727420,0x22(%esi),%ebp
   11423:	6e                   	outsb  %ds:(%esi),(%dx)
   11424:	73 66                	jae    1148c <write_blocks.part.3+0x39d>
   11426:	6f                   	outsl  %ds:(%esi),(%dx)
   11427:	72 6d                	jb     11496 <write_blocks.part.3+0x3a7>
   11429:	0a 00                	or     (%eax),%al
   1142b:	90                   	nop
   1142c:	75 6e                	jne    1149c <write_blocks.part.3+0x3ad>
   1142e:	65 78 70             	gs js  114a1 <do_while_transform_ops+0x1>
   11431:	65 63 74 65 64       	arpl   %si,%gs:0x64(%ebp,%eiz,2)
   11436:	20 28                	and    %ch,(%eax)
   11438:	69 64 65 6e 74 69 66 	imul   $0x69666974,0x6e(%ebp,%eiz,2),%esp
   1143f:	69 
   11440:	65 72 20             	gs jb  11463 <write_blocks.part.3+0x374>
   11443:	65 78 70             	gs js  114b6 <do_while_node_ops+0x2>
   11446:	65 63 74 65 64       	arpl   %si,%gs:0x64(%ebp,%eiz,2)
   1144b:	29 00                	sub    %eax,(%eax)
   1144d:	00 00                	add    %al,(%eax)
   1144f:	00 69 6e             	add    %ch,0x6e(%ecx)
   11452:	63 6f 72             	arpl   %bp,0x72(%edi)
   11455:	72 65                	jb     114bc <do_while_node_ops+0x8>
   11457:	63 74 20 6e          	arpl   %si,0x6e(%eax,%eiz,1)
   1145b:	75 6d                	jne    114ca <repeat_transform_ops+0xa>
   1145d:	62 65 72             	bound  %esp,0x72(%ebp)
   11460:	20 6f 66             	and    %ch,0x66(%edi)
   11463:	20 70 61             	and    %dh,0x61(%eax)
   11466:	72 61                	jb     114c9 <repeat_transform_ops+0x9>
   11468:	6d                   	insl   (%dx),%es:(%edi)
   11469:	65 74 65             	gs je  114d1 <repeat_node_seq_ops+0x1>
   1146c:	72 73                	jb     114e1 <struct_node_seq_ops+0x1>
   1146e:	20 62 65             	and    %ah,0x65(%edx)
   11471:	66 6f                	outsw  %ds:(%esi),(%dx)
   11473:	72 65                	jb     114da <repeat_node_ops+0x6>
   11475:	00 00                	add    %al,(%eax)
   11477:	00 75 6e             	add    %dh,0x6e(%ebp)
   1147a:	65 78 70             	gs js  114ed <struct_node_ops+0x9>
   1147d:	65 63 74 65 64       	arpl   %si,%gs:0x64(%ebp,%eiz,2)
   11482:	20 28                	and    %ch,(%eax)
   11484:	74 72                	je     114f8 <struct_node_ops+0x14>
   11486:	61                   	popa   
   11487:	6e                   	outsb  %ds:(%esi),(%dx)
   11488:	73 66                	jae    114f0 <struct_node_ops+0xc>
   1148a:	6f                   	outsl  %ds:(%esi),(%dx)
   1148b:	72 6d                	jb     114fa <struct_node_ops+0x16>
   1148d:	20 65 78             	and    %ah,0x78(%ebp)
   11490:	70 65                	jo     114f7 <struct_node_ops+0x13>
   11492:	63 74 65 64          	arpl   %si,0x64(%ebp,%eiz,2)
   11496:	29 00                	sub    %eax,(%eax)
   11498:	6e                   	outsb  %ds:(%esi),(%dx)
   11499:	6f                   	outsl  %ds:(%esi),(%dx)
   1149a:	64 65 00 66 90       	fs add %ah,%gs:-0x70(%esi)
   1149f:	90                   	nop

000114a0 <do_while_transform_ops>:
	...
   114a8:	d0 70 00 00 d0 65 00 00                             .p...e..

000114b0 <do_while_node_seq_ops>:
   114b0:	c0 60 00 00                                         .`..

000114b4 <do_while_node_ops>:
   114b4:	d0 81 00 00 00 00 00 00 80 66 00 00                 .........f..

000114c0 <repeat_transform_ops>:
   114c0:	40 62 00 00 00 00 00 00 10 6e 00 00 20 65 00 00     @b.......n.. e..

000114d0 <repeat_node_seq_ops>:
   114d0:	90 60 00 00                                         .`..

000114d4 <repeat_node_ops>:
   114d4:	70 72 00 00 70 83 00 00 90 64 00 00                 pr..p....d..

000114e0 <struct_node_seq_ops>:
   114e0:	60 60 00 00                                         ``..

000114e4 <struct_node_ops>:
   114e4:	50 78 00 00 c0 80 00 00 60 67 00 00 66 69 6c 65     Px......`g..file
   114f4:	3a 00 62 6c 6f 63 6b 3a 00 68 65 78 3a 00 73 72     :.block:.hex:.sr
   11504:	63 2f 74 72 61 6e 73 66 6f 72 6d 2e 63 00 73 63     c/transform.c.sc
   11514:	6f 70 65 00 6f 70 73 2d 3e 64 65 73 74 72 6f 79     ope.ops->destroy
   11524:	00 21 73 65 6c 66 2d 3e 74 72 61 6e 73 66 6f 72     .!self->transfor
   11534:	6d 00 61 73 63 69 69 00 62 69 74 00 62 69 74 73     m.ascii.bit.bits
   11544:	5f 62 65 00 62 69 74 73 5f 6c 65 00 6b 6e 6f 77     _be.bits_le.know
   11554:	6e 5f 6c 65 6e 67 74 68 00 6e 6f 6e 7a 65 72 6f     n_length.nonzero
   11564:	5f 62 6f 6f 6c 65 61 6e 00 75 69 6e 74 38 00 75     _boolean.uint8.u
   11574:	69 6e 74 31 36 62 65 00 75 69 6e 74 31 36 6c 65     int16be.uint16le
   11584:	00 75 69 6e 74 33 32 62 65 00 75 69 6e 74 33 32     .uint32be.uint32
   11594:	6c 65 00 75 69 6e 74 36 34 62 65 00 75 69 6e 74     le.uint64be.uint
   115a4:	36 34 6c 65 00 75 69 6e 74 5f 62 65 00 75 69 6e     64le.uint_be.uin
   115b4:	74 5f 6c 65 00 7a 65 72 6f 5f 74 65 72 6d 69 6e     t_le.zero_termin
   115c4:	61 74 65 64 00 66 90 90 69 20 3e 3d 20 30 20 26     ated.f..i >= 0 &
   115d4:	26 20 69 20 3c 20 73 63 6f 70 65 2d 3e 6e 75 6d     & i < scope->num
   115e4:	5f 70 61 72 61 6d 73 00 6f 70 73 2d 3e 61 70 70     _params.ops->app
   115f4:	6c 79 20 7c 7c 20 6f 70 73 2d 3e 70 72 65 66 69     ly || ops->prefi
   11604:	78 5f 61 70 70 6c 79 00 62 69 74 68 65 6e 67 65     x_apply.bithenge
   11614:	5f 74 72 61 6e 73 66 6f 72 6d 5f 6e 75 6d 5f 70     _transform_num_p
   11624:	61 72 61 6d 73 28 74 72 61 6e 73 66 6f 72 6d 29     arams(transform)
   11634:	20 3d 3d 20 30 00 66 90                              == 0.f.

0001163c <zero_terminated_ops>:
   1163c:	d0 99 00 00 20 90 00 00 00 00 00 00 60 8d 00 00     .... .......`...

0001164c <uint_xe_ops>:
	...
   11654:	e0 9b 00 00 60 8d 00 00                             ....`...

0001165c <uint64be_ops>:
   1165c:	90 95 00 00 40 8d 00 00 00 00 00 00 60 8d 00 00     ....@.......`...

0001166c <uint64le_ops>:
   1166c:	70 94 00 00 40 8d 00 00 00 00 00 00 60 8d 00 00     p...@.......`...

0001167c <uint32be_ops>:
   1167c:	20 96 00 00 20 8d 00 00 00 00 00 00 60 8d 00 00      ... .......`...

0001168c <uint32le_ops>:
   1168c:	e0 93 00 00 20 8d 00 00 00 00 00 00 60 8d 00 00     .... .......`...

0001169c <uint16be_ops>:
   1169c:	00 95 00 00 00 8d 00 00 00 00 00 00 60 8d 00 00     ............`...

000116ac <uint16le_ops>:
   116ac:	50 93 00 00 00 8d 00 00 00 00 00 00 60 8d 00 00     P...........`...

000116bc <uint8_ops>:
   116bc:	c0 92 00 00 e0 8c 00 00 00 00 00 00 60 8d 00 00     ............`...

000116cc <nonzero_boolean_ops>:
   116cc:	b0 8d 00 00 00 00 00 00 00 00 00 00 60 8d 00 00     ............`...

000116dc <known_length_ops>:
   116dc:	d0 9a 00 00 30 99 00 00 00 00 00 00 60 8d 00 00     ....0.......`...

000116ec <invalid_ops>:
   116ec:	d0 8c 00 00 00 00 00 00 00 00 00 00 60 8d 00 00     ............`...

000116fc <bits_xe_ops>:
   116fc:	00 8f 00 00 00 00 00 00 00 00 00 00 60 8d 00 00     ............`...

0001170c <bits_xe_blob_ops>:
   1170c:	b0 8f 00 00 00 00 00 00 b0 96 00 00 80 8d 00 00     ................

0001171c <bit_ops>:
	...
   11724:	40 8e 00 00 60 8d 00 00                             @...`...

0001172c <ascii_ops>:
   1172c:	80 91 00 00 00 00 00 00 00 00 00 00 60 8d 00 00     ............`...

0001173c <barrier_transform_ops>:
   1173c:	30 a9 00 00 e0 a2 00 00 b0 a6 00 00 e0 8d 00 00     0...............
   1174c:	73 72 63 2f 74 72 65 65 2e 63 00 6e 6f 64 65 2d     src/tree.c.node-
   1175c:	3e 72 65 66 73 20 3e 20 30 00 6f 75 74 00 66 90     >refs > 0.out.f.
   1176c:	e8 b5 00 00 ea b3 00 00 30 b5 00 00 10 b5 00 00     ........0.......
   1177c:	f0 b4 00 00 d8 b4 00 00 b8 bb 00 00 34 bb 00 00     ............4...
   1178c:	a8 bb 00 00 88 bb 00 00 68 bb 00 00 50 bb 00 00     ........h...P...

0001179c <empty_internal_node_ops>:
   1179c:	70 b1 00 00 80 b1 00 00 90 b1 00 00 73 72 63 2f     p...........src/
   117ac:	68 65 6c 65 6e 6f 73 2f 62 6c 6f 63 6b 2e 63 00     helenos/block.c.

000117bc <block_ops>:
   117bc:	e0 bb 00 00 30 bc 00 00 00 00 00 00 00 bc 00 00     ....0...........
   117cc:	73 72 63 2f 62 6c 6f 62 2e 63 00 62 6c 6f 62 00     src/blob.c.blob.
   117dc:	6f 70 73 2d 3e 72 65 61 64 20 7c 7c 20 6f 70 73     ops->read || ops
   117ec:	2d 3e 72 65 61 64 5f 62 69 74 73 00 6f 70 73 2d     ->read_bits.ops-
   117fc:	3e 73 69 7a 65 00 6f 70 73 2d 3e 72 65 61 64 00     >size.ops->read.
   1180c:	62 75 66 66 65 72 20 7c 7c 20 21 6c 65 6e 00 73     buffer || !len.s
   1181c:	6f 75 72 63 65 00 61 00 61 2d 3e 62 61 73 65 2e     ource.a.a->base.
   1182c:	62 6c 6f 62 5f 6f 70 73 00 62 2d 3e 62 61 73 65     blob_ops.b->base
   1183c:	2e 62 6c 6f 62 5f 6f 70 73 00 66 90                 .blob_ops.f.

00011848 <subblob_ops>:
   11848:	a0 c2 00 00 d0 c1 00 00 20 be 00 00 a0 c1 00 00     ........ .......

00011858 <memory_ops>:
   11858:	00 be 00 00 80 bf 00 00 00 00 00 00 50 bf 00 00     ............P...

00011868 <sequential_ops>:
   11868:	20 c3 00 00 00 c0 00 00 00 00 00 00 20 bf 00 00      ........... ...

00011878 <partial_transform_ops>:
   11878:	d0 cc 00 00 00 00 00 00 00 00 00 00 b0 cf 00 00     ................

00011888 <if_transform_ops>:
   11888:	60 ce 00 00 b0 cd 00 00 00 00 00 00 10 d0 00 00     `...............

00011898 <compose_transform_ops>:
   11898:	10 cd 00 00 b0 cc 00 00 00 00 00 00 10 cf 00 00     ................
   118a8:	73 72 63 2f 65 78 70 72 65 73 73 69 6f 6e 2e 63     src/expression.c
   118b8:	00 4e 6f 20 73 63 6f 70 65 20 6d 65 6d 62 65 72     .No scope member
   118c8:	20 25 74 00 61 5f 73 69 7a 65 20 25 20 38 20 3d      %t.a_size % 8 =
   118d8:	3d 20 30 00 61 5f 73 69 7a 65 20 2b 20 62 5f 73     = 0.a_size + b_s
   118e8:	69 7a 65 20 3c 3d 20 2a 73 69 7a 65 00 6f 70 73     ize <= *size.ops
   118f8:	2d 3e 65 76 61 6c 75 61 74 65 00 62 5f 65 78 70     ->evaluate.b_exp
   11908:	72 00 66 90 43 6f 6e 63 61 74 65 6e 61 74 69 6f     r.f.Concatenatio
   11918:	6e 20 61 72 67 75 6d 65 6e 74 73 20 6d 75 73 74     n arguments must
   11928:	20 62 65 20 62 6c 6f 62 73 00 66 90 b0 f0 00 00      be blobs.f.....
   11938:	70 f0 00 00 70 f0 00 00 70 f0 00 00 70 f0 00 00     p...p...p...p...
   11948:	70 f0 00 00 70 f0 00 00 70 f0 00 00 70 f0 00 00     p...p...p...p...
   11958:	70 f0 00 00 b0 f0 00 00 b0 f0 00 00 30 f0 00 00     p...........0...
   11968:	30 f0 00 00 b0 f0 00 00 04 f0 00 00 f5 f1 00 00     0...............
   11978:	e6 f1 00 00 c1 f1 00 00 d8 f2 00 00 85 f2 00 00     ................
   11988:	3f f2 00 00 13 f2 00 00 2d f3 00 00 fd f2 00 00     ?.......-.......
   11998:	5d f3 00 00 9d f1 00 00 76 f1 00 00 57 f1 00 00     ].......v...W...
   119a8:	0a f2 00 00 31 f1 00 00 e0 f0 00 00                 ....1.......

000119b4 <concat_blob_ops>:
   119b4:	e0 de 00 00 b0 e3 00 00 50 e1 00 00 40 de 00 00     ........P...@...

000119c4 <inputless_transform_ops>:
   119c4:	00 00 00 00 50 d4 00 00 20 d9 00 00 10 db 00 00     ....P... .......

000119d4 <expression_transform_ops>:
   119d4:	80 da 00 00 00 00 00 00 00 00 00 00 10 db 00 00     ................

000119e4 <param_wrapper_ops>:
   119e4:	a0 d8 00 00 20 d8 00 00 90 d7 00 00 90 d9 00 00     .... ...........

000119f4 <subblob_expression_ops>:
   119f4:	b0 dc 00 00 00 dc 00 00                             ........

000119fc <scope_member_expression_ops>:
   119fc:	f0 d5 00 00 d0 d4 00 00                             ........

00011a04 <const_expression_ops>:
   11a04:	b0 d5 00 00 a0 d4 00 00                             ........

00011a0c <param_expression_ops>:
   11a0c:	90 d5 00 00 90 d4 00 00                             ........

00011a14 <current_node_ops>:
   11a14:	60 d5 00 00 70 d4 00 00                             `...p...

00011a1c <in_node_ops>:
   11a1c:	00 d5 00 00 70 d4 00 00                             ....p...

00011a24 <binary_expression_ops>:
   11a24:	60 ef 00 00 70 db 00 00 73 72 63 2f 66 69 6c 65     `...p...src/file
   11a34:	2e 63 00 66 69 6c 65 6e 61 6d 65 00                 .c.filename.

00011a40 <file_ops>:
   11a40:	50 f4 00 00 a0 f4 00 00 00 00 00 00 70 f4 00 00     P...........p...
   11a50:	64 65 76 63 6f 6e 00 64 65 76 63 6f 6e 2d 3e 63     devcon.devcon->c
   11a60:	61 63 68 65 00 62 6c 6f 63 6b 2d 3e 72 65 66 63     ache.block->refc
   11a70:	6e 74 20 3e 3d 20 31 00 64 65 76 63 6f 6e 2d 3e     nt >= 1.devcon->
   11a80:	63 61 63 68 65 20 21 3d 20 4e 55 4c 4c 00 62 2d     cache != NULL.b-
   11a90:	3e 74 6f 78 69 63 00 90 45 72 72 6f 72 20 25 64     >toxic..Error %d
   11aa0:	20 72 65 61 64 69 6e 67 20 25 7a 75 20 62 6c 6f      reading %zu blo
   11ab0:	63 6b 73 20 73 74 61 72 74 69 6e 67 20 61 74 20     cks starting at 
   11ac0:	62 6c 6f 63 6b 20 25 6c 6c 75 20 66 72 6f 6d 20     block %llu from 
   11ad0:	64 65 76 69 63 65 20 68 61 6e 64 6c 65 20 25 75     device handle %u
   11ae0:	0a 00 00 00 45 72 72 6f 72 20 25 64 20 77 72 69     ....Error %d wri
   11af0:	74 69 6e 67 20 25 7a 75 20 62 6c 6f 63 6b 73 20     ting %zu blocks 
   11b00:	73 74 61 72 74 69 6e 67 20 61 74 20 62 6c 6f 63     starting at bloc
   11b10:	6b 20 25 6c 6c 75 20 74 6f 20 64 65 76 69 63 65     k %llu to device
   11b20:	20 68 61 6e 64 6c 65 20 25 75 0a 00 54 6f 6f 20      handle %u..Too 
   11b30:	6d 61 6e 79 20 65 72 72 6f 72 73 20 77 72 69 74     many errors writ
   11b40:	69 6e 67 20 62 6c 6f 63 6b 20 25 6c 6c 75 66 72     ing block %llufr
   11b50:	6f 6d 20 64 65 76 69 63 65 20 68 61 6e 64 6c 65     om device handle
   11b60:	20 25 75 0a 53 45 56 45 52 45 20 44 41 54 41 20      %u.SEVERE DATA 
   11b70:	4c 4f 53 53 20 50 4f 53 53 49 42 4c 45 0a 00 00     LOSS POSSIBLE...

Disassembly of section .plt:

00011d60 <__main@plt-0x10>:
   11d60:	ff 35 30 3c 01 00    	pushl  0x13c30
   11d66:	ff 25 34 3c 01 00    	jmp    *0x13c34
   11d6c:	00 00                	add    %al,(%eax)
	...

00011d70 <__main@plt>:
   11d70:	ff 25 38 3c 01 00    	jmp    *0x13c38
   11d76:	68 00 00 00 00       	push   $0x0
   11d7b:	e9 e0 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011d80 <__divdi3@plt>:
   11d80:	ff 25 3c 3c 01 00    	jmp    *0x13c3c
   11d86:	68 08 00 00 00       	push   $0x8
   11d8b:	e9 d0 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011d90 <loc_service_connect@plt>:
   11d90:	ff 25 40 3c 01 00    	jmp    *0x13c40
   11d96:	68 10 00 00 00       	push   $0x10
   11d9b:	e9 c0 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011da0 <printf@plt>:
   11da0:	ff 25 44 3c 01 00    	jmp    *0x13c44
   11da6:	68 18 00 00 00       	push   $0x18
   11dab:	e9 b0 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011db0 <async_hangup@plt>:
   11db0:	ff 25 48 3c 01 00    	jmp    *0x13c48
   11db6:	68 20 00 00 00       	push   $0x20
   11dbb:	e9 a0 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011dc0 <memmove@plt>:
   11dc0:	ff 25 4c 3c 01 00    	jmp    *0x13c4c
   11dc6:	68 28 00 00 00       	push   $0x28
   11dcb:	e9 90 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011dd0 <hash_table_create@plt>:
   11dd0:	ff 25 50 3c 01 00    	jmp    *0x13c50
   11dd6:	68 30 00 00 00       	push   $0x30
   11ddb:	e9 80 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011de0 <hash_table_insert@plt>:
   11de0:	ff 25 54 3c 01 00    	jmp    *0x13c54
   11de6:	68 38 00 00 00       	push   $0x38
   11deb:	e9 70 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011df0 <__errno@plt>:
   11df0:	ff 25 58 3c 01 00    	jmp    *0x13c58
   11df6:	68 40 00 00 00       	push   $0x40
   11dfb:	e9 60 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011e00 <str_decode@plt>:
   11e00:	ff 25 5c 3c 01 00    	jmp    *0x13c5c
   11e06:	68 48 00 00 00       	push   $0x48
   11e0b:	e9 50 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011e10 <bd_write_blocks@plt>:
   11e10:	ff 25 60 3c 01 00    	jmp    *0x13c60
   11e16:	68 50 00 00 00       	push   $0x50
   11e1b:	e9 40 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011e20 <bd_get_num_blocks@plt>:
   11e20:	ff 25 64 3c 01 00    	jmp    *0x13c64
   11e26:	68 58 00 00 00       	push   $0x58
   11e2b:	e9 30 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011e30 <str_ndup@plt>:
   11e30:	ff 25 68 3c 01 00    	jmp    *0x13c68
   11e36:	68 60 00 00 00       	push   $0x60
   11e3b:	e9 20 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011e40 <bd_close@plt>:
   11e40:	ff 25 6c 3c 01 00    	jmp    *0x13c6c
   11e46:	68 68 00 00 00       	push   $0x68
   11e4b:	e9 10 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011e50 <memcpy@plt>:
   11e50:	ff 25 70 3c 01 00    	jmp    *0x13c70
   11e56:	68 70 00 00 00       	push   $0x70
   11e5b:	e9 00 ff ff ff       	jmp    11d60 <file_ops+0x320>

00011e60 <malloc@plt>:
   11e60:	ff 25 74 3c 01 00    	jmp    *0x13c74
   11e66:	68 78 00 00 00       	push   $0x78
   11e6b:	e9 f0 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011e70 <bd_open@plt>:
   11e70:	ff 25 78 3c 01 00    	jmp    *0x13c78
   11e76:	68 80 00 00 00       	push   $0x80
   11e7b:	e9 e0 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011e80 <vsnprintf@plt>:
   11e80:	ff 25 7c 3c 01 00    	jmp    *0x13c7c
   11e86:	68 88 00 00 00       	push   $0x88
   11e8b:	e9 d0 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011e90 <loc_service_get_id@plt>:
   11e90:	ff 25 80 3c 01 00    	jmp    *0x13c80
   11e96:	68 90 00 00 00       	push   $0x90
   11e9b:	e9 c0 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011ea0 <stacktrace_print@plt>:
   11ea0:	ff 25 84 3c 01 00    	jmp    *0x13c84
   11ea6:	68 98 00 00 00       	push   $0x98
   11eab:	e9 b0 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011eb0 <__umoddi3@plt>:
   11eb0:	ff 25 88 3c 01 00    	jmp    *0x13c88
   11eb6:	68 a0 00 00 00       	push   $0xa0
   11ebb:	e9 a0 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011ec0 <lseek@plt>:
   11ec0:	ff 25 8c 3c 01 00    	jmp    *0x13c8c
   11ec6:	68 a8 00 00 00       	push   $0xa8
   11ecb:	e9 90 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011ed0 <__udivdi3@plt>:
   11ed0:	ff 25 90 3c 01 00    	jmp    *0x13c90
   11ed6:	68 b0 00 00 00       	push   $0xb0
   11edb:	e9 80 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011ee0 <bd_read_blocks@plt>:
   11ee0:	ff 25 94 3c 01 00    	jmp    *0x13c94
   11ee6:	68 b8 00 00 00       	push   $0xb8
   11eeb:	e9 70 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011ef0 <str_chr@plt>:
   11ef0:	ff 25 98 3c 01 00    	jmp    *0x13c98
   11ef6:	68 c0 00 00 00       	push   $0xc0
   11efb:	e9 60 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011f00 <fibril_mutex_trylock@plt>:
   11f00:	ff 25 9c 3c 01 00    	jmp    *0x13c9c
   11f06:	68 c8 00 00 00       	push   $0xc8
   11f0b:	e9 50 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011f10 <assert_abort@plt>:
   11f10:	ff 25 a0 3c 01 00    	jmp    *0x13ca0
   11f16:	68 d0 00 00 00       	push   $0xd0
   11f1b:	e9 40 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011f20 <fstat@plt>:
   11f20:	ff 25 a4 3c 01 00    	jmp    *0x13ca4
   11f26:	68 d8 00 00 00       	push   $0xd8
   11f2b:	e9 30 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011f30 <fprintf@plt>:
   11f30:	ff 25 a8 3c 01 00    	jmp    *0x13ca8
   11f36:	68 e0 00 00 00       	push   $0xe0
   11f3b:	e9 20 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011f40 <vprintf@plt>:
   11f40:	ff 25 ac 3c 01 00    	jmp    *0x13cac
   11f46:	68 e8 00 00 00       	push   $0xe8
   11f4b:	e9 10 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011f50 <bd_read_toc@plt>:
   11f50:	ff 25 b0 3c 01 00    	jmp    *0x13cb0
   11f56:	68 f0 00 00 00       	push   $0xf0
   11f5b:	e9 00 fe ff ff       	jmp    11d60 <file_ops+0x320>

00011f60 <fibril_mutex_unlock@plt>:
   11f60:	ff 25 b4 3c 01 00    	jmp    *0x13cb4
   11f66:	68 f8 00 00 00       	push   $0xf8
   11f6b:	e9 f0 fd ff ff       	jmp    11d60 <file_ops+0x320>

00011f70 <fibril_mutex_initialize@plt>:
   11f70:	ff 25 b8 3c 01 00    	jmp    *0x13cb8
   11f76:	68 00 01 00 00       	push   $0x100
   11f7b:	e9 e0 fd ff ff       	jmp    11d60 <file_ops+0x320>

00011f80 <ferror@plt>:
   11f80:	ff 25 bc 3c 01 00    	jmp    *0x13cbc
   11f86:	68 08 01 00 00       	push   $0x108
   11f8b:	e9 d0 fd ff ff       	jmp    11d60 <file_ops+0x320>

00011f90 <read@plt>:
   11f90:	ff 25 c0 3c 01 00    	jmp    *0x13cc0
   11f96:	68 10 01 00 00       	push   $0x110
   11f9b:	e9 c0 fd ff ff       	jmp    11d60 <file_ops+0x320>

00011fa0 <realloc@plt>:
   11fa0:	ff 25 c4 3c 01 00    	jmp    *0x13cc4
   11fa6:	68 18 01 00 00       	push   $0x118
   11fab:	e9 b0 fd ff ff       	jmp    11d60 <file_ops+0x320>

00011fb0 <memcmp@plt>:
   11fb0:	ff 25 c8 3c 01 00    	jmp    *0x13cc8
   11fb6:	68 20 01 00 00       	push   $0x120
   11fbb:	e9 a0 fd ff ff       	jmp    11d60 <file_ops+0x320>

00011fc0 <str_cmp@plt>:
   11fc0:	ff 25 cc 3c 01 00    	jmp    *0x13ccc
   11fc6:	68 28 01 00 00       	push   $0x128
   11fcb:	e9 90 fd ff ff       	jmp    11d60 <file_ops+0x320>

00011fd0 <fread@plt>:
   11fd0:	ff 25 d0 3c 01 00    	jmp    *0x13cd0
   11fd6:	68 30 01 00 00       	push   $0x130
   11fdb:	e9 80 fd ff ff       	jmp    11d60 <file_ops+0x320>

00011fe0 <hash_table_remove_item@plt>:
   11fe0:	ff 25 d4 3c 01 00    	jmp    *0x13cd4
   11fe6:	68 38 01 00 00       	push   $0x138
   11feb:	e9 70 fd ff ff       	jmp    11d60 <file_ops+0x320>

00011ff0 <fopen@plt>:
   11ff0:	ff 25 d8 3c 01 00    	jmp    *0x13cd8
   11ff6:	68 40 01 00 00       	push   $0x140
   11ffb:	e9 60 fd ff ff       	jmp    11d60 <file_ops+0x320>

00012000 <fclose@plt>:
   12000:	ff 25 dc 3c 01 00    	jmp    *0x13cdc
   12006:	68 48 01 00 00       	push   $0x148
   1200b:	e9 50 fd ff ff       	jmp    11d60 <file_ops+0x320>

00012010 <bd_get_block_size@plt>:
   12010:	ff 25 e0 3c 01 00    	jmp    *0x13ce0
   12016:	68 50 01 00 00       	push   $0x150
   1201b:	e9 40 fd ff ff       	jmp    11d60 <file_ops+0x320>

00012020 <str_uint64_t@plt>:
   12020:	ff 25 e4 3c 01 00    	jmp    *0x13ce4
   12026:	68 58 01 00 00       	push   $0x158
   1202b:	e9 30 fd ff ff       	jmp    11d60 <file_ops+0x320>

00012030 <str_length@plt>:
   12030:	ff 25 e8 3c 01 00    	jmp    *0x13ce8
   12036:	68 60 01 00 00       	push   $0x160
   1203b:	e9 20 fd ff ff       	jmp    11d60 <file_ops+0x320>

00012040 <str_lcmp@plt>:
   12040:	ff 25 ec 3c 01 00    	jmp    *0x13cec
   12046:	68 68 01 00 00       	push   $0x168
   1204b:	e9 10 fd ff ff       	jmp    11d60 <file_ops+0x320>

00012050 <bd_sync_cache@plt>:
   12050:	ff 25 f0 3c 01 00    	jmp    *0x13cf0
   12056:	68 70 01 00 00       	push   $0x170
   1205b:	e9 00 fd ff ff       	jmp    11d60 <file_ops+0x320>

00012060 <str_error@plt>:
   12060:	ff 25 f4 3c 01 00    	jmp    *0x13cf4
   12066:	68 78 01 00 00       	push   $0x178
   1206b:	e9 f0 fc ff ff       	jmp    11d60 <file_ops+0x320>

00012070 <hash_table_find@plt>:
   12070:	ff 25 f8 3c 01 00    	jmp    *0x13cf8
   12076:	68 80 01 00 00       	push   $0x180
   1207b:	e9 e0 fc ff ff       	jmp    11d60 <file_ops+0x320>

00012080 <fibril_rwlock_initialize@plt>:
   12080:	ff 25 fc 3c 01 00    	jmp    *0x13cfc
   12086:	68 88 01 00 00       	push   $0x188
   1208b:	e9 d0 fc ff ff       	jmp    11d60 <file_ops+0x320>

00012090 <fileno@plt>:
   12090:	ff 25 00 3d 01 00    	jmp    *0x13d00
   12096:	68 90 01 00 00       	push   $0x190
   1209b:	e9 c0 fc ff ff       	jmp    11d60 <file_ops+0x320>

000120a0 <__moddi3@plt>:
   120a0:	ff 25 04 3d 01 00    	jmp    *0x13d04
   120a6:	68 98 01 00 00       	push   $0x198
   120ab:	e9 b0 fc ff ff       	jmp    11d60 <file_ops+0x320>

000120b0 <__syscall_fast@plt>:
   120b0:	ff 25 08 3d 01 00    	jmp    *0x13d08
   120b6:	68 a0 01 00 00       	push   $0x1a0
   120bb:	e9 a0 fc ff ff       	jmp    11d60 <file_ops+0x320>

000120c0 <open@plt>:
   120c0:	ff 25 0c 3d 01 00    	jmp    *0x13d0c
   120c6:	68 a8 01 00 00       	push   $0x1a8
   120cb:	e9 90 fc ff ff       	jmp    11d60 <file_ops+0x320>

000120d0 <hash_table_destroy@plt>:
   120d0:	ff 25 10 3d 01 00    	jmp    *0x13d10
   120d6:	68 b0 01 00 00       	push   $0x1b0
   120db:	e9 80 fc ff ff       	jmp    11d60 <file_ops+0x320>

000120e0 <close@plt>:
   120e0:	ff 25 14 3d 01 00    	jmp    *0x13d14
   120e6:	68 b8 01 00 00       	push   $0x1b8
   120eb:	e9 70 fc ff ff       	jmp    11d60 <file_ops+0x320>

000120f0 <free@plt>:
   120f0:	ff 25 18 3d 01 00    	jmp    *0x13d18
   120f6:	68 c0 01 00 00       	push   $0x1c0
   120fb:	e9 60 fc ff ff       	jmp    11d60 <file_ops+0x320>

00012100 <fibril_mutex_lock@plt>:
   12100:	ff 25 1c 3d 01 00    	jmp    *0x13d1c
   12106:	68 c8 01 00 00       	push   $0x1c8
   1210b:	e9 50 fc ff ff       	jmp    11d60 <file_ops+0x320>
